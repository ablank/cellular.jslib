<<<<<<< HEAD
!function(a,b){var c={REVISION:"79"};"function"==typeof define&&define.amd?define("three",c):"undefined"!=typeof a&&"undefined"!=typeof module&&(module.exports=c),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Math.sign&&(Math.sign=function(a){return a<0?-1:a>0?1:+a}),void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1]}}),void 0===Object.assign&&!function(){Object.assign=function(a){"use strict";if(void 0===a||null===a)throw new TypeError("Cannot convert undefined or null to object");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e in d)Object.prototype.hasOwnProperty.call(d,e)&&(b[e]=d[e])}return b}}(),Object.assign(c,{MOUSE:{LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone:0,CullFaceBack:1,CullFaceFront:2,CullFaceFrontBack:3,FrontFaceDirectionCW:0,FrontFaceDirectionCCW:1,BasicShadowMap:0,PCFShadowMap:1,PCFSoftShadowMap:2,FrontSide:0,BackSide:1,DoubleSide:2,FlatShading:1,SmoothShading:2,NoColors:0,FaceColors:1,VertexColors:2,NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5,AddEquation:100,SubtractEquation:101,ReverseSubtractEquation:102,MinEquation:103,MaxEquation:104,ZeroFactor:200,OneFactor:201,SrcColorFactor:202,OneMinusSrcColorFactor:203,SrcAlphaFactor:204,OneMinusSrcAlphaFactor:205,DstAlphaFactor:206,OneMinusDstAlphaFactor:207,DstColorFactor:208,OneMinusDstColorFactor:209,SrcAlphaSaturateFactor:210,NeverDepth:0,AlwaysDepth:1,LessDepth:2,LessEqualDepth:3,EqualDepth:4,GreaterEqualDepth:5,GreaterDepth:6,NotEqualDepth:7,MultiplyOperation:0,MixOperation:1,AddOperation:2,NoToneMapping:0,LinearToneMapping:1,ReinhardToneMapping:2,Uncharted2ToneMapping:3,CineonToneMapping:4,UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307,RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002,NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008,UnsignedByteType:1009,ByteType:1010,ShortType:1011,UnsignedShortType:1012,IntType:1013,UnsignedIntType:1014,FloatType:1015,HalfFloatType:1025,UnsignedShort4444Type:1016,UnsignedShort5551Type:1017,UnsignedShort565Type:1018,AlphaFormat:1019,RGBFormat:1020,RGBAFormat:1021,LuminanceFormat:1022,LuminanceAlphaFormat:1023,RGBEFormat:c.RGBAFormat,DepthFormat:1026,RGB_S3TC_DXT1_Format:2001,RGBA_S3TC_DXT1_Format:2002,RGBA_S3TC_DXT3_Format:2003,RGBA_S3TC_DXT5_Format:2004,RGB_PVRTC_4BPPV1_Format:2100,RGB_PVRTC_2BPPV1_Format:2101,RGBA_PVRTC_4BPPV1_Format:2102,RGBA_PVRTC_2BPPV1_Format:2103,RGB_ETC1_Format:2151,LoopOnce:2200,LoopRepeat:2201,LoopPingPong:2202,InterpolateDiscrete:2300,InterpolateLinear:2301,InterpolateSmooth:2302,ZeroCurvatureEnding:2400,ZeroSlopeEnding:2401,WrapAroundEnding:2402,TrianglesDrawMode:0,TriangleStripDrawMode:1,TriangleFanDrawMode:2,LinearEncoding:3e3,sRGBEncoding:3001,GammaEncoding:3007,RGBEEncoding:3002,LogLuvEncoding:3003,RGBM7Encoding:3004,RGBM16Encoding:3005,RGBDEncoding:3006,BasicDepthPacking:3200,RGBADepthPacking:3201}),c.Color=function(a,b,c){return void 0===b&&void 0===c?this.set(a):this.setRGB(a,b,c)},c.Color.prototype={constructor:c.Color,r:1,g:1,b:1,set:function(a){return a instanceof c.Color?this.copy(a):"number"==typeof a?this.setHex(a):"string"==typeof a&&this.setStyle(a),this},setScalar:function(a){this.r=a,this.g=a,this.b=a},setHex:function(a){return a=Math.floor(a),this.r=(a>>16&255)/255,this.g=(a>>8&255)/255,this.b=(255&a)/255,this},setRGB:function(a,b,c){return this.r=a,this.g=b,this.b=c,this},setHSL:function(){function a(a,b,c){return c<0&&(c+=1),c>1&&(c-=1),c<1/6?a+6*(b-a)*c:c<.5?b:c<2/3?a+6*(b-a)*(2/3-c):a}return function b(d,e,f){if(d=c.Math.euclideanModulo(d,1),e=c.Math.clamp(e,0,1),f=c.Math.clamp(f,0,1),0===e)this.r=this.g=this.b=f;else{var g=f<=.5?f*(1+e):f+e-f*e,h=2*f-g;this.r=a(h,g,d+1/3),this.g=a(h,g,d),this.b=a(h,g,d-1/3)}return this}}(),setStyle:function(a){function b(b){void 0!==b&&parseFloat(b)<1&&console.warn("THREE.Color: Alpha component of "+a+" will be ignored.")}var d;if(d=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)){var e,f=d[1],g=d[2];switch(f){case"rgb":case"rgba":if(e=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(g))return this.r=Math.min(255,parseInt(e[1],10))/255,this.g=Math.min(255,parseInt(e[2],10))/255,this.b=Math.min(255,parseInt(e[3],10))/255,b(e[5]),this;if(e=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(g))return this.r=Math.min(100,parseInt(e[1],10))/100,this.g=Math.min(100,parseInt(e[2],10))/100,this.b=Math.min(100,parseInt(e[3],10))/100,b(e[5]),this;break;case"hsl":case"hsla":if(e=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(g)){var h=parseFloat(e[1])/360,i=parseInt(e[2],10)/100,j=parseInt(e[3],10)/100;return b(e[5]),this.setHSL(h,i,j)}}}else if(d=/^\#([A-Fa-f0-9]+)$/.exec(a)){var k=d[1],l=k.length;if(3===l)return this.r=parseInt(k.charAt(0)+k.charAt(0),16)/255,this.g=parseInt(k.charAt(1)+k.charAt(1),16)/255,this.b=parseInt(k.charAt(2)+k.charAt(2),16)/255,this;if(6===l)return this.r=parseInt(k.charAt(0)+k.charAt(1),16)/255,this.g=parseInt(k.charAt(2)+k.charAt(3),16)/255,this.b=parseInt(k.charAt(4)+k.charAt(5),16)/255,this}if(a&&a.length>0){var k=c.ColorKeywords[a];void 0!==k?this.setHex(k):console.warn("THREE.Color: Unknown color "+a)}return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(a){return this.r=a.r,this.g=a.g,this.b=a.b,this},copyGammaToLinear:function(a,b){return void 0===b&&(b=2),this.r=Math.pow(a.r,b),this.g=Math.pow(a.g,b),this.b=Math.pow(a.b,b),this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);var c=b>0?1/b:1;return this.r=Math.pow(a.r,c),this.g=Math.pow(a.g,c),this.b=Math.pow(a.b,c),this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;return this.r=a*a,this.g=b*b,this.b=c*c,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){var b=a||{h:0,s:0,l:0},c=this.r,d=this.g,e=this.b,f=Math.max(c,d,e),g=Math.min(c,d,e),h,i,j=(g+f)/2;if(g===f)h=0,i=0;else{var k=f-g;switch(i=j<=.5?k/(f+g):k/(2-f-g),f){case c:h=(d-e)/k+(d<e?6:0);break;case d:h=(e-c)/k+2;break;case e:h=(c-d)/k+4}h/=6}return b.h=h,b.s=i,b.l=j,b},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();return d.h+=a,d.s+=b,d.l+=c,this.setHSL(d.h,d.s,d.l),this},add:function(a){return this.r+=a.r,this.g+=a.g,this.b+=a.b,this},addColors:function(a,b){return this.r=a.r+b.r,this.g=a.g+b.g,this.b=a.b+b.b,this},addScalar:function(a){return this.r+=a,this.g+=a,this.b+=a,this},sub:function(a){return this.r=Math.max(0,this.r-a.r),this.g=Math.max(0,this.g-a.g),this.b=Math.max(0,this.b-a.b),this},multiply:function(a){return this.r*=a.r,this.g*=a.g,this.b*=a.b,this},multiplyScalar:function(a){return this.r*=a,this.g*=a,this.b*=a,this},lerp:function(a,b){return this.r+=(a.r-this.r)*b,this.g+=(a.g-this.g)*b,this.b+=(a.b-this.b)*b,this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a,b){return void 0===b&&(b=0),this.r=a[b],this.g=a[b+1],this.b=a[b+2],this},toArray:function(a,b){return void 0===a&&(a=[]),void 0===b&&(b=0),a[b]=this.r,a[b+1]=this.g,a[b+2]=this.b,a}},c.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},c.Quaternion=function(a,b,c,d){this._x=a||0,this._y=b||0,this._z=c||0,this._w=void 0!==d?d:1},c.Quaternion.prototype={constructor:c.Quaternion,get x(){return this._x},set x(a){this._x=a,this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a,this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a,this.onChangeCallback()},get w(){return this._w},set w(a){this._w=a,this.onChangeCallback()},set:function(a,b,c,d){return this._x=a,this._y=b,this._z=c,this._w=d,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(a){return this._x=a.x,this._y=a.y,this._z=a.z,this._w=a.w,this.onChangeCallback(),this},setFromEuler:function(a,b){if(a instanceof c.Euler==!1)throw new Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var d=Math.cos(a._x/2),e=Math.cos(a._y/2),f=Math.cos(a._z/2),g=Math.sin(a._x/2),h=Math.sin(a._y/2),i=Math.sin(a._z/2),j=a.order;return"XYZ"===j?(this._x=g*e*f+d*h*i,this._y=d*h*f-g*e*i,this._z=d*e*i+g*h*f,this._w=d*e*f-g*h*i):"YXZ"===j?(this._x=g*e*f+d*h*i,this._y=d*h*f-g*e*i,this._z=d*e*i-g*h*f,this._w=d*e*f+g*h*i):"ZXY"===j?(this._x=g*e*f-d*h*i,this._y=d*h*f+g*e*i,this._z=d*e*i+g*h*f,this._w=d*e*f-g*h*i):"ZYX"===j?(this._x=g*e*f-d*h*i,this._y=d*h*f+g*e*i,this._z=d*e*i-g*h*f,this._w=d*e*f+g*h*i):"YZX"===j?(this._x=g*e*f+d*h*i,this._y=d*h*f+g*e*i,this._z=d*e*i-g*h*f,this._w=d*e*f-g*h*i):"XZY"===j&&(this._x=g*e*f-d*h*i,this._y=d*h*f-g*e*i,this._z=d*e*i+g*h*f,this._w=d*e*f+g*h*i),b!==!1&&this.onChangeCallback(),this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);return this._x=a.x*d,this._y=a.y*d,this._z=a.z*d,this._w=Math.cos(c),this.onChangeCallback(),this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0],d=b[4],e=b[8],f=b[1],g=b[5],h=b[9],i=b[2],j=b[6],k=b[10],l=c+g+k,m;return l>0?(m=.5/Math.sqrt(l+1),this._w=.25/m,this._x=(j-h)*m,this._y=(e-i)*m,this._z=(f-d)*m):c>g&&c>k?(m=2*Math.sqrt(1+c-g-k),this._w=(j-h)/m,this._x=.25*m,this._y=(d+f)/m,this._z=(e+i)/m):g>k?(m=2*Math.sqrt(1+g-c-k),this._w=(e-i)/m,this._x=(d+f)/m,this._y=.25*m,this._z=(h+j)/m):(m=2*Math.sqrt(1+k-c-g),this._w=(f-d)/m,this._x=(e+i)/m,this._y=(h+j)/m,this._z=.25*m),this.onChangeCallback(),this},setFromUnitVectors:function(){var a,b,d=1e-6;return function e(f,g){return void 0===a&&(a=new c.Vector3),b=f.dot(g)+1,b<d?(b=0,Math.abs(f.x)>Math.abs(f.z)?a.set(-f.y,f.x,0):a.set(0,-f.z,f.y)):a.crossVectors(f,g),this._x=a.x,this._y=a.y,this._z=a.z,this._w=b,this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();return 0===a?(this._x=0,this._y=0,this._z=0,this._w=1):(a=1/a,this._x=this._x*a,this._y=this._y*a,this._z=this._z*a,this._w=this._w*a),this.onChangeCallback(),this},multiply:function(a,b){return void 0!==b?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},premultiply:function(a){return this.multiplyQuaternions(a,this)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,h=b._y,i=b._z,j=b._w;return this._x=c*j+f*g+d*i-e*h,this._y=d*j+f*h+e*g-c*i,this._z=e*j+f*i+c*h-d*g,this._w=f*j-c*g-d*h-e*i,this.onChangeCallback(),this},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;if(g<0?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a),g>=1)return this._w=f,this._x=c,this._y=d,this._z=e,this;var h=Math.sqrt(1-g*g);if(Math.abs(h)<.001)return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;var i=Math.atan2(h,g),j=Math.sin((1-b)*i)/h,k=Math.sin(b*i)/h;return this._w=f*j+this._w*k,this._x=c*j+this._x*k,this._y=d*j+this._y*k,this._z=e*j+this._z*k,this.onChangeCallback(),this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){return void 0===b&&(b=0),this._x=a[b],this._y=a[b+1],this._z=a[b+2],this._w=a[b+3],this.onChangeCallback(),this},toArray:function(a,b){return void 0===a&&(a=[]),void 0===b&&(b=0),a[b]=this._x,a[b+1]=this._y,a[b+2]=this._z,a[b+3]=this._w,a},onChange:function(a){return this.onChangeCallback=a,this},onChangeCallback:function(){}},Object.assign(c.Quaternion,{slerp:function(a,b,c,d){return c.copy(a).slerp(b,d)},slerpFlat:function(a,b,c,d,e,f,g){var h=c[d+0],i=c[d+1],j=c[d+2],k=c[d+3],l=e[f+0],m=e[f+1],n=e[f+2],o=e[f+3];if(k!==o||h!==l||i!==m||j!==n){var p=1-g,q=h*l+i*m+j*n+k*o,r=q>=0?1:-1,s=1-q*q;if(s>Number.EPSILON){var t=Math.sqrt(s),u=Math.atan2(t,q*r);p=Math.sin(p*u)/t,g=Math.sin(g*u)/t}var v=g*r;if(h=h*p+l*v,i=i*p+m*v,j=j*p+n*v,k=k*p+o*v,p===1-g){var w=1/Math.sqrt(h*h+i*i+j*j+k*k);h*=w,i*=w,j*=w,k*=w}}a[b]=h,a[b+1]=i,a[b+2]=j,a[b+3]=k}}),c.Vector2=function(a,b){this.x=a||0,this.y=b||0},c.Vector2.prototype={constructor:c.Vector2,get width(){return this.x},set width(a){this.x=a},get height(){return this.y},set height(a){this.y=a},set:function(a,b){return this.x=a,this.y=b,this},setScalar:function(a){return this.x=a,this.y=a,this},setX:function(a){return this.x=a,this},setY:function(a){return this.y=a,this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw new Error("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+a)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(a){return this.x=a.x,this.y=a.y,this},add:function(a,b){return void 0!==b?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b)):(this.x+=a.x,this.y+=a.y,this)},addScalar:function(a){return this.x+=a,this.y+=a,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this},addScaledVector:function(a,b){return this.x+=a.x*b,this.y+=a.y*b,this},sub:function(a,b){return void 0!==b?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b)):(this.x-=a.x,this.y-=a.y,this)},subScalar:function(a){return this.x-=a,this.y-=a,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this},multiply:function(a){return this.x*=a.x,this.y*=a.y,this},multiplyScalar:function(a){return isFinite(a)?(this.x*=a,this.y*=a):(this.x=0,this.y=0),this},divide:function(a){return this.x/=a.x,this.y/=a.y,this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this},max:function(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this},clamp:function(a,b){return this.x=Math.max(a.x,Math.min(b.x,this.x)),this.y=Math.max(a.y,Math.min(b.y,this.y)),this},clampScalar:function(){var a,b;return function d(e,f){return void 0===a&&(a=new c.Vector2,b=new c.Vector2),a.set(e,e),b.set(f,f),this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(b,c))/c)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var a=Math.atan2(this.y,this.x);return a<0&&(a+=2*Math.PI),a},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;return b*b+c*c},distanceToManhattan:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){return this.x+=(a.x-this.x)*b,this.y+=(a.y-this.y)*b,this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){return void 0===b&&(b=0),this.x=a[b],this.y=a[b+1],this},toArray:function(a,b){return void 0===a&&(a=[]),void 0===b&&(b=0),a[b]=this.x,a[b+1]=this.y,a},fromAttribute:function(a,b,c){return void 0===c&&(c=0),b=b*a.itemSize+c,this.x=a.array[b],this.y=a.array[b+1],this},rotateAround:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=this.x-a.x,f=this.y-a.y;return this.x=e*c-f*d+a.x,this.y=e*d+f*c+a.y,this}},c.Vector3=function(a,b,c){this.x=a||0,this.y=b||0,this.z=c||0},c.Vector3.prototype={constructor:c.Vector3,set:function(a,b,c){return this.x=a,this.y=b,this.z=c,this},setScalar:function(a){return this.x=a,this.y=a,this.z=a,this},setX:function(a){return this.x=a,this},setY:function(a){return this.y=a,this},setZ:function(a){return this.z=a,this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw new Error("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+a)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(a){return this.x=a.x,this.y=a.y,this.z=a.z,this},add:function(a,b){return void 0!==b?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b)):(this.x+=a.x,this.y+=a.y,this.z+=a.z,this)},addScalar:function(a){return this.x+=a,this.y+=a,this.z+=a,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this},addScaledVector:function(a,b){return this.x+=a.x*b,this.y+=a.y*b,this.z+=a.z*b,this},sub:function(a,b){return void 0!==b?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b)):(this.x-=a.x,this.y-=a.y,this.z-=a.z,this)},subScalar:function(a){return this.x-=a,this.y-=a,this.z-=a,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this},multiply:function(a,b){return void 0!==b?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b)):(this.x*=a.x,this.y*=a.y,this.z*=a.z,this)},multiplyScalar:function(a){return isFinite(a)?(this.x*=a,this.y*=a,this.z*=a):(this.x=0,this.y=0,this.z=0),this},multiplyVectors:function(a,b){return this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this},applyEuler:function(){var a;return function b(d){return d instanceof c.Euler==!1&&console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),void 0===a&&(a=new c.Quaternion),this.applyQuaternion(a.setFromEuler(d))}}(),applyAxisAngle:function(){var a;return function b(d,e){return void 0===a&&(a=new c.Quaternion),this.applyQuaternion(a.setFromAxisAngle(d,e))}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z,e=a.elements;return this.x=e[0]*b+e[3]*c+e[6]*d,this.y=e[1]*b+e[4]*c+e[7]*d,this.z=e[2]*b+e[5]*c+e[8]*d,this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=a.elements;return this.x=e[0]*b+e[4]*c+e[8]*d+e[12],this.y=e[1]*b+e[5]*c+e[9]*d+e[13],this.z=e[2]*b+e[6]*c+e[10]*d+e[14],this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z,e=a.elements,f=1/(e[3]*b+e[7]*c+e[11]*d+e[15]);return this.x=(e[0]*b+e[4]*c+e[8]*d+e[12])*f,this.y=(e[1]*b+e[5]*c+e[9]*d+e[13])*f,this.z=(e[2]*b+e[6]*c+e[10]*d+e[14])*f,this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z,h=a.w,i=h*b+f*d-g*c,j=h*c+g*b-e*d,k=h*d+e*c-f*b,l=-e*b-f*c-g*d;return this.x=i*h+l*-e+j*-g-k*-f,this.y=j*h+l*-f+k*-e-i*-g,this.z=k*h+l*-g+i*-f-j*-e,this},project:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.multiplyMatrices(d.projectionMatrix,a.getInverse(d.matrixWorld)),this.applyProjection(a)}}(),unproject:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.multiplyMatrices(d.matrixWorld,a.getInverse(d.projectionMatrix)),this.applyProjection(a)}}(),transformDirection:function(a){var b=this.x,c=this.y,d=this.z,e=a.elements;return this.x=e[0]*b+e[4]*c+e[8]*d,this.y=e[1]*b+e[5]*c+e[9]*d,this.z=e[2]*b+e[6]*c+e[10]*d,this.normalize()},divide:function(a){return this.x/=a.x,this.y/=a.y,this.z/=a.z,this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this.z=Math.min(this.z,a.z),this},max:function(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this.z=Math.max(this.z,a.z),this},clamp:function(a,b){return this.x=Math.max(a.x,Math.min(b.x,this.x)),this.y=Math.max(a.y,Math.min(b.y,this.y)),this.z=Math.max(a.z,Math.min(b.z,this.z)),this},clampScalar:function(){var a,b;return function d(e,f){return void 0===a&&(a=new c.Vector3,b=new c.Vector3),a.set(e,e,e),b.set(f,f,f),this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(b,c))/c)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){return this.x+=(a.x-this.x)*b,this.y+=(a.y-this.y)*b,this.z+=(a.z-this.z)*b,this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},cross:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;return this.x=d*a.z-e*a.y,this.y=e*a.x-c*a.z,this.z=c*a.y-d*a.x,this},crossVectors:function(a,b){var c=a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;return this.x=d*h-e*g,this.y=e*f-c*h,this.z=c*g-d*f,this},projectOnVector:function(a){var b=a.dot(this)/a.lengthSq();return this.copy(a).multiplyScalar(b)},projectOnPlane:function(){var a;return function b(d){return void 0===a&&(a=new c.Vector3),a.copy(this).projectOnVector(d),this.sub(a)}}(),reflect:function(){var a;return function b(d){return void 0===a&&(a=new c.Vector3),this.sub(a.copy(d).multiplyScalar(2*this.dot(d)))}}(),angleTo:function(a){var b=this.dot(a)/Math.sqrt(this.lengthSq()*a.lengthSq());return Math.acos(c.Math.clamp(b,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y,d=this.z-a.z;return b*b+c*c+d*d},distanceToManhattan:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)+Math.abs(this.z-a.z)},setFromSpherical:function(a){var b=Math.sin(a.phi)*a.radius;return this.x=b*Math.sin(a.theta),this.y=Math.cos(a.phi)*a.radius,this.z=b*Math.cos(a.theta),this},setFromMatrixPosition:function(a){return this.setFromMatrixColumn(a,3)},setFromMatrixScale:function(a){var b=this.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length(),d=this.setFromMatrixColumn(a,2).length();return this.x=b,this.y=c,this.z=d,this},setFromMatrixColumn:function(a,b){if("number"==typeof a){console.warn("THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).");var c=a;a=b,b=c}return this.fromArray(a.elements,4*b)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){return void 0===b&&(b=0),this.x=a[b],this.y=a[b+1],this.z=a[b+2],this},toArray:function(a,b){return void 0===a&&(a=[]),void 0===b&&(b=0),a[b]=this.x,a[b+1]=this.y,a[b+2]=this.z,a},fromAttribute:function(a,b,c){return void 0===c&&(c=0),b=b*a.itemSize+c,this.x=a.array[b],this.y=a.array[b+1],this.z=a.array[b+2],this}},c.Vector4=function(a,b,c,d){this.x=a||0,this.y=b||0,this.z=c||0,this.w=void 0!==d?d:1},c.Vector4.prototype={constructor:c.Vector4,set:function(a,b,c,d){return this.x=a,this.y=b,this.z=c,this.w=d,this},setScalar:function(a){return this.x=a,this.y=a,this.z=a,this.w=a,this},setX:function(a){return this.x=a,this},setY:function(a){return this.y=a,this},setZ:function(a){return this.z=a,this},setW:function(a){return this.w=a,this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw new Error("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+a)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(a){return this.x=a.x,this.y=a.y,this.z=a.z,this.w=void 0!==a.w?a.w:1,this},add:function(a,b){return void 0!==b?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b)):(this.x+=a.x,this.y+=a.y,this.z+=a.z,this.w+=a.w,this)},addScalar:function(a){return this.x+=a,this.y+=a,this.z+=a,this.w+=a,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this.w=a.w+b.w,this},addScaledVector:function(a,b){return this.x+=a.x*b,this.y+=a.y*b,this.z+=a.z*b,this.w+=a.w*b,this},sub:function(a,b){return void 0!==b?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b)):(this.x-=a.x,this.y-=a.y,this.z-=a.z,this.w-=a.w,this)},subScalar:function(a){return this.x-=a,this.y-=a,this.z-=a,this.w-=a,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this.w=a.w-b.w,this},multiplyScalar:function(a){return isFinite(a)?(this.x*=a,this.y*=a,this.z*=a,this.w*=a):(this.x=0,this.y=0,this.z=0,this.w=0),this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w,f=a.elements;return this.x=f[0]*b+f[4]*c+f[8]*d+f[12]*e,this.y=f[1]*b+f[5]*c+f[9]*d+f[13]*e,this.z=f[2]*b+f[6]*c+f[10]*d+f[14]*e,this.w=f[3]*b+f[7]*c+f[11]*d+f[15]*e,this},divideScalar:function(a){return this.multiplyScalar(1/a)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);return b<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b),this},setAxisAngleFromRotationMatrix:function(a){var b,c,d,e,f=.01,g=.1,h=a.elements,i=h[0],j=h[4],k=h[8],l=h[1],m=h[5],n=h[9],o=h[2],p=h[6],q=h[10];if(Math.abs(j-l)<f&&Math.abs(k-o)<f&&Math.abs(n-p)<f){if(Math.abs(j+l)<g&&Math.abs(k+o)<g&&Math.abs(n+p)<g&&Math.abs(i+m+q-3)<g)return this.set(1,0,0,0),this;b=Math.PI;var r=(i+1)/2,s=(m+1)/2,t=(q+1)/2,u=(j+l)/4,v=(k+o)/4,w=(n+p)/4;return r>s&&r>t?r<f?(c=0,d=.707106781,e=.707106781):(c=Math.sqrt(r),d=u/c,e=v/c):s>t?s<f?(c=.707106781,d=0,e=.707106781):(d=Math.sqrt(s),c=u/d,e=w/d):t<f?(c=.707106781,d=.707106781,e=0):(e=Math.sqrt(t),c=v/e,d=w/e),this.set(c,d,e,b),this}var x=Math.sqrt((p-n)*(p-n)+(k-o)*(k-o)+(l-j)*(l-j));return Math.abs(x)<.001&&(x=1),this.x=(p-n)/x,this.y=(k-o)/x,this.z=(l-j)/x,this.w=Math.acos((i+m+q-1)/2),this},min:function(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this.z=Math.min(this.z,a.z),this.w=Math.min(this.w,a.w),this},max:function(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this.z=Math.max(this.z,a.z),this.w=Math.max(this.w,a.w),this},clamp:function(a,b){return this.x=Math.max(a.x,Math.min(b.x,this.x)),this.y=Math.max(a.y,Math.min(b.y,this.y)),this.z=Math.max(a.z,Math.min(b.z,this.z)),this.w=Math.max(a.w,Math.min(b.w,this.w)),this},clampScalar:function(){var a,b;return function d(e,f){return void 0===a&&(a=new c.Vector4,b=new c.Vector4),a.set(e,e,e,e),b.set(f,f,f,f),this.clamp(a,b)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),
this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){return this.x+=(a.x-this.x)*b,this.y+=(a.y-this.y)*b,this.z+=(a.z-this.z)*b,this.w+=(a.w-this.w)*b,this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a,b){return void 0===b&&(b=0),this.x=a[b],this.y=a[b+1],this.z=a[b+2],this.w=a[b+3],this},toArray:function(a,b){return void 0===a&&(a=[]),void 0===b&&(b=0),a[b]=this.x,a[b+1]=this.y,a[b+2]=this.z,a[b+3]=this.w,a},fromAttribute:function(a,b,c){return void 0===c&&(c=0),b=b*a.itemSize+c,this.x=a.array[b],this.y=a.array[b+1],this.z=a.array[b+2],this.w=a.array[b+3],this}},c.Euler=function(a,b,d,e){this._x=a||0,this._y=b||0,this._z=d||0,this._order=e||c.Euler.DefaultOrder},c.Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],c.Euler.DefaultOrder="XYZ",c.Euler.prototype={constructor:c.Euler,get x(){return this._x},set x(a){this._x=a,this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a,this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a,this.onChangeCallback()},get order(){return this._order},set order(a){this._order=a,this.onChangeCallback()},set:function(a,b,c,d){return this._x=a,this._y=b,this._z=c,this._order=d||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(a){return this._x=a._x,this._y=a._y,this._z=a._z,this._order=a._order,this.onChangeCallback(),this},setFromRotationMatrix:function(a,b,d){var e=c.Math.clamp,f=a.elements,g=f[0],h=f[4],i=f[8],j=f[1],k=f[5],l=f[9],m=f[2],n=f[6],o=f[10];return b=b||this._order,"XYZ"===b?(this._y=Math.asin(e(i,-1,1)),Math.abs(i)<.99999?(this._x=Math.atan2(-l,o),this._z=Math.atan2(-h,g)):(this._x=Math.atan2(n,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-e(l,-1,1)),Math.abs(l)<.99999?(this._y=Math.atan2(i,o),this._z=Math.atan2(j,k)):(this._y=Math.atan2(-m,g),this._z=0)):"ZXY"===b?(this._x=Math.asin(e(n,-1,1)),Math.abs(n)<.99999?(this._y=Math.atan2(-m,o),this._z=Math.atan2(-h,k)):(this._y=0,this._z=Math.atan2(j,g))):"ZYX"===b?(this._y=Math.asin(-e(m,-1,1)),Math.abs(m)<.99999?(this._x=Math.atan2(n,o),this._z=Math.atan2(j,g)):(this._x=0,this._z=Math.atan2(-h,k))):"YZX"===b?(this._z=Math.asin(e(j,-1,1)),Math.abs(j)<.99999?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-m,g)):(this._x=0,this._y=Math.atan2(i,o))):"XZY"===b?(this._z=Math.asin(-e(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(n,k),this._y=Math.atan2(i,g)):(this._x=Math.atan2(-l,o),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+b),this._order=b,d!==!1&&this.onChangeCallback(),this},setFromQuaternion:function(){var a;return function b(d,e,f){return void 0===a&&(a=new c.Matrix4),a.makeRotationFromQuaternion(d),this.setFromRotationMatrix(a,e,f)}}(),setFromVector3:function(a,b){return this.set(a.x,a.y,a.z,b||this._order)},reorder:function(){var a=new c.Quaternion;return function b(c){return a.setFromEuler(this),this.setFromQuaternion(a,c)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){return this._x=a[0],this._y=a[1],this._z=a[2],void 0!==a[3]&&(this._order=a[3]),this.onChangeCallback(),this},toArray:function(a,b){return void 0===a&&(a=[]),void 0===b&&(b=0),a[b]=this._x,a[b+1]=this._y,a[b+2]=this._z,a[b+3]=this._order,a},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new c.Vector3(this._x,this._y,this._z)},onChange:function(a){return this.onChangeCallback=a,this},onChangeCallback:function(){}},c.Line3=function(a,b){this.start=void 0!==a?a:new c.Vector3,this.end=void 0!==b?b:new c.Vector3},c.Line3.prototype={constructor:c.Line3,set:function(a,b){return this.start.copy(a),this.end.copy(b),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.start.copy(a.start),this.end.copy(a.end),this},center:function(a){var b=a||new c.Vector3;return b.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){var b=a||new c.Vector3;return b.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,b){var d=b||new c.Vector3;return this.delta(d).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new c.Vector3,b=new c.Vector3;return function d(e,f){a.subVectors(e,this.start),b.subVectors(this.end,this.start);var g=b.dot(b),h=b.dot(a),i=h/g;return f&&(i=c.Math.clamp(i,0,1)),i}}(),closestPointToPoint:function(a,b,d){var e=this.closestPointToPointParameter(a,b),f=d||new c.Vector3;return this.delta(f).multiplyScalar(e).add(this.start)},applyMatrix4:function(a){return this.start.applyMatrix4(a),this.end.applyMatrix4(a),this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}},c.Box2=function(a,b){this.min=void 0!==a?a:new c.Vector2((+(1/0)),(+(1/0))),this.max=void 0!==b?b:new c.Vector2((-(1/0)),(-(1/0)))},c.Box2.prototype={constructor:c.Box2,set:function(a,b){return this.min.copy(a),this.max.copy(b),this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new c.Vector2;return function b(c,d){var e=a.copy(d).multiplyScalar(.5);return this.min.copy(c).sub(e),this.max.copy(c).add(e),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.min.copy(a.min),this.max.copy(a.max),this},makeEmpty:function(){return this.min.x=this.min.y=+(1/0),this.max.x=this.max.y=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){var b=a||new c.Vector2;return b.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){var b=a||new c.Vector2;return b.subVectors(this.max,this.min)},expandByPoint:function(a){return this.min.min(a),this.max.max(a),this},expandByVector:function(a){return this.min.sub(a),this.max.add(a),this},expandByScalar:function(a){return this.min.addScalar(-a),this.max.addScalar(a),this},containsPoint:function(a){return!(a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y)},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y},getParameter:function(a,b){var d=b||new c.Vector2;return d.set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(a){return!(a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y)},clampPoint:function(a,b){var d=b||new c.Vector2;return d.copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new c.Vector2;return function b(c){var d=a.copy(c).clamp(this.min,this.max);return d.sub(c).length()}}(),intersect:function(a){return this.min.max(a.min),this.max.min(a.max),this},union:function(a){return this.min.min(a.min),this.max.max(a.max),this},translate:function(a){return this.min.add(a),this.max.add(a),this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}},c.Box3=function(a,b){this.min=void 0!==a?a:new c.Vector3((+(1/0)),(+(1/0)),(+(1/0))),this.max=void 0!==b?b:new c.Vector3((-(1/0)),(-(1/0)),(-(1/0)))},c.Box3.prototype={constructor:c.Box3,set:function(a,b){return this.min.copy(a),this.max.copy(b),this},setFromArray:function(a){for(var b=+(1/0),c=+(1/0),d=+(1/0),e=-(1/0),f=-(1/0),g=-(1/0),h=0,i=a.length;h<i;h+=3){var j=a[h],k=a[h+1],l=a[h+2];j<b&&(b=j),k<c&&(c=k),l<d&&(d=l),j>e&&(e=j),k>f&&(f=k),l>g&&(g=l)}this.min.set(b,c,d),this.max.set(e,f,g)},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new c.Vector3;return function b(c,d){var e=a.copy(d).multiplyScalar(.5);return this.min.copy(c).sub(e),this.max.copy(c).add(e),this}}(),setFromObject:function(){var a=new c.Vector3;return function b(d){var e=this;return d.updateMatrixWorld(!0),this.makeEmpty(),d.traverse(function(b){var d=b.geometry;if(void 0!==d)if(d instanceof c.Geometry)for(var f=d.vertices,g=0,h=f.length;g<h;g++)a.copy(f[g]),a.applyMatrix4(b.matrixWorld),e.expandByPoint(a);else if(d instanceof c.BufferGeometry){var i=d.attributes.position;if(void 0!==i){var j,k,l;i instanceof c.InterleavedBufferAttribute?(j=i.data.array,k=i.offset,l=i.data.stride):(j=i.array,k=0,l=3);for(var g=k,h=j.length;g<h;g+=l)a.fromArray(j,g),a.applyMatrix4(b.matrixWorld),e.expandByPoint(a)}}}),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.min.copy(a.min),this.max.copy(a.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=+(1/0),this.max.x=this.max.y=this.max.z=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){var b=a||new c.Vector3;return b.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){var b=a||new c.Vector3;return b.subVectors(this.max,this.min)},expandByPoint:function(a){return this.min.min(a),this.max.max(a),this},expandByVector:function(a){return this.min.sub(a),this.max.add(a),this},expandByScalar:function(a){return this.min.addScalar(-a),this.max.addScalar(a),this},containsPoint:function(a){return!(a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z)},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z},getParameter:function(a,b){var d=b||new c.Vector3;return d.set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(a){return!(a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z)},intersectsSphere:function(){var a;return function b(d){return void 0===a&&(a=new c.Vector3),this.clampPoint(d.center,a),a.distanceToSquared(d.center)<=d.radius*d.radius}}(),intersectsPlane:function(a){var b,c;return a.normal.x>0?(b=a.normal.x*this.min.x,c=a.normal.x*this.max.x):(b=a.normal.x*this.max.x,c=a.normal.x*this.min.x),a.normal.y>0?(b+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(b+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y),a.normal.z>0?(b+=a.normal.z*this.min.z,c+=a.normal.z*this.max.z):(b+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z),b<=a.constant&&c>=a.constant},clampPoint:function(a,b){var d=b||new c.Vector3;return d.copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new c.Vector3;return function b(c){var d=a.copy(c).clamp(this.min,this.max);return d.sub(c).length()}}(),getBoundingSphere:function(){var a=new c.Vector3;return function b(d){var e=d||new c.Sphere;return e.center=this.center(),e.radius=.5*this.size(a).length(),e}}(),intersect:function(a){return this.min.max(a.min),this.max.min(a.max),this.isEmpty()&&this.makeEmpty(),this},union:function(a){return this.min.min(a.min),this.max.max(a.max),this},applyMatrix4:function(){var a=[new c.Vector3,new c.Vector3,new c.Vector3,new c.Vector3,new c.Vector3,new c.Vector3,new c.Vector3,new c.Vector3];return function b(c){return this.isEmpty()?this:(a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(c),a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(c),a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(c),a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(c),a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(c),a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(c),a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(c),a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(c),this.setFromPoints(a),this)}}(),translate:function(a){return this.min.add(a),this.max.add(a),this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}},c.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")},c.Matrix3.prototype={constructor:c.Matrix3,set:function(a,b,c,d,e,f,g,h,i){var j=this.elements;return j[0]=a,j[1]=d,j[2]=g,j[3]=b,j[4]=e,j[5]=h,j[6]=c,j[7]=f,j[8]=i,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(a){var b=a.elements;return this.set(b[0],b[3],b[6],b[1],b[4],b[7],b[2],b[5],b[8]),this},setFromMatrix4:function(a){var b=a.elements;return this.set(b[0],b[4],b[8],b[1],b[5],b[9],b[2],b[6],b[10]),this},applyToVector3Array:function(){var a;return function b(d,e,f){void 0===a&&(a=new c.Vector3),void 0===e&&(e=0),void 0===f&&(f=d.length);for(var g=0,h=e;g<f;g+=3,h+=3)a.fromArray(d,h),a.applyMatrix3(this),a.toArray(d,h);return d}}(),applyToBuffer:function(){var a;return function b(d,e,f){void 0===a&&(a=new c.Vector3),void 0===e&&(e=0),void 0===f&&(f=d.length/d.itemSize);for(var g=0,h=e;g<f;g++,h++)a.x=d.getX(h),a.y=d.getY(h),a.z=d.getZ(h),a.applyMatrix3(this),d.setXYZ(a.x,a.y,a.z);return d}}(),multiplyScalar:function(a){var b=this.elements;return b[0]*=a,b[3]*=a,b[6]*=a,b[1]*=a,b[4]*=a,b[7]*=a,b[2]*=a,b[5]*=a,b[8]*=a,this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],i=a[7],j=a[8];return b*f*j-b*g*i-c*e*j+c*g*h+d*e*i-d*f*h},getInverse:function(a,b){a instanceof c.Matrix4&&console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");var d=a.elements,e=this.elements,f=d[0],g=d[1],h=d[2],i=d[3],j=d[4],k=d[5],l=d[6],m=d[7],n=d[8],o=n*j-k*m,p=k*l-n*i,q=m*i-j*l,r=f*o+g*p+h*q;if(0===r){var s="THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";if(b)throw new Error(s);return console.warn(s),this.identity()}var t=1/r;return e[0]=o*t,e[1]=(h*m-n*g)*t,e[2]=(k*g-h*j)*t,e[3]=p*t,e[4]=(n*f-h*l)*t,e[5]=(h*i-k*f)*t,e[6]=q*t,e[7]=(g*l-m*f)*t,e[8]=(j*f-g*i)*t,this},transpose:function(){var a,b=this.elements;return a=b[1],b[1]=b[3],b[3]=a,a=b[2],b[2]=b[6],b[6]=a,a=b[5],b[5]=b[7],b[7]=a,this},flattenToArrayOffset:function(a,b){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(a,b)},getNormalMatrix:function(a){return this.setFromMatrix4(a).getInverse(this).transpose()},transposeIntoArray:function(a){var b=this.elements;return a[0]=b[0],a[1]=b[3],a[2]=b[6],a[3]=b[1],a[4]=b[4],a[5]=b[7],a[6]=b[2],a[7]=b[5],a[8]=b[8],this},fromArray:function(a){return this.elements.set(a),this},toArray:function(a,b){void 0===a&&(a=[]),void 0===b&&(b=0);var c=this.elements;return a[b]=c[0],a[b+1]=c[1],a[b+2]=c[2],a[b+3]=c[3],a[b+4]=c[4],a[b+5]=c[5],a[b+6]=c[6],a[b+7]=c[7],a[b+8]=c[8],a}},c.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")},c.Matrix4.prototype={constructor:c.Matrix4,set:function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){var q=this.elements;return q[0]=a,q[4]=b,q[8]=c,q[12]=d,q[1]=e,q[5]=f,q[9]=g,q[13]=h,q[2]=i,q[6]=j,q[10]=k,q[14]=l,q[3]=m,q[7]=n,q[11]=o,q[15]=p,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new c.Matrix4).fromArray(this.elements)},copy:function(a){return this.elements.set(a.elements),this},copyPosition:function(a){var b=this.elements,c=a.elements;return b[12]=c[12],b[13]=c[13],b[14]=c[14],this},extractBasis:function(a,b,c){return a.setFromMatrixColumn(this,0),b.setFromMatrixColumn(this,1),c.setFromMatrixColumn(this,2),this},makeBasis:function(a,b,c){return this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,1),this},extractRotation:function(){var a;return function b(d){void 0===a&&(a=new c.Vector3);var e=this.elements,f=d.elements,g=1/a.setFromMatrixColumn(d,0).length(),h=1/a.setFromMatrixColumn(d,1).length(),i=1/a.setFromMatrixColumn(d,2).length();return e[0]=f[0]*g,e[1]=f[1]*g,e[2]=f[2]*g,e[4]=f[4]*h,e[5]=f[5]*h,e[6]=f[6]*h,e[8]=f[8]*i,e[9]=f[9]*i,e[10]=f[10]*i,this}}(),makeRotationFromEuler:function(a){a instanceof c.Euler==!1&&console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var b=this.elements,d=a.x,e=a.y,f=a.z,g=Math.cos(d),h=Math.sin(d),i=Math.cos(e),j=Math.sin(e),k=Math.cos(f),l=Math.sin(f);if("XYZ"===a.order){var m=g*k,n=g*l,o=h*k,p=h*l;b[0]=i*k,b[4]=-i*l,b[8]=j,b[1]=n+o*j,b[5]=m-p*j,b[9]=-h*i,b[2]=p-m*j,b[6]=o+n*j,b[10]=g*i}else if("YXZ"===a.order){var q=i*k,r=i*l,s=j*k,t=j*l;b[0]=q+t*h,b[4]=s*h-r,b[8]=g*j,b[1]=g*l,b[5]=g*k,b[9]=-h,b[2]=r*h-s,b[6]=t+q*h,b[10]=g*i}else if("ZXY"===a.order){var q=i*k,r=i*l,s=j*k,t=j*l;b[0]=q-t*h,b[4]=-g*l,b[8]=s+r*h,b[1]=r+s*h,b[5]=g*k,b[9]=t-q*h,b[2]=-g*j,b[6]=h,b[10]=g*i}else if("ZYX"===a.order){var m=g*k,n=g*l,o=h*k,p=h*l;b[0]=i*k,b[4]=o*j-n,b[8]=m*j+p,b[1]=i*l,b[5]=p*j+m,b[9]=n*j-o,b[2]=-j,b[6]=h*i,b[10]=g*i}else if("YZX"===a.order){var u=g*i,v=g*j,w=h*i,x=h*j;b[0]=i*k,b[4]=x-u*l,b[8]=w*l+v,b[1]=l,b[5]=g*k,b[9]=-h*k,b[2]=-j*k,b[6]=v*l+w,b[10]=u-x*l}else if("XZY"===a.order){var u=g*i,v=g*j,w=h*i,x=h*j;b[0]=i*k,b[4]=-l,b[8]=j*k,b[1]=u*l+x,b[5]=g*k,b[9]=v*l-w,b[2]=w*l-v,b[6]=h*k,b[10]=x*l+u}return b[3]=0,b[7]=0,b[11]=0,b[12]=0,b[13]=0,b[14]=0,b[15]=1,this},makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,h=d+d,i=e+e,j=c*g,k=c*h,l=c*i,m=d*h,n=d*i,o=e*i,p=f*g,q=f*h,r=f*i;return b[0]=1-(m+o),b[4]=k-r,b[8]=l+q,b[1]=k+r,b[5]=1-(j+o),b[9]=n-p,b[2]=l-q,b[6]=n+p,b[10]=1-(j+m),b[3]=0,b[7]=0,b[11]=0,b[12]=0,b[13]=0,b[14]=0,b[15]=1,this},lookAt:function(){var a,b,d;return function e(f,g,h){void 0===a&&(a=new c.Vector3,b=new c.Vector3,d=new c.Vector3);var i=this.elements;return d.subVectors(f,g).normalize(),0===d.lengthSq()&&(d.z=1),a.crossVectors(h,d).normalize(),0===a.lengthSq()&&(d.z+=1e-4,a.crossVectors(h,d).normalize()),b.crossVectors(d,a),i[0]=a.x,i[4]=b.x,i[8]=d.x,i[1]=a.y,i[5]=b.y,i[9]=d.y,i[2]=a.z,i[6]=b.z,i[10]=d.z,this}}(),multiply:function(a,b){return void 0!==b?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],h=c[8],i=c[12],j=c[1],k=c[5],l=c[9],m=c[13],n=c[2],o=c[6],p=c[10],q=c[14],r=c[3],s=c[7],t=c[11],u=c[15],v=d[0],w=d[4],x=d[8],y=d[12],z=d[1],A=d[5],B=d[9],C=d[13],D=d[2],E=d[6],F=d[10],G=d[14],H=d[3],I=d[7],J=d[11],K=d[15];return e[0]=f*v+g*z+h*D+i*H,e[4]=f*w+g*A+h*E+i*I,e[8]=f*x+g*B+h*F+i*J,e[12]=f*y+g*C+h*G+i*K,e[1]=j*v+k*z+l*D+m*H,e[5]=j*w+k*A+l*E+m*I,e[9]=j*x+k*B+l*F+m*J,e[13]=j*y+k*C+l*G+m*K,e[2]=n*v+o*z+p*D+q*H,e[6]=n*w+o*A+p*E+q*I,e[10]=n*x+o*B+p*F+q*J,e[14]=n*y+o*C+p*G+q*K,e[3]=r*v+s*z+t*D+u*H,e[7]=r*w+s*A+t*E+u*I,e[11]=r*x+s*B+t*F+u*J,e[15]=r*y+s*C+t*G+u*K,this},multiplyToArray:function(a,b,c){var d=this.elements;return this.multiplyMatrices(a,b),c[0]=d[0],c[1]=d[1],c[2]=d[2],c[3]=d[3],c[4]=d[4],c[5]=d[5],c[6]=d[6],c[7]=d[7],c[8]=d[8],c[9]=d[9],c[10]=d[10],c[11]=d[11],c[12]=d[12],c[13]=d[13],c[14]=d[14],c[15]=d[15],this},multiplyScalar:function(a){var b=this.elements;return b[0]*=a,b[4]*=a,b[8]*=a,b[12]*=a,b[1]*=a,b[5]*=a,b[9]*=a,b[13]*=a,b[2]*=a,b[6]*=a,b[10]*=a,b[14]*=a,b[3]*=a,b[7]*=a,b[11]*=a,b[15]*=a,this},applyToVector3Array:function(){var a;return function b(d,e,f){void 0===a&&(a=new c.Vector3),void 0===e&&(e=0),void 0===f&&(f=d.length);for(var g=0,h=e;g<f;g+=3,h+=3)a.fromArray(d,h),a.applyMatrix4(this),a.toArray(d,h);return d}}(),applyToBuffer:function(){var a;return function b(d,e,f){void 0===a&&(a=new c.Vector3),void 0===e&&(e=0),void 0===f&&(f=d.length/d.itemSize);for(var g=0,h=e;g<f;g++,h++)a.x=d.getX(h),a.y=d.getY(h),a.z=d.getZ(h),a.applyMatrix4(this),d.setXYZ(a.x,a.y,a.z);return d}}(),determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],i=a[13],j=a[2],k=a[6],l=a[10],m=a[14],n=a[3],o=a[7],p=a[11],q=a[15];return n*(+e*h*k-d*i*k-e*g*l+c*i*l+d*g*m-c*h*m)+o*(+b*h*m-b*i*l+e*f*l-d*f*m+d*i*j-e*h*j)+p*(+b*i*k-b*g*m-e*f*k+c*f*m+e*g*j-c*i*j)+q*(-d*g*j-b*h*k+b*g*l+d*f*k-c*f*l+c*h*j)},transpose:function(){var a=this.elements,b;return b=a[1],a[1]=a[4],a[4]=b,b=a[2],a[2]=a[8],a[8]=b,b=a[6],a[6]=a[9],a[9]=b,b=a[3],a[3]=a[12],a[12]=b,b=a[7],a[7]=a[13],a[13]=b,b=a[11],a[11]=a[14],a[14]=b,this},flattenToArrayOffset:function(a,b){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(a,b)},getPosition:function(){var a;return function b(){return void 0===a&&(a=new c.Vector3),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),a.setFromMatrixColumn(this,3)}}(),setPosition:function(a){var b=this.elements;return b[12]=a.x,b[13]=a.y,b[14]=a.z,this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[1],g=d[2],h=d[3],i=d[4],j=d[5],k=d[6],l=d[7],m=d[8],n=d[9],o=d[10],p=d[11],q=d[12],r=d[13],s=d[14],t=d[15],u=n*s*l-r*o*l+r*k*p-j*s*p-n*k*t+j*o*t,v=q*o*l-m*s*l-q*k*p+i*s*p+m*k*t-i*o*t,w=m*r*l-q*n*l+q*j*p-i*r*p-m*j*t+i*n*t,x=q*n*k-m*r*k-q*j*o+i*r*o+m*j*s-i*n*s,y=e*u+f*v+g*w+h*x;if(0===y){var z="THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";if(b)throw new Error(z);return console.warn(z),this.identity()}var A=1/y;return c[0]=u*A,c[1]=(r*o*h-n*s*h-r*g*p+f*s*p+n*g*t-f*o*t)*A,c[2]=(j*s*h-r*k*h+r*g*l-f*s*l-j*g*t+f*k*t)*A,c[3]=(n*k*h-j*o*h-n*g*l+f*o*l+j*g*p-f*k*p)*A,c[4]=v*A,c[5]=(m*s*h-q*o*h+q*g*p-e*s*p-m*g*t+e*o*t)*A,c[6]=(q*k*h-i*s*h-q*g*l+e*s*l+i*g*t-e*k*t)*A,c[7]=(i*o*h-m*k*h+m*g*l-e*o*l-i*g*p+e*k*p)*A,c[8]=w*A,c[9]=(q*n*h-m*r*h-q*f*p+e*r*p+m*f*t-e*n*t)*A,c[10]=(i*r*h-q*j*h+q*f*l-e*r*l-i*f*t+e*j*t)*A,c[11]=(m*j*h-i*n*h-m*f*l+e*n*l+i*f*p-e*j*p)*A,c[12]=x*A,c[13]=(m*r*g-q*n*g+q*f*o-e*r*o-m*f*s+e*n*s)*A,c[14]=(q*j*g-i*r*g-q*f*k+e*r*k+i*f*s-e*j*s)*A,c[15]=(i*n*g-m*j*g+m*f*k-e*n*k-i*f*o+e*j*o)*A,this},scale:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z;return b[0]*=c,b[4]*=d,b[8]*=e,b[1]*=c,b[5]*=d,b[9]*=e,b[2]*=c,b[6]*=d,b[10]*=e,b[3]*=c,b[7]*=d,b[11]*=e,this},getMaxScaleOnAxis:function(){var a=this.elements,b=a[0]*a[0]+a[1]*a[1]+a[2]*a[2],c=a[4]*a[4]+a[5]*a[5]+a[6]*a[6],d=a[8]*a[8]+a[9]*a[9]+a[10]*a[10];return Math.sqrt(Math.max(b,c,d))},makeTranslation:function(a,b,c){return this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1),this},makeRotationX:function(a){var b=Math.cos(a),c=Math.sin(a);return this.set(1,0,0,0,0,b,-c,0,0,c,b,0,0,0,0,1),this},makeRotationY:function(a){var b=Math.cos(a),c=Math.sin(a);return this.set(b,0,c,0,0,1,0,0,-c,0,b,0,0,0,0,1),this},makeRotationZ:function(a){var b=Math.cos(a),c=Math.sin(a);return this.set(b,-c,0,0,c,b,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,i=e*f,j=e*g;return this.set(i*f+c,i*g-d*h,i*h+d*g,0,i*g+d*h,j*g+c,j*h-d*f,0,i*h-d*g,j*h+d*f,e*h*h+c,0,0,0,0,1),this},makeScale:function(a,b,c){return this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1),this},compose:function(a,b,c){return this.makeRotationFromQuaternion(b),this.scale(c),this.setPosition(a),this},decompose:function(){var a,b;return function d(e,f,g){void 0===a&&(a=new c.Vector3,b=new c.Matrix4);var h=this.elements,i=a.set(h[0],h[1],h[2]).length(),j=a.set(h[4],h[5],h[6]).length(),k=a.set(h[8],h[9],h[10]).length(),l=this.determinant();l<0&&(i=-i),e.x=h[12],e.y=h[13],e.z=h[14],b.elements.set(this.elements);var m=1/i,n=1/j,o=1/k;return b.elements[0]*=m,b.elements[1]*=m,b.elements[2]*=m,b.elements[4]*=n,b.elements[5]*=n,b.elements[6]*=n,b.elements[8]*=o,b.elements[9]*=o,b.elements[10]*=o,f.setFromRotationMatrix(b),g.x=i,g.y=j,g.z=k,this}}(),makeFrustum:function(a,b,c,d,e,f){var g=this.elements,h=2*e/(b-a),i=2*e/(d-c),j=(b+a)/(b-a),k=(d+c)/(d-c),l=-(f+e)/(f-e),m=-2*f*e/(f-e);return g[0]=h,g[4]=0,g[8]=j,g[12]=0,g[1]=0,g[5]=i,g[9]=k,g[13]=0,g[2]=0,g[6]=0,g[10]=l,g[14]=m,g[3]=0,g[7]=0,g[11]=-1,g[15]=0,this},makePerspective:function(a,b,d,e){var f=d*Math.tan(c.Math.DEG2RAD*a*.5),g=-f,h=g*b,i=f*b;return this.makeFrustum(h,i,g,f,d,e)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=1/(b-a),i=1/(c-d),j=1/(f-e),k=(b+a)*h,l=(c+d)*i,m=(f+e)*j;return g[0]=2*h,g[4]=0,g[8]=0,g[12]=-k,g[1]=0,g[5]=2*i,g[9]=0,g[13]=-l,g[2]=0,g[6]=0,g[10]=-2*j,g[14]=-m,g[3]=0,g[7]=0,g[11]=0,g[15]=1,this},equals:function(a){for(var b=this.elements,c=a.elements,d=0;d<16;d++)if(b[d]!==c[d])return!1;return!0},fromArray:function(a){return this.elements.set(a),this},toArray:function(a,b){void 0===a&&(a=[]),void 0===b&&(b=0);var c=this.elements;return a[b]=c[0],a[b+1]=c[1],a[b+2]=c[2],a[b+3]=c[3],a[b+4]=c[4],a[b+5]=c[5],a[b+6]=c[6],a[b+7]=c[7],a[b+8]=c[8],a[b+9]=c[9],a[b+10]=c[10],a[b+11]=c[11],a[b+12]=c[12],a[b+13]=c[13],a[b+14]=c[14],a[b+15]=c[15],a}},c.Ray=function(a,b){this.origin=void 0!==a?a:new c.Vector3,this.direction=void 0!==b?b:new c.Vector3},c.Ray.prototype={constructor:c.Ray,set:function(a,b){return this.origin.copy(a),this.direction.copy(b),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.origin.copy(a.origin),this.direction.copy(a.direction),this},at:function(a,b){var d=b||new c.Vector3;return d.copy(this.direction).multiplyScalar(a).add(this.origin)},lookAt:function(a){return this.direction.copy(a).sub(this.origin).normalize(),this},recast:function(){var a=new c.Vector3;return function b(c){return this.origin.copy(this.at(c,a)),this}}(),closestPointToPoint:function(a,b){var d=b||new c.Vector3;d.subVectors(a,this.origin);var e=d.dot(this.direction);return e<0?d.copy(this.origin):d.copy(this.direction).multiplyScalar(e).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(){var a=new c.Vector3;return function b(c){var d=a.subVectors(c,this.origin).dot(this.direction);return d<0?this.origin.distanceToSquared(c):(a.copy(this.direction).multiplyScalar(d).add(this.origin),a.distanceToSquared(c))}}(),distanceSqToSegment:function(){var a=new c.Vector3,b=new c.Vector3,d=new c.Vector3;return function e(c,f,g,h){a.copy(c).add(f).multiplyScalar(.5),b.copy(f).sub(c).normalize(),d.copy(this.origin).sub(a);var i=.5*c.distanceTo(f),j=-this.direction.dot(b),k=d.dot(this.direction),l=-d.dot(b),m=d.lengthSq(),n=Math.abs(1-j*j),o,p,q,r;if(n>0)if(o=j*l-k,p=j*k-l,r=i*n,o>=0)if(p>=-r)if(p<=r){var s=1/n;o*=s,p*=s,q=o*(o+j*p+2*k)+p*(j*o+p+2*l)+m}else p=i,o=Math.max(0,-(j*p+k)),q=-o*o+p*(p+2*l)+m;else p=-i,o=Math.max(0,-(j*p+k)),q=-o*o+p*(p+2*l)+m;else p<=-r?(o=Math.max(0,-(-j*i+k)),p=o>0?-i:Math.min(Math.max(-i,-l),i),q=-o*o+p*(p+2*l)+m):p<=r?(o=0,p=Math.min(Math.max(-i,-l),i),q=p*(p+2*l)+m):(o=Math.max(0,-(j*i+k)),p=o>0?i:Math.min(Math.max(-i,-l),i),q=-o*o+p*(p+2*l)+m);else p=j>0?-i:i,o=Math.max(0,-(j*p+k)),q=-o*o+p*(p+2*l)+m;return g&&g.copy(this.direction).multiplyScalar(o).add(this.origin),h&&h.copy(b).multiplyScalar(p).add(a),q}}(),intersectSphere:function(){var a=new c.Vector3;return function b(c,d){a.subVectors(c.center,this.origin);var e=a.dot(this.direction),f=a.dot(a)-e*e,g=c.radius*c.radius;if(f>g)return null;var h=Math.sqrt(g-f),i=e-h,j=e+h;return i<0&&j<0?null:i<0?this.at(j,d):this.at(i,d)}}(),intersectsSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?0:null;var c=-(this.origin.dot(a.normal)+a.constant)/b;return c>=0?c:null},intersectPlane:function(a,b){var c=this.distanceToPlane(a);return null===c?null:this.at(c,b)},intersectsPlane:function(a){var b=a.distanceToPoint(this.origin);if(0===b)return!0;var c=a.normal.dot(this.direction);return c*b<0},intersectBox:function(a,b){var c,d,e,f,g,h,i=1/this.direction.x,j=1/this.direction.y,k=1/this.direction.z,l=this.origin;return i>=0?(c=(a.min.x-l.x)*i,d=(a.max.x-l.x)*i):(c=(a.max.x-l.x)*i,d=(a.min.x-l.x)*i),j>=0?(e=(a.min.y-l.y)*j,f=(a.max.y-l.y)*j):(e=(a.max.y-l.y)*j,f=(a.min.y-l.y)*j),c>f||e>d?null:((e>c||c!==c)&&(c=e),(f<d||d!==d)&&(d=f),k>=0?(g=(a.min.z-l.z)*k,h=(a.max.z-l.z)*k):(g=(a.max.z-l.z)*k,h=(a.min.z-l.z)*k),c>h||g>d?null:((g>c||c!==c)&&(c=g),(h<d||d!==d)&&(d=h),d<0?null:this.at(c>=0?c:d,b)))},intersectsBox:function(){var a=new c.Vector3;return function b(c){return null!==this.intersectBox(c,a)}}(),intersectTriangle:function(){var a=new c.Vector3,b=new c.Vector3,d=new c.Vector3,e=new c.Vector3;return function f(c,g,h,i,j){b.subVectors(g,c),d.subVectors(h,c),e.crossVectors(b,d);var k=this.direction.dot(e),l;if(k>0){if(i)return null;l=1}else{if(!(k<0))return null;l=-1,k=-k}a.subVectors(this.origin,c);var m=l*this.direction.dot(d.crossVectors(a,d));if(m<0)return null;var n=l*this.direction.dot(b.cross(a));if(n<0)return null;if(m+n>k)return null;var o=-l*a.dot(e);return o<0?null:this.at(o/k,j)}}(),applyMatrix4:function(a){return this.direction.add(this.origin).applyMatrix4(a),this.origin.applyMatrix4(a),this.direction.sub(this.origin),this.direction.normalize(),this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}},c.Sphere=function(a,b){this.center=void 0!==a?a:new c.Vector3,this.radius=void 0!==b?b:0},c.Sphere.prototype={constructor:c.Sphere,set:function(a,b){return this.center.copy(a),this.radius=b,this},setFromPoints:function(){var a=new c.Box3;return function b(c,d){var e=this.center;void 0!==d?e.copy(d):a.setFromPoints(c).center(e);for(var f=0,g=0,h=c.length;g<h;g++)f=Math.max(f,e.distanceToSquared(c[g]));return this.radius=Math.sqrt(f),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.center.copy(a.center),this.radius=a.radius,this},empty:function(){return this.radius<=0},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},intersectsBox:function(a){return a.intersectsSphere(this)},intersectsPlane:function(a){return Math.abs(this.center.dot(a.normal)-a.constant)<=this.radius},clampPoint:function(a,b){var d=this.center.distanceToSquared(a),e=b||new c.Vector3;return e.copy(a),d>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(a){var b=a||new c.Box3;return b.set(this.center,this.center),b.expandByScalar(this.radius),b},applyMatrix4:function(a){return this.center.applyMatrix4(a),this.radius=this.radius*a.getMaxScaleOnAxis(),this},translate:function(a){return this.center.add(a),this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius}},c.Frustum=function(a,b,d,e,f,g){this.planes=[void 0!==a?a:new c.Plane,void 0!==b?b:new c.Plane,void 0!==d?d:new c.Plane,void 0!==e?e:new c.Plane,void 0!==f?f:new c.Plane,void 0!==g?g:new c.Plane]},c.Frustum.prototype={constructor:c.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;return g[0].copy(a),g[1].copy(b),g[2].copy(c),g[3].copy(d),g[4].copy(e),g[5].copy(f),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){for(var b=this.planes,c=0;c<6;c++)b[c].copy(a.planes[c]);
return this},setFromMatrix:function(a){var b=this.planes,c=a.elements,d=c[0],e=c[1],f=c[2],g=c[3],h=c[4],i=c[5],j=c[6],k=c[7],l=c[8],m=c[9],n=c[10],o=c[11],p=c[12],q=c[13],r=c[14],s=c[15];return b[0].setComponents(g-d,k-h,o-l,s-p).normalize(),b[1].setComponents(g+d,k+h,o+l,s+p).normalize(),b[2].setComponents(g+e,k+i,o+m,s+q).normalize(),b[3].setComponents(g-e,k-i,o-m,s-q).normalize(),b[4].setComponents(g-f,k-j,o-n,s-r).normalize(),b[5].setComponents(g+f,k+j,o+n,s+r).normalize(),this},intersectsObject:function(){var a=new c.Sphere;return function b(c){var d=c.geometry;return null===d.boundingSphere&&d.computeBoundingSphere(),a.copy(d.boundingSphere).applyMatrix4(c.matrixWorld),this.intersectsSphere(a)}}(),intersectsSprite:function(){var a=new c.Sphere;return function b(c){return a.center.set(0,0,0),a.radius=.7071067811865476,a.applyMatrix4(c.matrixWorld),this.intersectsSphere(a)}}(),intersectsSphere:function(a){for(var b=this.planes,c=a.center,d=-a.radius,e=0;e<6;e++){var f=b[e].distanceToPoint(c);if(f<d)return!1}return!0},intersectsBox:function(){var a=new c.Vector3,b=new c.Vector3;return function d(c){for(var d=this.planes,e=0;e<6;e++){var f=d[e];a.x=f.normal.x>0?c.min.x:c.max.x,b.x=f.normal.x>0?c.max.x:c.min.x,a.y=f.normal.y>0?c.min.y:c.max.y,b.y=f.normal.y>0?c.max.y:c.min.y,a.z=f.normal.z>0?c.min.z:c.max.z,b.z=f.normal.z>0?c.max.z:c.min.z;var g=f.distanceToPoint(a),h=f.distanceToPoint(b);if(g<0&&h<0)return!1}return!0}}(),containsPoint:function(a){for(var b=this.planes,c=0;c<6;c++)if(b[c].distanceToPoint(a)<0)return!1;return!0}},c.Plane=function(a,b){this.normal=void 0!==a?a:new c.Vector3(1,0,0),this.constant=void 0!==b?b:0},c.Plane.prototype={constructor:c.Plane,set:function(a,b){return this.normal.copy(a),this.constant=b,this},setComponents:function(a,b,c,d){return this.normal.set(a,b,c),this.constant=d,this},setFromNormalAndCoplanarPoint:function(a,b){return this.normal.copy(a),this.constant=-b.dot(this.normal),this},setFromCoplanarPoints:function(){var a=new c.Vector3,b=new c.Vector3;return function d(c,e,f){var g=a.subVectors(f,e).cross(b.subVectors(c,e)).normalize();return this.setFromNormalAndCoplanarPoint(g,c),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.normal.copy(a.normal),this.constant=a.constant,this},normalize:function(){var a=1/this.normal.length();return this.normal.multiplyScalar(a),this.constant*=a,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,b){var d=this.distanceToPoint(a),e=b||new c.Vector3;return e.copy(this.normal).multiplyScalar(d)},intersectLine:function(){var a=new c.Vector3;return function b(d,e){var f=e||new c.Vector3,g=d.delta(a),h=this.normal.dot(g);if(0!==h){var i=-(d.start.dot(this.normal)+this.constant)/h;if(!(i<0||i>1))return f.copy(g).multiplyScalar(i).add(d.start)}else if(0===this.distanceToPoint(d.start))return f.copy(d.start)}}(),intersectsLine:function(a){var b=this.distanceToPoint(a.start),c=this.distanceToPoint(a.end);return b<0&&c>0||c<0&&b>0},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){var b=a||new c.Vector3;return b.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new c.Vector3,b=new c.Matrix3;return function d(c,e){var f=this.coplanarPoint(a).applyMatrix4(c),g=e||b.getNormalMatrix(c),h=this.normal.applyMatrix3(g).normalize();return this.constant=-f.dot(h),this}}(),translate:function(a){return this.constant=this.constant-a.dot(this.normal),this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}},c.Spherical=function(a,b,c){return this.radius=void 0!==a?a:1,this.phi=void 0!==b?b:0,this.theta=void 0!==c?c:0,this},c.Spherical.prototype={constructor:c.Spherical,set:function(a,b,c){return this.radius=a,this.phi=b,this.theta=c,this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.radius.copy(a.radius),this.phi.copy(a.phi),this.theta.copy(a.theta),this},makeSafe:function(){var a=1e-6;return this.phi=Math.max(a,Math.min(Math.PI-a,this.phi)),this},setFromVector3:function(a){return this.radius=a.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(a.x,a.z),this.phi=Math.acos(c.Math.clamp(a.y/this.radius,-1,1))),this}},c.Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=new Array(36),c=0,d;return function e(){for(var e=0;e<36;e++)8===e||13===e||18===e||23===e?b[e]="-":14===e?b[e]="4":(c<=2&&(c=33554432+16777216*Math.random()|0),d=15&c,c>>=4,b[e]=a[19===e?3&d|8:d]);return b.join("")}}(),clamp:function(a,b,c){return Math.max(b,Math.min(c,a))},euclideanModulo:function(a,b){return(a%b+b)%b},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b),a*a*(3-2*a))},smootherstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b),a*a*a*(a*(6*a-15)+10))},random16:function(){return console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead."),Math.random()},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(.5-Math.random())},degToRad:function(a){return a*c.Math.DEG2RAD},radToDeg:function(a){return a*c.Math.RAD2DEG},isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},nearestPowerOfTwo:function(a){return Math.pow(2,Math.round(Math.log(a)/Math.LN2))},nextPowerOfTwo:function(a){return a--,a|=a>>1,a|=a>>2,a|=a>>4,a|=a>>8,a|=a>>16,a++,a}},c.Spline=function(a){function b(a,b,c,d,e,f,g){var h=.5*(c-a),i=.5*(d-b);return(2*(b-c)+h+i)*g+(-3*(b-c)-2*h-i)*f+h*e+b}this.points=a;var d=[],e={x:0,y:0,z:0},f,g,h,i,j,k,l,m,n;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}},this.getPoint=function(a){return f=(this.points.length-1)*a,g=Math.floor(f),h=f-g,d[0]=0===g?g:g-1,d[1]=g,d[2]=g>this.points.length-2?this.points.length-1:g+1,d[3]=g>this.points.length-3?this.points.length-1:g+2,k=this.points[d[0]],l=this.points[d[1]],m=this.points[d[2]],n=this.points[d[3]],i=h*h,j=h*i,e.x=b(k.x,l.x,m.x,n.x,h,i,j),e.y=b(k.y,l.y,m.y,n.y,h,i,j),e.z=b(k.z,l.z,m.z,n.z,h,i,j),e},this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d},this.getLength=function(a){var b,d,e,f,g=0,h=0,i=0,j=new c.Vector3,k=new c.Vector3,l=[],m=0;for(l[0]=0,a||(a=100),e=this.points.length*a,j.copy(this.points[0]),b=1;b<e;b++)d=b/e,f=this.getPoint(d),k.copy(f),m+=k.distanceTo(j),j.copy(f),g=(this.points.length-1)*d,h=Math.floor(g),h!==i&&(l[h]=m,i=h);return l[l.length]=m,{chunks:l,total:m}},this.reparametrizeByArcLength=function(a){var b,d,e,f,g,h,i,j,k=[],l=new c.Vector3,m=this.getLength();for(k.push(l.copy(this.points[0]).clone()),b=1;b<this.points.length;b++){for(h=m.chunks[b]-m.chunks[b-1],i=Math.ceil(a*h/m.total),f=(b-1)/(this.points.length-1),g=b/(this.points.length-1),d=1;d<i-1;d++)e=f+d*(1/i)*(g-f),j=this.getPoint(e),k.push(l.copy(j).clone());k.push(l.copy(this.points[b]).clone())}this.points=k}},c.Triangle=function(a,b,d){this.a=void 0!==a?a:new c.Vector3,this.b=void 0!==b?b:new c.Vector3,this.c=void 0!==d?d:new c.Vector3},c.Triangle.normal=function(){var a=new c.Vector3;return function b(d,e,f,g){var h=g||new c.Vector3;h.subVectors(f,e),a.subVectors(d,e),h.cross(a);var i=h.lengthSq();return i>0?h.multiplyScalar(1/Math.sqrt(i)):h.set(0,0,0)}}(),c.Triangle.barycoordFromPoint=function(){var a=new c.Vector3,b=new c.Vector3,d=new c.Vector3;return function e(f,g,h,i,j){a.subVectors(i,g),b.subVectors(h,g),d.subVectors(f,g);var k=a.dot(a),l=a.dot(b),m=a.dot(d),n=b.dot(b),o=b.dot(d),p=k*n-l*l,q=j||new c.Vector3;if(0===p)return q.set(-2,-1,-1);var r=1/p,s=(n*m-l*o)*r,t=(k*o-l*m)*r;return q.set(1-s-t,t,s)}}(),c.Triangle.containsPoint=function(){var a=new c.Vector3;return function b(d,e,f,g){var h=c.Triangle.barycoordFromPoint(d,e,f,g,a);return h.x>=0&&h.y>=0&&h.x+h.y<=1}}(),c.Triangle.prototype={constructor:c.Triangle,set:function(a,b,c){return this.a.copy(a),this.b.copy(b),this.c.copy(c),this},setFromPointsAndIndices:function(a,b,c,d){return this.a.copy(a[b]),this.b.copy(a[c]),this.c.copy(a[d]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.a.copy(a.a),this.b.copy(a.b),this.c.copy(a.c),this},area:function(){var a=new c.Vector3,b=new c.Vector3;return function d(){return a.subVectors(this.c,this.b),b.subVectors(this.a,this.b),.5*a.cross(b).length()}}(),midpoint:function(a){var b=a||new c.Vector3;return b.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return c.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){var b=a||new c.Plane;return b.setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return c.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return c.Triangle.containsPoint(a,this.a,this.b,this.c)},closestPointToPoint:function(){var a,b,d,e;return function f(g,h){void 0===a&&(a=new c.Plane,b=[new c.Line3,new c.Line3,new c.Line3],d=new c.Vector3,e=new c.Vector3);var i=h||new c.Vector3,j=1/0;if(a.setFromCoplanarPoints(this.a,this.b,this.c),a.projectPoint(g,d),this.containsPoint(d)===!0)i.copy(d);else{b[0].set(this.a,this.b),b[1].set(this.b,this.c),b[2].set(this.c,this.a);for(var k=0;k<b.length;k++){b[k].closestPointToPoint(d,!0,e);var l=d.distanceToSquared(e);l<j&&(j=l,i.copy(e))}}return i}}(),equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}},c.Interpolant=function(a,b,c,d){this.parameterPositions=a,this._cachedIndex=0,this.resultBuffer=void 0!==d?d:new b.constructor(c),this.sampleValues=b,this.valueSize=c},c.Interpolant.prototype={constructor:c.Interpolant,evaluate:function(a){var b=this.parameterPositions,c=this._cachedIndex,d=b[c],e=b[c-1];a:{b:{var f;c:{d:if(!(a<d)){for(var g=c+2;;){if(void 0===d){if(a<e)break d;return c=b.length,this._cachedIndex=c,this.afterEnd_(c-1,a,e)}if(c===g)break;if(e=d,d=b[++c],a<d)break b}f=b.length;break c}{if(a>=e)break a;var h=b[1];a<h&&(c=2,e=h);for(var g=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===g)break;if(d=e,e=b[--c-1],a>=e)break b}f=c,c=0}}for(;c<f;){var i=c+f>>>1;a<b[i]?f=i:c=i+1}if(d=b[c],e=b[c-1],void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(void 0===d)return c=b.length,this._cachedIndex=c,this.afterEnd_(c-1,e,a)}this._cachedIndex=c,this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(a){for(var b=this.resultBuffer,c=this.sampleValues,d=this.valueSize,e=a*d,f=0;f!==d;++f)b[f]=c[e+f];return b},interpolate_:function(a,b,c,d){throw new Error("call to abstract method")},intervalChanged_:function(a,b,c){}},Object.assign(c.Interpolant.prototype,{beforeStart_:c.Interpolant.prototype.copySampleValue_,afterEnd_:c.Interpolant.prototype.copySampleValue_}),c.CubicInterpolant=function(a,b,d,e){c.Interpolant.call(this,a,b,d,e),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0},c.CubicInterpolant.prototype=Object.assign(Object.create(c.Interpolant.prototype),{constructor:c.CubicInterpolant,DefaultSettings_:{endingStart:c.ZeroCurvatureEnding,endingEnd:c.ZeroCurvatureEnding},intervalChanged_:function(a,b,d){var e=this.parameterPositions,f=a-2,g=a+1,h=e[f],i=e[g];if(void 0===h)switch(this.getSettings_().endingStart){case c.ZeroSlopeEnding:f=a,h=2*b-d;break;case c.WrapAroundEnding:f=e.length-2,h=b+e[f]-e[f+1];break;default:f=a,h=d}if(void 0===i)switch(this.getSettings_().endingEnd){case c.ZeroSlopeEnding:g=a,i=2*d-b;break;case c.WrapAroundEnding:g=1,i=d+e[1]-e[0];break;default:g=a-1,i=b}var j=.5*(d-b),k=this.valueSize;this._weightPrev=j/(b-h),this._weightNext=j/(i-d),this._offsetPrev=f*k,this._offsetNext=g*k},interpolate_:function(a,b,c,d){for(var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize,h=a*g,i=h-g,j=this._offsetPrev,k=this._offsetNext,l=this._weightPrev,m=this._weightNext,n=(c-b)/(d-b),o=n*n,p=o*n,q=-l*p+2*l*o-l*n,r=(1+l)*p+(-1.5-2*l)*o+(-.5+l)*n+1,s=(-1-m)*p+(1.5+m)*o+.5*n,t=m*p-m*o,u=0;u!==g;++u)e[u]=q*f[j+u]+r*f[i+u]+s*f[h+u]+t*f[k+u];return e}}),c.DiscreteInterpolant=function(a,b,d,e){c.Interpolant.call(this,a,b,d,e)},c.DiscreteInterpolant.prototype=Object.assign(Object.create(c.Interpolant.prototype),{constructor:c.DiscreteInterpolant,interpolate_:function(a,b,c,d){return this.copySampleValue_(a-1)}}),c.LinearInterpolant=function(a,b,d,e){c.Interpolant.call(this,a,b,d,e)},c.LinearInterpolant.prototype=Object.assign(Object.create(c.Interpolant.prototype),{constructor:c.LinearInterpolant,interpolate_:function(a,b,c,d){for(var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize,h=a*g,i=h-g,j=(c-b)/(d-b),k=1-j,l=0;l!==g;++l)e[l]=f[i+l]*k+f[h+l]*j;return e}}),c.QuaternionLinearInterpolant=function(a,b,d,e){c.Interpolant.call(this,a,b,d,e)},c.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(c.Interpolant.prototype),{constructor:c.QuaternionLinearInterpolant,interpolate_:function(a,b,d,e){for(var f=this.resultBuffer,g=this.sampleValues,h=this.valueSize,i=a*h,j=(d-b)/(e-b),k=i+h;i!==k;i+=4)c.Quaternion.slerpFlat(f,0,g,i-h,g,i,j);return f}}),c.Clock=function(a){this.autoStart=void 0===a||a,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1},c.Clock.prototype={constructor:c.Clock,start:function(){this.startTime=(performance||Date).now(),this.oldTime=this.startTime,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var a=0;if(this.autoStart&&!this.running&&this.start(),this.running){var b=(performance||Date).now();a=(b-this.oldTime)/1e3,this.oldTime=b,this.elapsedTime+=a}return a}},c.EventDispatcher=function(){},Object.assign(c.EventDispatcher.prototype,{addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]),c[a].indexOf(b)===-1&&c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&c[a].indexOf(b)!==-1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners,d=c[a];if(void 0!==d){var e=d.indexOf(b);e!==-1&&d.splice(e,1)}}},dispatchEvent:function(a){if(void 0!==this._listeners){var b=this._listeners,c=b[a.type];if(void 0!==c){a.target=this;var d=[],e=0,f=c.length;for(e=0;e<f;e++)d[e]=c[e];for(e=0;e<f;e++)d[e].call(this,a)}}}}),c.Layers=function(){this.mask=1},c.Layers.prototype={constructor:c.Layers,set:function(a){this.mask=1<<a},enable:function(a){this.mask|=1<<a},toggle:function(a){this.mask^=1<<a},disable:function(a){this.mask&=~(1<<a)},test:function(a){return 0!==(this.mask&a.mask)}},function(a){function b(a,b){return a.distance-b.distance}function c(a,b,d,e){if(a.visible!==!1&&(a.raycast(b,d),e===!0))for(var f=a.children,g=0,h=f.length;g<h;g++)c(f[g],b,d,!0)}a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c),this.near=d||0,this.far=e||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})},a.Raycaster.prototype={constructor:a.Raycaster,linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(b,c){c instanceof a.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(c.matrixWorld),this.ray.direction.set(b.x,b.y,.5).unproject(c).sub(this.ray.origin).normalize()):c instanceof a.OrthographicCamera?(this.ray.origin.set(b.x,b.y,(c.near+c.far)/(c.near-c.far)).unproject(c),this.ray.direction.set(0,0,-1).transformDirection(c.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(a,d){var e=[];return c(a,this,e,d),e.sort(b),e},intersectObjects:function(a,d){var e=[];if(Array.isArray(a)===!1)return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),e;for(var f=0,g=a.length;f<g;f++)c(a[f],this,e,d);return e.sort(b),e}}}(c),c.Object3D=function(){function a(){f.setFromEuler(e,!1)}function b(){e.setFromQuaternion(f,void 0,!1)}Object.defineProperty(this,"id",{value:c.Object3DIdCount++}),this.uuid=c.Math.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=c.Object3D.DefaultUp.clone();var d=new c.Vector3,e=new c.Euler,f=new c.Quaternion,g=new c.Vector3(1,1,1);e.onChange(a),f.onChange(b),Object.defineProperties(this,{position:{enumerable:!0,value:d},rotation:{enumerable:!0,value:e},quaternion:{enumerable:!0,value:f},scale:{enumerable:!0,value:g},modelViewMatrix:{value:new c.Matrix4},normalMatrix:{value:new c.Matrix3}}),this.matrix=new c.Matrix4,this.matrixWorld=new c.Matrix4,this.matrixAutoUpdate=c.Object3D.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new c.Layers,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}},c.Object3D.DefaultUp=new c.Vector3(0,1,0),c.Object3D.DefaultMatrixAutoUpdate=!0,Object.assign(c.Object3D.prototype,c.EventDispatcher.prototype,{applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new c.Quaternion;return function b(c,d){return a.setFromAxisAngle(c,d),this.quaternion.multiply(a),this}}(),rotateX:function(){var a=new c.Vector3(1,0,0);return function b(c){return this.rotateOnAxis(a,c)}}(),rotateY:function(){var a=new c.Vector3(0,1,0);return function b(c){return this.rotateOnAxis(a,c)}}(),rotateZ:function(){var a=new c.Vector3(0,0,1);return function b(c){return this.rotateOnAxis(a,c)}}(),translateOnAxis:function(){var a=new c.Vector3;return function b(c,d){return a.copy(c).applyQuaternion(this.quaternion),this.position.add(a.multiplyScalar(d)),this}}(),translateX:function(){var a=new c.Vector3(1,0,0);return function b(c){return this.translateOnAxis(a,c)}}(),translateY:function(){var a=new c.Vector3(0,1,0);return function b(c){return this.translateOnAxis(a,c)}}(),translateZ:function(){var a=new c.Vector3(0,0,1);return function b(c){return this.translateOnAxis(a,c)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new c.Matrix4;return function b(c){return c.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new c.Matrix4;return function b(c){a.lookAt(c,this.position,this.up),this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(arguments.length>1){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}return a===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",a),this):(a instanceof c.Object3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:"added"}),this.children.push(a)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a),this)},remove:function(a){if(arguments.length>1)for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);var c=this.children.indexOf(a);c!==-1&&(a.parent=null,a.dispatchEvent({type:"removed"}),this.children.splice(c,1))},getObjectById:function(a){return this.getObjectByProperty("id",a)},getObjectByName:function(a){return this.getObjectByProperty("name",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c],f=e.getObjectByProperty(a,b);if(void 0!==f)return f}},getWorldPosition:function(a){var b=a||new c.Vector3;return this.updateMatrixWorld(!0),b.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=new c.Vector3,b=new c.Vector3;return function d(e){var f=e||new c.Quaternion;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(a,f,b),f}}(),getWorldRotation:function(){var a=new c.Quaternion;return function b(d){var e=d||new c.Euler;return this.getWorldQuaternion(a),e.setFromQuaternion(a,this.rotation.order,!1)}}(),getWorldScale:function(){var a=new c.Vector3,b=new c.Quaternion;return function d(e){var f=e||new c.Vector3;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(a,b,f),f}}(),getWorldDirection:function(){var a=new c.Quaternion;return function b(d){var e=d||new c.Vector3;return this.getWorldQuaternion(a),e.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverse(a)},traverseVisible:function(a){if(this.visible!==!1){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverseVisible(a)}},traverseAncestors:function(a){var b=this.parent;null!==b&&(a(b),b.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){this.matrixAutoUpdate===!0&&this.updateMatrix(),this.matrixWorldNeedsUpdate!==!0&&a!==!0||(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0);for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},toJSON:function(a){function b(a){var b=[];for(var c in a){var d=a[c];delete d.metadata,b.push(d)}return b}var c=void 0===a||""===a,d={};c&&(a={geometries:{},materials:{},textures:{},images:{}},d.metadata={version:4.4,type:"Object",generator:"Object3D.toJSON"});var e={};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),"{}"!==JSON.stringify(this.userData)&&(e.userData=this.userData),this.castShadow===!0&&(e.castShadow=!0),this.receiveShadow===!0&&(e.receiveShadow=!0),this.visible===!1&&(e.visible=!1),e.matrix=this.matrix.toArray(),void 0!==this.geometry&&(void 0===a.geometries[this.geometry.uuid]&&(a.geometries[this.geometry.uuid]=this.geometry.toJSON(a)),e.geometry=this.geometry.uuid),void 0!==this.material&&(void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON(a)),e.material=this.material.uuid),this.children.length>0){e.children=[];for(var f=0;f<this.children.length;f++)e.children.push(this.children[f].toJSON(a).object)}if(c){var g=b(a.geometries),h=b(a.materials),i=b(a.textures),j=b(a.images);g.length>0&&(d.geometries=g),h.length>0&&(d.materials=h),i.length>0&&(d.textures=i),j.length>0&&(d.images=j)}return d.object=e,d},clone:function(a){return(new this.constructor).copy(this,a)},copy:function(a,b){if(void 0===b&&(b=!0),this.name=a.name,this.up.copy(a.up),this.position.copy(a.position),this.quaternion.copy(a.quaternion),this.scale.copy(a.scale),this.matrix.copy(a.matrix),this.matrixWorld.copy(a.matrixWorld),this.matrixAutoUpdate=a.matrixAutoUpdate,this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate,this.visible=a.visible,this.castShadow=a.castShadow,this.receiveShadow=a.receiveShadow,this.frustumCulled=a.frustumCulled,this.renderOrder=a.renderOrder,this.userData=JSON.parse(JSON.stringify(a.userData)),b===!0)for(var c=0;c<a.children.length;c++){var d=a.children[c];this.add(d.clone())}return this}}),c.Object3DIdCount=0,c.Face3=function(a,b,d,e,f,g){this.a=a,this.b=b,this.c=d,this.normal=e instanceof c.Vector3?e:new c.Vector3,this.vertexNormals=Array.isArray(e)?e:[],this.color=f instanceof c.Color?f:new c.Color,this.vertexColors=Array.isArray(f)?f:[],this.materialIndex=void 0!==g?g:0},c.Face3.prototype={constructor:c.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a=a.a,this.b=a.b,this.c=a.c,this.normal.copy(a.normal),this.color.copy(a.color),this.materialIndex=a.materialIndex;for(var b=0,c=a.vertexNormals.length;b<c;b++)this.vertexNormals[b]=a.vertexNormals[b].clone();for(var b=0,c=a.vertexColors.length;b<c;b++)this.vertexColors[b]=a.vertexColors[b].clone();return this}},c.BufferAttribute=function(a,b,d){this.uuid=c.Math.generateUUID(),this.array=a,this.itemSize=b,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0,this.normalized=d===!0},c.BufferAttribute.prototype={constructor:c.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(a){a===!0&&this.version++},setDynamic:function(a){return this.dynamic=a,this},copy:function(a){return this.array=new a.array.constructor(a.array),this.itemSize=a.itemSize,this.dynamic=a.dynamic,this},copyAt:function(a,b,c){a*=this.itemSize,c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},copyArray:function(a){return this.array.set(a),this},copyColorsArray:function(a){for(var b=this.array,d=0,e=0,f=a.length;e<f;e++){var g=a[e];void 0===g&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",e),g=new c.Color),b[d++]=g.r,b[d++]=g.g,b[d++]=g.b}return this},copyIndicesArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];b[c++]=f.a,b[c++]=f.b,b[c++]=f.c}return this},copyVector2sArray:function(a){for(var b=this.array,d=0,e=0,f=a.length;e<f;e++){var g=a[e];void 0===g&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",e),g=new c.Vector2),b[d++]=g.x,b[d++]=g.y}return this},copyVector3sArray:function(a){for(var b=this.array,d=0,e=0,f=a.length;e<f;e++){var g=a[e];void 0===g&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",e),g=new c.Vector3),b[d++]=g.x,b[d++]=g.y,b[d++]=g.z}return this},copyVector4sArray:function(a){for(var b=this.array,d=0,e=0,f=a.length;e<f;e++){var g=a[e];void 0===g&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",e),g=new c.Vector4),b[d++]=g.x,b[d++]=g.y,b[d++]=g.z,b[d++]=g.w}return this},set:function(a,b){return void 0===b&&(b=0),this.array.set(a,b),this},getX:function(a){return this.array[a*this.itemSize]},setX:function(a,b){return this.array[a*this.itemSize]=b,this},getY:function(a){return this.array[a*this.itemSize+1]},setY:function(a,b){return this.array[a*this.itemSize+1]=b,this},getZ:function(a){return this.array[a*this.itemSize+2]},setZ:function(a,b){return this.array[a*this.itemSize+2]=b,this},getW:function(a){return this.array[a*this.itemSize+3]},setW:function(a,b){return this.array[a*this.itemSize+3]=b,this},setXY:function(a,b,c){return a*=this.itemSize,this.array[a+0]=b,this.array[a+1]=c,this},setXYZ:function(a,b,c,d){return a*=this.itemSize,this.array[a+0]=b,this.array[a+1]=c,this.array[a+2]=d,this},setXYZW:function(a,b,c,d,e){return a*=this.itemSize,this.array[a+0]=b,this.array[a+1]=c,this.array[a+2]=d,this.array[a+3]=e,this},clone:function(){return(new this.constructor).copy(this)}},c.Int8Attribute=function(a,b){return new c.BufferAttribute(new Int8Array(a),b)},c.Uint8Attribute=function(a,b){return new c.BufferAttribute(new Uint8Array(a),b)},c.Uint8ClampedAttribute=function(a,b){return new c.BufferAttribute(new Uint8ClampedArray(a),b)},c.Int16Attribute=function(a,b){return new c.BufferAttribute(new Int16Array(a),b)},c.Uint16Attribute=function(a,b){return new c.BufferAttribute(new Uint16Array(a),b)},c.Int32Attribute=function(a,b){return new c.BufferAttribute(new Int32Array(a),b)},c.Uint32Attribute=function(a,b){return new c.BufferAttribute(new Uint32Array(a),b)},c.Float32Attribute=function(a,b){return new c.BufferAttribute(new Float32Array(a),b)},c.Float64Attribute=function(a,b){return new c.BufferAttribute(new Float64Array(a),b)},c.DynamicBufferAttribute=function(a,b){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new c.BufferAttribute(a,b).setDynamic(!0)},c.InstancedBufferAttribute=function(a,b,d){c.BufferAttribute.call(this,a,b),this.meshPerAttribute=d||1},c.InstancedBufferAttribute.prototype=Object.create(c.BufferAttribute.prototype),c.InstancedBufferAttribute.prototype.constructor=c.InstancedBufferAttribute,c.InstancedBufferAttribute.prototype.copy=function(a){return c.BufferAttribute.prototype.copy.call(this,a),this.meshPerAttribute=a.meshPerAttribute,this},c.InterleavedBuffer=function(a,b){this.uuid=c.Math.generateUUID(),this.array=a,this.stride=b,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0},c.InterleavedBuffer.prototype={constructor:c.InterleavedBuffer,get length(){return this.array.length},get count(){return this.array.length/this.stride},set needsUpdate(a){a===!0&&this.version++},setDynamic:function(a){return this.dynamic=a,this},copy:function(a){return this.array=new a.array.constructor(a.array),this.stride=a.stride,this.dynamic=a.dynamic,this},copyAt:function(a,b,c){a*=this.stride,c*=b.stride;for(var d=0,e=this.stride;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,b){return void 0===b&&(b=0),this.array.set(a,b),this},clone:function(){return(new this.constructor).copy(this)}},c.InstancedInterleavedBuffer=function(a,b,d){c.InterleavedBuffer.call(this,a,b),this.meshPerAttribute=d||1},c.InstancedInterleavedBuffer.prototype=Object.create(c.InterleavedBuffer.prototype),c.InstancedInterleavedBuffer.prototype.constructor=c.InstancedInterleavedBuffer,c.InstancedInterleavedBuffer.prototype.copy=function(a){return c.InterleavedBuffer.prototype.copy.call(this,a),this.meshPerAttribute=a.meshPerAttribute,this},c.InterleavedBufferAttribute=function(a,b,d,e){this.uuid=c.Math.generateUUID(),this.data=a,this.itemSize=b,this.offset=d,this.normalized=e===!0},c.InterleavedBufferAttribute.prototype={constructor:c.InterleavedBufferAttribute,get length(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length},get count(){return this.data.count},get array(){return this.data.array},setX:function(a,b){return this.data.array[a*this.data.stride+this.offset]=b,this},setY:function(a,b){return this.data.array[a*this.data.stride+this.offset+1]=b,this},setZ:function(a,b){return this.data.array[a*this.data.stride+this.offset+2]=b,this},setW:function(a,b){return this.data.array[a*this.data.stride+this.offset+3]=b,this},getX:function(a){return this.data.array[a*this.data.stride+this.offset]},getY:function(a){return this.data.array[a*this.data.stride+this.offset+1]},getZ:function(a){return this.data.array[a*this.data.stride+this.offset+2]},getW:function(a){return this.data.array[a*this.data.stride+this.offset+3]},setXY:function(a,b,c){return a=a*this.data.stride+this.offset,this.data.array[a+0]=b,this.data.array[a+1]=c,this},setXYZ:function(a,b,c,d){return a=a*this.data.stride+this.offset,this.data.array[a+0]=b,this.data.array[a+1]=c,this.data.array[a+2]=d,this},setXYZW:function(a,b,c,d,e){return a=a*this.data.stride+this.offset,this.data.array[a+0]=b,this.data.array[a+1]=c,this.data.array[a+2]=d,this.data.array[a+3]=e,this}},c.Geometry=function(){Object.defineProperty(this,"id",{value:c.GeometryIdCount++}),this.uuid=c.Math.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(c.Geometry.prototype,c.EventDispatcher.prototype,{
applyMatrix:function(a){for(var b=(new c.Matrix3).getNormalMatrix(a),d=0,e=this.vertices.length;d<e;d++){var f=this.vertices[d];f.applyMatrix4(a)}for(var d=0,e=this.faces.length;d<e;d++){var g=this.faces[d];g.normal.applyMatrix3(b).normalize();for(var h=0,i=g.vertexNormals.length;h<i;h++)g.vertexNormals[h].applyMatrix3(b).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.makeRotationX(d),this.applyMatrix(a),this}}(),rotateY:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.makeRotationY(d),this.applyMatrix(a),this}}(),rotateZ:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.makeRotationZ(d),this.applyMatrix(a),this}}(),translate:function(){var a;return function b(d,e,f){return void 0===a&&(a=new c.Matrix4),a.makeTranslation(d,e,f),this.applyMatrix(a),this}}(),scale:function(){var a;return function b(d,e,f){return void 0===a&&(a=new c.Matrix4),a.makeScale(d,e,f),this.applyMatrix(a),this}}(),lookAt:function(){var a;return function b(d){void 0===a&&(a=new c.Object3D),a.lookAt(d),a.updateMatrix(),this.applyMatrix(a.matrix)}}(),fromBufferGeometry:function(a){function b(a,b,e,f){var g=void 0!==h?[l[a].clone(),l[b].clone(),l[e].clone()]:[],o=void 0!==i?[d.colors[a].clone(),d.colors[b].clone(),d.colors[e].clone()]:[],p=new c.Face3(a,b,e,g,o,f);d.faces.push(p),void 0!==j&&d.faceVertexUvs[0].push([m[a].clone(),m[b].clone(),m[e].clone()]),void 0!==k&&d.faceVertexUvs[1].push([n[a].clone(),n[b].clone(),n[e].clone()])}var d=this,e=null!==a.index?a.index.array:void 0,f=a.attributes,g=f.position.array,h=void 0!==f.normal?f.normal.array:void 0,i=void 0!==f.color?f.color.array:void 0,j=void 0!==f.uv?f.uv.array:void 0,k=void 0!==f.uv2?f.uv2.array:void 0;void 0!==k&&(this.faceVertexUvs[1]=[]);for(var l=[],m=[],n=[],o=0,p=0;o<g.length;o+=3,p+=2)d.vertices.push(new c.Vector3(g[o],g[o+1],g[o+2])),void 0!==h&&l.push(new c.Vector3(h[o],h[o+1],h[o+2])),void 0!==i&&d.colors.push(new c.Color(i[o],i[o+1],i[o+2])),void 0!==j&&m.push(new c.Vector2(j[p],j[p+1])),void 0!==k&&n.push(new c.Vector2(k[p],k[p+1]));if(void 0!==e){var q=a.groups;if(q.length>0)for(var o=0;o<q.length;o++)for(var r=q[o],s=r.start,t=r.count,p=s,u=s+t;p<u;p+=3)b(e[p],e[p+1],e[p+2],r.materialIndex);else for(var o=0;o<e.length;o+=3)b(e[o],e[o+1],e[o+2])}else for(var o=0;o<g.length/3;o+=3)b(o,o+1,o+2);return this.computeFaceNormals(),null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone()),null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();return this.translate(a.x,a.y,a.z),a},normalize:function(){this.computeBoundingSphere();var a=this.boundingSphere.center,b=this.boundingSphere.radius,d=0===b?1:1/b,e=new c.Matrix4;return e.set(d,0,0,-d*a.x,0,d,0,-d*a.y,0,0,d,-d*a.z,0,0,0,1),this.applyMatrix(e),this},computeFaceNormals:function(){for(var a=new c.Vector3,b=new c.Vector3,d=0,e=this.faces.length;d<e;d++){var f=this.faces[d],g=this.vertices[f.a],h=this.vertices[f.b],i=this.vertices[f.c];a.subVectors(i,h),b.subVectors(g,h),a.cross(b),a.normalize(),f.normal.copy(a)}},computeVertexNormals:function(a){void 0===a&&(a=!0);var b,d,e,f,g,h;for(h=new Array(this.vertices.length),b=0,d=this.vertices.length;b<d;b++)h[b]=new c.Vector3;if(a){var i,j,k,l=new c.Vector3,m=new c.Vector3;for(e=0,f=this.faces.length;e<f;e++)g=this.faces[e],i=this.vertices[g.a],j=this.vertices[g.b],k=this.vertices[g.c],l.subVectors(k,j),m.subVectors(i,j),l.cross(m),h[g.a].add(l),h[g.b].add(l),h[g.c].add(l)}else for(e=0,f=this.faces.length;e<f;e++)g=this.faces[e],h[g.a].add(g.normal),h[g.b].add(g.normal),h[g.c].add(g.normal);for(b=0,d=this.vertices.length;b<d;b++)h[b].normalize();for(e=0,f=this.faces.length;e<f;e++){g=this.faces[e];var n=g.vertexNormals;3===n.length?(n[0].copy(h[g.a]),n[1].copy(h[g.b]),n[2].copy(h[g.c])):(n[0]=h[g.a].clone(),n[1]=h[g.b].clone(),n[2]=h[g.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var a,b,d,e,f;for(d=0,e=this.faces.length;d<e;d++)for(f=this.faces[d],f.__originalFaceNormal?f.__originalFaceNormal.copy(f.normal):f.__originalFaceNormal=f.normal.clone(),f.__originalVertexNormals||(f.__originalVertexNormals=[]),a=0,b=f.vertexNormals.length;a<b;a++)f.__originalVertexNormals[a]?f.__originalVertexNormals[a].copy(f.vertexNormals[a]):f.__originalVertexNormals[a]=f.vertexNormals[a].clone();var g=new c.Geometry;for(g.faces=this.faces,a=0,b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={},this.morphNormals[a].faceNormals=[],this.morphNormals[a].vertexNormals=[];var h=this.morphNormals[a].faceNormals,i=this.morphNormals[a].vertexNormals,j,k;for(d=0,e=this.faces.length;d<e;d++)j=new c.Vector3,k={a:new c.Vector3,b:new c.Vector3,c:new c.Vector3},h.push(j),i.push(k)}var l=this.morphNormals[a];g.vertices=this.morphTargets[a].vertices,g.computeFaceNormals(),g.computeVertexNormals();var j,k;for(d=0,e=this.faces.length;d<e;d++)f=this.faces[d],j=l.faceNormals[d],k=l.vertexNormals[d],j.copy(f.normal),k.a.copy(f.vertexNormals[0]),k.b.copy(f.vertexNormals[1]),k.c.copy(f.vertexNormals[2])}for(d=0,e=this.faces.length;d<e;d++)f=this.faces[d],f.normal=f.__originalFaceNormal,f.vertexNormals=f.__originalVertexNormals},computeTangents:function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)c>0&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new c.Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new c.Sphere),this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,d){if(a instanceof c.Geometry==!1)return void console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",a);var e,f=this.vertices.length,g=this.vertices,h=a.vertices,i=this.faces,j=a.faces,k=this.faceVertexUvs[0],l=a.faceVertexUvs[0];void 0===d&&(d=0),void 0!==b&&(e=(new c.Matrix3).getNormalMatrix(b));for(var m=0,n=h.length;m<n;m++){var o=h[m],p=o.clone();void 0!==b&&p.applyMatrix4(b),g.push(p)}for(m=0,n=j.length;m<n;m++){var q=j[m],r,s,t,u=q.vertexNormals,v=q.vertexColors;r=new c.Face3(q.a+f,q.b+f,q.c+f),r.normal.copy(q.normal),void 0!==e&&r.normal.applyMatrix3(e).normalize();for(var w=0,x=u.length;w<x;w++)s=u[w].clone(),void 0!==e&&s.applyMatrix3(e).normalize(),r.vertexNormals.push(s);r.color.copy(q.color);for(var w=0,x=v.length;w<x;w++)t=v[w],r.vertexColors.push(t.clone());r.materialIndex=q.materialIndex+d,i.push(r)}for(m=0,n=l.length;m<n;m++){var y=l[m],z=[];if(void 0!==y){for(var w=0,x=y.length;w<x;w++)z.push(y[w].clone());k.push(z)}}},mergeMesh:function(a){return a instanceof c.Mesh==!1?void console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",a):(a.matrixAutoUpdate&&a.updateMatrix(),void this.merge(a.geometry,a.matrix))},mergeVertices:function(){var a={},b=[],c=[],d,e,f=4,g=Math.pow(10,f),h,i,j,k,l,m;for(h=0,i=this.vertices.length;h<i;h++)d=this.vertices[h],e=Math.round(d.x*g)+"_"+Math.round(d.y*g)+"_"+Math.round(d.z*g),void 0===a[e]?(a[e]=h,b.push(this.vertices[h]),c[h]=b.length-1):c[h]=c[a[e]];var n=[];for(h=0,i=this.faces.length;h<i;h++){j=this.faces[h],j.a=c[j.a],j.b=c[j.b],j.c=c[j.c],k=[j.a,j.b,j.c];for(var o=-1,p=0;p<3;p++)if(k[p]===k[(p+1)%3]){o=p,n.push(h);break}}for(h=n.length-1;h>=0;h--){var q=n[h];for(this.faces.splice(q,1),l=0,m=this.faceVertexUvs.length;l<m;l++)this.faceVertexUvs[l].splice(q,1)}var r=this.vertices.length-b.length;return this.vertices=b,r},sortFacesByMaterialIndex:function(){function a(a,b){return a.materialIndex-b.materialIndex}for(var b=this.faces,c=b.length,d=0;d<c;d++)b[d]._id=d;b.sort(a);var e=this.faceVertexUvs[0],f=this.faceVertexUvs[1],g,h;e&&e.length===c&&(g=[]),f&&f.length===c&&(h=[]);for(var d=0;d<c;d++){var i=b[d]._id;g&&g.push(e[i]),h&&h.push(f[i])}g&&(this.faceVertexUvs[0]=g),h&&(this.faceVertexUvs[1]=h)},toJSON:function(){function a(a,b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();return void 0!==m[b]?m[b]:(m[b]=l.length/3,l.push(a.x,a.y,a.z),m[b])}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();return void 0!==o[b]?o[b]:(o[b]=n.length,n.push(a.getHex()),o[b])}function d(a){var b=a.x.toString()+a.y.toString();return void 0!==q[b]?q[b]:(q[b]=p.length/2,p.push(a.x,a.y),q[b])}var e={metadata:{version:4.4,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var f=this.parameters;for(var g in f)void 0!==f[g]&&(e[g]=f[g]);return e}for(var h=[],i=0;i<this.vertices.length;i++){var j=this.vertices[i];h.push(j.x,j.y,j.z)}for(var k=[],l=[],m={},n=[],o={},p=[],q={},i=0;i<this.faces.length;i++){var r=this.faces[i],s=!0,t=!1,u=void 0!==this.faceVertexUvs[0][i],v=r.normal.length()>0,w=r.vertexNormals.length>0,x=1!==r.color.r||1!==r.color.g||1!==r.color.b,y=r.vertexColors.length>0,z=0;if(z=a(z,0,0),z=a(z,1,s),z=a(z,2,t),z=a(z,3,u),z=a(z,4,v),z=a(z,5,w),z=a(z,6,x),z=a(z,7,y),k.push(z),k.push(r.a,r.b,r.c),k.push(r.materialIndex),u){var A=this.faceVertexUvs[0][i];k.push(d(A[0]),d(A[1]),d(A[2]))}if(v&&k.push(b(r.normal)),w){var B=r.vertexNormals;k.push(b(B[0]),b(B[1]),b(B[2]))}if(x&&k.push(c(r.color)),y){var C=r.vertexColors;k.push(c(C[0]),c(C[1]),c(C[2]))}}return e.data={},e.data.vertices=h,e.data.normals=l,n.length>0&&(e.data.colors=n),p.length>0&&(e.data.uvs=[p]),e.data.faces=k,e},clone:function(){return(new c.Geometry).copy(this)},copy:function(a){this.vertices=[],this.faces=[],this.faceVertexUvs=[[]];for(var b=a.vertices,c=0,d=b.length;c<d;c++)this.vertices.push(b[c].clone());for(var e=a.faces,c=0,d=e.length;c<d;c++)this.faces.push(e[c].clone());for(var c=0,d=a.faceVertexUvs.length;c<d;c++){var f=a.faceVertexUvs[c];void 0===this.faceVertexUvs[c]&&(this.faceVertexUvs[c]=[]);for(var g=0,h=f.length;g<h;g++){for(var i=f[g],j=[],k=0,l=i.length;k<l;k++){var m=i[k];j.push(m.clone())}this.faceVertexUvs[c].push(j)}}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),c.GeometryIdCount=0,c.DirectGeometry=function(){Object.defineProperty(this,"id",{value:c.GeometryIdCount++}),this.uuid=c.Math.generateUUID(),this.name="",this.type="DirectGeometry",this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(c.DirectGeometry.prototype,c.EventDispatcher.prototype,{computeBoundingBox:c.Geometry.prototype.computeBoundingBox,computeBoundingSphere:c.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.")},computeVertexNormals:function(){console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.")},computeGroups:function(a){for(var b,c=[],d,e=a.faces,f=0;f<e.length;f++){var g=e[f];g.materialIndex!==d&&(d=g.materialIndex,void 0!==b&&(b.count=3*f-b.start,c.push(b)),b={start:3*f,materialIndex:d})}void 0!==b&&(b.count=3*f-b.start,c.push(b)),this.groups=c},fromGeometry:function(a){var b=a.faces,d=a.vertices,e=a.faceVertexUvs,f=e[0]&&e[0].length>0,g=e[1]&&e[1].length>0,h=a.morphTargets,i=h.length,j;if(i>0){j=[];for(var k=0;k<i;k++)j[k]=[];this.morphTargets.position=j}var l=a.morphNormals,m=l.length,n;if(m>0){n=[];for(var k=0;k<m;k++)n[k]=[];this.morphTargets.normal=n}for(var o=a.skinIndices,p=a.skinWeights,q=o.length===d.length,r=p.length===d.length,k=0;k<b.length;k++){var s=b[k];this.vertices.push(d[s.a],d[s.b],d[s.c]);var t=s.vertexNormals;if(3===t.length)this.normals.push(t[0],t[1],t[2]);else{var u=s.normal;this.normals.push(u,u,u)}var v=s.vertexColors;if(3===v.length)this.colors.push(v[0],v[1],v[2]);else{var w=s.color;this.colors.push(w,w,w)}if(f===!0){var x=e[0][k];void 0!==x?this.uvs.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",k),this.uvs.push(new c.Vector2,new c.Vector2,new c.Vector2))}if(g===!0){var x=e[1][k];void 0!==x?this.uvs2.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",k),this.uvs2.push(new c.Vector2,new c.Vector2,new c.Vector2))}for(var y=0;y<i;y++){var z=h[y].vertices;j[y].push(z[s.a],z[s.b],z[s.c])}for(var y=0;y<m;y++){var A=l[y].vertexNormals[k];n[y].push(A.a,A.b,A.c)}q&&this.skinIndices.push(o[s.a],o[s.b],o[s.c]),r&&this.skinWeights.push(p[s.a],p[s.b],p[s.c])}return this.computeGroups(a),this.verticesNeedUpdate=a.verticesNeedUpdate,this.normalsNeedUpdate=a.normalsNeedUpdate,this.colorsNeedUpdate=a.colorsNeedUpdate,this.uvsNeedUpdate=a.uvsNeedUpdate,this.groupsNeedUpdate=a.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),c.BufferGeometry=function(){Object.defineProperty(this,"id",{value:c.GeometryIdCount++}),this.uuid=c.Math.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}},Object.assign(c.BufferGeometry.prototype,c.EventDispatcher.prototype,{getIndex:function(){return this.index},setIndex:function(a){this.index=a},addAttribute:function(a,b){return b instanceof c.BufferAttribute==!1&&b instanceof c.InterleavedBufferAttribute==!1?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),void this.addAttribute(a,new c.BufferAttribute(arguments[1],arguments[2]))):"index"===a?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),void this.setIndex(b)):(this.attributes[a]=b,this)},getAttribute:function(a){return this.attributes[a]},removeAttribute:function(a){return delete this.attributes[a],this},addGroup:function(a,b,c){this.groups.push({start:a,count:b,materialIndex:void 0!==c?c:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(a,b){this.drawRange.start=a,this.drawRange.count=b},applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.applyToVector3Array(b.array),b.needsUpdate=!0);var d=this.attributes.normal;if(void 0!==d){var e=(new c.Matrix3).getNormalMatrix(a);e.applyToVector3Array(d.array),d.needsUpdate=!0}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.makeRotationX(d),this.applyMatrix(a),this}}(),rotateY:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.makeRotationY(d),this.applyMatrix(a),this}}(),rotateZ:function(){var a;return function b(d){return void 0===a&&(a=new c.Matrix4),a.makeRotationZ(d),this.applyMatrix(a),this}}(),translate:function(){var a;return function b(d,e,f){return void 0===a&&(a=new c.Matrix4),a.makeTranslation(d,e,f),this.applyMatrix(a),this}}(),scale:function(){var a;return function b(d,e,f){return void 0===a&&(a=new c.Matrix4),a.makeScale(d,e,f),this.applyMatrix(a),this}}(),lookAt:function(){var a;return function b(d){void 0===a&&(a=new c.Object3D),a.lookAt(d),a.updateMatrix(),this.applyMatrix(a.matrix)}}(),center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();return this.translate(a.x,a.y,a.z),a},setFromObject:function(a){var b=a.geometry;if(a instanceof c.Points||a instanceof c.Line){var d=new c.Float32Attribute(3*b.vertices.length,3),e=new c.Float32Attribute(3*b.colors.length,3);if(this.addAttribute("position",d.copyVector3sArray(b.vertices)),this.addAttribute("color",e.copyColorsArray(b.colors)),b.lineDistances&&b.lineDistances.length===b.vertices.length){var f=new c.Float32Attribute(b.lineDistances.length,1);this.addAttribute("lineDistance",f.copyArray(b.lineDistances))}null!==b.boundingSphere&&(this.boundingSphere=b.boundingSphere.clone()),null!==b.boundingBox&&(this.boundingBox=b.boundingBox.clone())}else a instanceof c.Mesh&&b instanceof c.Geometry&&this.fromGeometry(b);return this},updateFromObject:function(a){var b=a.geometry;if(a instanceof c.Mesh){var d=b.__directGeometry;if(void 0===d||b.elementsNeedUpdate===!0)return this.fromGeometry(b);d.verticesNeedUpdate=b.verticesNeedUpdate||b.elementsNeedUpdate,d.normalsNeedUpdate=b.normalsNeedUpdate||b.elementsNeedUpdate,d.colorsNeedUpdate=b.colorsNeedUpdate||b.elementsNeedUpdate,d.uvsNeedUpdate=b.uvsNeedUpdate||b.elementsNeedUpdate,d.groupsNeedUpdate=b.groupsNeedUpdate||b.elementsNeedUpdate,b.elementsNeedUpdate=!1,b.verticesNeedUpdate=!1,b.normalsNeedUpdate=!1,b.colorsNeedUpdate=!1,b.uvsNeedUpdate=!1,b.groupsNeedUpdate=!1,b=d}var e;return b.verticesNeedUpdate===!0&&(e=this.attributes.position,void 0!==e&&(e.copyVector3sArray(b.vertices),e.needsUpdate=!0),b.verticesNeedUpdate=!1),b.normalsNeedUpdate===!0&&(e=this.attributes.normal,void 0!==e&&(e.copyVector3sArray(b.normals),e.needsUpdate=!0),b.normalsNeedUpdate=!1),b.colorsNeedUpdate===!0&&(e=this.attributes.color,void 0!==e&&(e.copyColorsArray(b.colors),e.needsUpdate=!0),b.colorsNeedUpdate=!1),b.uvsNeedUpdate&&(e=this.attributes.uv,void 0!==e&&(e.copyVector2sArray(b.uvs),e.needsUpdate=!0),b.uvsNeedUpdate=!1),b.lineDistancesNeedUpdate&&(e=this.attributes.lineDistance,void 0!==e&&(e.copyArray(b.lineDistances),e.needsUpdate=!0),b.lineDistancesNeedUpdate=!1),b.groupsNeedUpdate&&(b.computeGroups(a.geometry),this.groups=b.groups,b.groupsNeedUpdate=!1),this},fromGeometry:function(a){return a.__directGeometry=(new c.DirectGeometry).fromGeometry(a),this.fromDirectGeometry(a.__directGeometry)},fromDirectGeometry:function(a){var b=new Float32Array(3*a.vertices.length);if(this.addAttribute("position",new c.BufferAttribute(b,3).copyVector3sArray(a.vertices)),a.normals.length>0){var d=new Float32Array(3*a.normals.length);this.addAttribute("normal",new c.BufferAttribute(d,3).copyVector3sArray(a.normals))}if(a.colors.length>0){var e=new Float32Array(3*a.colors.length);this.addAttribute("color",new c.BufferAttribute(e,3).copyColorsArray(a.colors))}if(a.uvs.length>0){var f=new Float32Array(2*a.uvs.length);this.addAttribute("uv",new c.BufferAttribute(f,2).copyVector2sArray(a.uvs))}if(a.uvs2.length>0){var g=new Float32Array(2*a.uvs2.length);this.addAttribute("uv2",new c.BufferAttribute(g,2).copyVector2sArray(a.uvs2))}if(a.indices.length>0){var h=a.vertices.length>65535?Uint32Array:Uint16Array,i=new h(3*a.indices.length);this.setIndex(new c.BufferAttribute(i,1).copyIndicesArray(a.indices))}this.groups=a.groups;for(var j in a.morphTargets){for(var k=[],l=a.morphTargets[j],m=0,n=l.length;m<n;m++){var o=l[m],p=new c.Float32Attribute(3*o.length,3);k.push(p.copyVector3sArray(o))}this.morphAttributes[j]=k}if(a.skinIndices.length>0){var q=new c.Float32Attribute(4*a.skinIndices.length,4);this.addAttribute("skinIndex",q.copyVector4sArray(a.skinIndices))}if(a.skinWeights.length>0){var r=new c.Float32Attribute(4*a.skinWeights.length,4);this.addAttribute("skinWeight",r.copyVector4sArray(a.skinWeights))}return null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone()),null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new c.Box3);var a=this.attributes.position.array;void 0!==a?this.boundingBox.setFromArray(a):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var a=new c.Box3,b=new c.Vector3;return function d(){null===this.boundingSphere&&(this.boundingSphere=new c.Sphere);var d=this.attributes.position;if(d){var e=d.array,f=this.boundingSphere.center;a.setFromArray(e),a.center(f);for(var g=0,h=0,i=e.length;h<i;h+=3)b.fromArray(e,h),g=Math.max(g,f.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(g),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.index,b=this.attributes,d=this.groups;if(b.position){var e=b.position.array;if(void 0===b.normal)this.addAttribute("normal",new c.BufferAttribute(new Float32Array(e.length),3));else for(var f=b.normal.array,g=0,h=f.length;g<h;g++)f[g]=0;var i=b.normal.array,j,k,l,m=new c.Vector3,n=new c.Vector3,o=new c.Vector3,p=new c.Vector3,q=new c.Vector3;if(a){var r=a.array;0===d.length&&this.addGroup(0,r.length);for(var s=0,t=d.length;s<t;++s)for(var u=d[s],v=u.start,w=u.count,g=v,h=v+w;g<h;g+=3)j=3*r[g+0],k=3*r[g+1],l=3*r[g+2],m.fromArray(e,j),n.fromArray(e,k),o.fromArray(e,l),p.subVectors(o,n),q.subVectors(m,n),p.cross(q),i[j]+=p.x,i[j+1]+=p.y,i[j+2]+=p.z,i[k]+=p.x,i[k+1]+=p.y,i[k+2]+=p.z,i[l]+=p.x,i[l+1]+=p.y,i[l+2]+=p.z}else for(var g=0,h=e.length;g<h;g+=9)m.fromArray(e,g),n.fromArray(e,g+3),o.fromArray(e,g+6),p.subVectors(o,n),q.subVectors(m,n),p.cross(q),i[g]=p.x,i[g+1]=p.y,i[g+2]=p.z,i[g+3]=p.x,i[g+4]=p.y,i[g+5]=p.z,i[g+6]=p.x,i[g+7]=p.y,i[g+8]=p.z;this.normalizeNormals(),b.normal.needsUpdate=!0}},merge:function(a,b){if(a instanceof c.BufferGeometry==!1)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",a);void 0===b&&(b=0);var d=this.attributes;for(var e in d)if(void 0!==a.attributes[e])for(var f=d[e],g=f.array,h=a.attributes[e],i=h.array,j=h.itemSize,k=0,l=j*b;k<i.length;k++,l++)g[l]=i[k];return this},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e,f=0,g=a.length;f<g;f+=3)b=a[f],c=a[f+1],d=a[f+2],e=1/Math.sqrt(b*b+c*c+d*d),a[f]*=e,a[f+1]*=e,a[f+2]*=e},toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var a=new c.BufferGeometry,b=this.index.array,d=this.attributes;for(var e in d){for(var f=d[e],g=f.array,h=f.itemSize,i=new g.constructor(b.length*h),j=0,k=0,l=0,m=b.length;l<m;l++){j=b[l]*h;for(var n=0;n<h;n++)i[k++]=g[j++]}a.addAttribute(e,new c.BufferAttribute(i,h))}return a},toJSON:function(){var a={metadata:{version:4.4,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(a.uuid=this.uuid,a.type=this.type,""!==this.name&&(a.name=this.name),void 0!==this.parameters){var b=this.parameters;for(var c in b)void 0!==b[c]&&(a[c]=b[c]);return a}a.data={attributes:{}};var d=this.index;if(null!==d){var e=Array.prototype.slice.call(d.array);a.data.index={type:d.array.constructor.name,array:e}}var f=this.attributes;for(var c in f){var g=f[c],e=Array.prototype.slice.call(g.array);a.data.attributes[c]={itemSize:g.itemSize,type:g.array.constructor.name,array:e,normalized:g.normalized}}var h=this.groups;h.length>0&&(a.data.groups=JSON.parse(JSON.stringify(h)));var i=this.boundingSphere;return null!==i&&(a.data.boundingSphere={center:i.center.toArray(),radius:i.radius}),a},clone:function(){return(new c.BufferGeometry).copy(this)},copy:function(a){var b=a.index;null!==b&&this.setIndex(b.clone());var c=a.attributes;for(var d in c){var e=c[d];this.addAttribute(d,e.clone())}for(var f=a.groups,g=0,h=f.length;g<h;g++){var i=f[g];this.addGroup(i.start,i.count,i.materialIndex)}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),c.BufferGeometry.MaxIndex=65535,c.InstancedBufferGeometry=function(){c.BufferGeometry.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0},c.InstancedBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.InstancedBufferGeometry.prototype.constructor=c.InstancedBufferGeometry,c.InstancedBufferGeometry.prototype.addGroup=function(a,b,c){this.groups.push({start:a,count:b,instances:c})},c.InstancedBufferGeometry.prototype.copy=function(a){var b=a.index;null!==b&&this.setIndex(b.clone());var c=a.attributes;for(var d in c){var e=c[d];this.addAttribute(d,e.clone())}for(var f=a.groups,g=0,h=f.length;g<h;g++){var i=f[g];this.addGroup(i.start,i.count,i.instances)}return this},c.Uniform=function(a){"string"==typeof a&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),a=arguments[1]),this.value=a,this.dynamic=!1},c.Uniform.prototype={constructor:c.Uniform,onUpdate:function(a){return this.dynamic=!0,this.onUpdateCallback=a,this}},c.AnimationAction=function(){throw new Error("THREE.AnimationAction: Use mixer.clipAction for construction.")},c.AnimationAction._new=function d(a,b,e){this._mixer=a,this._clip=b,this._localRoot=e||null;for(var f=b.tracks,g=f.length,h=new Array(g),i={endingStart:c.ZeroCurvatureEnding,endingEnd:c.ZeroCurvatureEnding},j=0;j!==g;++j){var k=f[j].createInterpolant(null);h[j]=k,k.settings=i}this._interpolantSettings=i,this._interpolants=h,this._propertyBindings=new Array(g),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=c.LoopRepeat,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0},c.AnimationAction._new.prototype={constructor:c.AnimationAction._new,play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){var a=this._startTime;return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(a){return this._startTime=a,this},setLoop:function(a,b){return this.loop=a,this.repetitions=b,this},setEffectiveWeight:function(a){return this.weight=a,this._effectiveWeight=this.enabled?a:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(a){return this._scheduleFading(a,0,1)},fadeOut:function(a){return this._scheduleFading(a,1,0)},crossFadeFrom:function(a,b,c){var d=this._mixer;if(a.fadeOut(b),this.fadeIn(b),c){var e=this._clip.duration,f=a._clip.duration,g=f/e,h=e/f;a.warp(1,g,b),this.warp(h,1,b)}return this},crossFadeTo:function(a,b,c){return a.crossFadeFrom(this,b,c)},stopFading:function(){var a=this._weightInterpolant;return null!==a&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(a)),this},setEffectiveTimeScale:function(a){return this.timeScale=a,this._effectiveTimeScale=this.paused?0:a,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(a){return this.timeScale=this._clip.duration/a,this.stopWarping()},syncWith:function(a){return this.time=a.time,this.timeScale=a.timeScale,this.stopWarping()},halt:function(a){return this.warp(this._effectiveTimeScale,0,a)},warp:function(a,b,c){var d=this._mixer,e=d.time,f=this._timeScaleInterpolant,g=this.timeScale;null===f&&(f=d._lendControlInterpolant(),this._timeScaleInterpolant=f);var h=f.parameterPositions,i=f.sampleValues;return h[0]=e,h[1]=e+c,i[0]=a/g,i[1]=b/g,this},stopWarping:function(){var a=this._timeScaleInterpolant;return null!==a&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(a,b,c,d){var e=this._startTime;if(null!==e){var f=(a-e)*c;if(f<0||0===c)return;this._startTime=null,b=c*f}b*=this._updateTimeScale(a);var g=this._updateTime(b),h=this._updateWeight(a);if(h>0)for(var i=this._interpolants,j=this._propertyBindings,k=0,l=i.length;k!==l;++k)i[k].evaluate(g),j[k].accumulate(d,h)},_updateWeight:function(a){var b=0;if(this.enabled){b=this.weight;var c=this._weightInterpolant;if(null!==c){var d=c.evaluate(a)[0];b*=d,a>c.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=b,b},_updateTimeScale:function(a){var b=0;if(!this.paused){b=this.timeScale;var c=this._timeScaleInterpolant;if(null!==c){var d=c.evaluate(a)[0];b*=d,a>c.parameterPositions[1]&&(this.stopWarping(),0===b?this.paused=!0:this.timeScale=b)}}return this._effectiveTimeScale=b,b},_updateTime:function(a){var b=this.time+a;if(0===a)return b;var d=this._clip.duration,e=this.loop,f=this._loopCount;if(e===c.LoopOnce){f===-1&&(this.loopCount=0,this._setEndings(!0,!0,!1));a:{if(b>=d)b=d;else{if(!(b<0))break a;b=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:a<0?-1:1})}}else{var g=e===c.LoopPingPong;if(f===-1&&(a>=0?(f=0,this._setEndings(!0,0===this.repetitions,g)):this._setEndings(0===this.repetitions,!0,g)),b>=d||b<0){var h=Math.floor(b/d);b-=d*h,f+=Math.abs(h);var i=this.repetitions-f;if(i<0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,b=a>0?d:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:a>0?1:-1});else{if(0===i){var j=a<0;this._setEndings(j,!j,g)}else this._setEndings(!1,!1,g);this._loopCount=f,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:h})}}if(g&&1===(1&f))return this.time=b,d-b}return this.time=b,b},_setEndings:function(a,b,d){var e=this._interpolantSettings;d?(e.endingStart=c.ZeroSlopeEnding,e.endingEnd=c.ZeroSlopeEnding):(a?e.endingStart=this.zeroSlopeAtStart?c.ZeroSlopeEnding:c.ZeroCurvatureEnding:e.endingStart=c.WrapAroundEnding,b?e.endingEnd=this.zeroSlopeAtEnd?c.ZeroSlopeEnding:c.ZeroCurvatureEnding:e.endingEnd=c.WrapAroundEnding)},_scheduleFading:function(a,b,c){var d=this._mixer,e=d.time,f=this._weightInterpolant;null===f&&(f=d._lendControlInterpolant(),this._weightInterpolant=f);var g=f.parameterPositions,h=f.sampleValues;return g[0]=e,h[0]=b,g[1]=e+a,h[1]=c,this}},c.AnimationClip=function(a,b,d){this.name=a,this.tracks=d,this.duration=void 0!==b?b:-1,this.uuid=c.Math.generateUUID(),this.duration<0&&this.resetDuration(),this.trim(),this.optimize()},c.AnimationClip.prototype={constructor:c.AnimationClip,resetDuration:function(){for(var a=this.tracks,b=0,c=0,d=a.length;c!==d;++c){var e=this.tracks[c];b=Math.max(b,e.times[e.times.length-1])}this.duration=b},trim:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this},optimize:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this}},Object.assign(c.AnimationClip,{parse:function(a){for(var b=[],d=a.tracks,e=1/(a.fps||1),f=0,g=d.length;f!==g;++f)b.push(c.KeyframeTrack.parse(d[f]).scale(e));return new c.AnimationClip(a.name,a.duration,b)},toJSON:function(a){for(var b=[],d=a.tracks,e={name:a.name,duration:a.duration,tracks:b},f=0,g=d.length;f!==g;++f)b.push(c.KeyframeTrack.toJSON(d[f]));return e},CreateFromMorphTargetSequence:function(a,b,d,e){for(var f=b.length,g=[],h=0;h<f;h++){var i=[],j=[];i.push((h+f-1)%f,h,(h+1)%f),j.push(0,1,0);var k=c.AnimationUtils.getKeyframeOrder(i);i=c.AnimationUtils.sortedArray(i,1,k),j=c.AnimationUtils.sortedArray(j,1,k),e||0!==i[0]||(i.push(f),j.push(j[0])),g.push(new c.NumberKeyframeTrack(".morphTargetInfluences["+b[h].name+"]",i,j).scale(1/d))}return new c.AnimationClip(a,(-1),g)},findByName:function(a,b){var c=a;if(!Array.isArray(a)){var d=a;c=d.geometry&&d.geometry.animations||d.animations}for(var e=0;e<c.length;e++)if(c[e].name===b)return c[e];
return null},CreateClipsFromMorphTargetSequences:function(a,b,d){for(var e={},f=/^([\w-]*?)([\d]+)$/,g=0,h=a.length;g<h;g++){var i=a[g],j=i.name.match(f);if(j&&j.length>1){var k=j[1],l=e[k];l||(e[k]=l=[]),l.push(i)}}var m=[];for(var k in e)m.push(c.AnimationClip.CreateFromMorphTargetSequence(k,e[k],b,d));return m},parseAnimation:function(a,b,d){if(!a)return console.error("  no animation in JSONLoader data"),null;for(var e=function(a,b,d,e,f){if(0!==d.length){var g=[],h=[];c.AnimationUtils.flattenJSON(d,g,h,e),0!==g.length&&f.push(new a(b,g,h))}},f=[],g=a.name||"default",h=a.length||-1,i=a.fps||30,j=a.hierarchy||[],k=0;k<j.length;k++){var l=j[k].keys;if(l&&0!==l.length)if(l[0].morphTargets){for(var m={},n=0;n<l.length;n++)if(l[n].morphTargets)for(var o=0;o<l[n].morphTargets.length;o++)m[l[n].morphTargets[o]]=-1;for(var p in m){for(var q=[],r=[],o=0;o!==l[n].morphTargets.length;++o){var s=l[n];q.push(s.time),r.push(s.morphTarget===p?1:0)}f.push(new c.NumberKeyframeTrack(".morphTargetInfluence["+p+"]",q,r))}h=m.length*(i||1)}else{var t=".bones["+b[k].name+"]";e(c.VectorKeyframeTrack,t+".position",l,"pos",f),e(c.QuaternionKeyframeTrack,t+".quaternion",l,"rot",f),e(c.VectorKeyframeTrack,t+".scale",l,"scl",f)}}if(0===f.length)return null;var u=new c.AnimationClip(g,h,f);return u}}),c.AnimationMixer=function(a){this._root=a,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1},Object.assign(c.AnimationMixer.prototype,c.EventDispatcher.prototype,{clipAction:function(a,b){var d=b||this._root,e=d.uuid,f="string"==typeof a?c.AnimationClip.findByName(d,a):a,g=null!==f?f.uuid:a,h=this._actionsByClip[g],i=null;if(void 0!==h){var j=h.actionByRoot[e];if(void 0!==j)return j;i=h.knownActions[0],null===f&&(f=i._clip)}if(null===f)return null;var k=new c.AnimationMixer._Action(this,f,b);return this._bindAction(k,i),this._addInactiveAction(k,g,e),k},existingAction:function(a,b){var d=b||this._root,e=d.uuid,f="string"==typeof a?c.AnimationClip.findByName(d,a):a,g=f?f.uuid:a,h=this._actionsByClip[g];return void 0!==h?h.actionByRoot[e]||null:null},stopAllAction:function(){var a=this._actions,b=this._nActiveActions,c=this._bindings,d=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var e=0;e!==b;++e)a[e].reset();for(var e=0;e!==d;++e)c[e].useCount=0;return this},update:function(a){a*=this.timeScale;for(var b=this._actions,c=this._nActiveActions,d=this.time+=a,e=Math.sign(a),f=this._accuIndex^=1,g=0;g!==c;++g){var h=b[g];h.enabled&&h._update(d,a,e,f)}for(var i=this._bindings,j=this._nActiveBindings,g=0;g!==j;++g)i[g].apply(f);return this},getRoot:function(){return this._root},uncacheClip:function(a){var b=this._actions,c=a.uuid,d=this._actionsByClip,e=d[c];if(void 0!==e){for(var f=e.knownActions,g=0,h=f.length;g!==h;++g){var i=f[g];this._deactivateAction(i);var j=i._cacheIndex,k=b[b.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,k._cacheIndex=j,b[j]=k,b.pop(),this._removeInactiveBindingsForAction(i)}delete d[c]}},uncacheRoot:function(a){var b=a.uuid,c=this._actionsByClip;for(var d in c){var e=c[d].actionByRoot,f=e[b];void 0!==f&&(this._deactivateAction(f),this._removeInactiveAction(f))}var g=this._bindingsByRootAndName,h=g[b];if(void 0!==h)for(var i in h){var j=h[i];j.restoreOriginalState(),this._removeInactiveBinding(j)}},uncacheAction:function(a,b){var c=this.existingAction(a,b);null!==c&&(this._deactivateAction(c),this._removeInactiveAction(c))}}),c.AnimationMixer._Action=c.AnimationAction._new,Object.assign(c.AnimationMixer.prototype,{_bindAction:function(a,b){var d=a._localRoot||this._root,e=a._clip.tracks,f=e.length,g=a._propertyBindings,h=a._interpolants,i=d.uuid,j=this._bindingsByRootAndName,k=j[i];void 0===k&&(k={},j[i]=k);for(var l=0;l!==f;++l){var m=e[l],n=m.name,o=k[n];if(void 0!==o)g[l]=o;else{if(o=g[l],void 0!==o){null===o._cacheIndex&&(++o.referenceCount,this._addInactiveBinding(o,i,n));continue}var p=b&&b._propertyBindings[l].binding.parsedPath;o=new c.PropertyMixer(c.PropertyBinding.create(d,n,p),m.ValueTypeName,m.getValueSize()),++o.referenceCount,this._addInactiveBinding(o,i,n),g[l]=o}h[l].resultBuffer=o.buffer}},_activateAction:function(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){var b=(a._localRoot||this._root).uuid,c=a._clip.uuid,d=this._actionsByClip[c];this._bindAction(a,d&&d.knownActions[0]),this._addInactiveAction(a,c,b)}for(var e=a._propertyBindings,f=0,g=e.length;f!==g;++f){var h=e[f];0===h.useCount++&&(this._lendBinding(h),h.saveOriginalState())}this._lendAction(a)}},_deactivateAction:function(a){if(this._isActiveAction(a)){for(var b=a._propertyBindings,c=0,d=b.length;c!==d;++c){var e=b[c];0===--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(a)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var a=this;this.stats={actions:{get total(){return a._actions.length},get inUse(){return a._nActiveActions}},bindings:{get total(){return a._bindings.length},get inUse(){return a._nActiveBindings}},controlInterpolants:{get total(){return a._controlInterpolants.length},get inUse(){return a._nActiveControlInterpolants}}}},_isActiveAction:function(a){var b=a._cacheIndex;return null!==b&&b<this._nActiveActions},_addInactiveAction:function(a,b,c){var d=this._actions,e=this._actionsByClip,f=e[b];if(void 0===f)f={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[b]=f;else{var g=f.knownActions;a._byClipCacheIndex=g.length,g.push(a)}a._cacheIndex=d.length,d.push(a),f.actionByRoot[c]=a},_removeInactiveAction:function(a){var b=this._actions,c=b[b.length-1],d=a._cacheIndex;c._cacheIndex=d,b[d]=c,b.pop(),a._cacheIndex=null;var e=a._clip.uuid,f=this._actionsByClip,g=f[e],h=g.knownActions,i=h[h.length-1],j=a._byClipCacheIndex;i._byClipCacheIndex=j,h[j]=i,h.pop(),a._byClipCacheIndex=null;var k=g.actionByRoot,l=(b._localRoot||this._root).uuid;delete k[l],0===h.length&&delete f[e],this._removeInactiveBindingsForAction(a)},_removeInactiveBindingsForAction:function(a){for(var b=a._propertyBindings,c=0,d=b.length;c!==d;++c){var e=b[c];0===--e.referenceCount&&this._removeInactiveBinding(e)}},_lendAction:function(a){var b=this._actions,c=a._cacheIndex,d=this._nActiveActions++,e=b[d];a._cacheIndex=d,b[d]=a,e._cacheIndex=c,b[c]=e},_takeBackAction:function(a){var b=this._actions,c=a._cacheIndex,d=--this._nActiveActions,e=b[d];a._cacheIndex=d,b[d]=a,e._cacheIndex=c,b[c]=e},_addInactiveBinding:function(a,b,c){var d=this._bindingsByRootAndName,e=d[b],f=this._bindings;void 0===e&&(e={},d[b]=e),e[c]=a,a._cacheIndex=f.length,f.push(a)},_removeInactiveBinding:function(a){var b=this._bindings,c=a.binding,d=c.rootNode.uuid,e=c.path,f=this._bindingsByRootAndName,g=f[d],h=b[b.length-1],i=a._cacheIndex;h._cacheIndex=i,b[i]=h,b.pop(),delete g[e];a:{for(var j in g)break a;delete f[d]}},_lendBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=this._nActiveBindings++,e=b[d];a._cacheIndex=d,b[d]=a,e._cacheIndex=c,b[c]=e},_takeBackBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=--this._nActiveBindings,e=b[d];a._cacheIndex=d,b[d]=a,e._cacheIndex=c,b[c]=e},_lendControlInterpolant:function(){var a=this._controlInterpolants,b=this._nActiveControlInterpolants++,d=a[b];return void 0===d&&(d=new c.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),d.__cacheIndex=b,a[b]=d),d},_takeBackControlInterpolant:function(a){var b=this._controlInterpolants,c=a.__cacheIndex,d=--this._nActiveControlInterpolants,e=b[d];a.__cacheIndex=d,b[d]=a,e.__cacheIndex=c,b[c]=e},_controlInterpolantsResultBuffer:new Float32Array(1)}),c.AnimationObjectGroup=function(a){this.uuid=c.Math.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var b={};this._indicesByUUID=b;for(var d=0,e=arguments.length;d!==e;++d)b[arguments[d].uuid]=d;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var f=this;this.stats={objects:{get total(){return f._objects.length},get inUse(){return this.total-f.nCachedObjects_}},get bindingsPerObject(){return f._bindings.length}}},c.AnimationObjectGroup.prototype={constructor:c.AnimationObjectGroup,add:function(a){for(var b=this._objects,d=b.length,e=this.nCachedObjects_,f=this._indicesByUUID,g=this._paths,h=this._parsedPaths,i=this._bindings,j=i.length,k=0,l=arguments.length;k!==l;++k){var m=arguments[k],n=m.uuid,o=f[n];if(void 0===o){o=d++,f[n]=o,b.push(m);for(var p=0,q=j;p!==q;++p)i[p].push(new c.PropertyBinding(m,g[p],h[p]))}else if(o<e){var r=b[o],s=--e,t=b[s];f[t.uuid]=o,b[o]=t,f[n]=s,b[s]=m;for(var p=0,q=j;p!==q;++p){var u=i[p],v=u[s],w=u[o];u[o]=v,void 0===w&&(w=new c.PropertyBinding(m,g[p],h[p])),u[s]=w}}else b[o]!==r&&console.error("Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...")}this.nCachedObjects_=e},remove:function(a){for(var b=this._objects,c=b.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._bindings,g=f.length,h=0,i=arguments.length;h!==i;++h){var j=arguments[h],k=j.uuid,l=e[k];if(void 0!==l&&l>=d){var m=d++,n=b[m];e[n.uuid]=l,b[l]=n,e[k]=m,b[m]=j;for(var o=0,p=g;o!==p;++o){var q=f[o],r=q[m],s=q[l];q[l]=r,q[m]=s}}}this.nCachedObjects_=d},uncache:function(a){for(var b=this._objects,c=b.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._bindings,g=f.length,h=0,i=arguments.length;h!==i;++h){var j=arguments[h],k=j.uuid,l=e[k];if(void 0!==l)if(delete e[k],l<d){var m=--d,n=b[m],o=--c,p=b[o];e[n.uuid]=l,b[l]=n,e[p.uuid]=m,b[m]=p,b.pop();for(var q=0,r=g;q!==r;++q){var s=f[q],t=s[m],u=s[o];s[l]=t,s[m]=u,s.pop()}}else{var o=--c,p=b[o];e[p.uuid]=l,b[l]=p,b.pop();for(var q=0,r=g;q!==r;++q){var s=f[q];s[l]=s[o],s.pop()}}}this.nCachedObjects_=d},subscribe_:function(a,b){var d=this._bindingsIndicesByPath,e=d[a],f=this._bindings;if(void 0!==e)return f[e];var g=this._paths,h=this._parsedPaths,i=this._objects,j=i.length,k=this.nCachedObjects_,l=new Array(j);e=f.length,d[a]=e,g.push(a),h.push(b),f.push(l);for(var m=k,n=i.length;m!==n;++m){var o=i[m];l[m]=new c.PropertyBinding(o,a,b)}return l},unsubscribe_:function(a){var b=this._bindingsIndicesByPath,c=b[a];if(void 0!==c){var d=this._paths,e=this._parsedPaths,f=this._bindings,g=f.length-1,h=f[g],i=a[g];b[i]=c,f[c]=h,f.pop(),e[c]=e[g],e.pop(),d[c]=d[g],d.pop()}}},c.AnimationUtils={arraySlice:function(a,b,d){return c.AnimationUtils.isTypedArray(a)?new a.constructor(a.subarray(b,d)):a.slice(b,d)},convertArray:function(a,b,c){return!a||!c&&a.constructor===b?a:"number"==typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){function b(b,c){return a[b]-a[c]}for(var c=a.length,d=new Array(c),e=0;e!==c;++e)d[e]=e;return d.sort(b),d},sortedArray:function(a,b,c){for(var d=a.length,e=new a.constructor(d),f=0,g=0;g!==d;++f)for(var h=c[f]*b,i=0;i!==b;++i)e[g++]=a[h+i];return e},flattenJSON:function(a,b,c,d){for(var e=1,f=a[0];void 0!==f&&void 0===f[d];)f=a[e++];if(void 0!==f){var g=f[d];if(void 0!==g)if(Array.isArray(g)){do g=f[d],void 0!==g&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)}else if(void 0!==g.toArray){do g=f[d],void 0!==g&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)}else do g=f[d],void 0!==g&&(b.push(f.time),c.push(g)),f=a[e++];while(void 0!==f)}}},c.KeyframeTrack=function(a,b,d,e){if(void 0===a)throw new Error("track name is undefined");if(void 0===b||0===b.length)throw new Error("no keyframes in track named "+a);this.name=a,this.times=c.AnimationUtils.convertArray(b,this.TimeBufferType),this.values=c.AnimationUtils.convertArray(d,this.ValueBufferType),this.setInterpolation(e||this.DefaultInterpolation),this.validate(),this.optimize()},c.KeyframeTrack.prototype={constructor:c.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:c.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(a){return new c.DiscreteInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodLinear:function(a){return new c.LinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:function(a){return new c.CubicInterpolant(this.times,this.values,this.getValueSize(),a)},setInterpolation:function(a){var b;switch(a){case c.InterpolateDiscrete:b=this.InterpolantFactoryMethodDiscrete;break;case c.InterpolateLinear:b=this.InterpolantFactoryMethodLinear;break;case c.InterpolateSmooth:b=this.InterpolantFactoryMethodSmooth}if(void 0===b){var d="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(a===this.DefaultInterpolation)throw new Error(d);this.setInterpolation(this.DefaultInterpolation)}return void console.warn(d)}this.createInterpolant=b},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return c.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return c.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return c.InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(a){if(0!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]+=a;return this},scale:function(a){if(1!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]*=a;return this},trim:function(a,b){for(var d=this.times,e=d.length,f=0,g=e-1;f!==e&&d[f]<a;)++f;for(;g!==-1&&d[g]>b;)--g;if(++g,0!==f||g!==e){f>=g&&(g=Math.max(g,1),f=g-1);var h=this.getValueSize();this.times=c.AnimationUtils.arraySlice(d,f,g),this.values=c.AnimationUtils.arraySlice(this.values,f*h,g*h)}return this},validate:function(){var a=!0,b=this.getValueSize();b-Math.floor(b)!==0&&(console.error("invalid value size in track",this),a=!1);var d=this.times,e=this.values,f=d.length;0===f&&(console.error("track is empty",this),a=!1);for(var g=null,h=0;h!==f;h++){var i=d[h];if("number"==typeof i&&isNaN(i)){console.error("time is not a valid number",this,h,i),a=!1;break}if(null!==g&&g>i){console.error("out of order keys",this,h,i,g),a=!1;break}g=i}if(void 0!==e&&c.AnimationUtils.isTypedArray(e))for(var h=0,j=e.length;h!==j;++h){var k=e[h];if(isNaN(k)){console.error("value is not a valid number",this,h,k),a=!1;break}}return a},optimize:function(){for(var a=this.times,b=this.values,d=this.getValueSize(),e=1,f=1,g=a.length-1;f<=g;++f){var h=!1,i=a[f],j=a[f+1];if(i!==j&&(1!==f||i!==i[0]))for(var k=f*d,l=k-d,m=k+d,n=0;n!==d;++n){var o=b[k+n];if(o!==b[l+n]||o!==b[m+n]){h=!0;break}}if(h){if(f!==e){a[e]=a[f];for(var p=f*d,q=e*d,n=0;n!==d;++n)b[q+n]=b[p+n]}++e}}return e!==a.length&&(this.times=c.AnimationUtils.arraySlice(a,0,e),this.values=c.AnimationUtils.arraySlice(b,0,e*d)),this}},Object.assign(c.KeyframeTrack,{parse:function(a){if(void 0===a.type)throw new Error("track type undefined, can not parse");var b=c.KeyframeTrack._getTrackTypeForValueTypeName(a.type);if(void 0===a.times){var d=[],e=[];c.AnimationUtils.flattenJSON(a.keys,d,e,"value"),a.times=d,a.values=e}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)},toJSON:function(a){var b=a.constructor,d;if(void 0!==b.toJSON)d=b.toJSON(a);else{d={name:a.name,times:c.AnimationUtils.convertArray(a.times,Array),values:c.AnimationUtils.convertArray(a.values,Array)};var e=a.getInterpolation();e!==a.DefaultInterpolation&&(d.interpolation=e)}return d.type=a.ValueTypeName,d},_getTrackTypeForValueTypeName:function(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return c.NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return c.VectorKeyframeTrack;case"color":return c.ColorKeyframeTrack;case"quaternion":return c.QuaternionKeyframeTrack;case"bool":case"boolean":return c.BooleanKeyframeTrack;case"string":return c.StringKeyframeTrack}throw new Error("Unsupported typeName: "+a)}}),c.PropertyBinding=function(a,b,d){this.path=b,this.parsedPath=d||c.PropertyBinding.parseTrackName(b),this.node=c.PropertyBinding.findNode(a,this.parsedPath.nodeName)||a,this.rootNode=a},c.PropertyBinding.prototype={constructor:c.PropertyBinding,getValue:function e(a,b){this.bind(),this.getValue(a,b)},setValue:function f(a,b){this.bind(),this.setValue(a,b)},bind:function(){var a=this.node,b=this.parsedPath,d=b.objectName,e=b.propertyName,f=b.propertyIndex;if(a||(a=c.PropertyBinding.findNode(this.rootNode,b.nodeName)||this.rootNode,this.node=a),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!a)return void console.error("  trying to update node for track: "+this.path+" but it wasn't found.");if(d){var g=b.objectIndex;switch(d){case"materials":if(!a.material)return void console.error("  can not bind to material as node does not have a material",this);if(!a.material.materials)return void console.error("  can not bind to material.materials as node.material does not have a materials array",this);a=a.material.materials;break;case"bones":if(!a.skeleton)return void console.error("  can not bind to bones as node does not have a skeleton",this);a=a.skeleton.bones;for(var h=0;h<a.length;h++)if(a[h].name===g){g=h;break}break;default:if(void 0===a[d])return void console.error("  can not bind to objectName of node, undefined",this);a=a[d]}if(void 0!==g){if(void 0===a[g])return void console.error("  trying to bind to objectIndex of objectName, but is undefined:",this,a);a=a[g]}}var i=a[e];if(void 0===i){var j=b.nodeName;return void console.error("  trying to update property for track: "+j+"."+e+" but it wasn't found.",a)}var k=this.Versioning.None;void 0!==a.needsUpdate?(k=this.Versioning.NeedsUpdate,this.targetObject=a):void 0!==a.matrixWorldNeedsUpdate&&(k=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=a);var l=this.BindingType.Direct;if(void 0!==f){if("morphTargetInfluences"===e){if(!a.geometry)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry",this);if(!a.geometry.morphTargets)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets",this);for(var h=0;h<this.node.geometry.morphTargets.length;h++)if(a.geometry.morphTargets[h].name===f){f=h;break}}l=this.BindingType.ArrayElement,this.resolvedProperty=i,this.propertyIndex=f}else void 0!==i.fromArray&&void 0!==i.toArray?(l=this.BindingType.HasFromToArray,this.resolvedProperty=i):void 0!==i.length?(l=this.BindingType.EntireArray,this.resolvedProperty=i):this.propertyName=e;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][k]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}},Object.assign(c.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:c.PropertyBinding.prototype.getValue,_setValue_unbound:c.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function g(a,b){a[b]=this.node[this.propertyName]},function h(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)a[b++]=c[d]},function i(a,b){a[b]=this.resolvedProperty[this.propertyIndex]},function j(a,b){this.resolvedProperty.toArray(a,b)}],SetterByBindingTypeAndVersioning:[[function k(a,b){this.node[this.propertyName]=a[b]},function l(a,b){this.node[this.propertyName]=a[b],this.targetObject.needsUpdate=!0},function m(a,b){this.node[this.propertyName]=a[b],this.targetObject.matrixWorldNeedsUpdate=!0}],[function n(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++]},function o(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.needsUpdate=!0},function p(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function q(a,b){this.resolvedProperty[this.propertyIndex]=a[b]},function r(a,b){this.resolvedProperty[this.propertyIndex]=a[b],this.targetObject.needsUpdate=!0},function s(a,b){this.resolvedProperty[this.propertyIndex]=a[b],this.targetObject.matrixWorldNeedsUpdate=!0}],[function t(a,b){this.resolvedProperty.fromArray(a,b)},function u(a,b){this.resolvedProperty.fromArray(a,b),this.targetObject.needsUpdate=!0},function v(a,b){this.resolvedProperty.fromArray(a,b),this.targetObject.matrixWorldNeedsUpdate=!0}]]}),c.PropertyBinding.Composite=function(a,b,d){var e=d||c.PropertyBinding.parseTrackName(b);this._targetGroup=a,this._bindings=a.subscribe_(b,e)},c.PropertyBinding.Composite.prototype={constructor:c.PropertyBinding.Composite,getValue:function(a,b){this.bind();var c=this._targetGroup.nCachedObjects_,d=this._bindings[c];void 0!==d&&d.getValue(a,b)},setValue:function(a,b){for(var c=this._bindings,d=this._targetGroup.nCachedObjects_,e=c.length;d!==e;++d)c[d].setValue(a,b)},bind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].bind()},unbind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].unbind()}},c.PropertyBinding.create=function(a,b,d){return a instanceof c.AnimationObjectGroup?new c.PropertyBinding.Composite(a,b,d):new c.PropertyBinding(a,b,d)},c.PropertyBinding.parseTrackName=function(a){var b=/^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,c=b.exec(a);if(!c)throw new Error("cannot parse trackName at all: "+a);c.index===b.lastIndex&&b.lastIndex++;var d={nodeName:c[3],objectName:c[5],objectIndex:c[7],propertyName:c[9],propertyIndex:c[11]};if(null===d.propertyName||0===d.propertyName.length)throw new Error("can not parse propertyName from trackName: "+a);return d},c.PropertyBinding.findNode=function(a,b){if(!b||""===b||"root"===b||"."===b||b===-1||b===a.name||b===a.uuid)return a;if(a.skeleton){var c=function(a){for(var c=0;c<a.bones.length;c++){var d=a.bones[c];if(d.name===b)return d}return null},d=c(a.skeleton);if(d)return d}if(a.children){var e=function(a){for(var c=0;c<a.length;c++){var d=a[c];if(d.name===b||d.uuid===b)return d;var f=e(d.children);if(f)return f}return null},f=e(a.children);if(f)return f}return null},c.PropertyMixer=function(a,b,c){this.binding=a,this.valueSize=c;var d=Float64Array,e;switch(b){case"quaternion":e=this._slerp;break;case"string":case"bool":d=Array,e=this._select;break;default:e=this._lerp}this.buffer=new d(4*c),this._mixBufferRegion=e,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0},c.PropertyMixer.prototype={constructor:c.PropertyMixer,accumulate:function(a,b){var c=this.buffer,d=this.valueSize,e=a*d+d,f=this.cumulativeWeight;if(0===f){for(var g=0;g!==d;++g)c[e+g]=c[g];f=b}else{f+=b;var h=b/f;this._mixBufferRegion(c,e,0,h,d)}this.cumulativeWeight=f},apply:function(a){var b=this.valueSize,c=this.buffer,d=a*b+b,e=this.cumulativeWeight,f=this.binding;if(this.cumulativeWeight=0,e<1){var g=3*b;this._mixBufferRegion(c,d,g,1-e,b)}for(var h=b,i=b+b;h!==i;++h)if(c[h]!==c[h+b]){f.setValue(c,d);break}},saveOriginalState:function(){var a=this.binding,b=this.buffer,c=this.valueSize,d=3*c;a.getValue(b,d);for(var e=c,f=d;e!==f;++e)b[e]=b[d+e%c];this.cumulativeWeight=0},restoreOriginalState:function(){var a=3*this.valueSize;this.binding.setValue(this.buffer,a)},_select:function(a,b,c,d,e){if(d>=.5)for(var f=0;f!==e;++f)a[b+f]=a[c+f]},_slerp:function(a,b,d,e,f){c.Quaternion.slerpFlat(a,b,a,b,a,d,e)},_lerp:function(a,b,c,d,e){for(var f=1-d,g=0;g!==e;++g){var h=b+g;a[h]=a[h]*f+a[c+g]*d}}},c.BooleanKeyframeTrack=function(a,b,d){c.KeyframeTrack.call(this,a,b,d)},c.BooleanKeyframeTrack.prototype=Object.assign(Object.create(c.KeyframeTrack.prototype),{constructor:c.BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:c.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),c.ColorKeyframeTrack=function(a,b,d,e){c.KeyframeTrack.call(this,a,b,d,e)},c.ColorKeyframeTrack.prototype=Object.assign(Object.create(c.KeyframeTrack.prototype),{constructor:c.ColorKeyframeTrack,ValueTypeName:"color"}),c.NumberKeyframeTrack=function(a,b,d,e){c.KeyframeTrack.call(this,a,b,d,e)},c.NumberKeyframeTrack.prototype=Object.assign(Object.create(c.KeyframeTrack.prototype),{constructor:c.NumberKeyframeTrack,ValueTypeName:"number"}),c.QuaternionKeyframeTrack=function(a,b,d,e){c.KeyframeTrack.call(this,a,b,d,e)},c.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(c.KeyframeTrack.prototype),{constructor:c.QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:c.InterpolateLinear,InterpolantFactoryMethodLinear:function(a){return new c.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:void 0}),c.StringKeyframeTrack=function(a,b,d,e){c.KeyframeTrack.call(this,a,b,d,e)},c.StringKeyframeTrack.prototype=Object.assign(Object.create(c.KeyframeTrack.prototype),{constructor:c.StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:c.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),c.VectorKeyframeTrack=function(a,b,d,e){c.KeyframeTrack.call(this,a,b,d,e)},c.VectorKeyframeTrack.prototype=Object.assign(Object.create(c.KeyframeTrack.prototype),{constructor:c.VectorKeyframeTrack,ValueTypeName:"vector"}),c.Audio=function(a){c.Object3D.call(this),this.type="Audio",this.context=a.context,this.source=this.context.createBufferSource(),this.source.onended=this.onEnded.bind(this),this.gain=this.context.createGain(),this.gain.connect(a.getInput()),this.autoplay=!1,this.startTime=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]},c.Audio.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Audio,getOutput:function(){return this.gain},setNodeSource:function(a){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=a,this.connect(),this},setBuffer:function(a){return this.source.buffer=a,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(this.isPlaying===!0)return void console.warn("THREE.Audio: Audio is already playing.");if(this.hasPlaybackControl===!1)return void console.warn("THREE.Audio: this Audio has no playback control.");var a=this.context.createBufferSource();return a.buffer=this.source.buffer,a.loop=this.source.loop,a.onended=this.source.onended,a.start(0,this.startTime),a.playbackRate.value=this.playbackRate,this.isPlaying=!0,this.source=a,this.connect()},pause:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=this.context.currentTime,this.isPlaying=!1,this)},stop:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=0,this.isPlaying=!1,this)},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].connect(this.filters[a]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].disconnect(this.filters[a]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(a){return a||(a=[]),this.isPlaying===!0?(this.disconnect(),this.filters=a,this.connect()):this.filters=a,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(a){return this.setFilters(a?[a]:[])},setPlaybackRate:function(a){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.playbackRate=a,this.isPlaying===!0&&(this.source.playbackRate.value=this.playbackRate),this)},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.source.loop},setLoop:function(a){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):void(this.source.loop=a)},getVolume:function(){return this.gain.gain.value},setVolume:function(a){return this.gain.gain.value=a,this}}),c.AudioAnalyser=function(a,b){this.analyser=a.context.createAnalyser(),this.analyser.fftSize=void 0!==b?b:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),a.getOutput().connect(this.analyser)},Object.assign(c.AudioAnalyser.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var a=0,b=this.getFrequencyData(),c=0;c<b.length;c++)a+=b[c];return a/b.length}}),Object.defineProperty(c,"AudioContext",{get:function(){var a;return function b(){return void 0===a&&(a=new(window.AudioContext||window.webkitAudioContext)),a}}()}),c.PositionalAudio=function(a){c.Audio.call(this,a),this.panner=this.context.createPanner(),this.panner.connect(this.gain)},c.PositionalAudio.prototype=Object.assign(Object.create(c.Audio.prototype),{constructor:c.PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(a){this.panner.refDistance=a},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(a){this.panner.rolloffFactor=a},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(a){this.panner.distanceModel=a},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(a){this.panner.maxDistance=a},updateMatrixWorld:function(){var a=new c.Vector3;return function b(d){c.Object3D.prototype.updateMatrixWorld.call(this,d),a.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(a.x,a.y,a.z)}}()}),c.AudioListener=function(){c.Object3D.call(this),this.type="AudioListener",this.context=c.AudioContext,this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null},c.AudioListener.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(a){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=a,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(a){this.gain.gain.value=a},updateMatrixWorld:function(){var a=new c.Vector3,b=new c.Quaternion,d=new c.Vector3,e=new c.Vector3;return function f(g){c.Object3D.prototype.updateMatrixWorld.call(this,g);var h=this.context.listener,i=this.up;this.matrixWorld.decompose(a,b,d),e.set(0,0,-1).applyQuaternion(b),h.setPosition(a.x,a.y,a.z),h.setOrientation(e.x,e.y,e.z,i.x,i.y,i.z)}}()}),c.Camera=function(){c.Object3D.call(this),this.type="Camera",this.matrixWorldInverse=new c.Matrix4,this.projectionMatrix=new c.Matrix4},c.Camera.prototype=Object.create(c.Object3D.prototype),c.Camera.prototype.constructor=c.Camera,c.Camera.prototype.getWorldDirection=function(){var a=new c.Quaternion;return function b(d){var e=d||new c.Vector3;return this.getWorldQuaternion(a),
e.set(0,0,-1).applyQuaternion(a)}}(),c.Camera.prototype.lookAt=function(){var a=new c.Matrix4;return function b(c){a.lookAt(this.position,c,this.up),this.quaternion.setFromRotationMatrix(a)}}(),c.Camera.prototype.clone=function(){return(new this.constructor).copy(this)},c.Camera.prototype.copy=function(a){return c.Object3D.prototype.copy.call(this,a),this.matrixWorldInverse.copy(a.matrixWorldInverse),this.projectionMatrix.copy(a.projectionMatrix),this},c.CubeCamera=function(a,b,d){c.Object3D.call(this),this.type="CubeCamera";var e=90,f=1,g=new c.PerspectiveCamera(e,f,a,b);g.up.set(0,-1,0),g.lookAt(new c.Vector3(1,0,0)),this.add(g);var h=new c.PerspectiveCamera(e,f,a,b);h.up.set(0,-1,0),h.lookAt(new c.Vector3((-1),0,0)),this.add(h);var i=new c.PerspectiveCamera(e,f,a,b);i.up.set(0,0,1),i.lookAt(new c.Vector3(0,1,0)),this.add(i);var j=new c.PerspectiveCamera(e,f,a,b);j.up.set(0,0,-1),j.lookAt(new c.Vector3(0,(-1),0)),this.add(j);var k=new c.PerspectiveCamera(e,f,a,b);k.up.set(0,-1,0),k.lookAt(new c.Vector3(0,0,1)),this.add(k);var l=new c.PerspectiveCamera(e,f,a,b);l.up.set(0,-1,0),l.lookAt(new c.Vector3(0,0,(-1))),this.add(l);var m={format:c.RGBFormat,magFilter:c.LinearFilter,minFilter:c.LinearFilter};this.renderTarget=new c.WebGLRenderTargetCube(d,d,m),this.updateCubeMap=function(a,b){null===this.parent&&this.updateMatrixWorld();var c=this.renderTarget,d=c.texture.generateMipmaps;c.texture.generateMipmaps=!1,c.activeCubeFace=0,a.render(b,g,c),c.activeCubeFace=1,a.render(b,h,c),c.activeCubeFace=2,a.render(b,i,c),c.activeCubeFace=3,a.render(b,j,c),c.activeCubeFace=4,a.render(b,k,c),c.texture.generateMipmaps=d,c.activeCubeFace=5,a.render(b,l,c),a.setRenderTarget(null)}},c.CubeCamera.prototype=Object.create(c.Object3D.prototype),c.CubeCamera.prototype.constructor=c.CubeCamera,c.OrthographicCamera=function(a,b,d,e,f,g){c.Camera.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=a,this.right=b,this.top=d,this.bottom=e,this.near=void 0!==f?f:.1,this.far=void 0!==g?g:2e3,this.updateProjectionMatrix()},c.OrthographicCamera.prototype=Object.assign(Object.create(c.Camera.prototype),{constructor:c.OrthographicCamera,copy:function(a){return c.Camera.prototype.copy.call(this,a),this.left=a.left,this.right=a.right,this.top=a.top,this.bottom=a.bottom,this.near=a.near,this.far=a.far,this.zoom=a.zoom,this.view=null===a.view?null:Object.assign({},a.view),this},setViewOffset:function(a,b,c,d,e,f){this.view={fullWidth:a,fullHeight:b,offsetX:c,offsetY:d,width:e,height:f},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2,e=c-a,f=c+a,g=d+b,h=d-b;if(null!==this.view){var i=this.zoom/(this.view.width/this.view.fullWidth),j=this.zoom/(this.view.height/this.view.fullHeight),k=(this.right-this.left)/this.view.width,l=(this.top-this.bottom)/this.view.height;e+=k*(this.view.offsetX/i),f=e+k*(this.view.width/i),g-=l*(this.view.offsetY/j),h=g-l*(this.view.height/j)}this.projectionMatrix.makeOrthographic(e,f,g,h,this.near,this.far)},toJSON:function(a){var b=c.Object3D.prototype.toJSON.call(this,a);return b.object.zoom=this.zoom,b.object.left=this.left,b.object.right=this.right,b.object.top=this.top,b.object.bottom=this.bottom,b.object.near=this.near,b.object.far=this.far,null!==this.view&&(b.object.view=Object.assign({},this.view)),b}}),c.PerspectiveCamera=function(a,b,d,e){c.Camera.call(this),this.type="PerspectiveCamera",this.fov=void 0!==a?a:50,this.zoom=1,this.near=void 0!==d?d:.1,this.far=void 0!==e?e:2e3,this.focus=10,this.aspect=void 0!==b?b:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()},c.PerspectiveCamera.prototype=Object.assign(Object.create(c.Camera.prototype),{constructor:c.PerspectiveCamera,copy:function(a){return c.Camera.prototype.copy.call(this,a),this.fov=a.fov,this.zoom=a.zoom,this.near=a.near,this.far=a.far,this.focus=a.focus,this.aspect=a.aspect,this.view=null===a.view?null:Object.assign({},a.view),this.filmGauge=a.filmGauge,this.filmOffset=a.filmOffset,this},setFocalLength:function(a){var b=.5*this.getFilmHeight()/a;this.fov=2*c.Math.RAD2DEG*Math.atan(b),this.updateProjectionMatrix()},getFocalLength:function(){var a=Math.tan(.5*c.Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/a},getEffectiveFOV:function(){return 2*c.Math.RAD2DEG*Math.atan(Math.tan(.5*c.Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(a,b,c,d,e,f){this.aspect=a/b,this.view={fullWidth:a,fullHeight:b,offsetX:c,offsetY:d,width:e,height:f},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=this.near,b=a*Math.tan(.5*c.Math.DEG2RAD*this.fov)/this.zoom,d=2*b,e=this.aspect*d,f=-.5*e,g=this.view;if(null!==g){var h=g.fullWidth,i=g.fullHeight;f+=g.offsetX*e/h,b-=g.offsetY*d/i,e*=g.width/h,d*=g.height/i}var j=this.filmOffset;0!==j&&(f+=a*j/this.getFilmWidth()),this.projectionMatrix.makeFrustum(f,f+e,b-d,b,a,this.far)},toJSON:function(a){var b=c.Object3D.prototype.toJSON.call(this,a);return b.object.fov=this.fov,b.object.zoom=this.zoom,b.object.near=this.near,b.object.far=this.far,b.object.focus=this.focus,b.object.aspect=this.aspect,null!==this.view&&(b.object.view=Object.assign({},this.view)),b.object.filmGauge=this.filmGauge,b.object.filmOffset=this.filmOffset,b}}),c.StereoCamera=function(){this.type="StereoCamera",this.aspect=1,this.cameraL=new c.PerspectiveCamera,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new c.PerspectiveCamera,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1},Object.assign(c.StereoCamera.prototype,{update:function(){var a,b,d,e,f,g=new c.Matrix4,h=new c.Matrix4;return function i(j){var k=a!==j.focus||b!==j.fov||d!==j.aspect*this.aspect||e!==j.near||f!==j.far;if(k){a=j.focus,b=j.fov,d=j.aspect*this.aspect,e=j.near,f=j.far;var l=j.projectionMatrix.clone(),m=.032,n=m*e/a,o=e*Math.tan(c.Math.DEG2RAD*b*.5),p,q;h.elements[12]=-m,g.elements[12]=m,p=-o*d+n,q=o*d+n,l.elements[0]=2*e/(q-p),l.elements[8]=(q+p)/(q-p),this.cameraL.projectionMatrix.copy(l),p=-o*d-n,q=o*d-n,l.elements[0]=2*e/(q-p),l.elements[8]=(q+p)/(q-p),this.cameraR.projectionMatrix.copy(l)}this.cameraL.matrixWorld.copy(j.matrixWorld).multiply(h),this.cameraR.matrixWorld.copy(j.matrixWorld).multiply(g)}}()}),c.Light=function(a,b){c.Object3D.call(this),this.type="Light",this.color=new c.Color(a),this.intensity=void 0!==b?b:1,this.receiveShadow=void 0},c.Light.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Light,copy:function(a){return c.Object3D.prototype.copy.call(this,a),this.color.copy(a.color),this.intensity=a.intensity,this},toJSON:function(a){var b=c.Object3D.prototype.toJSON.call(this,a);return b.object.color=this.color.getHex(),b.object.intensity=this.intensity,void 0!==this.groundColor&&(b.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(b.object.distance=this.distance),void 0!==this.angle&&(b.object.angle=this.angle),void 0!==this.decay&&(b.object.decay=this.decay),void 0!==this.penumbra&&(b.object.penumbra=this.penumbra),b}}),c.LightShadow=function(a){this.camera=a,this.bias=0,this.radius=1,this.mapSize=new c.Vector2(512,512),this.map=null,this.matrix=new c.Matrix4},Object.assign(c.LightShadow.prototype,{copy:function(a){return this.camera=a.camera.clone(),this.bias=a.bias,this.radius=a.radius,this.mapSize.copy(a.mapSize),this},clone:function(){return(new this.constructor).copy(this)}}),c.AmbientLight=function(a,b){c.Light.call(this,a,b),this.type="AmbientLight",this.castShadow=void 0},c.AmbientLight.prototype=Object.assign(Object.create(c.Light.prototype),{constructor:c.AmbientLight}),c.DirectionalLight=function(a,b){c.Light.call(this,a,b),this.type="DirectionalLight",this.position.copy(c.Object3D.DefaultUp),this.updateMatrix(),this.target=new c.Object3D,this.shadow=new c.DirectionalLightShadow},c.DirectionalLight.prototype=Object.assign(Object.create(c.Light.prototype),{constructor:c.DirectionalLight,copy:function(a){return c.Light.prototype.copy.call(this,a),this.target=a.target.clone(),this.shadow=a.shadow.clone(),this}}),c.DirectionalLightShadow=function(a){c.LightShadow.call(this,new c.OrthographicCamera((-5),5,5,(-5),.5,500))},c.DirectionalLightShadow.prototype=Object.assign(Object.create(c.LightShadow.prototype),{constructor:c.DirectionalLightShadow}),c.HemisphereLight=function(a,b,d){c.Light.call(this,a,d),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(c.Object3D.DefaultUp),this.updateMatrix(),this.groundColor=new c.Color(b)},c.HemisphereLight.prototype=Object.assign(Object.create(c.Light.prototype),{constructor:c.HemisphereLight,copy:function(a){return c.Light.prototype.copy.call(this,a),this.groundColor.copy(a.groundColor),this}}),c.PointLight=function(a,b,d,e){c.Light.call(this,a,b),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(a){this.intensity=a/(4*Math.PI)}}),this.distance=void 0!==d?d:0,this.decay=void 0!==e?e:1,this.shadow=new c.LightShadow(new c.PerspectiveCamera(90,1,.5,500))},c.PointLight.prototype=Object.assign(Object.create(c.Light.prototype),{constructor:c.PointLight,copy:function(a){return c.Light.prototype.copy.call(this,a),this.distance=a.distance,this.decay=a.decay,this.shadow=a.shadow.clone(),this}}),c.SpotLight=function(a,b,d,e,f,g){c.Light.call(this,a,b),this.type="SpotLight",this.position.copy(c.Object3D.DefaultUp),this.updateMatrix(),this.target=new c.Object3D,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(a){this.intensity=a/Math.PI}}),this.distance=void 0!==d?d:0,this.angle=void 0!==e?e:Math.PI/3,this.penumbra=void 0!==f?f:0,this.decay=void 0!==g?g:1,this.shadow=new c.SpotLightShadow},c.SpotLight.prototype=Object.assign(Object.create(c.Light.prototype),{constructor:c.SpotLight,copy:function(a){return c.Light.prototype.copy.call(this,a),this.distance=a.distance,this.angle=a.angle,this.penumbra=a.penumbra,this.decay=a.decay,this.target=a.target.clone(),this.shadow=a.shadow.clone(),this}}),c.SpotLightShadow=function(){c.LightShadow.call(this,new c.PerspectiveCamera(50,1,.5,500))},c.SpotLightShadow.prototype=Object.assign(Object.create(c.LightShadow.prototype),{constructor:c.SpotLightShadow,update:function(a){var b=2*c.Math.RAD2DEG*a.angle,d=this.mapSize.width/this.mapSize.height,e=a.distance||500,f=this.camera;b===f.fov&&d===f.aspect&&e===f.far||(f.fov=b,f.aspect=d,f.far=e,f.updateProjectionMatrix())}}),c.AudioLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager},Object.assign(c.AudioLoader.prototype,{load:function(a,b,d,e){var f=new c.XHRLoader(this.manager);f.setResponseType("arraybuffer"),f.load(a,function(a){var d=c.AudioContext;d.decodeAudioData(a,function(a){b(a)})},d,e)}}),c.Cache={enabled:!1,files:{},add:function(a,b){this.enabled!==!1&&(this.files[a]=b)},get:function(a){if(this.enabled!==!1)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}},c.Loader=function(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}},c.Loader.prototype={constructor:c.Loader,crossOrigin:void 0,extractUrlBase:function(a){var b=a.split("/");return 1===b.length?"./":(b.pop(),b.join("/")+"/")},initMaterials:function(a,b,c){for(var d=[],e=0;e<a.length;++e)d[e]=this.createMaterial(a[e],b,c);return d},createMaterial:function(){var a,b,d;return function e(f,g,h){function i(a,d,e,f,i){var k=g+a,l=c.Loader.Handlers.get(k),m;null!==l?m=l.load(k):(b.setCrossOrigin(h),m=b.load(k)),void 0!==d&&(m.repeat.fromArray(d),1!==d[0]&&(m.wrapS=c.RepeatWrapping),1!==d[1]&&(m.wrapT=c.RepeatWrapping)),void 0!==e&&m.offset.fromArray(e),void 0!==f&&("repeat"===f[0]&&(m.wrapS=c.RepeatWrapping),"mirror"===f[0]&&(m.wrapS=c.MirroredRepeatWrapping),"repeat"===f[1]&&(m.wrapT=c.RepeatWrapping),"mirror"===f[1]&&(m.wrapT=c.MirroredRepeatWrapping)),void 0!==i&&(m.anisotropy=i);var n=c.Math.generateUUID();return j[n]=m,n}void 0===a&&(a=new c.Color),void 0===b&&(b=new c.TextureLoader),void 0===d&&(d=new c.MaterialLoader);var j={},k={uuid:c.Math.generateUUID(),type:"MeshLambertMaterial"};for(var l in f){var m=f[l];switch(l){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":k.name=m;break;case"blending":k.blending=c[m];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",l,"is no longer supported.");break;case"colorDiffuse":k.color=a.fromArray(m).getHex();break;case"colorSpecular":k.specular=a.fromArray(m).getHex();break;case"colorEmissive":k.emissive=a.fromArray(m).getHex();break;case"specularCoef":k.shininess=m;break;case"shading":"basic"===m.toLowerCase()&&(k.type="MeshBasicMaterial"),"phong"===m.toLowerCase()&&(k.type="MeshPhongMaterial"),"standard"===m.toLowerCase()&&(k.type="MeshStandardMaterial");break;case"mapDiffuse":k.map=i(m,f.mapDiffuseRepeat,f.mapDiffuseOffset,f.mapDiffuseWrap,f.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":k.emissiveMap=i(m,f.mapEmissiveRepeat,f.mapEmissiveOffset,f.mapEmissiveWrap,f.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":k.lightMap=i(m,f.mapLightRepeat,f.mapLightOffset,f.mapLightWrap,f.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":k.aoMap=i(m,f.mapAORepeat,f.mapAOOffset,f.mapAOWrap,f.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":k.bumpMap=i(m,f.mapBumpRepeat,f.mapBumpOffset,f.mapBumpWrap,f.mapBumpAnisotropy);break;case"mapBumpScale":k.bumpScale=m;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":k.normalMap=i(m,f.mapNormalRepeat,f.mapNormalOffset,f.mapNormalWrap,f.mapNormalAnisotropy);break;case"mapNormalFactor":k.normalScale=[m,m];break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":k.specularMap=i(m,f.mapSpecularRepeat,f.mapSpecularOffset,f.mapSpecularWrap,f.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":k.metalnessMap=i(m,f.mapMetalnessRepeat,f.mapMetalnessOffset,f.mapMetalnessWrap,f.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":k.roughnessMap=i(m,f.mapRoughnessRepeat,f.mapRoughnessOffset,f.mapRoughnessWrap,f.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":k.alphaMap=i(m,f.mapAlphaRepeat,f.mapAlphaOffset,f.mapAlphaWrap,f.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":k.side=c.BackSide;break;case"doubleSided":k.side=c.DoubleSide;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),k.opacity=m;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":k[l]=m;break;case"vertexColors":m===!0&&(k.vertexColors=c.VertexColors),"face"===m&&(k.vertexColors=c.FaceColors);break;default:console.error("THREE.Loader.createMaterial: Unsupported",l,m)}}return"MeshBasicMaterial"===k.type&&delete k.emissive,"MeshPhongMaterial"!==k.type&&delete k.specular,k.opacity<1&&(k.transparent=!0),d.setTextures(j),d.parse(k)}}()},c.Loader.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,b)},get:function(a){for(var b=this.handlers,c=0,d=b.length;c<d;c+=2){var e=b[c],f=b[c+1];if(e.test(a))return f}return null}},c.XHRLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager},Object.assign(c.XHRLoader.prototype,{load:function(a,b,d,e){void 0!==this.path&&(a=this.path+a);var f=this,g=c.Cache.get(a);if(void 0!==g)return f.manager.itemStart(a),setTimeout(function(){b&&b(g),f.manager.itemEnd(a)},0),g;var h=new XMLHttpRequest;return h.overrideMimeType("text/plain"),h.open("GET",a,!0),h.addEventListener("load",function(d){var g=d.target.response;c.Cache.add(a,g),200===this.status?(b&&b(g),f.manager.itemEnd(a)):0===this.status?(console.warn("THREE.XHRLoader: HTTP Status 0 received."),b&&b(g),f.manager.itemEnd(a)):(e&&e(d),f.manager.itemError(a))},!1),void 0!==d&&h.addEventListener("progress",function(a){d(a)},!1),h.addEventListener("error",function(b){e&&e(b),f.manager.itemError(a)},!1),void 0!==this.responseType&&(h.responseType=this.responseType),void 0!==this.withCredentials&&(h.withCredentials=this.withCredentials),h.send(null),f.manager.itemStart(a),h},setPath:function(a){return this.path=a,this},setResponseType:function(a){return this.responseType=a,this},setWithCredentials:function(a){return this.withCredentials=a,this}}),c.FontLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager},Object.assign(c.FontLoader.prototype,{load:function(a,b,d,e){var f=this,g=new c.XHRLoader(this.manager);g.load(a,function(a){var c;try{c=JSON.parse(a)}catch(d){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),c=JSON.parse(a.substring(65,a.length-2))}var e=f.parse(c);b&&b(e)},d,e)},parse:function(a){return new c.Font(a)}}),c.ImageLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager},Object.assign(c.ImageLoader.prototype,{load:function(a,b,d,e){var f=this,g=document.createElementNS("http://www.w3.org/1999/xhtml","img");if(g.onload=function(){URL.revokeObjectURL(g.src),b&&b(g),f.manager.itemEnd(a)},0===a.indexOf("data:"))g.src=a;else{var h=new c.XHRLoader;h.setPath(this.path),h.setResponseType("blob"),h.load(a,function(a){g.src=URL.createObjectURL(a)},d,e)}return f.manager.itemStart(a),g},setCrossOrigin:function(a){return this.crossOrigin=a,this},setPath:function(a){return this.path=a,this}}),c.JSONLoader=function(a){"boolean"==typeof a&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),a=void 0),this.manager=void 0!==a?a:c.DefaultLoadingManager,this.withCredentials=!1},Object.assign(c.JSONLoader.prototype,{load:function(a,b,d,e){var f=this,g=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:c.Loader.prototype.extractUrlBase(a),h=new c.XHRLoader(this.manager);h.setWithCredentials(this.withCredentials),h.load(a,function(c){var d=JSON.parse(c),e=d.metadata;if(void 0!==e){var h=e.type;if(void 0!==h){if("object"===h.toLowerCase())return void console.error("THREE.JSONLoader: "+a+" should be loaded with THREE.ObjectLoader instead.");if("scene"===h.toLowerCase())return void console.error("THREE.JSONLoader: "+a+" should be loaded with THREE.SceneLoader instead.")}}var i=f.parse(d,g);b(i.geometry,i.materials)},d,e)},setTexturePath:function(a){this.texturePath=a},parse:function(a,b){function d(b){function d(a,b){return a&1<<b}var e,f,g,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G=a.faces,H=a.vertices,I=a.normals,J=a.colors,K=0;if(void 0!==a.uvs){for(e=0;e<a.uvs.length;e++)a.uvs[e].length&&K++;for(e=0;e<K;e++)h.faceVertexUvs[e]=[]}for(i=0,j=H.length;i<j;)w=new c.Vector3,w.x=H[i++]*b,w.y=H[i++]*b,w.z=H[i++]*b,h.vertices.push(w);for(i=0,j=G.length;i<j;)if(o=G[i++],p=d(o,0),q=d(o,1),r=d(o,3),s=d(o,4),t=d(o,5),u=d(o,6),v=d(o,7),p){if(y=new c.Face3,y.a=G[i],y.b=G[i+1],y.c=G[i+3],z=new c.Face3,z.a=G[i+1],z.b=G[i+2],z.c=G[i+3],i+=4,q&&(n=G[i++],y.materialIndex=n,z.materialIndex=n),g=h.faces.length,r)for(e=0;e<K;e++)for(C=a.uvs[e],h.faceVertexUvs[e][g]=[],h.faceVertexUvs[e][g+1]=[],f=0;f<4;f++)m=G[i++],E=C[2*m],F=C[2*m+1],D=new c.Vector2(E,F),2!==f&&h.faceVertexUvs[e][g].push(D),0!==f&&h.faceVertexUvs[e][g+1].push(D);if(s&&(l=3*G[i++],y.normal.set(I[l++],I[l++],I[l]),z.normal.copy(y.normal)),t)for(e=0;e<4;e++)l=3*G[i++],B=new c.Vector3(I[l++],I[l++],I[l]),2!==e&&y.vertexNormals.push(B),0!==e&&z.vertexNormals.push(B);if(u&&(k=G[i++],A=J[k],y.color.setHex(A),z.color.setHex(A)),v)for(e=0;e<4;e++)k=G[i++],A=J[k],2!==e&&y.vertexColors.push(new c.Color(A)),0!==e&&z.vertexColors.push(new c.Color(A));h.faces.push(y),h.faces.push(z)}else{if(x=new c.Face3,x.a=G[i++],x.b=G[i++],x.c=G[i++],q&&(n=G[i++],x.materialIndex=n),g=h.faces.length,r)for(e=0;e<K;e++)for(C=a.uvs[e],h.faceVertexUvs[e][g]=[],f=0;f<3;f++)m=G[i++],E=C[2*m],F=C[2*m+1],D=new c.Vector2(E,F),h.faceVertexUvs[e][g].push(D);if(s&&(l=3*G[i++],x.normal.set(I[l++],I[l++],I[l])),t)for(e=0;e<3;e++)l=3*G[i++],B=new c.Vector3(I[l++],I[l++],I[l]),x.vertexNormals.push(B);if(u&&(k=G[i++],x.color.setHex(J[k])),v)for(e=0;e<3;e++)k=G[i++],x.vertexColors.push(new c.Color(J[k]));h.faces.push(x)}}function e(){var b=void 0!==a.influencesPerVertex?a.influencesPerVertex:2;if(a.skinWeights)for(var d=0,e=a.skinWeights.length;d<e;d+=b){var f=a.skinWeights[d],g=b>1?a.skinWeights[d+1]:0,i=b>2?a.skinWeights[d+2]:0,j=b>3?a.skinWeights[d+3]:0;h.skinWeights.push(new c.Vector4(f,g,i,j))}if(a.skinIndices)for(var d=0,e=a.skinIndices.length;d<e;d+=b){var k=a.skinIndices[d],l=b>1?a.skinIndices[d+1]:0,m=b>2?a.skinIndices[d+2]:0,n=b>3?a.skinIndices[d+3]:0;h.skinIndices.push(new c.Vector4(k,l,m,n))}h.bones=a.bones,h.bones&&h.bones.length>0&&(h.skinWeights.length!==h.skinIndices.length||h.skinIndices.length!==h.vertices.length)&&console.warn("When skinning, number of vertices ("+h.vertices.length+"), skinIndices ("+h.skinIndices.length+"), and skinWeights ("+h.skinWeights.length+") should match.")}function f(b){if(void 0!==a.morphTargets)for(var d=0,e=a.morphTargets.length;d<e;d++){h.morphTargets[d]={},h.morphTargets[d].name=a.morphTargets[d].name,h.morphTargets[d].vertices=[];for(var f=h.morphTargets[d].vertices,g=a.morphTargets[d].vertices,i=0,j=g.length;i<j;i+=3){var k=new c.Vector3;k.x=g[i]*b,k.y=g[i+1]*b,k.z=g[i+2]*b,f.push(k)}}if(void 0!==a.morphColors&&a.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');for(var l=h.faces,m=a.morphColors[0].colors,d=0,e=l.length;d<e;d++)l[d].color.fromArray(m,3*d)}}function g(){var b=[],d=[];void 0!==a.animation&&d.push(a.animation),void 0!==a.animations&&(a.animations.length?d=d.concat(a.animations):d.push(a.animations));for(var e=0;e<d.length;e++){var f=c.AnimationClip.parseAnimation(d[e],h.bones);f&&b.push(f)}if(h.morphTargets){var g=c.AnimationClip.CreateClipsFromMorphTargetSequences(h.morphTargets,10);b=b.concat(g)}b.length>0&&(h.animations=b)}var h=new c.Geometry,i=void 0!==a.scale?1/a.scale:1;if(d(i),e(),f(i),g(),h.computeFaceNormals(),h.computeBoundingSphere(),void 0===a.materials||0===a.materials.length)return{geometry:h};var j=c.Loader.prototype.initMaterials(a.materials,b,this.crossOrigin);return{geometry:h,materials:j}}}),c.LoadingManager=function(a,b,c){var d=this,e=!1,f=0,g=0;this.onStart=void 0,this.onLoad=a,this.onProgress=b,this.onError=c,this.itemStart=function(a){g++,e===!1&&void 0!==d.onStart&&d.onStart(a,f,g),e=!0},this.itemEnd=function(a){f++,void 0!==d.onProgress&&d.onProgress(a,f,g),f===g&&(e=!1,void 0!==d.onLoad&&d.onLoad())},this.itemError=function(a){void 0!==d.onError&&d.onError(a)}},c.DefaultLoadingManager=new c.LoadingManager,c.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager},Object.assign(c.BufferGeometryLoader.prototype,{load:function(a,b,d,e){var f=this,g=new c.XHRLoader(f.manager);g.load(a,function(a){b(f.parse(JSON.parse(a)))},d,e)},parse:function(a){var b=new c.BufferGeometry,d=a.data.index,e={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};if(void 0!==d){var f=new e[d.type](d.array);b.setIndex(new c.BufferAttribute(f,1))}var g=a.data.attributes;for(var h in g){var i=g[h],f=new e[i.type](i.array);b.addAttribute(h,new c.BufferAttribute(f,i.itemSize,i.normalized))}var j=a.data.groups||a.data.drawcalls||a.data.offsets;if(void 0!==j)for(var k=0,l=j.length;k!==l;++k){var m=j[k];b.addGroup(m.start,m.count,m.materialIndex)}var n=a.data.boundingSphere;if(void 0!==n){var o=new c.Vector3;void 0!==n.center&&o.fromArray(n.center),b.boundingSphere=new c.Sphere(o,n.radius)}return b}}),c.MaterialLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager,this.textures={}},Object.assign(c.MaterialLoader.prototype,{load:function(a,b,d,e){var f=this,g=new c.XHRLoader(f.manager);g.load(a,function(a){b(f.parse(JSON.parse(a)))},d,e)},setTextures:function(a){this.textures=a},getTexture:function(a){var b=this.textures;return void 0===b[a]&&console.warn("THREE.MaterialLoader: Undefined texture",a),b[a]},parse:function(a){var b=new c[a.type];if(void 0!==a.uuid&&(b.uuid=a.uuid),void 0!==a.name&&(b.name=a.name),void 0!==a.color&&b.color.setHex(a.color),void 0!==a.roughness&&(b.roughness=a.roughness),void 0!==a.metalness&&(b.metalness=a.metalness),void 0!==a.emissive&&b.emissive.setHex(a.emissive),void 0!==a.specular&&b.specular.setHex(a.specular),void 0!==a.shininess&&(b.shininess=a.shininess),void 0!==a.uniforms&&(b.uniforms=a.uniforms),void 0!==a.vertexShader&&(b.vertexShader=a.vertexShader),void 0!==a.fragmentShader&&(b.fragmentShader=a.fragmentShader),void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors),void 0!==a.shading&&(b.shading=a.shading),void 0!==a.blending&&(b.blending=a.blending),void 0!==a.side&&(b.side=a.side),void 0!==a.opacity&&(b.opacity=a.opacity),void 0!==a.transparent&&(b.transparent=a.transparent),void 0!==a.alphaTest&&(b.alphaTest=a.alphaTest),void 0!==a.depthTest&&(b.depthTest=a.depthTest),void 0!==a.depthWrite&&(b.depthWrite=a.depthWrite),void 0!==a.colorWrite&&(b.colorWrite=a.colorWrite),void 0!==a.wireframe&&(b.wireframe=a.wireframe),void 0!==a.wireframeLinewidth&&(b.wireframeLinewidth=a.wireframeLinewidth),void 0!==a.size&&(b.size=a.size),void 0!==a.sizeAttenuation&&(b.sizeAttenuation=a.sizeAttenuation),void 0!==a.map&&(b.map=this.getTexture(a.map)),void 0!==a.alphaMap&&(b.alphaMap=this.getTexture(a.alphaMap),b.transparent=!0),void 0!==a.bumpMap&&(b.bumpMap=this.getTexture(a.bumpMap)),void 0!==a.bumpScale&&(b.bumpScale=a.bumpScale),void 0!==a.normalMap&&(b.normalMap=this.getTexture(a.normalMap)),void 0!==a.normalScale){var d=a.normalScale;Array.isArray(d)===!1&&(d=[d,d]),b.normalScale=(new c.Vector2).fromArray(d)}if(void 0!==a.displacementMap&&(b.displacementMap=this.getTexture(a.displacementMap)),void 0!==a.displacementScale&&(b.displacementScale=a.displacementScale),void 0!==a.displacementBias&&(b.displacementBias=a.displacementBias),void 0!==a.roughnessMap&&(b.roughnessMap=this.getTexture(a.roughnessMap)),void 0!==a.metalnessMap&&(b.metalnessMap=this.getTexture(a.metalnessMap)),void 0!==a.emissiveMap&&(b.emissiveMap=this.getTexture(a.emissiveMap)),void 0!==a.emissiveIntensity&&(b.emissiveIntensity=a.emissiveIntensity),void 0!==a.specularMap&&(b.specularMap=this.getTexture(a.specularMap)),void 0!==a.envMap&&(b.envMap=this.getTexture(a.envMap),b.combine=c.MultiplyOperation),void 0!==a.reflectivity&&(b.reflectivity=a.reflectivity),void 0!==a.lightMap&&(b.lightMap=this.getTexture(a.lightMap)),void 0!==a.lightMapIntensity&&(b.lightMapIntensity=a.lightMapIntensity),void 0!==a.aoMap&&(b.aoMap=this.getTexture(a.aoMap)),void 0!==a.aoMapIntensity&&(b.aoMapIntensity=a.aoMapIntensity),void 0!==a.materials)for(var e=0,f=a.materials.length;e<f;e++)b.materials.push(this.parse(a.materials[e]));return b}}),c.ObjectLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager,this.texturePath=""},Object.assign(c.ObjectLoader.prototype,{load:function(a,b,d,e){""===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf("/")+1));var f=this,g=new c.XHRLoader(f.manager);g.load(a,function(a){f.parse(JSON.parse(a),b)},d,e)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseGeometries(a.geometries),d=this.parseImages(a.images,function(){void 0!==b&&b(g)}),e=this.parseTextures(a.textures,d),f=this.parseMaterials(a.materials,e),g=this.parseObject(a.object,c,f);return a.animations&&(g.animations=this.parseAnimations(a.animations)),void 0!==a.images&&0!==a.images.length||void 0!==b&&b(g),g},parseGeometries:function(a){var b={};if(void 0!==a)for(var d=new c.JSONLoader,e=new c.BufferGeometryLoader,f=0,g=a.length;f<g;f++){var h,i=a[f];switch(i.type){case"PlaneGeometry":case"PlaneBufferGeometry":h=new c[i.type](i.width,i.height,i.widthSegments,i.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":h=new c[i.type](i.width,i.height,i.depth,i.widthSegments,i.heightSegments,i.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":h=new c[i.type](i.radius,i.segments,i.thetaStart,i.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":h=new c[i.type](i.radiusTop,i.radiusBottom,i.height,i.radialSegments,i.heightSegments,i.openEnded,i.thetaStart,i.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":h=new c[i.type](i.radius,i.height,i.radialSegments,i.heightSegments,i.openEnded,i.thetaStart,i.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":h=new c[i.type](i.radius,i.widthSegments,i.heightSegments,i.phiStart,i.phiLength,i.thetaStart,i.thetaLength);break;case"DodecahedronGeometry":case"IcosahedronGeometry":case"OctahedronGeometry":case"TetrahedronGeometry":h=new c[i.type](i.radius,i.detail);break;case"RingGeometry":case"RingBufferGeometry":h=new c[i.type](i.innerRadius,i.outerRadius,i.thetaSegments,i.phiSegments,i.thetaStart,i.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":h=new c[i.type](i.radius,i.tube,i.radialSegments,i.tubularSegments,i.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":h=new c[i.type](i.radius,i.tube,i.tubularSegments,i.radialSegments,i.p,i.q);break;case"LatheGeometry":case"LatheBufferGeometry":h=new c[i.type](i.points,i.segments,i.phiStart,i.phiLength);break;case"BufferGeometry":h=e.parse(i);break;case"Geometry":h=d.parse(i.data,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+i.type+'"');continue}h.uuid=i.uuid,void 0!==i.name&&(h.name=i.name),b[i.uuid]=h}return b},parseMaterials:function(a,b){var d={};if(void 0!==a){var e=new c.MaterialLoader;e.setTextures(b);for(var f=0,g=a.length;f<g;f++){var h=e.parse(a[f]);d[h.uuid]=h}}return d},parseAnimations:function(a){for(var b=[],d=0;d<a.length;d++){var e=c.AnimationClip.parse(a[d]);b.push(e)}return b},parseImages:function(a,b){function d(a){return e.manager.itemStart(a),h.load(a,function(){e.manager.itemEnd(a)})}var e=this,f={};if(void 0!==a&&a.length>0){var g=new c.LoadingManager(b),h=new c.ImageLoader(g);h.setCrossOrigin(this.crossOrigin);for(var i=0,j=a.length;i<j;i++){var k=a[i],l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(k.url)?k.url:e.texturePath+k.url;f[k.uuid]=d(l)}}return f},parseTextures:function(a,b){function d(a){return"number"==typeof a?a:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",a),c[a])}var e={};if(void 0!==a)for(var f=0,g=a.length;f<g;f++){var h=a[f];void 0===h.image&&console.warn('THREE.ObjectLoader: No "image" specified for',h.uuid),void 0===b[h.image]&&console.warn("THREE.ObjectLoader: Undefined image",h.image);var i=new c.Texture(b[h.image]);i.needsUpdate=!0,i.uuid=h.uuid,void 0!==h.name&&(i.name=h.name),void 0!==h.mapping&&(i.mapping=d(h.mapping)),void 0!==h.offset&&i.offset.fromArray(h.offset),
void 0!==h.repeat&&i.repeat.fromArray(h.repeat),void 0!==h.wrap&&(i.wrapS=d(h.wrap[0]),i.wrapT=d(h.wrap[1])),void 0!==h.minFilter&&(i.minFilter=d(h.minFilter)),void 0!==h.magFilter&&(i.magFilter=d(h.magFilter)),void 0!==h.anisotropy&&(i.anisotropy=h.anisotropy),void 0!==h.flipY&&(i.flipY=h.flipY),e[h.uuid]=i}return e},parseObject:function(){var a=new c.Matrix4;return function b(d,e,f){function g(a){return void 0===e[a]&&console.warn("THREE.ObjectLoader: Undefined geometry",a),e[a]}function h(a){if(void 0!==a)return void 0===f[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),f[a]}var i;switch(d.type){case"Scene":i=new c.Scene;break;case"PerspectiveCamera":i=new c.PerspectiveCamera(d.fov,d.aspect,d.near,d.far),void 0!==d.focus&&(i.focus=d.focus),void 0!==d.zoom&&(i.zoom=d.zoom),void 0!==d.filmGauge&&(i.filmGauge=d.filmGauge),void 0!==d.filmOffset&&(i.filmOffset=d.filmOffset),void 0!==d.view&&(i.view=Object.assign({},d.view));break;case"OrthographicCamera":i=new c.OrthographicCamera(d.left,d.right,d.top,d.bottom,d.near,d.far);break;case"AmbientLight":i=new c.AmbientLight(d.color,d.intensity);break;case"DirectionalLight":i=new c.DirectionalLight(d.color,d.intensity);break;case"PointLight":i=new c.PointLight(d.color,d.intensity,d.distance,d.decay);break;case"SpotLight":i=new c.SpotLight(d.color,d.intensity,d.distance,d.angle,d.penumbra,d.decay);break;case"HemisphereLight":i=new c.HemisphereLight(d.color,d.groundColor,d.intensity);break;case"Mesh":var j=g(d.geometry),k=h(d.material);i=j.bones&&j.bones.length>0?new c.SkinnedMesh(j,k):new c.Mesh(j,k);break;case"LOD":i=new c.LOD;break;case"Line":i=new c.Line(g(d.geometry),h(d.material),d.mode);break;case"PointCloud":case"Points":i=new c.Points(g(d.geometry),h(d.material));break;case"Sprite":i=new c.Sprite(h(d.material));break;case"Group":i=new c.Group;break;default:i=new c.Object3D}if(i.uuid=d.uuid,void 0!==d.name&&(i.name=d.name),void 0!==d.matrix?(a.fromArray(d.matrix),a.decompose(i.position,i.quaternion,i.scale)):(void 0!==d.position&&i.position.fromArray(d.position),void 0!==d.rotation&&i.rotation.fromArray(d.rotation),void 0!==d.scale&&i.scale.fromArray(d.scale)),void 0!==d.castShadow&&(i.castShadow=d.castShadow),void 0!==d.receiveShadow&&(i.receiveShadow=d.receiveShadow),void 0!==d.visible&&(i.visible=d.visible),void 0!==d.userData&&(i.userData=d.userData),void 0!==d.children)for(var l in d.children)i.add(this.parseObject(d.children[l],e,f));if("LOD"===d.type)for(var m=d.levels,n=0;n<m.length;n++){var o=m[n],l=i.getObjectByProperty("uuid",o.object);void 0!==l&&i.addLevel(l,o.distance)}return i}}()}),c.TextureLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager},Object.assign(c.TextureLoader.prototype,{load:function(a,b,d,e){var f=new c.Texture,g=new c.ImageLoader(this.manager);return g.setCrossOrigin(this.crossOrigin),g.setPath(this.path),g.load(a,function(d){var e=a.search(/\.(jpg|jpeg)$/)>0||0===a.search(/^data\:image\/jpeg/);f.format=e?c.RGBFormat:c.RGBAFormat,f.image=d,f.needsUpdate=!0,void 0!==b&&b(f)},d,e),f},setCrossOrigin:function(a){return this.crossOrigin=a,this},setPath:function(a){return this.path=a,this}}),c.CubeTextureLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager},Object.assign(c.CubeTextureLoader.prototype,{load:function(a,b,d,e){function f(c){h.load(a[c],function(a){g.images[c]=a,i++,6===i&&(g.needsUpdate=!0,b&&b(g))},void 0,e)}var g=new c.CubeTexture,h=new c.ImageLoader(this.manager);h.setCrossOrigin(this.crossOrigin),h.setPath(this.path);for(var i=0,j=0;j<a.length;++j)f(j);return g},setCrossOrigin:function(a){return this.crossOrigin=a,this},setPath:function(a){return this.path=a,this}}),c.DataTextureLoader=c.BinaryTextureLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager,this._parser=null},Object.assign(c.BinaryTextureLoader.prototype,{load:function(a,b,d,e){var f=this,g=new c.DataTexture,h=new c.XHRLoader(this.manager);return h.setResponseType("arraybuffer"),h.load(a,function(a){var d=f._parser(a);d&&(void 0!==d.image?g.image=d.image:void 0!==d.data&&(g.image.width=d.width,g.image.height=d.height,g.image.data=d.data),g.wrapS=void 0!==d.wrapS?d.wrapS:c.ClampToEdgeWrapping,g.wrapT=void 0!==d.wrapT?d.wrapT:c.ClampToEdgeWrapping,g.magFilter=void 0!==d.magFilter?d.magFilter:c.LinearFilter,g.minFilter=void 0!==d.minFilter?d.minFilter:c.LinearMipMapLinearFilter,g.anisotropy=void 0!==d.anisotropy?d.anisotropy:1,void 0!==d.format&&(g.format=d.format),void 0!==d.type&&(g.type=d.type),void 0!==d.mipmaps&&(g.mipmaps=d.mipmaps),1===d.mipmapCount&&(g.minFilter=c.LinearFilter),g.needsUpdate=!0,b&&b(g,d))},d,e),g}}),c.CompressedTextureLoader=function(a){this.manager=void 0!==a?a:c.DefaultLoadingManager,this._parser=null},Object.assign(c.CompressedTextureLoader.prototype,{load:function(a,b,d,e){function f(f){j.load(a[f],function(a){var d=g._parser(a,!0);h[f]={width:d.width,height:d.height,format:d.format,mipmaps:d.mipmaps},k+=1,6===k&&(1===d.mipmapCount&&(i.minFilter=c.LinearFilter),i.format=d.format,i.needsUpdate=!0,b&&b(i))},d,e)}var g=this,h=[],i=new c.CompressedTexture;i.image=h;var j=new c.XHRLoader(this.manager);if(j.setPath(this.path),j.setResponseType("arraybuffer"),Array.isArray(a))for(var k=0,l=0,m=a.length;l<m;++l)f(l);else j.load(a,function(a){var d=g._parser(a,!0);if(d.isCubemap)for(var e=d.mipmaps.length/d.mipmapCount,f=0;f<e;f++){h[f]={mipmaps:[]};for(var j=0;j<d.mipmapCount;j++)h[f].mipmaps.push(d.mipmaps[f*d.mipmapCount+j]),h[f].format=d.format,h[f].width=d.width,h[f].height=d.height}else i.image.width=d.width,i.image.height=d.height,i.mipmaps=d.mipmaps;1===d.mipmapCount&&(i.minFilter=c.LinearFilter),i.format=d.format,i.needsUpdate=!0,b&&b(i)},d,e);return i},setPath:function(a){return this.path=a,this}}),c.Material=function(){Object.defineProperty(this,"id",{value:c.MaterialIdCount++}),this.uuid=c.Math.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=c.NormalBlending,this.side=c.FrontSide,this.shading=c.SmoothShading,this.vertexColors=c.NoColors,this.opacity=1,this.transparent=!1,this.blendSrc=c.SrcAlphaFactor,this.blendDst=c.OneMinusSrcAlphaFactor,this.blendEquation=c.AddEquation,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=c.LessEqualDepth,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipShadows=!1,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this._needsUpdate=!0},c.Material.prototype={constructor:c.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){a===!0&&this.update(),this._needsUpdate=a},setValues:function(a){if(void 0!==a)for(var b in a){var d=a[b];if(void 0!==d){var e=this[b];void 0!==e?e instanceof c.Color?e.set(d):e instanceof c.Vector3&&d instanceof c.Vector3?e.copy(d):"overdraw"===b?this[b]=Number(d):this[b]=d:console.warn("THREE."+this.type+": '"+b+"' is not a property of this material.")}else console.warn("THREE.Material: '"+b+"' parameter is undefined.")}},toJSON:function(a){function b(a){var b=[];for(var c in a){var d=a[c];delete d.metadata,b.push(d)}return b}var d=void 0===a;d&&(a={textures:{},images:{}});var e={metadata:{version:4.4,type:"Material",generator:"Material.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),this.color instanceof c.Color&&(e.color=this.color.getHex()),void 0!==this.roughness&&(e.roughness=this.roughness),void 0!==this.metalness&&(e.metalness=this.metalness),this.emissive instanceof c.Color&&(e.emissive=this.emissive.getHex()),this.specular instanceof c.Color&&(e.specular=this.specular.getHex()),void 0!==this.shininess&&(e.shininess=this.shininess),this.map instanceof c.Texture&&(e.map=this.map.toJSON(a).uuid),this.alphaMap instanceof c.Texture&&(e.alphaMap=this.alphaMap.toJSON(a).uuid),this.lightMap instanceof c.Texture&&(e.lightMap=this.lightMap.toJSON(a).uuid),this.bumpMap instanceof c.Texture&&(e.bumpMap=this.bumpMap.toJSON(a).uuid,e.bumpScale=this.bumpScale),this.normalMap instanceof c.Texture&&(e.normalMap=this.normalMap.toJSON(a).uuid,e.normalScale=this.normalScale.toArray()),this.displacementMap instanceof c.Texture&&(e.displacementMap=this.displacementMap.toJSON(a).uuid,e.displacementScale=this.displacementScale,e.displacementBias=this.displacementBias),this.roughnessMap instanceof c.Texture&&(e.roughnessMap=this.roughnessMap.toJSON(a).uuid),this.metalnessMap instanceof c.Texture&&(e.metalnessMap=this.metalnessMap.toJSON(a).uuid),this.emissiveMap instanceof c.Texture&&(e.emissiveMap=this.emissiveMap.toJSON(a).uuid),this.specularMap instanceof c.Texture&&(e.specularMap=this.specularMap.toJSON(a).uuid),this.envMap instanceof c.Texture&&(e.envMap=this.envMap.toJSON(a).uuid,e.reflectivity=this.reflectivity),void 0!==this.size&&(e.size=this.size),void 0!==this.sizeAttenuation&&(e.sizeAttenuation=this.sizeAttenuation),this.blending!==c.NormalBlending&&(e.blending=this.blending),this.shading!==c.SmoothShading&&(e.shading=this.shading),this.side!==c.FrontSide&&(e.side=this.side),this.vertexColors!==c.NoColors&&(e.vertexColors=this.vertexColors),this.opacity<1&&(e.opacity=this.opacity),this.transparent===!0&&(e.transparent=this.transparent),this.alphaTest>0&&(e.alphaTest=this.alphaTest),this.premultipliedAlpha===!0&&(e.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(e.wireframe=this.wireframe),this.wireframeLinewidth>1&&(e.wireframeLinewidth=this.wireframeLinewidth),d){var f=b(a.textures),g=b(a.images);f.length>0&&(e.textures=f),g.length>0&&(e.images=g)}return e},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.name=a.name,this.fog=a.fog,this.lights=a.lights,this.blending=a.blending,this.side=a.side,this.shading=a.shading,this.vertexColors=a.vertexColors,this.opacity=a.opacity,this.transparent=a.transparent,this.blendSrc=a.blendSrc,this.blendDst=a.blendDst,this.blendEquation=a.blendEquation,this.blendSrcAlpha=a.blendSrcAlpha,this.blendDstAlpha=a.blendDstAlpha,this.blendEquationAlpha=a.blendEquationAlpha,this.depthFunc=a.depthFunc,this.depthTest=a.depthTest,this.depthWrite=a.depthWrite,this.colorWrite=a.colorWrite,this.precision=a.precision,this.polygonOffset=a.polygonOffset,this.polygonOffsetFactor=a.polygonOffsetFactor,this.polygonOffsetUnits=a.polygonOffsetUnits,this.alphaTest=a.alphaTest,this.premultipliedAlpha=a.premultipliedAlpha,this.overdraw=a.overdraw,this.visible=a.visible,this.clipShadows=a.clipShadows;var b=a.clippingPlanes,c=null;if(null!==b){var d=b.length;c=new Array(d);for(var e=0;e!==d;++e)c[e]=b[e].clone()}return this.clippingPlanes=c,this},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}},Object.assign(c.Material.prototype,c.EventDispatcher.prototype),c.MaterialIdCount=0,c.LineBasicMaterial=function(a){c.Material.call(this),this.type="LineBasicMaterial",this.color=new c.Color(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(a)},c.LineBasicMaterial.prototype=Object.create(c.Material.prototype),c.LineBasicMaterial.prototype.constructor=c.LineBasicMaterial,c.LineBasicMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.linewidth=a.linewidth,this.linecap=a.linecap,this.linejoin=a.linejoin,this},c.LineDashedMaterial=function(a){c.Material.call(this),this.type="LineDashedMaterial",this.color=new c.Color(16777215),this.linewidth=1,this.scale=1,this.dashSize=3,this.gapSize=1,this.lights=!1,this.setValues(a)},c.LineDashedMaterial.prototype=Object.create(c.Material.prototype),c.LineDashedMaterial.prototype.constructor=c.LineDashedMaterial,c.LineDashedMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.linewidth=a.linewidth,this.scale=a.scale,this.dashSize=a.dashSize,this.gapSize=a.gapSize,this},c.MeshBasicMaterial=function(a){c.Material.call(this),this.type="MeshBasicMaterial",this.color=new c.Color(16777215),this.map=null,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=c.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(a)},c.MeshBasicMaterial.prototype=Object.create(c.Material.prototype),c.MeshBasicMaterial.prototype.constructor=c.MeshBasicMaterial,c.MeshBasicMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this},c.MeshDepthMaterial=function(a){c.Material.call(this),this.type="MeshDepthMaterial",this.depthPacking=c.BasicDepthPacking,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(a)},c.MeshDepthMaterial.prototype=Object.create(c.Material.prototype),c.MeshDepthMaterial.prototype.constructor=c.MeshDepthMaterial,c.MeshDepthMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.depthPacking=a.depthPacking,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.map=a.map,this.alphaMap=a.alphaMap,this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this},c.MeshLambertMaterial=function(a){c.Material.call(this),this.type="MeshLambertMaterial",this.color=new c.Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new c.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=c.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(a)},c.MeshLambertMaterial.prototype=Object.create(c.Material.prototype),c.MeshLambertMaterial.prototype.constructor=c.MeshLambertMaterial,c.MeshLambertMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this},c.MeshNormalMaterial=function(a){c.Material.call(this,a),this.type="MeshNormalMaterial",this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.morphTargets=!1,this.setValues(a)},c.MeshNormalMaterial.prototype=Object.create(c.Material.prototype),c.MeshNormalMaterial.prototype.constructor=c.MeshNormalMaterial,c.MeshNormalMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this},c.MeshPhongMaterial=function(a){c.Material.call(this),this.type="MeshPhongMaterial",this.color=new c.Color(16777215),this.specular=new c.Color(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new c.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new c.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=c.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(a)},c.MeshPhongMaterial.prototype=Object.create(c.Material.prototype),c.MeshPhongMaterial.prototype.constructor=c.MeshPhongMaterial,c.MeshPhongMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.specular.copy(a.specular),this.shininess=a.shininess,this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this},c.MeshStandardMaterial=function(a){c.Material.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new c.Color(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new c.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new c.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(a)},c.MeshStandardMaterial.prototype=Object.create(c.Material.prototype),c.MeshStandardMaterial.prototype.constructor=c.MeshStandardMaterial,c.MeshStandardMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.defines={STANDARD:""},this.color.copy(a.color),this.roughness=a.roughness,this.metalness=a.metalness,this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.roughnessMap=a.roughnessMap,this.metalnessMap=a.metalnessMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.envMapIntensity=a.envMapIntensity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this},c.MeshPhysicalMaterial=function(a){c.MeshStandardMaterial.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(a)},c.MeshPhysicalMaterial.prototype=Object.create(c.MeshStandardMaterial.prototype),c.MeshPhysicalMaterial.prototype.constructor=c.MeshPhysicalMaterial,c.MeshPhysicalMaterial.prototype.copy=function(a){return c.MeshStandardMaterial.prototype.copy.call(this,a),this.defines={PHYSICAL:""},this.reflectivity=a.reflectivity,this.clearCoat=a.clearCoat,this.clearCoatRoughness=a.clearCoatRoughness,this},c.MultiMaterial=function(a){this.uuid=c.Math.generateUUID(),this.type="MultiMaterial",this.materials=a instanceof Array?a:[],this.visible=!0},c.MultiMaterial.prototype={constructor:c.MultiMaterial,toJSON:function(a){for(var b={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},c=this.materials,d=0,e=c.length;d<e;d++){var f=c[d].toJSON(a);delete f.metadata,b.materials.push(f)}return b.visible=this.visible,b},clone:function(){for(var a=new this.constructor,b=0;b<this.materials.length;b++)a.materials.push(this.materials[b].clone());return a.visible=this.visible,a}},c.PointsMaterial=function(a){c.Material.call(this),this.type="PointsMaterial",this.color=new c.Color(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(a)},c.PointsMaterial.prototype=Object.create(c.Material.prototype),c.PointsMaterial.prototype.constructor=c.PointsMaterial,c.PointsMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.size=a.size,this.sizeAttenuation=a.sizeAttenuation,this},c.ShaderMaterial=function(a){c.Material.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==a&&(void 0!==a.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(a))},c.ShaderMaterial.prototype=Object.create(c.Material.prototype),c.ShaderMaterial.prototype.constructor=c.ShaderMaterial,c.ShaderMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.fragmentShader=a.fragmentShader,this.vertexShader=a.vertexShader,this.uniforms=c.UniformsUtils.clone(a.uniforms),this.defines=a.defines,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.lights=a.lights,this.clipping=a.clipping,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this.extensions=a.extensions,this},c.ShaderMaterial.prototype.toJSON=function(a){var b=c.Material.prototype.toJSON.call(this,a);return b.uniforms=this.uniforms,b.vertexShader=this.vertexShader,b.fragmentShader=this.fragmentShader,b},c.RawShaderMaterial=function(a){c.ShaderMaterial.call(this,a),this.type="RawShaderMaterial"},c.RawShaderMaterial.prototype=Object.create(c.ShaderMaterial.prototype),c.RawShaderMaterial.prototype.constructor=c.RawShaderMaterial,c.SpriteMaterial=function(a){c.Material.call(this),this.type="SpriteMaterial",this.color=new c.Color(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(a)},c.SpriteMaterial.prototype=Object.create(c.Material.prototype),c.SpriteMaterial.prototype.constructor=c.SpriteMaterial,c.SpriteMaterial.prototype.copy=function(a){return c.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.rotation=a.rotation,this},c.ShadowMaterial=function(){c.ShaderMaterial.call(this,{uniforms:c.UniformsUtils.merge([c.UniformsLib.lights,{opacity:{value:1}}]),vertexShader:c.ShaderChunk.shadow_vert,fragmentShader:c.ShaderChunk.shadow_frag}),this.lights=!0,this.transparent=!0,Object.defineProperties(this,{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(a){this.uniforms.opacity.value=a}}})},c.ShadowMaterial.prototype=Object.create(c.ShaderMaterial.prototype),c.ShadowMaterial.prototype.constructor=c.ShadowMaterial,c.Texture=function(a,b,d,e,f,g,h,i,j,k){Object.defineProperty(this,"id",{value:c.TextureIdCount++}),this.uuid=c.Math.generateUUID(),this.name="",this.sourceFile="",this.image=void 0!==a?a:c.Texture.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==b?b:c.Texture.DEFAULT_MAPPING,this.wrapS=void 0!==d?d:c.ClampToEdgeWrapping,this.wrapT=void 0!==e?e:c.ClampToEdgeWrapping,this.magFilter=void 0!==f?f:c.LinearFilter,this.minFilter=void 0!==g?g:c.LinearMipMapLinearFilter,this.anisotropy=void 0!==j?j:1,this.format=void 0!==h?h:c.RGBAFormat,this.type=void 0!==i?i:c.UnsignedByteType,this.offset=new c.Vector2(0,0),this.repeat=new c.Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==k?k:c.LinearEncoding,this.version=0,this.onUpdate=null},c.Texture.DEFAULT_IMAGE=void 0,c.Texture.DEFAULT_MAPPING=c.UVMapping,c.Texture.prototype={constructor:c.Texture,set needsUpdate(a){a===!0&&this.version++},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.image=a.image,this.mipmaps=a.mipmaps.slice(0),this.mapping=a.mapping,this.wrapS=a.wrapS,this.wrapT=a.wrapT,this.magFilter=a.magFilter,this.minFilter=a.minFilter,this.anisotropy=a.anisotropy,this.format=a.format,this.type=a.type,this.offset.copy(a.offset),this.repeat.copy(a.repeat),this.generateMipmaps=a.generateMipmaps,this.premultiplyAlpha=a.premultiplyAlpha,this.flipY=a.flipY,this.unpackAlignment=a.unpackAlignment,this.encoding=a.encoding,this},toJSON:function(a){function b(a){var b;return void 0!==a.toDataURL?b=a:(b=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),b.width=a.width,b.height=a.height,b.getContext("2d").drawImage(a,0,0,a.width,a.height)),b.width>2048||b.height>2048?b.toDataURL("image/jpeg",.6):b.toDataURL("image/png")}if(void 0!==a.textures[this.uuid])return a.textures[this.uuid];var d={metadata:{version:4.4,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var e=this.image;void 0===e.uuid&&(e.uuid=c.Math.generateUUID()),void 0===a.images[e.uuid]&&(a.images[e.uuid]={uuid:e.uuid,url:b(e)}),d.image=e.uuid}return a.textures[this.uuid]=d,d},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(a){if(this.mapping===c.UVMapping){if(a.multiply(this.repeat),a.add(this.offset),a.x<0||a.x>1)switch(this.wrapS){case c.RepeatWrapping:a.x=a.x-Math.floor(a.x);break;case c.ClampToEdgeWrapping:a.x=a.x<0?0:1;break;case c.MirroredRepeatWrapping:1===Math.abs(Math.floor(a.x)%2)?a.x=Math.ceil(a.x)-a.x:a.x=a.x-Math.floor(a.x)}if(a.y<0||a.y>1)switch(this.wrapT){case c.RepeatWrapping:a.y=a.y-Math.floor(a.y);break;case c.ClampToEdgeWrapping:a.y=a.y<0?0:1;break;case c.MirroredRepeatWrapping:1===Math.abs(Math.floor(a.y)%2)?a.y=Math.ceil(a.y)-a.y:a.y=a.y-Math.floor(a.y)}this.flipY&&(a.y=1-a.y)}}},Object.assign(c.Texture.prototype,c.EventDispatcher.prototype),c.TextureIdCount=0,c.DepthTexture=function(a,b,d,e,f,g,h,i,j){c.Texture.call(this,null,e,f,g,h,i,c.DepthFormat,d,j),this.image={width:a,height:b},this.type=void 0!==d?d:c.UnsignedShortType,this.magFilter=void 0!==h?h:c.NearestFilter,this.minFilter=void 0!==i?i:c.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},c.DepthTexture.prototype=Object.create(c.Texture.prototype),c.DepthTexture.prototype.constructor=c.DepthTexture,c.CanvasTexture=function(a,b,d,e,f,g,h,i,j){c.Texture.call(this,a,b,d,e,f,g,h,i,j),this.needsUpdate=!0},c.CanvasTexture.prototype=Object.create(c.Texture.prototype),c.CanvasTexture.prototype.constructor=c.CanvasTexture,c.CubeTexture=function(a,b,d,e,f,g,h,i,j,k){a=void 0!==a?a:[],b=void 0!==b?b:c.CubeReflectionMapping,c.Texture.call(this,a,b,d,e,f,g,h,i,j,k),this.flipY=!1},c.CubeTexture.prototype=Object.create(c.Texture.prototype),c.CubeTexture.prototype.constructor=c.CubeTexture,Object.defineProperty(c.CubeTexture.prototype,"images",{get:function(){return this.image},set:function(a){this.image=a}}),c.CompressedTexture=function(a,b,d,e,f,g,h,i,j,k,l,m){c.Texture.call(this,null,g,h,i,j,k,e,f,l,m),this.image={width:b,height:d},this.mipmaps=a,this.flipY=!1,this.generateMipmaps=!1},c.CompressedTexture.prototype=Object.create(c.Texture.prototype),c.CompressedTexture.prototype.constructor=c.CompressedTexture,c.DataTexture=function(a,b,d,e,f,g,h,i,j,k,l,m){c.Texture.call(this,null,g,h,i,j,k,e,f,l,m),this.image={data:a,width:b,height:d},this.magFilter=void 0!==j?j:c.NearestFilter,this.minFilter=void 0!==k?k:c.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},c.DataTexture.prototype=Object.create(c.Texture.prototype),c.DataTexture.prototype.constructor=c.DataTexture,c.VideoTexture=function(a,b,d,e,f,g,h,i,j){function k(){requestAnimationFrame(k),a.readyState>=a.HAVE_CURRENT_DATA&&(l.needsUpdate=!0)}c.Texture.call(this,a,b,d,e,f,g,h,i,j),this.generateMipmaps=!1;var l=this;k()},c.VideoTexture.prototype=Object.create(c.Texture.prototype),c.VideoTexture.prototype.constructor=c.VideoTexture,c.Group=function(){c.Object3D.call(this),this.type="Group"},c.Group.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Group}),c.Points=function(a,b){c.Object3D.call(this),this.type="Points",this.geometry=void 0!==a?a:new c.BufferGeometry,this.material=void 0!==b?b:new c.PointsMaterial({color:16777215*Math.random()})},c.Points.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Points,raycast:function(){var a=new c.Matrix4,b=new c.Ray,d=new c.Sphere;return function e(f,g){function h(a,c){var d=b.distanceSqToPoint(a);if(d<n){var e=b.closestPointToPoint(a);e.applyMatrix4(k);var h=f.ray.origin.distanceTo(e);if(h<f.near||h>f.far)return;g.push({distance:h,distanceToRay:Math.sqrt(d),point:e.clone(),index:c,face:null,object:i})}}var i=this,j=this.geometry,k=this.matrixWorld,l=f.params.Points.threshold;if(null===j.boundingSphere&&j.computeBoundingSphere(),d.copy(j.boundingSphere),d.applyMatrix4(k),f.ray.intersectsSphere(d)!==!1){a.getInverse(k),b.copy(f.ray).applyMatrix4(a);var m=l/((this.scale.x+this.scale.y+this.scale.z)/3),n=m*m,o=new c.Vector3;if(j instanceof c.BufferGeometry){var p=j.index,q=j.attributes,r=q.position.array;if(null!==p)for(var s=p.array,t=0,u=s.length;t<u;t++){var v=s[t];o.fromArray(r,3*v),h(o,v)}else for(var t=0,w=r.length/3;t<w;t++)o.fromArray(r,3*t),h(o,t)}else for(var x=j.vertices,t=0,w=x.length;t<w;t++)h(x[t],t)}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),c.Line=function(a,b,d){return 1===d?(console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new c.LineSegments(a,b)):(c.Object3D.call(this),this.type="Line",this.geometry=void 0!==a?a:new c.BufferGeometry,void(this.material=void 0!==b?b:new c.LineBasicMaterial({color:16777215*Math.random()})))},c.Line.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Line,raycast:function(){var a=new c.Matrix4,b=new c.Ray,d=new c.Sphere;return function e(f,g){
var h=f.linePrecision,i=h*h,j=this.geometry,k=this.matrixWorld;if(null===j.boundingSphere&&j.computeBoundingSphere(),d.copy(j.boundingSphere),d.applyMatrix4(k),f.ray.intersectsSphere(d)!==!1){a.getInverse(k),b.copy(f.ray).applyMatrix4(a);var l=new c.Vector3,m=new c.Vector3,n=new c.Vector3,o=new c.Vector3,p=this instanceof c.LineSegments?2:1;if(j instanceof c.BufferGeometry){var q=j.index,r=j.attributes,s=r.position.array;if(null!==q)for(var t=q.array,u=0,v=t.length-1;u<v;u+=p){var w=t[u],x=t[u+1];l.fromArray(s,3*w),m.fromArray(s,3*x);var y=b.distanceSqToSegment(l,m,o,n);if(!(y>i)){o.applyMatrix4(this.matrixWorld);var z=f.ray.origin.distanceTo(o);z<f.near||z>f.far||g.push({distance:z,point:n.clone().applyMatrix4(this.matrixWorld),index:u,face:null,faceIndex:null,object:this})}}else for(var u=0,v=s.length/3-1;u<v;u+=p){l.fromArray(s,3*u),m.fromArray(s,3*u+3);var y=b.distanceSqToSegment(l,m,o,n);if(!(y>i)){o.applyMatrix4(this.matrixWorld);var z=f.ray.origin.distanceTo(o);z<f.near||z>f.far||g.push({distance:z,point:n.clone().applyMatrix4(this.matrixWorld),index:u,face:null,faceIndex:null,object:this})}}}else if(j instanceof c.Geometry)for(var A=j.vertices,B=A.length,u=0;u<B-1;u+=p){var y=b.distanceSqToSegment(A[u],A[u+1],o,n);if(!(y>i)){o.applyMatrix4(this.matrixWorld);var z=f.ray.origin.distanceTo(o);z<f.near||z>f.far||g.push({distance:z,point:n.clone().applyMatrix4(this.matrixWorld),index:u,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),c.LineSegments=function(a,b){c.Line.call(this,a,b),this.type="LineSegments"},c.LineSegments.prototype=Object.assign(Object.create(c.Line.prototype),{constructor:c.LineSegments}),c.Mesh=function(a,b){c.Object3D.call(this),this.type="Mesh",this.geometry=void 0!==a?a:new c.BufferGeometry,this.material=void 0!==b?b:new c.MeshBasicMaterial({color:16777215*Math.random()}),this.drawMode=c.TrianglesDrawMode,this.updateMorphTargets()},c.Mesh.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Mesh,setDrawMode:function(a){this.drawMode=a},copy:function(a){return c.Object3D.prototype.copy.call(this,a),this.drawMode=a.drawMode,this},updateMorphTargets:function(){if(void 0!==this.geometry.morphTargets&&this.geometry.morphTargets.length>0){this.morphTargetBase=-1,this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}},getMorphTargetIndexByName:function(a){return void 0!==this.morphTargetDictionary[a]?this.morphTargetDictionary[a]:(console.warn("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0."),0)},raycast:function(){function a(a,b,d,e,f,g,h){return c.Triangle.barycoordFromPoint(a,b,d,e,q),f.multiplyScalar(q.x),g.multiplyScalar(q.y),h.multiplyScalar(q.z),f.add(g).add(h),f.clone()}function b(a,b,d,e,f,g,h){var i,j=a.material;if(i=j.side===c.BackSide?d.intersectTriangle(g,f,e,!0,h):d.intersectTriangle(e,f,g,j.side!==c.DoubleSide,h),null===i)return null;s.copy(h),s.applyMatrix4(a.matrixWorld);var k=b.ray.origin.distanceTo(s);return k<b.near||k>b.far?null:{distance:k,point:s.clone(),object:a}}function d(d,e,f,g,k,l,m,q){h.fromArray(g,3*l),i.fromArray(g,3*m),j.fromArray(g,3*q);var s=b(d,e,f,h,i,j,r);return s&&(k&&(n.fromArray(k,2*l),o.fromArray(k,2*m),p.fromArray(k,2*q),s.uv=a(r,h,i,j,n,o,p)),s.face=new c.Face3(l,m,q,c.Triangle.normal(h,i,j)),s.faceIndex=l),s}var e=new c.Matrix4,f=new c.Ray,g=new c.Sphere,h=new c.Vector3,i=new c.Vector3,j=new c.Vector3,k=new c.Vector3,l=new c.Vector3,m=new c.Vector3,n=new c.Vector2,o=new c.Vector2,p=new c.Vector2,q=new c.Vector3,r=new c.Vector3,s=new c.Vector3;return function t(q,s){var t=this.geometry,u=this.material,v=this.matrixWorld;if(void 0!==u&&(null===t.boundingSphere&&t.computeBoundingSphere(),g.copy(t.boundingSphere),g.applyMatrix4(v),q.ray.intersectsSphere(g)!==!1&&(e.getInverse(v),f.copy(q.ray).applyMatrix4(e),null===t.boundingBox||f.intersectsBox(t.boundingBox)!==!1))){var w,x;if(t instanceof c.BufferGeometry){var y,z,A,B=t.index,C=t.attributes,D=C.position.array;if(void 0!==C.uv&&(w=C.uv.array),null!==B)for(var E=B.array,F=0,G=E.length;F<G;F+=3)y=E[F],z=E[F+1],A=E[F+2],x=d(this,q,f,D,w,y,z,A),x&&(x.faceIndex=Math.floor(F/3),s.push(x));else for(var F=0,G=D.length;F<G;F+=9)y=F/3,z=y+1,A=y+2,x=d(this,q,f,D,w,y,z,A),x&&(x.index=y,s.push(x))}else if(t instanceof c.Geometry){var H,I,J,K=u instanceof c.MultiMaterial,L=K===!0?u.materials:null,M=t.vertices,N=t.faces,O=t.faceVertexUvs[0];O.length>0&&(w=O);for(var P=0,Q=N.length;P<Q;P++){var R=N[P],S=K===!0?L[R.materialIndex]:u;if(void 0!==S){if(H=M[R.a],I=M[R.b],J=M[R.c],S.morphTargets===!0){var T=t.morphTargets,U=this.morphTargetInfluences;h.set(0,0,0),i.set(0,0,0),j.set(0,0,0);for(var V=0,W=T.length;V<W;V++){var X=U[V];if(0!==X){var Y=T[V].vertices;h.addScaledVector(k.subVectors(Y[R.a],H),X),i.addScaledVector(l.subVectors(Y[R.b],I),X),j.addScaledVector(m.subVectors(Y[R.c],J),X)}}h.add(H),i.add(I),j.add(J),H=h,I=i,J=j}if(x=b(this,q,f,H,I,J,r)){if(w){var Z=w[P];n.copy(Z[0]),o.copy(Z[1]),p.copy(Z[2]),x.uv=a(r,H,I,J,n,o,p)}x.face=R,x.faceIndex=P,s.push(x)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),c.Bone=function(a){c.Object3D.call(this),this.type="Bone",this.skin=a},c.Bone.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Bone,copy:function(a){return c.Object3D.prototype.copy.call(this,a),this.skin=a.skin,this}}),c.Skeleton=function(a,b,d){if(this.useVertexTexture=void 0===d||d,this.identityMatrix=new c.Matrix4,a=a||[],this.bones=a.slice(0),this.useVertexTexture){var e=Math.sqrt(4*this.bones.length);e=c.Math.nextPowerOfTwo(Math.ceil(e)),e=Math.max(e,4),this.boneTextureWidth=e,this.boneTextureHeight=e,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new c.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,c.RGBAFormat,c.FloatType)}else this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else{console.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[];for(var f=0,g=this.bones.length;f<g;f++)this.boneInverses.push(new c.Matrix4)}},Object.assign(c.Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var d=new c.Matrix4;this.bones[a]&&d.getInverse(this.bones[a].matrixWorld),this.boneInverses.push(d)}},pose:function(){for(var a,b=0,d=this.bones.length;b<d;b++)a=this.bones[b],a&&a.matrixWorld.getInverse(this.boneInverses[b]);for(var b=0,d=this.bones.length;b<d;b++)a=this.bones[b],a&&(a.parent instanceof c.Bone?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale))},update:function(){var a=new c.Matrix4;return function b(){for(var b=0,c=this.bones.length;b<c;b++){var d=this.bones[b]?this.bones[b].matrixWorld:this.identityMatrix;a.multiplyMatrices(d,this.boneInverses[b]),a.toArray(this.boneMatrices,16*b)}this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),clone:function(){return new c.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)}}),c.SkinnedMesh=function(a,b,d){c.Mesh.call(this,a,b),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new c.Matrix4,this.bindMatrixInverse=new c.Matrix4;var e=[];if(this.geometry&&void 0!==this.geometry.bones){for(var f,g,h=0,i=this.geometry.bones.length;h<i;++h)g=this.geometry.bones[h],f=new c.Bone(this),e.push(f),f.name=g.name,f.position.fromArray(g.pos),f.quaternion.fromArray(g.rotq),void 0!==g.scl&&f.scale.fromArray(g.scl);for(var h=0,i=this.geometry.bones.length;h<i;++h)g=this.geometry.bones[h],g.parent!==-1&&null!==g.parent&&void 0!==e[g.parent]?e[g.parent].add(e[h]):this.add(e[h])}this.normalizeSkinWeights(),this.updateMatrixWorld(!0),this.bind(new c.Skeleton(e,(void 0),d),this.matrixWorld)},c.SkinnedMesh.prototype=Object.assign(Object.create(c.Mesh.prototype),{constructor:c.SkinnedMesh,bind:function(a,b){this.skeleton=a,void 0===b&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),b=this.matrixWorld),this.bindMatrix.copy(b),this.bindMatrixInverse.getInverse(b)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){if(this.geometry instanceof c.Geometry)for(var a=0;a<this.geometry.skinWeights.length;a++){var b=this.geometry.skinWeights[a],d=1/b.lengthManhattan();d!==1/0?b.multiplyScalar(d):b.set(1,0,0,0)}else if(this.geometry instanceof c.BufferGeometry)for(var e=new c.Vector4,f=this.geometry.attributes.skinWeight,a=0;a<f.count;a++){e.x=f.getX(a),e.y=f.getY(a),e.z=f.getZ(a),e.w=f.getW(a);var d=1/e.lengthManhattan();d!==1/0?e.multiplyScalar(d):e.set(1,0,0,0),f.setXYZW(a,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(a){c.Mesh.prototype.updateMatrixWorld.call(this,!0),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material,this.skeleton.useVertexTexture).copy(this)}}),c.LOD=function(){c.Object3D.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})},c.LOD.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.LOD,copy:function(a){c.Object3D.prototype.copy.call(this,a,!1);for(var b=a.levels,d=0,e=b.length;d<e;d++){var f=b[d];this.addLevel(f.object.clone(),f.distance)}return this},addLevel:function(a,b){void 0===b&&(b=0),b=Math.abs(b);for(var c=this.levels,d=0;d<c.length&&!(b<c[d].distance);d++);c.splice(d,0,{distance:b,object:a}),this.add(a)},getObjectForDistance:function(a){for(var b=this.levels,c=1,d=b.length;c<d&&!(a<b[c].distance);c++);return b[c-1].object},raycast:function(){var a=new c.Vector3;return function b(c,d){a.setFromMatrixPosition(this.matrixWorld);var e=c.ray.origin.distanceTo(a);this.getObjectForDistance(e).raycast(c,d)}}(),update:function(){var a=new c.Vector3,b=new c.Vector3;return function d(c){var d=this.levels;if(d.length>1){a.setFromMatrixPosition(c.matrixWorld),b.setFromMatrixPosition(this.matrixWorld);var e=a.distanceTo(b);d[0].object.visible=!0;for(var f=1,g=d.length;f<g&&e>=d[f].distance;f++)d[f-1].object.visible=!1,d[f].object.visible=!0;for(;f<g;f++)d[f].object.visible=!1}}}(),toJSON:function(a){var b=c.Object3D.prototype.toJSON.call(this,a);b.object.levels=[];for(var d=this.levels,e=0,f=d.length;e<f;e++){var g=d[e];b.object.levels.push({object:g.object.uuid,distance:g.distance})}return b}}),c.Sprite=function(a){c.Object3D.call(this),this.type="Sprite",this.material=void 0!==a?a:new c.SpriteMaterial},c.Sprite.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.Sprite,raycast:function(){var a=new c.Vector3;return function b(c,d){a.setFromMatrixPosition(this.matrixWorld);var e=c.ray.distanceSqToPoint(a),f=this.scale.x*this.scale.y/4;e>f||d.push({distance:Math.sqrt(e),point:this.position,face:null,object:this})}}(),clone:function(){return new this.constructor(this.material).copy(this)}}),c.LensFlare=function(a,b,d,e,f){c.Object3D.call(this),this.lensFlares=[],this.positionScreen=new c.Vector3,this.customUpdateCallback=void 0,void 0!==a&&this.add(a,b,d,e,f)},c.LensFlare.prototype=Object.assign(Object.create(c.Object3D.prototype),{constructor:c.LensFlare,copy:function(a){c.Object3D.prototype.copy.call(this,a),this.positionScreen.copy(a.positionScreen),this.customUpdateCallback=a.customUpdateCallback;for(var b=0,d=a.lensFlares.length;b<d;b++)this.lensFlares.push(a.lensFlares[b]);return this},add:function(a,b,d,e,f,g){void 0===b&&(b=-1),void 0===d&&(d=0),void 0===g&&(g=1),void 0===f&&(f=new c.Color(16777215)),void 0===e&&(e=c.NormalBlending),d=Math.min(d,Math.max(0,d)),this.lensFlares.push({texture:a,size:b,distance:d,x:0,y:0,z:0,scale:1,rotation:0,opacity:g,color:f,blending:e})},updateLensFlares:function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*.25,c.rotation+=.25*(c.wantedRotation-c.rotation)}}),c.Scene=function(){c.Object3D.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0},c.Scene.prototype=Object.create(c.Object3D.prototype),c.Scene.prototype.constructor=c.Scene,c.Scene.prototype.copy=function(a,b){return c.Object3D.prototype.copy.call(this,a,b),null!==a.background&&(this.background=a.background.clone()),null!==a.fog&&(this.fog=a.fog.clone()),null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone()),this.autoUpdate=a.autoUpdate,this.matrixAutoUpdate=a.matrixAutoUpdate,this},c.Fog=function(a,b,d){this.name="",this.color=new c.Color(a),this.near=void 0!==b?b:1,this.far=void 0!==d?d:1e3},c.Fog.prototype.clone=function(){return new c.Fog(this.color.getHex(),this.near,this.far)},c.FogExp2=function(a,b){this.name="",this.color=new c.Color(a),this.density=void 0!==b?b:25e-5},c.FogExp2.prototype.clone=function(){return new c.FogExp2(this.color.getHex(),this.density)},c.ShaderChunk={},c.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",c.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",c.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",c.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",c.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",c.ShaderChunk.begin_vertex="\nvec3 transformed = vec3( position );\n",c.ShaderChunk.beginnormal_vertex="\nvec3 objectNormal = vec3( normal );\n",c.ShaderChunk.bsdfs="bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",c.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",c.ShaderChunk.clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n#endif\n",c.ShaderChunk.clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",c.ShaderChunk.clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",c.ShaderChunk.clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",c.ShaderChunk.color_fragment="#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",c.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",c.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",c.ShaderChunk.color_vertex="#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",c.ShaderChunk.common="#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n",c.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",c.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n",c.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",c.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",c.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",c.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",c.ShaderChunk.encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n",c.ShaderChunk.encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",c.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
c.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",c.ShaderChunk.envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",c.ShaderChunk.envmap_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",c.ShaderChunk.fog_fragment="#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",c.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",c.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",c.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",c.ShaderChunk.lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",c.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",c.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",c.ShaderChunk.lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",c.ShaderChunk.lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",c.ShaderChunk.lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",c.ShaderChunk.lights_template="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",c.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif",c.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",c.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",c.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n",c.ShaderChunk.map_fragment="#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",c.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",c.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",c.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n",c.ShaderChunk.metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n",c.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",c.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",c.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",c.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",c.ShaderChunk.normal_flip="#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n",c.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",c.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",c.ShaderChunk.packing="vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",c.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",c.ShaderChunk.project_vertex="#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n",c.ShaderChunk.roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n",c.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",c.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
c.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",c.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",c.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",c.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",c.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",c.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n",c.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",c.ShaderChunk.specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",c.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",c.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",c.ShaderChunk.tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",c.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",c.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",c.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",c.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",c.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n",c.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",c.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n",c.UniformsUtils={merge:function(a){for(var b={},c=0;c<a.length;c++){var d=this.clone(a[c]);for(var e in d)b[e]=d[e]}return b},clone:function(a){var b={};for(var d in a){b[d]={};for(var e in a[d]){var f=a[d][e];f instanceof c.Color||f instanceof c.Vector2||f instanceof c.Vector3||f instanceof c.Vector4||f instanceof c.Matrix3||f instanceof c.Matrix4||f instanceof c.Texture?b[d][e]=f.clone():Array.isArray(f)?b[d][e]=f.slice():b[d][e]=f}}return b}},c.UniformsLib={common:{diffuse:{value:new c.Color(15658734)},opacity:{value:1},map:{value:null},offsetRepeat:{value:new c.Vector4(0,0,1,1)},specularMap:{value:null},alphaMap:{value:null},envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new c.Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new c.Color(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}}},points:{diffuse:{value:new c.Color(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},offsetRepeat:{value:new c.Vector4(0,0,1,1)}}},c.ShaderChunk.cube_frag="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",c.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",c.ShaderChunk.depth_frag="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",c.ShaderChunk.depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",c.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n",c.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n",c.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",c.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",c.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",c.ShaderChunk.linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",c.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",c.ShaderChunk.meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n",c.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",c.ShaderChunk.meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n",c.ShaderChunk.meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",c.ShaderChunk.meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n",c.ShaderChunk.meshphysical_frag="#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",c.ShaderChunk.meshphysical_vert="#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",c.ShaderChunk.normal_frag="uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n",c.ShaderChunk.normal_vert="varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",c.ShaderChunk.points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",c.ShaderChunk.points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",c.ShaderChunk.shadow_frag="uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n",c.ShaderChunk.shadow_vert="#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",c.ShaderLib={basic:{uniforms:c.UniformsUtils.merge([c.UniformsLib.common,c.UniformsLib.aomap,c.UniformsLib.fog]),vertexShader:c.ShaderChunk.meshbasic_vert,fragmentShader:c.ShaderChunk.meshbasic_frag},lambert:{uniforms:c.UniformsUtils.merge([c.UniformsLib.common,c.UniformsLib.aomap,c.UniformsLib.lightmap,c.UniformsLib.emissivemap,c.UniformsLib.fog,c.UniformsLib.lights,{emissive:{value:new c.Color(0)}}]),vertexShader:c.ShaderChunk.meshlambert_vert,fragmentShader:c.ShaderChunk.meshlambert_frag},phong:{uniforms:c.UniformsUtils.merge([c.UniformsLib.common,c.UniformsLib.aomap,c.UniformsLib.lightmap,c.UniformsLib.emissivemap,c.UniformsLib.bumpmap,c.UniformsLib.normalmap,c.UniformsLib.displacementmap,c.UniformsLib.fog,c.UniformsLib.lights,{emissive:{value:new c.Color(0)},specular:{value:new c.Color(1118481)},shininess:{value:30}}]),vertexShader:c.ShaderChunk.meshphong_vert,fragmentShader:c.ShaderChunk.meshphong_frag},standard:{uniforms:c.UniformsUtils.merge([c.UniformsLib.common,c.UniformsLib.aomap,c.UniformsLib.lightmap,c.UniformsLib.emissivemap,c.UniformsLib.bumpmap,c.UniformsLib.normalmap,c.UniformsLib.displacementmap,c.UniformsLib.roughnessmap,c.UniformsLib.metalnessmap,c.UniformsLib.fog,c.UniformsLib.lights,{emissive:{value:new c.Color(0)},roughness:{value:.5},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:c.ShaderChunk.meshphysical_vert,fragmentShader:c.ShaderChunk.meshphysical_frag},points:{uniforms:c.UniformsUtils.merge([c.UniformsLib.points,c.UniformsLib.fog]),vertexShader:c.ShaderChunk.points_vert,fragmentShader:c.ShaderChunk.points_frag},dashed:{uniforms:c.UniformsUtils.merge([c.UniformsLib.common,c.UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:c.ShaderChunk.linedashed_vert,fragmentShader:c.ShaderChunk.linedashed_frag},depth:{uniforms:c.UniformsUtils.merge([c.UniformsLib.common,c.UniformsLib.displacementmap]),vertexShader:c.ShaderChunk.depth_vert,fragmentShader:c.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{value:1}},vertexShader:c.ShaderChunk.normal_vert,fragmentShader:c.ShaderChunk.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:c.ShaderChunk.cube_vert,fragmentShader:c.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null},tFlip:{value:-1}},vertexShader:c.ShaderChunk.equirect_vert,fragmentShader:c.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{value:new c.Vector3}},vertexShader:c.ShaderChunk.distanceRGBA_vert,fragmentShader:c.ShaderChunk.distanceRGBA_frag}},c.ShaderLib.physical={uniforms:c.UniformsUtils.merge([c.ShaderLib.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:c.ShaderChunk.meshphysical_vert,fragmentShader:c.ShaderChunk.meshphysical_frag},c.WebGLRenderer=function(a){function b(){return null===ba?oa:1}function d(a,b,c,d){R===!0&&(a*=d,b*=d,c*=d),Ga.clearColor(a,b,c,d)}function e(){Ga.init(),Ga.scissor(ga.copy(pa).multiplyScalar(oa)),Ga.viewport(ia.copy(ra).multiplyScalar(oa)),d(ka.r,ka.g,ka.b,la)}function f(){aa=null,fa=null,ea="",da=-1,Ga.reset()}function g(a){a.preventDefault(),f(),e(),Ha.clear()}function h(a){var b=a.target;b.removeEventListener("dispose",h),i(b)}function i(a){j(a),Ha["delete"](a)}function j(a){var b=Ha.get(a).program;a.program=void 0,
void 0!==b&&Ka.releaseProgram(b)}function k(a,b,d,e){var f;if(d instanceof c.InstancedBufferGeometry&&(f=Ea.get("ANGLE_instanced_arrays"),null===f))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");void 0===e&&(e=0),Ga.initAttributes();var g=d.attributes,h=b.getAttributes(),i=a.defaultAttributeValues;for(var j in h){var k=h[j];if(k>=0){var l=g[j];if(void 0!==l){var m=Ba.FLOAT,n=l.array,o=l.normalized;n instanceof Float32Array?m=Ba.FLOAT:n instanceof Float64Array?console.warn("Unsupported data buffer format: Float64Array"):n instanceof Uint16Array?m=Ba.UNSIGNED_SHORT:n instanceof Int16Array?m=Ba.SHORT:n instanceof Uint32Array?m=Ba.UNSIGNED_INT:n instanceof Int32Array?m=Ba.INT:n instanceof Int8Array?m=Ba.BYTE:n instanceof Uint8Array&&(m=Ba.UNSIGNED_BYTE);var p=l.itemSize,q=Ja.getAttributeBuffer(l);if(l instanceof c.InterleavedBufferAttribute){var r=l.data,s=r.stride,t=l.offset;r instanceof c.InstancedInterleavedBuffer?(Ga.enableAttributeAndDivisor(k,r.meshPerAttribute,f),void 0===d.maxInstancedCount&&(d.maxInstancedCount=r.meshPerAttribute*r.count)):Ga.enableAttribute(k),Ba.bindBuffer(Ba.ARRAY_BUFFER,q),Ba.vertexAttribPointer(k,p,m,o,s*r.array.BYTES_PER_ELEMENT,(e*s+t)*r.array.BYTES_PER_ELEMENT)}else l instanceof c.InstancedBufferAttribute?(Ga.enableAttributeAndDivisor(k,l.meshPerAttribute,f),void 0===d.maxInstancedCount&&(d.maxInstancedCount=l.meshPerAttribute*l.count)):Ga.enableAttribute(k),Ba.bindBuffer(Ba.ARRAY_BUFFER,q),Ba.vertexAttribPointer(k,p,m,o,0,e*p*l.array.BYTES_PER_ELEMENT)}else if(void 0!==i){var u=i[j];if(void 0!==u)switch(u.length){case 2:Ba.vertexAttrib2fv(k,u);break;case 3:Ba.vertexAttrib3fv(k,u);break;case 4:Ba.vertexAttrib4fv(k,u);break;default:Ba.vertexAttrib1fv(k,u)}}}}Ga.disableUnusedAttributes()}function l(a,b){return Math.abs(b[0])-Math.abs(a[0])}function m(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.material.program&&b.material.program&&a.material.program!==b.material.program?a.material.program.id-b.material.program.id:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function n(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function o(a,b,c,d,e){var f,g;c.transparent?(f=W,g=++X):(f=U,g=++V);var h=f[g];void 0!==h?(h.id=a.id,h.object=a,h.geometry=b,h.material=c,h.z=ya.z,h.group=e):(h={id:a.id,object:a,geometry:b,material:c,z:ya.z,group:e},f.push(h))}function p(a){var b=a.geometry;return null===b.boundingSphere&&b.computeBoundingSphere(),wa.copy(b.boundingSphere).applyMatrix4(a.matrixWorld),r(wa)}function q(a){return wa.center.set(0,0,0),wa.radius=.7071067811865476,wa.applyMatrix4(a.matrixWorld),r(wa)}function r(a){if(!sa.intersectsSphere(a))return!1;var b=ta.numPlanes;if(0===b)return!0;var c=_.clippingPlanes,d=a.center,e=-a.radius,f=0;do if(c[f].distanceToPoint(d)<e)return!1;while(++f!==b);return!0}function s(a,b){if(a.visible!==!1){if(a.layers.test(b.layers))if(a instanceof c.Light)T.push(a);else if(a instanceof c.Sprite)a.frustumCulled!==!1&&q(a)!==!0||Z.push(a);else if(a instanceof c.LensFlare)$.push(a);else if(a instanceof c.ImmediateRenderObject)_.sortObjects===!0&&(ya.setFromMatrixPosition(a.matrixWorld),ya.applyProjection(xa)),o(a,null,a.material,ya.z,null);else if((a instanceof c.Mesh||a instanceof c.Line||a instanceof c.Points)&&(a instanceof c.SkinnedMesh&&a.skeleton.update(),a.frustumCulled===!1||p(a)===!0)){var d=a.material;if(d.visible===!0){_.sortObjects===!0&&(ya.setFromMatrixPosition(a.matrixWorld),ya.applyProjection(xa));var e=Ja.update(a);if(d instanceof c.MultiMaterial)for(var f=e.groups,g=d.materials,h=0,i=f.length;h<i;h++){var j=f[h],k=g[j.materialIndex];k.visible===!0&&o(a,e,k,ya.z,j)}else o(a,e,d,ya.z,null)}}for(var l=a.children,h=0,i=l.length;h<i;h++)s(l[h],b)}}function t(a,b,d,e){for(var f=0,g=a.length;f<g;f++){var h=a[f],i=h.object,j=h.geometry,k=void 0===e?h.material:e,l=h.group;if(i.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,i.matrixWorld),i.normalMatrix.getNormalMatrix(i.modelViewMatrix),i instanceof c.ImmediateRenderObject){v(k);var m=w(b,d,k,i);ea="",i.render(function(a){_.renderBufferImmediate(a,m,k)})}else _.renderBufferDirect(b,d,j,k,i,l)}}function u(a,b,d){var e=Ha.get(a),f=Ka.getParameters(a,za,b,ta.numPlanes,d),g=Ka.getProgramCode(a,f),i=e.program,k=!0;if(void 0===i)a.addEventListener("dispose",h);else if(i.code!==g)j(a);else{if(void 0!==f.shaderID)return;k=!1}if(k){if(f.shaderID){var l=c.ShaderLib[f.shaderID];e.__webglShader={name:a.type,uniforms:c.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader}}else e.__webglShader={name:a.type,uniforms:a.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader};a.__webglShader=e.__webglShader,i=Ka.acquireProgram(a,f,g),e.program=i,a.program=i}var m=i.getAttributes();if(a.morphTargets){a.numSupportedMorphTargets=0;for(var n=0;n<_.maxMorphTargets;n++)m["morphTarget"+n]>=0&&a.numSupportedMorphTargets++}if(a.morphNormals){a.numSupportedMorphNormals=0;for(var n=0;n<_.maxMorphNormals;n++)m["morphNormal"+n]>=0&&a.numSupportedMorphNormals++}var o=e.__webglShader.uniforms;(a instanceof c.ShaderMaterial||a instanceof c.RawShaderMaterial)&&a.clipping!==!0||(e.numClippingPlanes=ta.numPlanes,o.clippingPlanes=ta.uniform),a.lights&&(e.lightsHash=za.hash,o.ambientLightColor.value=za.ambient,o.directionalLights.value=za.directional,o.spotLights.value=za.spot,o.pointLights.value=za.point,o.hemisphereLights.value=za.hemi,o.directionalShadowMap.value=za.directionalShadowMap,o.directionalShadowMatrix.value=za.directionalShadowMatrix,o.spotShadowMap.value=za.spotShadowMap,o.spotShadowMatrix.value=za.spotShadowMatrix,o.pointShadowMap.value=za.pointShadowMap,o.pointShadowMatrix.value=za.pointShadowMatrix);var p=e.program.getUniforms(),q=c.WebGLUniforms.seqWithValue(p.seq,o);e.uniformsList=q,e.dynamicUniforms=c.WebGLUniforms.splitDynamic(q,o)}function v(a){a.side!==c.DoubleSide?Ga.enable(Ba.CULL_FACE):Ga.disable(Ba.CULL_FACE),Ga.setFlipSided(a.side===c.BackSide),a.transparent===!0?Ga.setBlending(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha):Ga.setBlending(c.NoBlending),Ga.setDepthFunc(a.depthFunc),Ga.setDepthTest(a.depthTest),Ga.setDepthWrite(a.depthWrite),Ga.setColorWrite(a.colorWrite),Ga.setPolygonOffset(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}function w(a,b,d,e){ja=0;var f=Ha.get(d);if(ua){if(va||a!==fa){var g=a===fa&&d.id===da;ta.setState(d.clippingPlanes,d.clipShadows,a,f,g)}void 0!==f.numClippingPlanes&&f.numClippingPlanes!==ta.numPlanes&&(d.needsUpdate=!0)}void 0===f.program&&(d.needsUpdate=!0),void 0!==f.lightsHash&&f.lightsHash!==za.hash&&(d.needsUpdate=!0),d.needsUpdate&&(u(d,b,e),d.needsUpdate=!1);var h=!1,i=!1,j=!1,k=f.program,l=k.getUniforms(),m=f.__webglShader.uniforms;if(k.id!==aa&&(Ba.useProgram(k.program),aa=k.id,h=!0,i=!0,j=!0),d.id!==da&&(da=d.id,i=!0),h||a!==fa){if(l.set(Ba,a,"projectionMatrix"),Fa.logarithmicDepthBuffer&&l.setValue(Ba,"logDepthBufFC",2/(Math.log(a.far+1)/Math.LN2)),a!==fa&&(fa=a,i=!0,j=!0),d instanceof c.ShaderMaterial||d instanceof c.MeshPhongMaterial||d instanceof c.MeshStandardMaterial||d.envMap){var n=l.map.cameraPosition;void 0!==n&&n.setValue(Ba,ya.setFromMatrixPosition(a.matrixWorld))}(d instanceof c.MeshPhongMaterial||d instanceof c.MeshLambertMaterial||d instanceof c.MeshBasicMaterial||d instanceof c.MeshStandardMaterial||d instanceof c.ShaderMaterial||d.skinning)&&l.setValue(Ba,"viewMatrix",a.matrixWorldInverse),l.set(Ba,_,"toneMappingExposure"),l.set(Ba,_,"toneMappingWhitePoint")}if(d.skinning){l.setOptional(Ba,e,"bindMatrix"),l.setOptional(Ba,e,"bindMatrixInverse");var o=e.skeleton;o&&(Fa.floatVertexTextures&&o.useVertexTexture?(l.set(Ba,o,"boneTexture"),l.set(Ba,o,"boneTextureWidth"),l.set(Ba,o,"boneTextureHeight")):l.setOptional(Ba,o,"boneMatrices"))}i&&(d.lights&&G(m,j),b&&d.fog&&B(m,b),(d instanceof c.MeshBasicMaterial||d instanceof c.MeshLambertMaterial||d instanceof c.MeshPhongMaterial||d instanceof c.MeshStandardMaterial||d instanceof c.MeshDepthMaterial)&&x(m,d),d instanceof c.LineBasicMaterial?y(m,d):d instanceof c.LineDashedMaterial?(y(m,d),z(m,d)):d instanceof c.PointsMaterial?A(m,d):d instanceof c.MeshLambertMaterial?C(m,d):d instanceof c.MeshPhongMaterial?D(m,d):d instanceof c.MeshPhysicalMaterial?F(m,d):d instanceof c.MeshStandardMaterial?E(m,d):d instanceof c.MeshDepthMaterial?d.displacementMap&&(m.displacementMap.value=d.displacementMap,m.displacementScale.value=d.displacementScale,m.displacementBias.value=d.displacementBias):d instanceof c.MeshNormalMaterial&&(m.opacity.value=d.opacity),c.WebGLUniforms.upload(Ba,f.uniformsList,m,_)),l.set(Ba,e,"modelViewMatrix"),l.set(Ba,e,"normalMatrix"),l.setValue(Ba,"modelMatrix",e.matrixWorld);var p=f.dynamicUniforms;return null!==p&&(c.WebGLUniforms.evalDynamic(p,m,e,a),c.WebGLUniforms.upload(Ba,p,m,_)),k}function x(a,b){a.opacity.value=b.opacity,a.diffuse.value=b.color,b.emissive&&a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity),a.map.value=b.map,a.specularMap.value=b.specularMap,a.alphaMap.value=b.alphaMap,b.aoMap&&(a.aoMap.value=b.aoMap,a.aoMapIntensity.value=b.aoMapIntensity);var d;if(b.map?d=b.map:b.specularMap?d=b.specularMap:b.displacementMap?d=b.displacementMap:b.normalMap?d=b.normalMap:b.bumpMap?d=b.bumpMap:b.roughnessMap?d=b.roughnessMap:b.metalnessMap?d=b.metalnessMap:b.alphaMap?d=b.alphaMap:b.emissiveMap&&(d=b.emissiveMap),void 0!==d){d instanceof c.WebGLRenderTarget&&(d=d.texture);var e=d.offset,f=d.repeat;a.offsetRepeat.value.set(e.x,e.y,f.x,f.y)}a.envMap.value=b.envMap,a.flipEnvMap.value=b.envMap instanceof c.CubeTexture?-1:1,a.reflectivity.value=b.reflectivity,a.refractionRatio.value=b.refractionRatio}function y(a,b){a.diffuse.value=b.color,a.opacity.value=b.opacity}function z(a,b){a.dashSize.value=b.dashSize,a.totalSize.value=b.dashSize+b.gapSize,a.scale.value=b.scale}function A(a,b){if(a.diffuse.value=b.color,a.opacity.value=b.opacity,a.size.value=b.size*oa,a.scale.value=.5*L.clientHeight,a.map.value=b.map,null!==b.map){var c=b.map.offset,d=b.map.repeat;a.offsetRepeat.value.set(c.x,c.y,d.x,d.y)}}function B(a,b){a.fogColor.value=b.color,b instanceof c.Fog?(a.fogNear.value=b.near,a.fogFar.value=b.far):b instanceof c.FogExp2&&(a.fogDensity.value=b.density)}function C(a,b){b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity),b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap)}function D(a,b){a.specular.value=b.specular,a.shininess.value=Math.max(b.shininess,1e-4),b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity),b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap),b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale),b.normalMap&&(a.normalMap.value=b.normalMap,a.normalScale.value.copy(b.normalScale)),b.displacementMap&&(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias)}function E(a,b){a.roughness.value=b.roughness,a.metalness.value=b.metalness,b.roughnessMap&&(a.roughnessMap.value=b.roughnessMap),b.metalnessMap&&(a.metalnessMap.value=b.metalnessMap),b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity),b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap),b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale),b.normalMap&&(a.normalMap.value=b.normalMap,a.normalScale.value.copy(b.normalScale)),b.displacementMap&&(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias),b.envMap&&(a.envMapIntensity.value=b.envMapIntensity)}function F(a,b){a.clearCoat.value=b.clearCoat,a.clearCoatRoughness.value=b.clearCoatRoughness,E(a,b)}function G(a,b){a.ambientLightColor.needsUpdate=b,a.directionalLights.needsUpdate=b,a.pointLights.needsUpdate=b,a.spotLights.needsUpdate=b,a.hemisphereLights.needsUpdate=b}function H(a){for(var b=0,c=0,d=a.length;c<d;c++){var e=a[c];e.castShadow&&(za.shadows[b++]=e)}za.shadows.length=b}function I(a,b){var d,e,f,g=0,h=0,i=0,j,k,l,m,n=b.matrixWorldInverse,o=0,p=0,q=0,r=0;for(d=0,e=a.length;d<e;d++)if(f=a[d],j=f.color,k=f.intensity,l=f.distance,m=f.shadow&&f.shadow.map?f.shadow.map.texture:null,f instanceof c.AmbientLight)g+=j.r*k,h+=j.g*k,i+=j.b*k;else if(f instanceof c.DirectionalLight){var s=La.get(f);s.color.copy(f.color).multiplyScalar(f.intensity),s.direction.setFromMatrixPosition(f.matrixWorld),ya.setFromMatrixPosition(f.target.matrixWorld),s.direction.sub(ya),s.direction.transformDirection(n),s.shadow=f.castShadow,f.castShadow&&(s.shadowBias=f.shadow.bias,s.shadowRadius=f.shadow.radius,s.shadowMapSize=f.shadow.mapSize),za.directionalShadowMap[o]=m,za.directionalShadowMatrix[o]=f.shadow.matrix,za.directional[o++]=s}else if(f instanceof c.SpotLight){var s=La.get(f);s.position.setFromMatrixPosition(f.matrixWorld),s.position.applyMatrix4(n),s.color.copy(j).multiplyScalar(k),s.distance=l,s.direction.setFromMatrixPosition(f.matrixWorld),ya.setFromMatrixPosition(f.target.matrixWorld),s.direction.sub(ya),s.direction.transformDirection(n),s.coneCos=Math.cos(f.angle),s.penumbraCos=Math.cos(f.angle*(1-f.penumbra)),s.decay=0===f.distance?0:f.decay,s.shadow=f.castShadow,f.castShadow&&(s.shadowBias=f.shadow.bias,s.shadowRadius=f.shadow.radius,s.shadowMapSize=f.shadow.mapSize),za.spotShadowMap[q]=m,za.spotShadowMatrix[q]=f.shadow.matrix,za.spot[q++]=s}else if(f instanceof c.PointLight){var s=La.get(f);s.position.setFromMatrixPosition(f.matrixWorld),s.position.applyMatrix4(n),s.color.copy(f.color).multiplyScalar(f.intensity),s.distance=f.distance,s.decay=0===f.distance?0:f.decay,s.shadow=f.castShadow,f.castShadow&&(s.shadowBias=f.shadow.bias,s.shadowRadius=f.shadow.radius,s.shadowMapSize=f.shadow.mapSize),za.pointShadowMap[p]=m,void 0===za.pointShadowMatrix[p]&&(za.pointShadowMatrix[p]=new c.Matrix4),ya.setFromMatrixPosition(f.matrixWorld).negate(),za.pointShadowMatrix[p].identity().setPosition(ya),za.point[p++]=s}else if(f instanceof c.HemisphereLight){var s=La.get(f);s.direction.setFromMatrixPosition(f.matrixWorld),s.direction.transformDirection(n),s.direction.normalize(),s.skyColor.copy(f.color).multiplyScalar(k),s.groundColor.copy(f.groundColor).multiplyScalar(k),za.hemi[r++]=s}za.ambient[0]=g,za.ambient[1]=h,za.ambient[2]=i,za.directional.length=o,za.spot.length=q,za.point.length=p,za.hemi.length=r,za.hash=o+","+p+","+q+","+r+","+za.shadows.length}function J(){var a=ja;return a>=Fa.maxTextures&&console.warn("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+Fa.maxTextures),ja+=1,a}function K(a){var b;if(a===c.RepeatWrapping)return Ba.REPEAT;if(a===c.ClampToEdgeWrapping)return Ba.CLAMP_TO_EDGE;if(a===c.MirroredRepeatWrapping)return Ba.MIRRORED_REPEAT;if(a===c.NearestFilter)return Ba.NEAREST;if(a===c.NearestMipMapNearestFilter)return Ba.NEAREST_MIPMAP_NEAREST;if(a===c.NearestMipMapLinearFilter)return Ba.NEAREST_MIPMAP_LINEAR;if(a===c.LinearFilter)return Ba.LINEAR;if(a===c.LinearMipMapNearestFilter)return Ba.LINEAR_MIPMAP_NEAREST;if(a===c.LinearMipMapLinearFilter)return Ba.LINEAR_MIPMAP_LINEAR;if(a===c.UnsignedByteType)return Ba.UNSIGNED_BYTE;if(a===c.UnsignedShort4444Type)return Ba.UNSIGNED_SHORT_4_4_4_4;if(a===c.UnsignedShort5551Type)return Ba.UNSIGNED_SHORT_5_5_5_1;if(a===c.UnsignedShort565Type)return Ba.UNSIGNED_SHORT_5_6_5;if(a===c.ByteType)return Ba.BYTE;if(a===c.ShortType)return Ba.SHORT;if(a===c.UnsignedShortType)return Ba.UNSIGNED_SHORT;if(a===c.IntType)return Ba.INT;if(a===c.UnsignedIntType)return Ba.UNSIGNED_INT;if(a===c.FloatType)return Ba.FLOAT;if(b=Ea.get("OES_texture_half_float"),null!==b&&a===c.HalfFloatType)return b.HALF_FLOAT_OES;if(a===c.AlphaFormat)return Ba.ALPHA;if(a===c.RGBFormat)return Ba.RGB;if(a===c.RGBAFormat)return Ba.RGBA;if(a===c.LuminanceFormat)return Ba.LUMINANCE;if(a===c.LuminanceAlphaFormat)return Ba.LUMINANCE_ALPHA;if(a===c.DepthFormat)return Ba.DEPTH_COMPONENT;if(a===c.AddEquation)return Ba.FUNC_ADD;if(a===c.SubtractEquation)return Ba.FUNC_SUBTRACT;if(a===c.ReverseSubtractEquation)return Ba.FUNC_REVERSE_SUBTRACT;if(a===c.ZeroFactor)return Ba.ZERO;if(a===c.OneFactor)return Ba.ONE;if(a===c.SrcColorFactor)return Ba.SRC_COLOR;if(a===c.OneMinusSrcColorFactor)return Ba.ONE_MINUS_SRC_COLOR;if(a===c.SrcAlphaFactor)return Ba.SRC_ALPHA;if(a===c.OneMinusSrcAlphaFactor)return Ba.ONE_MINUS_SRC_ALPHA;if(a===c.DstAlphaFactor)return Ba.DST_ALPHA;if(a===c.OneMinusDstAlphaFactor)return Ba.ONE_MINUS_DST_ALPHA;if(a===c.DstColorFactor)return Ba.DST_COLOR;if(a===c.OneMinusDstColorFactor)return Ba.ONE_MINUS_DST_COLOR;if(a===c.SrcAlphaSaturateFactor)return Ba.SRC_ALPHA_SATURATE;if(b=Ea.get("WEBGL_compressed_texture_s3tc"),null!==b){if(a===c.RGB_S3TC_DXT1_Format)return b.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===c.RGBA_S3TC_DXT1_Format)return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===c.RGBA_S3TC_DXT3_Format)return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===c.RGBA_S3TC_DXT5_Format)return b.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(b=Ea.get("WEBGL_compressed_texture_pvrtc"),null!==b){if(a===c.RGB_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===c.RGB_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(a===c.RGBA_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(a===c.RGBA_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(b=Ea.get("WEBGL_compressed_texture_etc1"),null!==b&&a===c.RGB_ETC1_Format)return b.COMPRESSED_RGB_ETC1_WEBGL;if(b=Ea.get("EXT_blend_minmax"),null!==b){if(a===c.MinEquation)return b.MIN_EXT;if(a===c.MaxEquation)return b.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",c.REVISION),a=a||{};var L=void 0!==a.canvas?a.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),M=void 0!==a.context?a.context:null,N=void 0!==a.alpha&&a.alpha,O=void 0===a.depth||a.depth,P=void 0===a.stencil||a.stencil,Q=void 0!==a.antialias&&a.antialias,R=void 0===a.premultipliedAlpha||a.premultipliedAlpha,S=void 0!==a.preserveDrawingBuffer&&a.preserveDrawingBuffer,T=[],U=[],V=-1,W=[],X=-1,Y=new Float32Array(8),Z=[],$=[];this.domElement=L,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=c.LinearToneMapping,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var _=this,aa=null,ba=null,ca=null,da=-1,ea="",fa=null,ga=new c.Vector4,ha=null,ia=new c.Vector4,ja=0,ka=new c.Color(0),la=0,ma=L.width,na=L.height,oa=1,pa=new c.Vector4(0,0,ma,na),qa=!1,ra=new c.Vector4(0,0,ma,na),sa=new c.Frustum,ta=new c.WebGLClipping,ua=!1,va=!1,wa=new c.Sphere,xa=new c.Matrix4,ya=new c.Vector3,za={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},Aa={calls:0,vertices:0,faces:0,points:0};this.info={render:Aa,memory:{geometries:0,textures:0},programs:null};var Ba;try{var Ca={alpha:N,depth:O,stencil:P,antialias:Q,premultipliedAlpha:R,preserveDrawingBuffer:S};if(Ba=M||L.getContext("webgl",Ca)||L.getContext("experimental-webgl",Ca),null===Ba)throw null!==L.getContext("webgl")?"Error creating WebGL context with your selected attributes.":"Error creating WebGL context.";void 0===Ba.getShaderPrecisionFormat&&(Ba.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),L.addEventListener("webglcontextlost",g,!1)}catch(Da){console.error("THREE.WebGLRenderer: "+Da)}var Ea=new c.WebGLExtensions(Ba);Ea.get("WEBGL_depth_texture"),Ea.get("OES_texture_float"),Ea.get("OES_texture_float_linear"),Ea.get("OES_texture_half_float"),Ea.get("OES_texture_half_float_linear"),Ea.get("OES_standard_derivatives"),Ea.get("ANGLE_instanced_arrays"),Ea.get("OES_element_index_uint")&&(c.BufferGeometry.MaxIndex=4294967296);var Fa=new c.WebGLCapabilities(Ba,Ea,a),Ga=new c.WebGLState(Ba,Ea,K),Ha=new c.WebGLProperties,Ia=new c.WebGLTextures(Ba,Ea,Ga,Ha,Fa,K,this.info),Ja=new c.WebGLObjects(Ba,Ha,this.info),Ka=new c.WebGLPrograms(this,Fa),La=new c.WebGLLights;this.info.programs=Ka.programs;var Ma=new c.WebGLBufferRenderer(Ba,Ea,Aa),Na=new c.WebGLIndexedBufferRenderer(Ba,Ea,Aa),Oa=new c.OrthographicCamera((-1),1,1,(-1),0,1),Pa=new c.PerspectiveCamera,Qa=new c.Mesh(new c.PlaneBufferGeometry(2,2),new c.MeshBasicMaterial({depthTest:!1,depthWrite:!1,fog:!1})),Ra=c.ShaderLib.cube,Sa=new c.Mesh(new c.BoxBufferGeometry(5,5,5),new c.ShaderMaterial({uniforms:Ra.uniforms,vertexShader:Ra.vertexShader,fragmentShader:Ra.fragmentShader,side:c.BackSide,depthTest:!1,depthWrite:!1,fog:!1}));e(),this.context=Ba,this.capabilities=Fa,this.extensions=Ea,this.properties=Ha,this.state=Ga;var Ta=new c.WebGLShadowMap(this,za,Ja,Fa);this.shadowMap=Ta;var Ua=new c.SpritePlugin(this,Z),Va=new c.LensFlarePlugin(this,$);this.getContext=function(){return Ba},this.getContextAttributes=function(){return Ba.getContextAttributes()},this.forceContextLoss=function(){Ea.get("WEBGL_lose_context").loseContext()},this.getMaxAnisotropy=function(){return Fa.getMaxAnisotropy()},this.getPrecision=function(){return Fa.precision},this.getPixelRatio=function(){return oa},this.setPixelRatio=function(a){void 0!==a&&(oa=a,this.setSize(ra.z,ra.w,!1))},this.getSize=function(){return{width:ma,height:na}},this.setSize=function(a,b,c){ma=a,na=b,L.width=a*oa,L.height=b*oa,c!==!1&&(L.style.width=a+"px",L.style.height=b+"px"),this.setViewport(0,0,a,b)},this.setViewport=function(a,b,c,d){Ga.viewport(ra.set(a,b,c,d))},this.setScissor=function(a,b,c,d){Ga.scissor(pa.set(a,b,c,d))},this.setScissorTest=function(a){Ga.setScissorTest(qa=a)},this.getClearColor=function(){return ka},this.setClearColor=function(a,b){ka.set(a),la=void 0!==b?b:1,d(ka.r,ka.g,ka.b,la)},this.getClearAlpha=function(){return la},this.setClearAlpha=function(a){la=a,d(ka.r,ka.g,ka.b,la)},this.clear=function(a,b,c){var d=0;(void 0===a||a)&&(d|=Ba.COLOR_BUFFER_BIT),(void 0===b||b)&&(d|=Ba.DEPTH_BUFFER_BIT),(void 0===c||c)&&(d|=Ba.STENCIL_BUFFER_BIT),Ba.clear(d)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(a,b,c,d){this.setRenderTarget(a),this.clear(b,c,d)},this.resetGLState=f,this.dispose=function(){W=[],X=-1,U=[],V=-1,L.removeEventListener("webglcontextlost",g,!1)},this.renderBufferImmediate=function(a,b,d){Ga.initAttributes();var e=Ha.get(a);a.hasPositions&&!e.position&&(e.position=Ba.createBuffer()),a.hasNormals&&!e.normal&&(e.normal=Ba.createBuffer()),a.hasUvs&&!e.uv&&(e.uv=Ba.createBuffer()),a.hasColors&&!e.color&&(e.color=Ba.createBuffer());var f=b.getAttributes();if(a.hasPositions&&(Ba.bindBuffer(Ba.ARRAY_BUFFER,e.position),Ba.bufferData(Ba.ARRAY_BUFFER,a.positionArray,Ba.DYNAMIC_DRAW),Ga.enableAttribute(f.position),Ba.vertexAttribPointer(f.position,3,Ba.FLOAT,!1,0,0)),a.hasNormals){if(Ba.bindBuffer(Ba.ARRAY_BUFFER,e.normal),"MeshPhongMaterial"!==d.type&&"MeshStandardMaterial"!==d.type&&"MeshPhysicalMaterial"!==d.type&&d.shading===c.FlatShading)for(var g=0,h=3*a.count;g<h;g+=9){var i=a.normalArray,j=(i[g+0]+i[g+3]+i[g+6])/3,k=(i[g+1]+i[g+4]+i[g+7])/3,l=(i[g+2]+i[g+5]+i[g+8])/3;i[g+0]=j,i[g+1]=k,i[g+2]=l,i[g+3]=j,i[g+4]=k,i[g+5]=l,i[g+6]=j,i[g+7]=k,i[g+8]=l}Ba.bufferData(Ba.ARRAY_BUFFER,a.normalArray,Ba.DYNAMIC_DRAW),Ga.enableAttribute(f.normal),Ba.vertexAttribPointer(f.normal,3,Ba.FLOAT,!1,0,0)}a.hasUvs&&d.map&&(Ba.bindBuffer(Ba.ARRAY_BUFFER,e.uv),Ba.bufferData(Ba.ARRAY_BUFFER,a.uvArray,Ba.DYNAMIC_DRAW),Ga.enableAttribute(f.uv),Ba.vertexAttribPointer(f.uv,2,Ba.FLOAT,!1,0,0)),a.hasColors&&d.vertexColors!==c.NoColors&&(Ba.bindBuffer(Ba.ARRAY_BUFFER,e.color),Ba.bufferData(Ba.ARRAY_BUFFER,a.colorArray,Ba.DYNAMIC_DRAW),Ga.enableAttribute(f.color),Ba.vertexAttribPointer(f.color,3,Ba.FLOAT,!1,0,0)),Ga.disableUnusedAttributes(),Ba.drawArrays(Ba.TRIANGLES,0,a.count),a.count=0},this.renderBufferDirect=function(a,d,e,f,g,h){v(f);var i=w(a,d,f,g),j=!1,m=e.id+"_"+i.id+"_"+f.wireframe;m!==ea&&(ea=m,j=!0);var n=g.morphTargetInfluences;if(void 0!==n){for(var o=[],p=0,q=n.length;p<q;p++){var r=n[p];o.push([r,p])}o.sort(l),o.length>8&&(o.length=8);for(var s=e.morphAttributes,p=0,q=o.length;p<q;p++){var r=o[p];if(Y[p]=r[0],0!==r[0]){var t=r[1];f.morphTargets===!0&&s.position&&e.addAttribute("morphTarget"+p,s.position[t]),f.morphNormals===!0&&s.normal&&e.addAttribute("morphNormal"+p,s.normal[t])}else f.morphTargets===!0&&e.removeAttribute("morphTarget"+p),f.morphNormals===!0&&e.removeAttribute("morphNormal"+p)}i.getUniforms().setValue(Ba,"morphTargetInfluences",Y),j=!0}var t=e.index,u=e.attributes.position;f.wireframe===!0&&(t=Ja.getWireframeAttribute(e));var x;null!==t?(x=Na,x.setIndex(t)):x=Ma,j&&(k(f,i,e),null!==t&&Ba.bindBuffer(Ba.ELEMENT_ARRAY_BUFFER,Ja.getAttributeBuffer(t)));var y=0,z=1/0;null!==t?z=t.count:void 0!==u&&(z=u.count);var A=e.drawRange.start,B=e.drawRange.count,C=null!==h?h.start:0,D=null!==h?h.count:1/0,E=Math.max(y,A,C),F=Math.min(y+z,A+B,C+D)-1,G=Math.max(0,F-E+1);if(g instanceof c.Mesh)if(f.wireframe===!0)Ga.setLineWidth(f.wireframeLinewidth*b()),x.setMode(Ba.LINES);else switch(g.drawMode){case c.TrianglesDrawMode:x.setMode(Ba.TRIANGLES);break;case c.TriangleStripDrawMode:x.setMode(Ba.TRIANGLE_STRIP);break;case c.TriangleFanDrawMode:x.setMode(Ba.TRIANGLE_FAN)}else if(g instanceof c.Line){var H=f.linewidth;void 0===H&&(H=1),Ga.setLineWidth(H*b()),g instanceof c.LineSegments?x.setMode(Ba.LINES):x.setMode(Ba.LINE_STRIP)}else g instanceof c.Points&&x.setMode(Ba.POINTS);e instanceof c.InstancedBufferGeometry?e.maxInstancedCount>0&&x.renderInstances(e,E,G):x.render(E,G)},this.render=function(a,b,e,f){if(b instanceof c.Camera==!1)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");var g=a.fog;ea="",da=-1,fa=null,a.autoUpdate===!0&&a.updateMatrixWorld(),null===b.parent&&b.updateMatrixWorld(),b.matrixWorldInverse.getInverse(b.matrixWorld),xa.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),sa.setFromMatrix(xa),T.length=0,V=-1,X=-1,Z.length=0,$.length=0,va=this.localClippingEnabled,ua=ta.init(this.clippingPlanes,va,b),s(a,b),U.length=V+1,W.length=X+1,_.sortObjects===!0&&(U.sort(m),W.sort(n)),ua&&ta.beginShadows(),H(T),Ta.render(a,b),I(T,b),ua&&ta.endShadows(),Aa.calls=0,Aa.vertices=0,Aa.faces=0,Aa.points=0,void 0===e&&(e=null),this.setRenderTarget(e);var h=a.background;if(null===h?d(ka.r,ka.g,ka.b,la):h instanceof c.Color&&d(h.r,h.g,h.b,1),(this.autoClear||f)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),h instanceof c.CubeTexture?(Pa.projectionMatrix.copy(b.projectionMatrix),Pa.matrixWorld.extractRotation(b.matrixWorld),Pa.matrixWorldInverse.getInverse(Pa.matrixWorld),Sa.material.uniforms.tCube.value=h,Sa.modelViewMatrix.multiplyMatrices(Pa.matrixWorldInverse,Sa.matrixWorld),Ja.update(Sa),_.renderBufferDirect(Pa,null,Sa.geometry,Sa.material,Sa,null)):h instanceof c.Texture&&(Qa.material.map=h,Ja.update(Qa),_.renderBufferDirect(Oa,null,Qa.geometry,Qa.material,Qa,null)),a.overrideMaterial){var i=a.overrideMaterial;t(U,b,g,i),t(W,b,g,i)}else Ga.setBlending(c.NoBlending),t(U,b,g),t(W,b,g);Ua.render(a,b),Va.render(a,b,ia),e&&Ia.updateRenderTargetMipmap(e),Ga.setDepthTest(!0),Ga.setDepthWrite(!0),Ga.setColorWrite(!0)},this.setFaceCulling=function(a,b){Ga.setCullFace(a),Ga.setFlipSided(b===c.FrontFaceDirectionCW)},this.allocTextureUnit=J,this.setTexture2D=function(){var a=!1;return function b(d,e){d instanceof c.WebGLRenderTarget&&(a||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),a=!0),d=d.texture),Ia.setTexture2D(d,e)}}(),this.setTexture=function(){var a=!1;return function b(c,d){a||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),a=!0),Ia.setTexture2D(c,d)}}(),this.setTextureCube=function(){var a=!1;return function b(d,e){d instanceof c.WebGLRenderTargetCube&&(a||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),a=!0),d=d.texture),d instanceof c.CubeTexture||Array.isArray(d.image)&&6===d.image.length?Ia.setTextureCube(d,e):Ia.setTextureCubeDynamic(d,e)}}(),this.getCurrentRenderTarget=function(){return ba},this.setRenderTarget=function(a){ba=a,a&&void 0===Ha.get(a).__webglFramebuffer&&Ia.setupRenderTarget(a);var b=a instanceof c.WebGLRenderTargetCube,d;if(a){var e=Ha.get(a);d=b?e.__webglFramebuffer[a.activeCubeFace]:e.__webglFramebuffer,ga.copy(a.scissor),ha=a.scissorTest,ia.copy(a.viewport)}else d=null,ga.copy(pa).multiplyScalar(oa),ha=qa,ia.copy(ra).multiplyScalar(oa);if(ca!==d&&(Ba.bindFramebuffer(Ba.FRAMEBUFFER,d),ca=d),Ga.scissor(ga),Ga.setScissorTest(ha),Ga.viewport(ia),b){var f=Ha.get(a.texture);Ba.framebufferTexture2D(Ba.FRAMEBUFFER,Ba.COLOR_ATTACHMENT0,Ba.TEXTURE_CUBE_MAP_POSITIVE_X+a.activeCubeFace,f.__webglTexture,a.activeMipMapLevel)}},this.readRenderTargetPixels=function(a,b,d,e,f,g){if(a instanceof c.WebGLRenderTarget==!1)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");var h=Ha.get(a).__webglFramebuffer;if(h){var i=!1;h!==ca&&(Ba.bindFramebuffer(Ba.FRAMEBUFFER,h),i=!0);try{var j=a.texture;if(j.format!==c.RGBAFormat&&K(j.format)!==Ba.getParameter(Ba.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(j.type===c.UnsignedByteType||K(j.type)===Ba.getParameter(Ba.IMPLEMENTATION_COLOR_READ_TYPE)||j.type===c.FloatType&&Ea.get("WEBGL_color_buffer_float")||j.type===c.HalfFloatType&&Ea.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");Ba.checkFramebufferStatus(Ba.FRAMEBUFFER)===Ba.FRAMEBUFFER_COMPLETE?b>=0&&b<=a.width-e&&d>=0&&d<=a.height-f&&Ba.readPixels(b,d,e,f,K(j.format),K(j.type),g):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{i&&Ba.bindFramebuffer(Ba.FRAMEBUFFER,ca)}}}},c.WebGLRenderTarget=function(a,b,d){this.uuid=c.Math.generateUUID(),this.width=a,this.height=b,this.scissor=new c.Vector4(0,0,a,b),this.scissorTest=!1,this.viewport=new c.Vector4(0,0,a,b),d=d||{},void 0===d.minFilter&&(d.minFilter=c.LinearFilter),this.texture=new c.Texture((void 0),(void 0),d.wrapS,d.wrapT,d.magFilter,d.minFilter,d.format,d.type,d.anisotropy,d.encoding),this.depthBuffer=void 0===d.depthBuffer||d.depthBuffer,this.stencilBuffer=void 0===d.stencilBuffer||d.stencilBuffer,this.depthTexture=null},Object.assign(c.WebGLRenderTarget.prototype,c.EventDispatcher.prototype,{setSize:function(a,b){this.width===a&&this.height===b||(this.width=a,this.height=b,this.dispose()),this.viewport.set(0,0,a,b),this.scissor.set(0,0,a,b)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.width=a.width,this.height=a.height,this.viewport.copy(a.viewport),this.texture=a.texture.clone(),this.depthBuffer=a.depthBuffer,this.stencilBuffer=a.stencilBuffer,this.depthTexture=a.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),c.WebGLRenderTargetCube=function(a,b,d){c.WebGLRenderTarget.call(this,a,b,d),this.activeCubeFace=0,this.activeMipMapLevel=0},c.WebGLRenderTargetCube.prototype=Object.create(c.WebGLRenderTarget.prototype),c.WebGLRenderTargetCube.prototype.constructor=c.WebGLRenderTargetCube,c.WebGLBufferRenderer=function(a,b,d){
function e(a){h=a}function f(b,c){a.drawArrays(h,b,c),d.calls++,d.vertices+=c,h===a.TRIANGLES&&(d.faces+=c/3)}function g(e){var f=b.get("ANGLE_instanced_arrays");if(null===f)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");var g=e.attributes.position,i=0;g instanceof c.InterleavedBufferAttribute?(i=g.data.count,f.drawArraysInstancedANGLE(h,0,i,e.maxInstancedCount)):(i=g.count,f.drawArraysInstancedANGLE(h,0,i,e.maxInstancedCount)),d.calls++,d.vertices+=i*e.maxInstancedCount,h===a.TRIANGLES&&(d.faces+=e.maxInstancedCount*i/3)}var h;this.setMode=e,this.render=f,this.renderInstances=g},c.WebGLClipping=function(){function a(){k.value!==e&&(k.value=e,k.needsUpdate=f>0),d.numPlanes=f}function b(a,b,c,e){var f=null!==a?a.length:0,g=null;if(0!==f){if(g=k.value,e!==!0||null===g){var h=c+4*f,l=b.matrixWorldInverse;j.getNormalMatrix(l),(null===g||g.length<h)&&(g=new Float32Array(h));for(var m=0,n=c;m!==f;++m,n+=4)i.copy(a[m]).applyMatrix4(l,j),i.normal.toArray(g,n),g[n+3]=i.constant}k.value=g,k.needsUpdate=!0}return d.numPlanes=f,g}var d=this,e=null,f=0,g=!1,h=!1,i=new c.Plane,j=new c.Matrix3,k={value:null,needsUpdate:!1};this.uniform=k,this.numPlanes=0,this.init=function(a,c,d){var h=0!==a.length||c||0!==f||g;return g=c,e=b(a,d,0),f=a.length,h},this.beginShadows=function(){h=!0,b(null)},this.endShadows=function(){h=!1,a()},this.setState=function(c,d,i,j,l){if(!g||null===c||0===c.length||h&&!d)h?b(null):a();else{var m=h?0:f,n=4*m,o=j.clippingState||null;k.value=o,o=b(c,i,n,l);for(var p=0;p!==n;++p)o[p]=e[p];j.clippingState=o,this.numPlanes+=m}}},c.WebGLIndexedBufferRenderer=function(a,b,c){function d(a){h=a}function e(c){c.array instanceof Uint32Array&&b.get("OES_element_index_uint")?(i=a.UNSIGNED_INT,j=4):(i=a.UNSIGNED_SHORT,j=2)}function f(b,d){a.drawElements(h,d,i,b*j),c.calls++,c.vertices+=d,h===a.TRIANGLES&&(c.faces+=d/3)}function g(d,e,f){var g=b.get("ANGLE_instanced_arrays");return null===g?void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):(g.drawElementsInstancedANGLE(h,f,i,e*j,d.maxInstancedCount),c.calls++,c.vertices+=f*d.maxInstancedCount,void(h===a.TRIANGLES&&(c.faces+=d.maxInstancedCount*f/3)))}var h,i,j;this.setMode=d,this.setIndex=e,this.render=f,this.renderInstances=g},c.WebGLExtensions=function(a){var b={};this.get=function(c){if(void 0!==b[c])return b[c];var d;switch(c){case"WEBGL_depth_texture":d=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case"WEBGL_compressed_texture_etc1":d=a.getExtension("WEBGL_compressed_texture_etc1");break;default:d=a.getExtension(c)}return null===d&&console.warn("THREE.WebGLRenderer: "+c+" extension not supported."),b[c]=d,d}},c.WebGLCapabilities=function(a,b,c){function d(){if(void 0!==f)return f;var c=b.get("EXT_texture_filter_anisotropic");return f=null!==c?a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}function e(b){if("highp"===b){if(a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision>0&&a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision>0)return"highp";b="mediump"}return"mediump"===b&&a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision>0&&a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var f;this.getMaxAnisotropy=d,this.getMaxPrecision=e,this.precision=void 0!==c.precision?c.precision:"highp",this.logarithmicDepthBuffer=void 0!==c.logarithmicDepthBuffer&&c.logarithmicDepthBuffer,this.maxTextures=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),this.maxVertexTextures=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS),this.maxTextureSize=a.getParameter(a.MAX_TEXTURE_SIZE),this.maxCubemapSize=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE),this.maxAttributes=a.getParameter(a.MAX_VERTEX_ATTRIBS),this.maxVertexUniforms=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS),this.maxVaryings=a.getParameter(a.MAX_VARYING_VECTORS),this.maxFragmentUniforms=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS),this.vertexTextures=this.maxVertexTextures>0,this.floatFragmentTextures=!!b.get("OES_texture_float"),this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures;var g=e(this.precision);g!==this.precision&&(console.warn("THREE.WebGLRenderer:",this.precision,"not supported, using",g,"instead."),this.precision=g),this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=!!b.get("EXT_frag_depth"))},c.WebGLGeometries=function(a,b,d){function e(a){var b=a.geometry;if(void 0!==k[b.id])return k[b.id];b.addEventListener("dispose",f);var e;return b instanceof c.BufferGeometry?e=b:b instanceof c.Geometry&&(void 0===b._bufferGeometry&&(b._bufferGeometry=(new c.BufferGeometry).setFromObject(a)),e=b._bufferGeometry),k[b.id]=e,d.memory.geometries++,e}function f(a){var c=a.target,e=k[c.id];null!==e.index&&h(e.index),i(e.attributes),c.removeEventListener("dispose",f),delete k[c.id];var g=b.get(c);g.wireframe&&h(g.wireframe),b["delete"](c);var j=b.get(e);j.wireframe&&h(j.wireframe),b["delete"](e),d.memory.geometries--}function g(a){return a instanceof c.InterleavedBufferAttribute?b.get(a.data).__webglBuffer:b.get(a).__webglBuffer}function h(b){var c=g(b);void 0!==c&&(a.deleteBuffer(c),j(b))}function i(a){for(var b in a)h(a[b])}function j(a){a instanceof c.InterleavedBufferAttribute?b["delete"](a.data):b["delete"](a)}var k={};this.get=e},c.WebGLLights=function(){var a={};this.get=function(b){if(void 0!==a[b.id])return a[b.id];var d;switch(b.type){case"DirectionalLight":d={direction:new c.Vector3,color:new c.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new c.Vector2};break;case"SpotLight":d={position:new c.Vector3,direction:new c.Vector3,color:new c.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new c.Vector2};break;case"PointLight":d={position:new c.Vector3,color:new c.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new c.Vector2};break;case"HemisphereLight":d={direction:new c.Vector3,skyColor:new c.Color,groundColor:new c.Color}}return a[b.id]=d,d}},c.WebGLObjects=function(a,b,d){function e(b){var d=l.get(b);b.geometry instanceof c.Geometry&&d.updateFromObject(b);var e=d.index,g=d.attributes;null!==e&&f(e,a.ELEMENT_ARRAY_BUFFER);for(var h in g)f(g[h],a.ARRAY_BUFFER);var i=d.morphAttributes;for(var h in i)for(var j=i[h],k=0,m=j.length;k<m;k++)f(j[k],a.ARRAY_BUFFER);return d}function f(a,d){var e=a instanceof c.InterleavedBufferAttribute?a.data:a,f=b.get(e);void 0===f.__webglBuffer?g(f,e,d):f.version!==e.version&&h(f,e,d)}function g(b,c,d){b.__webglBuffer=a.createBuffer(),a.bindBuffer(d,b.__webglBuffer);var e=c.dynamic?a.DYNAMIC_DRAW:a.STATIC_DRAW;a.bufferData(d,c.array,e),b.version=c.version}function h(b,c,d){a.bindBuffer(d,b.__webglBuffer),c.dynamic===!1||c.updateRange.count===-1?a.bufferSubData(d,0,c.array):0===c.updateRange.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(a.bufferSubData(d,c.updateRange.offset*c.array.BYTES_PER_ELEMENT,c.array.subarray(c.updateRange.offset,c.updateRange.offset+c.updateRange.count)),c.updateRange.count=0),b.version=c.version}function i(a){return a instanceof c.InterleavedBufferAttribute?b.get(a.data).__webglBuffer:b.get(a).__webglBuffer}function j(d){var e=b.get(d);if(void 0!==e.wireframe)return e.wireframe;var g=[],h=d.index,i=d.attributes,j=i.position;if(null!==h)for(var l={},m=h.array,n=0,o=m.length;n<o;n+=3){var p=m[n+0],q=m[n+1],r=m[n+2];k(l,p,q)&&g.push(p,q),k(l,q,r)&&g.push(q,r),k(l,r,p)&&g.push(r,p)}else for(var m=i.position.array,n=0,o=m.length/3-1;n<o;n+=3){var p=n+0,q=n+1,r=n+2;g.push(p,q,q,r,r,p)}var s=j.count>65535?Uint32Array:Uint16Array,t=new c.BufferAttribute(new s(g),1);return f(t,a.ELEMENT_ARRAY_BUFFER),e.wireframe=t,t}function k(a,b,c){if(b>c){var d=b;b=c,c=d}var e=a[b];return void 0===e?(a[b]=[c],!0):e.indexOf(c)===-1&&(e.push(c),!0)}var l=new c.WebGLGeometries(a,b,d);this.getAttributeBuffer=i,this.getWireframeAttribute=j,this.update=e},c.WebGLProgram=function(){function a(a){switch(a){case c.LinearEncoding:return["Linear","( value )"];case c.sRGBEncoding:return["sRGB","( value )"];case c.RGBEEncoding:return["RGBE","( value )"];case c.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case c.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case c.RGBDEncoding:return["RGBD","( value, 256.0 )"];case c.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+a)}}function b(b,c){var d=a(c);return"vec4 "+b+"( vec4 value ) { return "+d[0]+"ToLinear"+d[1]+"; }"}function d(b,c){var d=a(c);return"vec4 "+b+"( vec4 value ) { return LinearTo"+d[0]+d[1]+"; }"}function e(a,b){var d;switch(b){case c.LinearToneMapping:d="Linear";break;case c.ReinhardToneMapping:d="Reinhard";break;case c.Uncharted2ToneMapping:d="Uncharted2";break;case c.CineonToneMapping:d="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+b)}return"vec3 "+a+"( vec3 color ) { return "+d+"ToneMapping( color ); }"}function f(a,b,c){a=a||{};var d=[a.derivatives||b.envMapCubeUV||b.bumpMap||b.normalMap||b.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(a.fragDepth||b.logarithmicDepthBuffer)&&c.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",a.drawBuffers&&c.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(a.shaderTextureLOD||b.envMap)&&c.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""];return d.filter(i).join("\n")}function g(a){var b=[];for(var c in a){var d=a[c];d!==!1&&b.push("#define "+c+" "+d)}return b.join("\n")}function h(a,b,c){for(var d={},e=a.getProgramParameter(b,a.ACTIVE_ATTRIBUTES),f=0;f<e;f++){var g=a.getActiveAttrib(b,f),h=g.name;d[h]=a.getAttribLocation(b,h)}return d}function i(a){return""!==a}function j(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights)}function k(a){function b(a,b){var d=c.ShaderChunk[b];if(void 0===d)throw new Error("Can not resolve #include <"+b+">");return k(d)}var d=/#include +<([\w\d.]+)>/g;return a.replace(d,b)}function l(a){function b(a,b,c,d){for(var e="",f=parseInt(b);f<parseInt(c);f++)e+=d.replace(/\[ i \]/g,"[ "+f+" ]");return e}var c=/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;return a.replace(c,b)}var m=0;return function n(a,o,p,q){var r=a.context,s=p.extensions,t=p.defines,u=p.__webglShader.vertexShader,v=p.__webglShader.fragmentShader,w="SHADOWMAP_TYPE_BASIC";q.shadowMapType===c.PCFShadowMap?w="SHADOWMAP_TYPE_PCF":q.shadowMapType===c.PCFSoftShadowMap&&(w="SHADOWMAP_TYPE_PCF_SOFT");var x="ENVMAP_TYPE_CUBE",y="ENVMAP_MODE_REFLECTION",z="ENVMAP_BLENDING_MULTIPLY";if(q.envMap){switch(p.envMap.mapping){case c.CubeReflectionMapping:case c.CubeRefractionMapping:x="ENVMAP_TYPE_CUBE";break;case c.CubeUVReflectionMapping:case c.CubeUVRefractionMapping:x="ENVMAP_TYPE_CUBE_UV";break;case c.EquirectangularReflectionMapping:case c.EquirectangularRefractionMapping:x="ENVMAP_TYPE_EQUIREC";break;case c.SphericalReflectionMapping:x="ENVMAP_TYPE_SPHERE"}switch(p.envMap.mapping){case c.CubeRefractionMapping:case c.EquirectangularRefractionMapping:y="ENVMAP_MODE_REFRACTION"}switch(p.combine){case c.MultiplyOperation:z="ENVMAP_BLENDING_MULTIPLY";break;case c.MixOperation:z="ENVMAP_BLENDING_MIX";break;case c.AddOperation:z="ENVMAP_BLENDING_ADD"}}var A=a.gammaFactor>0?a.gammaFactor:1,B=f(s,q,a.extensions),C=g(t),D=r.createProgram(),E,F;p instanceof c.RawShaderMaterial?(E=[C].filter(i).join("\n"),F=[C].filter(i).join("\n")):(E=["precision "+q.precision+" float;","precision "+q.precision+" int;","#define SHADER_NAME "+p.__webglShader.name,C,q.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+A,"#define MAX_BONES "+q.maxBones,q.map?"#define USE_MAP":"",q.envMap?"#define USE_ENVMAP":"",q.envMap?"#define "+y:"",q.lightMap?"#define USE_LIGHTMAP":"",q.aoMap?"#define USE_AOMAP":"",q.emissiveMap?"#define USE_EMISSIVEMAP":"",q.bumpMap?"#define USE_BUMPMAP":"",q.normalMap?"#define USE_NORMALMAP":"",q.displacementMap&&q.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",q.specularMap?"#define USE_SPECULARMAP":"",q.roughnessMap?"#define USE_ROUGHNESSMAP":"",q.metalnessMap?"#define USE_METALNESSMAP":"",q.alphaMap?"#define USE_ALPHAMAP":"",q.vertexColors?"#define USE_COLOR":"",q.flatShading?"#define FLAT_SHADED":"",q.skinning?"#define USE_SKINNING":"",q.useVertexTexture?"#define BONE_TEXTURE":"",q.morphTargets?"#define USE_MORPHTARGETS":"",q.morphNormals&&q.flatShading===!1?"#define USE_MORPHNORMALS":"",q.doubleSided?"#define DOUBLE_SIDED":"",q.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+q.numClippingPlanes,q.shadowMapEnabled?"#define USE_SHADOWMAP":"",q.shadowMapEnabled?"#define "+w:"",q.sizeAttenuation?"#define USE_SIZEATTENUATION":"",q.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",q.logarithmicDepthBuffer&&a.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(i).join("\n"),F=[B,"precision "+q.precision+" float;","precision "+q.precision+" int;","#define SHADER_NAME "+p.__webglShader.name,C,q.alphaTest?"#define ALPHATEST "+q.alphaTest:"","#define GAMMA_FACTOR "+A,q.useFog&&q.fog?"#define USE_FOG":"",q.useFog&&q.fogExp?"#define FOG_EXP2":"",q.map?"#define USE_MAP":"",q.envMap?"#define USE_ENVMAP":"",q.envMap?"#define "+x:"",q.envMap?"#define "+y:"",q.envMap?"#define "+z:"",q.lightMap?"#define USE_LIGHTMAP":"",q.aoMap?"#define USE_AOMAP":"",q.emissiveMap?"#define USE_EMISSIVEMAP":"",q.bumpMap?"#define USE_BUMPMAP":"",q.normalMap?"#define USE_NORMALMAP":"",q.specularMap?"#define USE_SPECULARMAP":"",q.roughnessMap?"#define USE_ROUGHNESSMAP":"",q.metalnessMap?"#define USE_METALNESSMAP":"",q.alphaMap?"#define USE_ALPHAMAP":"",q.vertexColors?"#define USE_COLOR":"",q.flatShading?"#define FLAT_SHADED":"",q.doubleSided?"#define DOUBLE_SIDED":"",q.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+q.numClippingPlanes,q.shadowMapEnabled?"#define USE_SHADOWMAP":"",q.shadowMapEnabled?"#define "+w:"",q.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",q.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",q.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",q.logarithmicDepthBuffer&&a.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",q.envMap&&a.extensions.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",q.toneMapping!==c.NoToneMapping?"#define TONE_MAPPING":"",q.toneMapping!==c.NoToneMapping?c.ShaderChunk.tonemapping_pars_fragment:"",q.toneMapping!==c.NoToneMapping?e("toneMapping",q.toneMapping):"",q.outputEncoding||q.mapEncoding||q.envMapEncoding||q.emissiveMapEncoding?c.ShaderChunk.encodings_pars_fragment:"",q.mapEncoding?b("mapTexelToLinear",q.mapEncoding):"",q.envMapEncoding?b("envMapTexelToLinear",q.envMapEncoding):"",q.emissiveMapEncoding?b("emissiveMapTexelToLinear",q.emissiveMapEncoding):"",q.outputEncoding?d("linearToOutputTexel",q.outputEncoding):"",q.depthPacking?"#define DEPTH_PACKING "+p.depthPacking:"","\n"].filter(i).join("\n")),u=k(u,q),u=j(u,q),v=k(v,q),v=j(v,q),p instanceof c.ShaderMaterial==!1&&(u=l(u),v=l(v));var G=E+u,H=F+v,I=c.WebGLShader(r,r.VERTEX_SHADER,G),J=c.WebGLShader(r,r.FRAGMENT_SHADER,H);r.attachShader(D,I),r.attachShader(D,J),void 0!==p.index0AttributeName?r.bindAttribLocation(D,0,p.index0AttributeName):q.morphTargets===!0&&r.bindAttribLocation(D,0,"position"),r.linkProgram(D);var K=r.getProgramInfoLog(D),L=r.getShaderInfoLog(I),M=r.getShaderInfoLog(J),N=!0,O=!0;r.getProgramParameter(D,r.LINK_STATUS)===!1?(N=!1,console.error("THREE.WebGLProgram: shader error: ",r.getError(),"gl.VALIDATE_STATUS",r.getProgramParameter(D,r.VALIDATE_STATUS),"gl.getProgramInfoLog",K,L,M)):""!==K?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",K):""!==L&&""!==M||(O=!1),O&&(this.diagnostics={runnable:N,material:p,programLog:K,vertexShader:{log:L,prefix:E},fragmentShader:{log:M,prefix:F}}),r.deleteShader(I),r.deleteShader(J);var P;this.getUniforms=function(){return void 0===P&&(P=new c.WebGLUniforms(r,D,a)),P};var Q;return this.getAttributes=function(){return void 0===Q&&(Q=h(r,D)),Q},this.destroy=function(){r.deleteProgram(D),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.id=m++,this.code=o,this.usedTimes=1,this.program=D,this.vertexShader=I,this.fragmentShader=J,this}}(),c.WebGLPrograms=function(a,b){function d(a){if(b.floatVertexTextures&&a&&a.skeleton&&a.skeleton.useVertexTexture)return 1024;var d=b.maxVertexUniforms,e=Math.floor((d-20)/4),f=e;return void 0!==a&&a instanceof c.SkinnedMesh&&(f=Math.min(a.skeleton.bones.length,f),f<a.skeleton.bones.length&&console.warn("WebGLRenderer: too many bones - "+a.skeleton.bones.length+", this GPU supports just "+f+" (try OpenGL instead of ANGLE)")),f}function e(a,b){var d;return a?a instanceof c.Texture?d=a.encoding:a instanceof c.WebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),d=a.texture.encoding):d=c.LinearEncoding,d===c.LinearEncoding&&b&&(d=c.GammaEncoding),d}var f=[],g={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points"},h=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","displacementMap","specularMap","roughnessMap","metalnessMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","depthPacking"];this.getParameters=function(f,h,i,j,k){var l=g[f.type],m=d(k),n=a.getPrecision();null!==f.precision&&(n=b.getMaxPrecision(f.precision),n!==f.precision&&console.warn("THREE.WebGLProgram.getParameters:",f.precision,"not supported, using",n,"instead."));var o=a.getCurrentRenderTarget(),p={shaderID:l,precision:n,supportsVertexTextures:b.vertexTextures,outputEncoding:e(o?o.texture:null,a.gammaOutput),map:!!f.map,mapEncoding:e(f.map,a.gammaInput),envMap:!!f.envMap,envMapMode:f.envMap&&f.envMap.mapping,envMapEncoding:e(f.envMap,a.gammaInput),envMapCubeUV:!!f.envMap&&(f.envMap.mapping===c.CubeUVReflectionMapping||f.envMap.mapping===c.CubeUVRefractionMapping),lightMap:!!f.lightMap,aoMap:!!f.aoMap,emissiveMap:!!f.emissiveMap,emissiveMapEncoding:e(f.emissiveMap,a.gammaInput),bumpMap:!!f.bumpMap,normalMap:!!f.normalMap,displacementMap:!!f.displacementMap,roughnessMap:!!f.roughnessMap,metalnessMap:!!f.metalnessMap,specularMap:!!f.specularMap,alphaMap:!!f.alphaMap,combine:f.combine,vertexColors:f.vertexColors,fog:!!i,useFog:f.fog,fogExp:i instanceof c.FogExp2,flatShading:f.shading===c.FlatShading,sizeAttenuation:f.sizeAttenuation,logarithmicDepthBuffer:b.logarithmicDepthBuffer,skinning:f.skinning,maxBones:m,useVertexTexture:b.floatVertexTextures&&k&&k.skeleton&&k.skeleton.useVertexTexture,morphTargets:f.morphTargets,morphNormals:f.morphNormals,maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:h.directional.length,numPointLights:h.point.length,numSpotLights:h.spot.length,numHemiLights:h.hemi.length,numClippingPlanes:j,shadowMapEnabled:a.shadowMap.enabled&&k.receiveShadow&&h.shadows.length>0,shadowMapType:a.shadowMap.type,toneMapping:a.toneMapping,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:f.premultipliedAlpha,alphaTest:f.alphaTest,doubleSided:f.side===c.DoubleSide,flipSided:f.side===c.BackSide,depthPacking:void 0!==f.depthPacking&&f.depthPacking};return p},this.getProgramCode=function(a,b){var c=[];if(b.shaderID?c.push(b.shaderID):(c.push(a.fragmentShader),c.push(a.vertexShader)),void 0!==a.defines)for(var d in a.defines)c.push(d),c.push(a.defines[d]);for(var e=0;e<h.length;e++)c.push(b[h[e]]);return c.join()},this.acquireProgram=function(b,d,e){for(var g,h=0,i=f.length;h<i;h++){var j=f[h];if(j.code===e){g=j,++g.usedTimes;break}}return void 0===g&&(g=new c.WebGLProgram(a,e,b,d),f.push(g)),g},this.releaseProgram=function(a){if(0===--a.usedTimes){var b=f.indexOf(a);f[b]=f[f.length-1],f.pop(),a.destroy()}},this.programs=f},c.WebGLProperties=function(){var a={};this.get=function(b){var c=b.uuid,d=a[c];return void 0===d&&(d={},a[c]=d),d},this["delete"]=function(b){delete a[b.uuid]},this.clear=function(){a={}}},c.WebGLShader=function(){function a(a){for(var b=a.split("\n"),c=0;c<b.length;c++)b[c]=c+1+": "+b[c];return b.join("\n")}return function b(c,d,e){var f=c.createShader(d);return c.shaderSource(f,e),c.compileShader(f),c.getShaderParameter(f,c.COMPILE_STATUS)===!1&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==c.getShaderInfoLog(f)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",d===c.VERTEX_SHADER?"vertex":"fragment",c.getShaderInfoLog(f),a(e)),f}}(),c.WebGLShadowMap=function(a,b,d,e){function f(b,d,e,f){var g=b.geometry,h=null,i=u,j=b.customDepthMaterial;if(e&&(i=v,j=b.customDistanceMaterial),j)h=j;else{var k=!1;d.morphTargets&&(g instanceof c.BufferGeometry?k=g.morphAttributes&&g.morphAttributes.position&&g.morphAttributes.position.length>0:g instanceof c.Geometry&&(k=g.morphTargets&&g.morphTargets.length>0));var l=b instanceof c.SkinnedMesh&&d.skinning,m=0;k&&(m|=r),l&&(m|=s),h=i[m]}if(a.localClippingEnabled&&d.clipShadows===!0&&0!==d.clippingPlanes.length){var n=h.uuid,o=d.uuid,p=w[n];void 0===p&&(p={},w[n]=p);var q=p[o];void 0===q&&(q=h.clone(),p[o]=q),h=q}h.visible=d.visible,h.wireframe=d.wireframe;var t=d.side;return I.renderSingleSided&&t==c.DoubleSide&&(t=c.FrontSide),I.renderReverseSided&&(t===c.FrontSide?t=c.BackSide:t===c.BackSide&&(t=c.FrontSide)),h.side=t,h.clipShadows=d.clipShadows,h.clippingPlanes=d.clippingPlanes,h.wireframeLinewidth=d.wireframeLinewidth,h.linewidth=d.linewidth,e&&void 0!==h.uniforms.lightPos&&h.uniforms.lightPos.value.copy(f),h}function g(a,b,d){if(a.visible!==!1){if(a.layers.test(b.layers)&&(a instanceof c.Mesh||a instanceof c.Line||a instanceof c.Points)&&a.castShadow&&(a.frustumCulled===!1||j.intersectsObject(a)===!0)){var e=a.material;e.visible===!0&&(a.modelViewMatrix.multiplyMatrices(d.matrixWorldInverse,a.matrixWorld),q.push(a))}for(var f=a.children,h=0,i=f.length;h<i;h++)g(f[h],b,d)}}var h=a.context,i=a.state,j=new c.Frustum,k=new c.Matrix4,l=b.shadows,m=new c.Vector2,n=new c.Vector2(e.maxTextureSize,e.maxTextureSize),o=new c.Vector3,p=new c.Vector3,q=[],r=1,s=2,t=(r|s)+1,u=new Array(t),v=new Array(t),w={},x=[new c.Vector3(1,0,0),new c.Vector3((-1),0,0),new c.Vector3(0,0,1),new c.Vector3(0,0,(-1)),new c.Vector3(0,1,0),new c.Vector3(0,(-1),0)],y=[new c.Vector3(0,1,0),new c.Vector3(0,1,0),new c.Vector3(0,1,0),new c.Vector3(0,1,0),new c.Vector3(0,0,1),new c.Vector3(0,0,(-1))],z=[new c.Vector4,new c.Vector4,new c.Vector4,new c.Vector4,new c.Vector4,new c.Vector4],A=new c.MeshDepthMaterial;A.depthPacking=c.RGBADepthPacking,A.clipping=!0;for(var B=c.ShaderLib.distanceRGBA,C=c.UniformsUtils.clone(B.uniforms),D=0;D!==t;++D){var E=0!==(D&r),F=0!==(D&s),G=A.clone();G.morphTargets=E,G.skinning=F,u[D]=G;var H=new c.ShaderMaterial({defines:{USE_SHADOWMAP:""},uniforms:C,vertexShader:B.vertexShader,fragmentShader:B.fragmentShader,morphTargets:E,skinning:F,clipping:!0});v[D]=H}var I=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=c.PCFShadowMap,this.renderReverseSided=!0,this.renderSingleSided=!0,this.render=function(b,e){if(I.enabled!==!1&&(I.autoUpdate!==!1||I.needsUpdate!==!1)&&0!==l.length){i.clearColor(1,1,1,1),i.disable(h.BLEND),i.setDepthTest(!0),i.setScissorTest(!1);for(var r,s,t=0,u=l.length;t<u;t++){var v=l[t],w=v.shadow;if(void 0!==w){var A=w.camera;if(m.copy(w.mapSize),m.min(n),v instanceof c.PointLight){r=6,s=!0;var B=m.x,C=m.y;z[0].set(2*B,C,B,C),z[1].set(0,C,B,C),z[2].set(3*B,C,B,C),z[3].set(B,C,B,C),z[4].set(3*B,0,B,C),z[5].set(B,0,B,C),m.x*=4,m.y*=2}else r=1,s=!1;if(null===w.map){var D={minFilter:c.NearestFilter,magFilter:c.NearestFilter,format:c.RGBAFormat};w.map=new c.WebGLRenderTarget(m.x,m.y,D),A.updateProjectionMatrix()}w instanceof c.SpotLightShadow&&w.update(v);var E=w.map,F=w.matrix;p.setFromMatrixPosition(v.matrixWorld),A.position.copy(p),a.setRenderTarget(E),a.clear();for(var G=0;G<r;G++){if(s){o.copy(A.position),o.add(x[G]),A.up.copy(y[G]),A.lookAt(o);var H=z[G];i.viewport(H)}else o.setFromMatrixPosition(v.target.matrixWorld),A.lookAt(o);A.updateMatrixWorld(),A.matrixWorldInverse.getInverse(A.matrixWorld),F.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),F.multiply(A.projectionMatrix),F.multiply(A.matrixWorldInverse),k.multiplyMatrices(A.projectionMatrix,A.matrixWorldInverse),j.setFromMatrix(k),q.length=0,g(b,e,A);for(var J=0,K=q.length;J<K;J++){var L=q[J],M=d.update(L),N=L.material;if(N instanceof c.MultiMaterial)for(var O=M.groups,P=N.materials,Q=0,R=O.length;Q<R;Q++){var S=O[Q],T=P[S.materialIndex];if(T.visible===!0){var U=f(L,T,s,p);a.renderBufferDirect(A,null,M,U,L,S)}}else{var U=f(L,N,s,p);a.renderBufferDirect(A,null,M,U,L,null)}}}}else console.warn("THREE.WebGLShadowMap:",v,"has no shadow.")}var V=a.getClearColor(),W=a.getClearAlpha();a.setClearColor(V,W),I.needsUpdate=!1}}},c.WebGLState=function(a,b,d){function e(b,c,d){var e=new Uint8Array(4),f=a.createTexture();a.bindTexture(b,f),a.texParameteri(b,a.TEXTURE_MIN_FILTER,a.NEAREST),a.texParameteri(b,a.TEXTURE_MAG_FILTER,a.NEAREST);for(var g=0;g<d;g++)a.texImage2D(c+g,0,a.RGBA,1,1,0,a.RGBA,a.UNSIGNED_BYTE,e);return f}var f=this;this.buffers={color:new c.WebGLColorBuffer(a,this),depth:new c.WebGLDepthBuffer(a,this),stencil:new c.WebGLStencilBuffer(a,this)};var g=a.getParameter(a.MAX_VERTEX_ATTRIBS),h=new Uint8Array(g),i=new Uint8Array(g),j=new Uint8Array(g),k={},l=null,m=null,n=null,o=null,p=null,q=null,r=null,s=null,t=!1,u=null,v=null,w=null,x=null,y=null,z=null,A=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),B=null,C={},D=new c.Vector4,E=new c.Vector4,F={};F[a.TEXTURE_2D]=e(a.TEXTURE_2D,a.TEXTURE_2D,1),F[a.TEXTURE_CUBE_MAP]=e(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,6),this.init=function(){this.clearColor(0,0,0,1),this.clearDepth(1),this.clearStencil(0),this.enable(a.DEPTH_TEST),this.setDepthFunc(c.LessEqualDepth),this.setFlipSided(!1),this.setCullFace(c.CullFaceBack),this.enable(a.CULL_FACE),this.enable(a.BLEND),this.setBlending(c.NormalBlending)},this.initAttributes=function(){for(var a=0,b=h.length;a<b;a++)h[a]=0},this.enableAttribute=function(c){if(h[c]=1,0===i[c]&&(a.enableVertexAttribArray(c),i[c]=1),0!==j[c]){var d=b.get("ANGLE_instanced_arrays");d.vertexAttribDivisorANGLE(c,0),j[c]=0}},this.enableAttributeAndDivisor=function(b,c,d){h[b]=1,0===i[b]&&(a.enableVertexAttribArray(b),i[b]=1),j[b]!==c&&(d.vertexAttribDivisorANGLE(b,c),j[b]=c)},this.disableUnusedAttributes=function(){for(var b=0,c=i.length;b!==c;++b)i[b]!==h[b]&&(a.disableVertexAttribArray(b),i[b]=0)},this.enable=function(b){k[b]!==!0&&(a.enable(b),k[b]=!0)},this.disable=function(b){k[b]!==!1&&(a.disable(b),k[b]=!1)},this.getCompressedTextureFormats=function(){if(null===l&&(l=[],b.get("WEBGL_compressed_texture_pvrtc")||b.get("WEBGL_compressed_texture_s3tc")||b.get("WEBGL_compressed_texture_etc1")))for(var c=a.getParameter(a.COMPRESSED_TEXTURE_FORMATS),d=0;d<c.length;d++)l.push(c[d]);return l},this.setBlending=function(b,e,f,g,h,i,j,k){return b===c.NoBlending?(this.disable(a.BLEND),void(m=b)):(this.enable(a.BLEND),b===m&&k===t||(b===c.AdditiveBlending?k?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE,a.ONE,a.ONE)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE)):b===c.SubtractiveBlending?k?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR)):b===c.MultiplyBlending?k?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.SRC_COLOR,a.ZERO,a.SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.SRC_COLOR)):k?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)),m=b,t=k),void(b===c.CustomBlending?(h=h||e,i=i||f,j=j||g,e===n&&h===q||(a.blendEquationSeparate(d(e),d(h)),n=e,q=h),f===o&&g===p&&i===r&&j===s||(a.blendFuncSeparate(d(f),d(g),d(i),d(j)),o=f,p=g,r=i,s=j)):(n=null,o=null,p=null,q=null,r=null,s=null)))},this.setColorWrite=function(a){this.buffers.color.setMask(a)},this.setDepthTest=function(a){this.buffers.depth.setTest(a)},this.setDepthWrite=function(a){this.buffers.depth.setMask(a)},this.setDepthFunc=function(a){this.buffers.depth.setFunc(a)},this.setStencilTest=function(a){this.buffers.stencil.setTest(a)},this.setStencilWrite=function(a){this.buffers.stencil.setMask(a)},this.setStencilFunc=function(a,b,c){this.buffers.stencil.setFunc(a,b,c)},this.setStencilOp=function(a,b,c){this.buffers.stencil.setOp(a,b,c)},this.setFlipSided=function(b){u!==b&&(b?a.frontFace(a.CW):a.frontFace(a.CCW),u=b)},this.setCullFace=function(b){b!==c.CullFaceNone?(this.enable(a.CULL_FACE),b!==v&&(b===c.CullFaceBack?a.cullFace(a.BACK):b===c.CullFaceFront?a.cullFace(a.FRONT):a.cullFace(a.FRONT_AND_BACK))):this.disable(a.CULL_FACE),v=b},this.setLineWidth=function(b){b!==w&&(a.lineWidth(b),w=b)},this.setPolygonOffset=function(b,c,d){b?(this.enable(a.POLYGON_OFFSET_FILL),x===c&&y===d||(a.polygonOffset(c,d),x=c,y=d)):this.disable(a.POLYGON_OFFSET_FILL);
},this.getScissorTest=function(){return z},this.setScissorTest=function(b){z=b,b?this.enable(a.SCISSOR_TEST):this.disable(a.SCISSOR_TEST)},this.activeTexture=function(b){void 0===b&&(b=a.TEXTURE0+A-1),B!==b&&(a.activeTexture(b),B=b)},this.bindTexture=function(b,c){null===B&&f.activeTexture();var d=C[B];void 0===d&&(d={type:void 0,texture:void 0},C[B]=d),d.type===b&&d.texture===c||(a.bindTexture(b,c||F[b]),d.type=b,d.texture=c)},this.compressedTexImage2D=function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(b){console.error(b)}},this.texImage2D=function(){try{a.texImage2D.apply(a,arguments)}catch(b){console.error(b)}},this.clearColor=function(a,b,c,d){this.buffers.color.setClear(a,b,c,d)},this.clearDepth=function(a){this.buffers.depth.setClear(a)},this.clearStencil=function(a){this.buffers.stencil.setClear(a)},this.scissor=function(b){D.equals(b)===!1&&(a.scissor(b.x,b.y,b.z,b.w),D.copy(b))},this.viewport=function(b){E.equals(b)===!1&&(a.viewport(b.x,b.y,b.z,b.w),E.copy(b))},this.reset=function(){for(var b=0;b<i.length;b++)1===i[b]&&(a.disableVertexAttribArray(b),i[b]=0);k={},l=null,B=null,C={},m=null,u=null,v=null,this.buffers.color.reset(),this.buffers.depth.reset(),this.buffers.stencil.reset()}},c.WebGLColorBuffer=function(a,b){var d=!1,e=new c.Vector4,f=null,g=new c.Vector4;this.setMask=function(b){f===b||d||(a.colorMask(b,b,b,b),f=b)},this.setLocked=function(a){d=a},this.setClear=function(b,c,d,f){e.set(b,c,d,f),g.equals(e)===!1&&(a.clearColor(b,c,d,f),g.copy(e))},this.reset=function(){d=!1,f=null,g=new c.Vector4}},c.WebGLDepthBuffer=function(a,b){var d=!1,e=null,f=null,g=null;this.setTest=function(c){c?b.enable(a.DEPTH_TEST):b.disable(a.DEPTH_TEST)},this.setMask=function(b){e===b||d||(a.depthMask(b),e=b)},this.setFunc=function(b){if(f!==b){if(b)switch(b){case c.NeverDepth:a.depthFunc(a.NEVER);break;case c.AlwaysDepth:a.depthFunc(a.ALWAYS);break;case c.LessDepth:a.depthFunc(a.LESS);break;case c.LessEqualDepth:a.depthFunc(a.LEQUAL);break;case c.EqualDepth:a.depthFunc(a.EQUAL);break;case c.GreaterEqualDepth:a.depthFunc(a.GEQUAL);break;case c.GreaterDepth:a.depthFunc(a.GREATER);break;case c.NotEqualDepth:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}else a.depthFunc(a.LEQUAL);f=b}},this.setLocked=function(a){d=a},this.setClear=function(b){g!==b&&(a.clearDepth(b),g=b)},this.reset=function(){d=!1,e=null,f=null,g=null}},c.WebGLStencilBuffer=function(a,b){var c=!1,d=null,e=null,f=null,g=null,h=null,i=null,j=null,k=null;this.setTest=function(c){c?b.enable(a.STENCIL_TEST):b.disable(a.STENCIL_TEST)},this.setMask=function(b){d===b||c||(a.stencilMask(b),d=b)},this.setFunc=function(b,c,d){e===b&&f===c&&g===d||(a.stencilFunc(b,c,d),e=b,f=c,g=d)},this.setOp=function(b,c,d){h===b&&i===c&&j===d||(a.stencilOp(b,c,d),h=b,i=c,j=d)},this.setLocked=function(a){c=a},this.setClear=function(b){k!==b&&(a.clearStencil(b),k=b)},this.reset=function(){c=!1,d=null,e=null,f=null,g=null,h=null,i=null,j=null,k=null}},c.WebGLTextures=function(a,b,d,e,f,g,h){function i(a,b){if(a.width>b||a.height>b){var c=b/Math.max(a.width,a.height),d=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");d.width=Math.floor(a.width*c),d.height=Math.floor(a.height*c);var e=d.getContext("2d");return e.drawImage(a,0,0,a.width,a.height,0,0,d.width,d.height),console.warn("THREE.WebGLRenderer: image is too big ("+a.width+"x"+a.height+"). Resized to "+d.width+"x"+d.height,a),d}return a}function j(a){return c.Math.isPowerOfTwo(a.width)&&c.Math.isPowerOfTwo(a.height)}function k(a){if(a instanceof HTMLImageElement||a instanceof HTMLCanvasElement){var b=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");b.width=c.Math.nearestPowerOfTwo(a.width),b.height=c.Math.nearestPowerOfTwo(a.height);var d=b.getContext("2d");return d.drawImage(a,0,0,b.width,b.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+a.width+"x"+a.height+"). Resized to "+b.width+"x"+b.height,a),b}return a}function l(a){return a.wrapS!==c.ClampToEdgeWrapping||a.wrapT!==c.ClampToEdgeWrapping||a.minFilter!==c.NearestFilter&&a.minFilter!==c.LinearFilter}function m(b){return b===c.NearestFilter||b===c.NearestMipMapNearestFilter||b===c.NearestMipMapLinearFilter?a.NEAREST:a.LINEAR}function n(a){var b=a.target;b.removeEventListener("dispose",n),p(b),C.textures--}function o(a){var b=a.target;b.removeEventListener("dispose",o),q(b),C.textures--}function p(b){var c=e.get(b);if(b.image&&c.__image__webglTextureCube)a.deleteTexture(c.__image__webglTextureCube);else{if(void 0===c.__webglInit)return;a.deleteTexture(c.__webglTexture)}e["delete"](b)}function q(b){var d=e.get(b),f=e.get(b.texture);if(b){if(void 0!==f.__webglTexture&&a.deleteTexture(f.__webglTexture),b.depthTexture&&b.depthTexture.dispose(),b instanceof c.WebGLRenderTargetCube)for(var g=0;g<6;g++)a.deleteFramebuffer(d.__webglFramebuffer[g]),d.__webglDepthbuffer&&a.deleteRenderbuffer(d.__webglDepthbuffer[g]);else a.deleteFramebuffer(d.__webglFramebuffer),d.__webglDepthbuffer&&a.deleteRenderbuffer(d.__webglDepthbuffer);e["delete"](b.texture),e["delete"](b)}}function r(b,c){var f=e.get(b);if(b.version>0&&f.__version!==b.version){var g=b.image;if(void 0===g)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",b);else{if(g.complete!==!1)return void v(f,b,c);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",b)}}d.activeTexture(a.TEXTURE0+c),d.bindTexture(a.TEXTURE_2D,f.__webglTexture)}function s(b,h){var k=e.get(b);if(6===b.image.length)if(b.version>0&&k.__version!==b.version){k.__image__webglTextureCube||(b.addEventListener("dispose",n),k.__image__webglTextureCube=a.createTexture(),C.textures++),d.activeTexture(a.TEXTURE0+h),d.bindTexture(a.TEXTURE_CUBE_MAP,k.__image__webglTextureCube),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,b.flipY);for(var l=b instanceof c.CompressedTexture,m=b.image[0]instanceof c.DataTexture,o=[],p=0;p<6;p++)l||m?o[p]=m?b.image[p].image:b.image[p]:o[p]=i(b.image[p],f.maxCubemapSize);var q=o[0],r=j(q),s=g(b.format),t=g(b.type);u(a.TEXTURE_CUBE_MAP,b,r);for(var p=0;p<6;p++)if(l)for(var v,w=o[p].mipmaps,x=0,y=w.length;x<y;x++)v=w[x],b.format!==c.RGBAFormat&&b.format!==c.RGBFormat?d.getCompressedTextureFormats().indexOf(s)>-1?d.compressedTexImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+p,x,s,v.width,v.height,0,v.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):d.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+p,x,s,v.width,v.height,0,s,t,v.data);else m?d.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+p,0,s,o[p].width,o[p].height,0,s,t,o[p].data):d.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+p,0,s,s,t,o[p]);b.generateMipmaps&&r&&a.generateMipmap(a.TEXTURE_CUBE_MAP),k.__version=b.version,b.onUpdate&&b.onUpdate(b)}else d.activeTexture(a.TEXTURE0+h),d.bindTexture(a.TEXTURE_CUBE_MAP,k.__image__webglTextureCube)}function t(b,c){d.activeTexture(a.TEXTURE0+c),d.bindTexture(a.TEXTURE_CUBE_MAP,e.get(b).__webglTexture)}function u(d,h,i){var j;if(i?(a.texParameteri(d,a.TEXTURE_WRAP_S,g(h.wrapS)),a.texParameteri(d,a.TEXTURE_WRAP_T,g(h.wrapT)),a.texParameteri(d,a.TEXTURE_MAG_FILTER,g(h.magFilter)),a.texParameteri(d,a.TEXTURE_MIN_FILTER,g(h.minFilter))):(a.texParameteri(d,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(d,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),h.wrapS===c.ClampToEdgeWrapping&&h.wrapT===c.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",h),a.texParameteri(d,a.TEXTURE_MAG_FILTER,m(h.magFilter)),a.texParameteri(d,a.TEXTURE_MIN_FILTER,m(h.minFilter)),h.minFilter!==c.NearestFilter&&h.minFilter!==c.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",h)),j=b.get("EXT_texture_filter_anisotropic")){if(h.type===c.FloatType&&null===b.get("OES_texture_float_linear"))return;if(h.type===c.HalfFloatType&&null===b.get("OES_texture_half_float_linear"))return;(h.anisotropy>1||e.get(h).__currentAnisotropy)&&(a.texParameterf(d,j.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(h.anisotropy,f.getMaxAnisotropy())),e.get(h).__currentAnisotropy=h.anisotropy)}}function v(b,e,h){void 0===b.__webglInit&&(b.__webglInit=!0,e.addEventListener("dispose",n),b.__webglTexture=a.createTexture(),C.textures++),d.activeTexture(a.TEXTURE0+h),d.bindTexture(a.TEXTURE_2D,b.__webglTexture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,e.flipY),a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),a.pixelStorei(a.UNPACK_ALIGNMENT,e.unpackAlignment);var m=i(e.image,f.maxTextureSize);l(e)&&j(m)===!1&&(m=k(m));var o=j(m),p=g(e.format),q=g(e.type);u(a.TEXTURE_2D,e,o);var r,s=e.mipmaps;if(e instanceof c.DepthTexture){var t=a.DEPTH_COMPONENT;if(e.type===c.FloatType){if(!D)throw new Error("Float Depth Texture only supported in WebGL2.0");t=a.DEPTH_COMPONENT32F}else D&&(t=a.DEPTH_COMPONENT16);d.texImage2D(a.TEXTURE_2D,0,t,m.width,m.height,0,p,q,null)}else if(e instanceof c.DataTexture)if(s.length>0&&o){for(var v=0,w=s.length;v<w;v++)r=s[v],d.texImage2D(a.TEXTURE_2D,v,p,r.width,r.height,0,p,q,r.data);e.generateMipmaps=!1}else d.texImage2D(a.TEXTURE_2D,0,p,m.width,m.height,0,p,q,m.data);else if(e instanceof c.CompressedTexture)for(var v=0,w=s.length;v<w;v++)r=s[v],e.format!==c.RGBAFormat&&e.format!==c.RGBFormat?d.getCompressedTextureFormats().indexOf(p)>-1?d.compressedTexImage2D(a.TEXTURE_2D,v,p,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):d.texImage2D(a.TEXTURE_2D,v,p,r.width,r.height,0,p,q,r.data);else if(s.length>0&&o){for(var v=0,w=s.length;v<w;v++)r=s[v],d.texImage2D(a.TEXTURE_2D,v,p,p,q,r);e.generateMipmaps=!1}else d.texImage2D(a.TEXTURE_2D,0,p,p,q,m);e.generateMipmaps&&o&&a.generateMipmap(a.TEXTURE_2D),b.__version=e.version,e.onUpdate&&e.onUpdate(e)}function w(b,c,f,h){var i=g(c.texture.format),j=g(c.texture.type);d.texImage2D(h,0,i,c.width,c.height,0,i,j,null),a.bindFramebuffer(a.FRAMEBUFFER,b),a.framebufferTexture2D(a.FRAMEBUFFER,f,h,e.get(c.texture).__webglTexture,0),a.bindFramebuffer(a.FRAMEBUFFER,null)}function x(b,c){a.bindRenderbuffer(a.RENDERBUFFER,b),c.depthBuffer&&!c.stencilBuffer?(a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_COMPONENT16,c.width,c.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.RENDERBUFFER,b)):c.depthBuffer&&c.stencilBuffer?(a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_STENCIL,c.width,c.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.RENDERBUFFER,b)):a.renderbufferStorage(a.RENDERBUFFER,a.RGBA4,c.width,c.height),a.bindRenderbuffer(a.RENDERBUFFER,null)}function y(b,d){var f=d instanceof c.WebGLRenderTargetCube;if(f)throw new Error("Depth Texture with cube render targets is not supported!");if(a.bindFramebuffer(a.FRAMEBUFFER,b),!(d.depthTexture instanceof c.DepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");e.get(d.depthTexture).__webglTexture&&d.depthTexture.image.width===d.width&&d.depthTexture.image.height===d.height||(d.depthTexture.image.width=d.width,d.depthTexture.image.height=d.height,d.depthTexture.needsUpdate=!0),r(d.depthTexture,0);var g=e.get(d.depthTexture).__webglTexture;a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.TEXTURE_2D,g,0)}function z(b){var d=e.get(b),f=b instanceof c.WebGLRenderTargetCube;if(b.depthTexture){if(f)throw new Error("target.depthTexture not supported in Cube render targets");y(d.__webglFramebuffer,b)}else if(f){d.__webglDepthbuffer=[];for(var g=0;g<6;g++)a.bindFramebuffer(a.FRAMEBUFFER,d.__webglFramebuffer[g]),d.__webglDepthbuffer[g]=a.createRenderbuffer(),x(d.__webglDepthbuffer[g],b)}else a.bindFramebuffer(a.FRAMEBUFFER,d.__webglFramebuffer),d.__webglDepthbuffer=a.createRenderbuffer(),x(d.__webglDepthbuffer,b);a.bindFramebuffer(a.FRAMEBUFFER,null)}function A(b){var f=e.get(b),g=e.get(b.texture);b.addEventListener("dispose",o),g.__webglTexture=a.createTexture(),C.textures++;var h=b instanceof c.WebGLRenderTargetCube,i=j(b);if(h){f.__webglFramebuffer=[];for(var k=0;k<6;k++)f.__webglFramebuffer[k]=a.createFramebuffer()}else f.__webglFramebuffer=a.createFramebuffer();if(h){d.bindTexture(a.TEXTURE_CUBE_MAP,g.__webglTexture),u(a.TEXTURE_CUBE_MAP,b.texture,i);for(var k=0;k<6;k++)w(f.__webglFramebuffer[k],b,a.COLOR_ATTACHMENT0,a.TEXTURE_CUBE_MAP_POSITIVE_X+k);b.texture.generateMipmaps&&i&&a.generateMipmap(a.TEXTURE_CUBE_MAP),d.bindTexture(a.TEXTURE_CUBE_MAP,null)}else d.bindTexture(a.TEXTURE_2D,g.__webglTexture),u(a.TEXTURE_2D,b.texture,i),w(f.__webglFramebuffer,b,a.COLOR_ATTACHMENT0,a.TEXTURE_2D),b.texture.generateMipmaps&&i&&a.generateMipmap(a.TEXTURE_2D),d.bindTexture(a.TEXTURE_2D,null);b.depthBuffer&&z(b)}function B(b){var f=b.texture;if(f.generateMipmaps&&j(b)&&f.minFilter!==c.NearestFilter&&f.minFilter!==c.LinearFilter){var g=b instanceof c.WebGLRenderTargetCube?a.TEXTURE_CUBE_MAP:a.TEXTURE_2D,h=e.get(f).__webglTexture;d.bindTexture(g,h),a.generateMipmap(g),d.bindTexture(g,null)}}var C=h.memory,D="undefined"!=typeof WebGL2RenderingContext&&a instanceof WebGL2RenderingContext;this.setTexture2D=r,this.setTextureCube=s,this.setTextureCubeDynamic=t,this.setupRenderTarget=A,this.updateRenderTargetMipmap=B},c.WebGLUniforms=function(){var a=new c.Texture,b=new c.CubeTexture,d=function(){this.seq=[],this.map={}},e=[],f=[],g=function(){e.length=0,f.length=0},h=function(a,b,c){var d=a[0];if(d<=0||d>0)return a;var f=b*c,g=e[f];if(void 0===g&&(g=new Float32Array(f),e[f]=g),0!==b){d.toArray(g,0);for(var h=1,i=0;h!==b;++h)i+=c,a[h].toArray(g,i)}return g},i=function(a,b){var c=f[b];void 0===c&&(c=new Int32Array(b),f[b]=c);for(var d=0;d!==b;++d)c[d]=a.allocTextureUnit();return c},j=function(a,b){a.uniform1f(this.addr,b)},k=function(a,b){a.uniform1i(this.addr,b)},l=function(a,b){void 0===b.x?a.uniform2fv(this.addr,b):a.uniform2f(this.addr,b.x,b.y)},m=function(a,b){void 0!==b.x?a.uniform3f(this.addr,b.x,b.y,b.z):void 0!==b.r?a.uniform3f(this.addr,b.r,b.g,b.b):a.uniform3fv(this.addr,b)},n=function(a,b){void 0===b.x?a.uniform4fv(this.addr,b):a.uniform4f(this.addr,b.x,b.y,b.z,b.w)},o=function(a,b){a.uniformMatrix2fv(this.addr,!1,b.elements||b)},p=function(a,b){a.uniformMatrix3fv(this.addr,!1,b.elements||b)},q=function(a,b){a.uniformMatrix4fv(this.addr,!1,b.elements||b)},r=function(b,c,d){var e=d.allocTextureUnit();b.uniform1i(this.addr,e),d.setTexture2D(c||a,e)},s=function(a,c,d){var e=d.allocTextureUnit();a.uniform1i(this.addr,e),d.setTextureCube(c||b,e)},t=function(a,b){a.uniform2iv(this.addr,b)},u=function(a,b){a.uniform3iv(this.addr,b)},v=function(a,b){a.uniform4iv(this.addr,b)},w=function(a){switch(a){case 5126:return j;case 35664:return l;case 35665:return m;case 35666:return n;case 35674:return o;case 35675:return p;case 35676:return q;case 35678:return r;case 35680:return s;case 5124:case 35670:return k;case 35667:case 35671:return t;case 35668:case 35672:return u;case 35669:case 35673:return v}},x=function(a,b){a.uniform1fv(this.addr,b)},y=function(a,b){a.uniform1iv(this.addr,b)},z=function(a,b){a.uniform2fv(this.addr,h(b,this.size,2))},A=function(a,b){a.uniform3fv(this.addr,h(b,this.size,3))},B=function(a,b){a.uniform4fv(this.addr,h(b,this.size,4))},C=function(a,b){a.uniformMatrix2fv(this.addr,!1,h(b,this.size,4))},D=function(a,b){a.uniformMatrix3fv(this.addr,!1,h(b,this.size,9))},E=function(a,b){a.uniformMatrix4fv(this.addr,!1,h(b,this.size,16))},F=function(b,c,d){var e=c.length,f=i(d,e);b.uniform1iv(this.addr,f);for(var g=0;g!==e;++g)d.setTexture2D(c[g]||a,f[g])},G=function(a,c,d){var e=c.length,f=i(d,e);a.uniform1iv(this.addr,f);for(var g=0;g!==e;++g)d.setTextureCube(c[g]||b,f[g])},H=function(a){switch(a){case 5126:return x;case 35664:return z;case 35665:return A;case 35666:return B;case 35674:return C;case 35675:return D;case 35676:return E;case 35678:return F;case 35680:return G;case 5124:case 35670:return y;case 35667:case 35671:return t;case 35668:case 35672:return u;case 35669:case 35673:return v}},I=function P(a,b,c){this.id=a,this.addr=c,this.setValue=w(b.type)},J=function(a,b,c){this.id=a,this.addr=c,this.size=b.size,this.setValue=H(b.type)},K=function(a){this.id=a,d.call(this)};K.prototype.setValue=function(a,b){for(var c=this.seq,d=0,e=c.length;d!==e;++d){var f=c[d];f.setValue(a,b[f.id])}};var L=/([\w\d_]+)(\])?(\[|\.)?/g,M=function(a,b){a.seq.push(b),a.map[b.id]=b},N=function(a,b,c){var d=a.name,e=d.length;for(L.lastIndex=0;;){var f=L.exec(d),g=L.lastIndex,h=f[1],i="]"===f[2],j=f[3];if(i&&(h=0|h),void 0===j||"["===j&&g+2===e){M(c,void 0===j?new I(h,a,b):new J(h,a,b));break}var k=c.map,l=k[h];void 0===l&&(l=new K(h),M(c,l)),c=l}},O=function Q(a,b,c){d.call(this),this.renderer=c;for(var e=a.getProgramParameter(b,a.ACTIVE_UNIFORMS),f=0;f!==e;++f){var g=a.getActiveUniform(b,f),h=g.name,i=a.getUniformLocation(b,h);N(g,i,this)}};return O.prototype.setValue=function(a,b,c){var d=this.map[b];void 0!==d&&d.setValue(a,c,this.renderer)},O.prototype.set=function(a,b,c){var d=this.map[c];void 0!==d&&d.setValue(a,b[c],this.renderer)},O.prototype.setOptional=function(a,b,c){var d=b[c];void 0!==d&&this.setValue(a,c,d)},O.upload=function(a,b,c,d){for(var e=0,f=b.length;e!==f;++e){var g=b[e],h=c[g.id];h.needsUpdate!==!1&&g.setValue(a,h.value,d)}},O.seqWithValue=function(a,b){for(var c=[],d=0,e=a.length;d!==e;++d){var f=a[d];f.id in b&&c.push(f)}return c},O.splitDynamic=function(a,b){for(var c=null,d=a.length,e=0,f=0;f!==d;++f){var g=a[f],h=b[g.id];h&&h.dynamic===!0?(null===c&&(c=[]),c.push(g)):(e<f&&(a[e]=g),++e)}return e<d&&(a.length=e),c},O.evalDynamic=function(a,b,c,d){for(var e=0,f=a.length;e!==f;++e){var g=b[a[e].id],h=g.onUpdateCallback;void 0!==h&&h.call(g,c,d)}},O}(),c.LensFlarePlugin=function(a,b){function d(){var a=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),b=new Uint16Array([0,1,2,0,2,3]);h=f.createBuffer(),i=f.createBuffer(),f.bindBuffer(f.ARRAY_BUFFER,h),f.bufferData(f.ARRAY_BUFFER,a,f.STATIC_DRAW),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,i),f.bufferData(f.ELEMENT_ARRAY_BUFFER,b,f.STATIC_DRAW),n=f.createTexture(),o=f.createTexture(),g.bindTexture(f.TEXTURE_2D,n),f.texImage2D(f.TEXTURE_2D,0,f.RGB,16,16,0,f.RGB,f.UNSIGNED_BYTE,null),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.NEAREST),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.NEAREST),g.bindTexture(f.TEXTURE_2D,o),f.texImage2D(f.TEXTURE_2D,0,f.RGBA,16,16,0,f.RGBA,f.UNSIGNED_BYTE,null),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.NEAREST),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.NEAREST),j={vertexShader:["uniform lowp int renderType;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform float rotation;","uniform sampler2D occlusionMap;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","vUV = uv;","vec2 pos = position;","if ( renderType == 2 ) {","vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","vVisibility =        visibility.r / 9.0;","vVisibility *= 1.0 - visibility.g / 9.0;","vVisibility *=       visibility.b / 9.0;","vVisibility *= 1.0 - visibility.a / 9.0;","pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;","pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;","}","gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["uniform lowp int renderType;","uniform sampler2D map;","uniform float opacity;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","if ( renderType == 0 ) {","gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );","} else if ( renderType == 1 ) {","gl_FragColor = texture2D( map, vUV );","} else {","vec4 texture = texture2D( map, vUV );","texture.a *= opacity * vVisibility;","gl_FragColor = texture;","gl_FragColor.rgb *= color;","}","}"].join("\n")},k=e(j),l={vertex:f.getAttribLocation(k,"position"),uv:f.getAttribLocation(k,"uv")},m={renderType:f.getUniformLocation(k,"renderType"),map:f.getUniformLocation(k,"map"),occlusionMap:f.getUniformLocation(k,"occlusionMap"),opacity:f.getUniformLocation(k,"opacity"),color:f.getUniformLocation(k,"color"),scale:f.getUniformLocation(k,"scale"),rotation:f.getUniformLocation(k,"rotation"),screenPosition:f.getUniformLocation(k,"screenPosition")}}function e(b){var c=f.createProgram(),d=f.createShader(f.FRAGMENT_SHADER),e=f.createShader(f.VERTEX_SHADER),g="precision "+a.getPrecision()+" float;\n";return f.shaderSource(d,g+b.fragmentShader),f.shaderSource(e,g+b.vertexShader),f.compileShader(d),f.compileShader(e),f.attachShader(c,d),f.attachShader(c,e),f.linkProgram(c),c}var f=a.context,g=a.state,h,i,j,k,l,m,n,o;this.render=function(e,j,p){if(0!==b.length){var q=new c.Vector3,r=p.w/p.z,s=.5*p.z,t=.5*p.w,u=16/p.w,v=new c.Vector2(u*r,u),w=new c.Vector3(1,1,0),x=new c.Vector2(1,1),y=new c.Box2;y.min.set(0,0),y.max.set(p.z-16,p.w-16),void 0===k&&d(),f.useProgram(k),g.initAttributes(),g.enableAttribute(l.vertex),g.enableAttribute(l.uv),g.disableUnusedAttributes(),f.uniform1i(m.occlusionMap,0),f.uniform1i(m.map,1),f.bindBuffer(f.ARRAY_BUFFER,h),f.vertexAttribPointer(l.vertex,2,f.FLOAT,!1,16,0),f.vertexAttribPointer(l.uv,2,f.FLOAT,!1,16,8),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,i),g.disable(f.CULL_FACE),g.setDepthWrite(!1);for(var z=0,A=b.length;z<A;z++){u=16/p.w,v.set(u*r,u);var B=b[z];if(q.set(B.matrixWorld.elements[12],B.matrixWorld.elements[13],B.matrixWorld.elements[14]),q.applyMatrix4(j.matrixWorldInverse),q.applyProjection(j.projectionMatrix),w.copy(q),x.x=p.x+w.x*s+s-8,x.y=p.y+w.y*t+t-8,y.containsPoint(x)===!0){g.activeTexture(f.TEXTURE0),g.bindTexture(f.TEXTURE_2D,null),g.activeTexture(f.TEXTURE1),g.bindTexture(f.TEXTURE_2D,n),f.copyTexImage2D(f.TEXTURE_2D,0,f.RGB,x.x,x.y,16,16,0),f.uniform1i(m.renderType,0),f.uniform2f(m.scale,v.x,v.y),f.uniform3f(m.screenPosition,w.x,w.y,w.z),g.disable(f.BLEND),g.enable(f.DEPTH_TEST),f.drawElements(f.TRIANGLES,6,f.UNSIGNED_SHORT,0),g.activeTexture(f.TEXTURE0),g.bindTexture(f.TEXTURE_2D,o),f.copyTexImage2D(f.TEXTURE_2D,0,f.RGBA,x.x,x.y,16,16,0),f.uniform1i(m.renderType,1),g.disable(f.DEPTH_TEST),g.activeTexture(f.TEXTURE1),g.bindTexture(f.TEXTURE_2D,n),f.drawElements(f.TRIANGLES,6,f.UNSIGNED_SHORT,0),B.positionScreen.copy(w),B.customUpdateCallback?B.customUpdateCallback(B):B.updateLensFlares(),f.uniform1i(m.renderType,2),g.enable(f.BLEND);for(var C=0,D=B.lensFlares.length;C<D;C++){var E=B.lensFlares[C];E.opacity>.001&&E.scale>.001&&(w.x=E.x,w.y=E.y,w.z=E.z,u=E.size*E.scale/p.w,v.x=u*r,v.y=u,f.uniform3f(m.screenPosition,w.x,w.y,w.z),f.uniform2f(m.scale,v.x,v.y),f.uniform1f(m.rotation,E.rotation),f.uniform1f(m.opacity,E.opacity),f.uniform3f(m.color,E.color.r,E.color.g,E.color.b),g.setBlending(E.blending,E.blendEquation,E.blendSrc,E.blendDst),a.setTexture2D(E.texture,1),f.drawElements(f.TRIANGLES,6,f.UNSIGNED_SHORT,0))}}}g.enable(f.CULL_FACE),g.enable(f.DEPTH_TEST),g.setDepthWrite(!0),a.resetGLState()}}},c.SpritePlugin=function(a,b){function d(){var a=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),b=new Uint16Array([0,1,2,0,2,3]);i=g.createBuffer(),j=g.createBuffer(),g.bindBuffer(g.ARRAY_BUFFER,i),g.bufferData(g.ARRAY_BUFFER,a,g.STATIC_DRAW),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,j),g.bufferData(g.ELEMENT_ARRAY_BUFFER,b,g.STATIC_DRAW),k=e(),l={position:g.getAttribLocation(k,"position"),uv:g.getAttribLocation(k,"uv")},m={uvOffset:g.getUniformLocation(k,"uvOffset"),uvScale:g.getUniformLocation(k,"uvScale"),rotation:g.getUniformLocation(k,"rotation"),scale:g.getUniformLocation(k,"scale"),color:g.getUniformLocation(k,"color"),map:g.getUniformLocation(k,"map"),opacity:g.getUniformLocation(k,"opacity"),modelViewMatrix:g.getUniformLocation(k,"modelViewMatrix"),projectionMatrix:g.getUniformLocation(k,"projectionMatrix"),fogType:g.getUniformLocation(k,"fogType"),fogDensity:g.getUniformLocation(k,"fogDensity"),fogNear:g.getUniformLocation(k,"fogNear"),fogFar:g.getUniformLocation(k,"fogFar"),fogColor:g.getUniformLocation(k,"fogColor"),alphaTest:g.getUniformLocation(k,"alphaTest")};var d=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");d.width=8,d.height=8;var f=d.getContext("2d");f.fillStyle="white",f.fillRect(0,0,8,8),n=new c.Texture(d),n.needsUpdate=!0}function e(){var b=g.createProgram(),c=g.createShader(g.VERTEX_SHADER),d=g.createShader(g.FRAGMENT_SHADER);return g.shaderSource(c,["precision "+a.getPrecision()+" float;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","vUV = uvOffset + uv * uvScale;","vec2 alignedPosition = position * scale;","vec2 rotatedPosition;","rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","vec4 finalPosition;","finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","finalPosition.xy += rotatedPosition;","finalPosition = projectionMatrix * finalPosition;","gl_Position = finalPosition;","}"].join("\n")),g.shaderSource(d,["precision "+a.getPrecision()+" float;","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","void main() {","vec4 texture = texture2D( map, vUV );","if ( texture.a < alphaTest ) discard;","gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","if ( fogType > 0 ) {","float depth = gl_FragCoord.z / gl_FragCoord.w;","float fogFactor = 0.0;","if ( fogType == 1 ) {","fogFactor = smoothstep( fogNear, fogFar, depth );","} else {","const float LOG2 = 1.442695;","fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );","fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","}","gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}","}"].join("\n")),g.compileShader(c),g.compileShader(d),g.attachShader(b,c),g.attachShader(b,d),g.linkProgram(b),b}function f(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:b.id-a.id}var g=a.context,h=a.state,i,j,k,l,m,n,o=new c.Vector3,p=new c.Quaternion,q=new c.Vector3;this.render=function(e,r){if(0!==b.length){void 0===k&&d(),g.useProgram(k),h.initAttributes(),h.enableAttribute(l.position),h.enableAttribute(l.uv),h.disableUnusedAttributes(),h.disable(g.CULL_FACE),h.enable(g.BLEND),g.bindBuffer(g.ARRAY_BUFFER,i),g.vertexAttribPointer(l.position,2,g.FLOAT,!1,16,0),g.vertexAttribPointer(l.uv,2,g.FLOAT,!1,16,8),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,j),g.uniformMatrix4fv(m.projectionMatrix,!1,r.projectionMatrix.elements),h.activeTexture(g.TEXTURE0),g.uniform1i(m.map,0);var s=0,t=0,u=e.fog;u?(g.uniform3f(m.fogColor,u.color.r,u.color.g,u.color.b),u instanceof c.Fog?(g.uniform1f(m.fogNear,u.near),g.uniform1f(m.fogFar,u.far),g.uniform1i(m.fogType,1),s=1,t=1):u instanceof c.FogExp2&&(g.uniform1f(m.fogDensity,u.density),g.uniform1i(m.fogType,2),s=2,t=2)):(g.uniform1i(m.fogType,0),s=0,t=0);for(var v=0,w=b.length;v<w;v++){var x=b[v];x.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,x.matrixWorld),x.z=-x.modelViewMatrix.elements[14]}b.sort(f);for(var y=[],v=0,w=b.length;v<w;v++){var x=b[v],z=x.material;if(z.visible!==!1){g.uniform1f(m.alphaTest,z.alphaTest),g.uniformMatrix4fv(m.modelViewMatrix,!1,x.modelViewMatrix.elements),x.matrixWorld.decompose(o,p,q),y[0]=q.x,y[1]=q.y;var A=0;e.fog&&z.fog&&(A=t),s!==A&&(g.uniform1i(m.fogType,A),s=A),null!==z.map?(g.uniform2f(m.uvOffset,z.map.offset.x,z.map.offset.y),g.uniform2f(m.uvScale,z.map.repeat.x,z.map.repeat.y)):(g.uniform2f(m.uvOffset,0,0),g.uniform2f(m.uvScale,1,1)),g.uniform1f(m.opacity,z.opacity),g.uniform3f(m.color,z.color.r,z.color.g,z.color.b),g.uniform1f(m.rotation,z.rotation),g.uniform2fv(m.scale,y),h.setBlending(z.blending,z.blendEquation,z.blendSrc,z.blendDst),h.setDepthTest(z.depthTest),h.setDepthWrite(z.depthWrite),z.map?a.setTexture2D(z.map,0):a.setTexture2D(n,0),g.drawElements(g.TRIANGLES,6,g.UNSIGNED_SHORT,0)}}h.enable(g.CULL_FACE),a.resetGLState()}}},Object.assign(c,{Face4:function(a,b,d,e,f,g,h){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new c.Face3(a,b,d,f,g,h)},LineStrip:0,LinePieces:1,MeshFaceMaterial:c.MultiMaterial,PointCloud:function(a,b){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new c.Points(a,b)},Particle:c.Sprite,ParticleSystem:function(a,b){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new c.Points(a,b)},PointCloudMaterial:function(a){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new c.PointsMaterial(a)},ParticleBasicMaterial:function(a){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new c.PointsMaterial(a)},ParticleSystemMaterial:function(a){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new c.PointsMaterial(a)},Vertex:function(a,b,d){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new c.Vector3(a,b,d)}}),Object.assign(c.Box2.prototype,{empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(a){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)}}),Object.assign(c.Box3.prototype,{empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(a){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},isIntersectionSphere:function(a){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)}}),Object.assign(c.Matrix3.prototype,{multiplyVector3:function(a){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)},multiplyVector3Array:function(a){return console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(a)}}),Object.assign(c.Matrix4.prototype,{extractPosition:function(a){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(a)},setRotationFromQuaternion:function(a){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(a)},multiplyVector3:function(a){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead."),a.applyProjection(this)},multiplyVector4:function(a){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},multiplyVector3Array:function(a){
return console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(a)},rotateAxis:function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),a.transformDirection(this)},crossVector:function(a){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},translate:function(a){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(a){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(a){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(a){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(a,b){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")}}),Object.assign(c.Plane.prototype,{isIntersectionLine:function(a){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(a)}}),Object.assign(c.Quaternion.prototype,{multiplyVector3:function(a){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),a.applyQuaternion(this)}}),Object.assign(c.Ray.prototype,{isIntersectionBox:function(a){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},isIntersectionPlane:function(a){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(a)},isIntersectionSphere:function(a){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)}}),Object.assign(c.Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(a){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,b){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(b,a)}}),Object.assign(c.Object3D.prototype,{getChildByName:function(a){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(a)},renderDepth:function(a){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(a,b){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(b,a)}}),Object.defineProperties(c.Object3D.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(a){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(c.LOD.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),c.PerspectiveCamera.prototype.setLens=function(a,b){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==b&&(this.filmGauge=b),this.setFocalLength(a)},Object.defineProperties(c.Light.prototype,{onlyShadow:{set:function(a){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=a}},shadowCameraVisible:{set:function(a){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=a}},shadowDarkness:{set:function(a){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=a}}}),Object.defineProperties(c.BufferAttribute.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length}}}),Object.assign(c.BufferGeometry.prototype,{addIndex:function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(a)},addDrawCall:function(a,b,c){void 0!==c&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(a,b)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(c.BufferGeometry.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(c.Material.prototype,{wrapAround:{get:function(){console.warn("THREE."+this.type+": .wrapAround has been removed.")},set:function(a){console.warn("THREE."+this.type+": .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE."+this.type+": .wrapRGB has been removed."),new c.Color}}}),Object.defineProperties(c.MeshPhongMaterial.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(a){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(c.ShaderMaterial.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=a}}}),c.EventDispatcher.prototype=Object.assign(Object.create({constructor:c.EventDispatcher,apply:function(a){console.warn("THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in."),Object.assign(a,this)}}),c.EventDispatcher.prototype),Object.assign(c.WebGLRenderer.prototype,{supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(a)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}}),Object.defineProperties(c.WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=a}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."),this.shadowMap.cullFace=a}}}),Object.defineProperties(c.WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?c.CullFaceFront:c.CullFaceBack},set:function(a){var b=a!==c.CullFaceBack;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+b+"."),this.renderReverseSided=b}}}),Object.defineProperties(c.WebGLRenderTarget.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=a}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=a}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=a}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=a}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=a}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=a}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=a}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=a}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=a}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=a}}}),Object.assign(c.Audio.prototype,{load:function(a){console.warn("THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.");var b=this,d=new c.AudioLoader;return d.load(a,function(a){b.setBuffer(a)}),this}}),Object.assign(c.AudioAnalyser.prototype,{getData:function(a){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()}}),c.GeometryUtils={merge:function(a,b,d){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var e;b instanceof c.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),e=b.matrix,b=b.geometry),a.merge(b,e,d)},center:function(a){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),a.center()}},c.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,d,e){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var f=new c.TextureLoader;f.setCrossOrigin(this.crossOrigin);var g=f.load(a,d,void 0,e);return b&&(g.mapping=b),g},loadTextureCube:function(a,b,d,e){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var f=new c.CubeTextureLoader;f.setCrossOrigin(this.crossOrigin);var g=f.load(a,d,void 0,e);return b&&(g.mapping=b),g},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}},c.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(a,b){console.warn("THREE.Projector: .projectVector() is now vector.project()."),a.project(b)},this.unprojectVector=function(a,b){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),a.unproject(b)},this.pickingRay=function(a,b){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}},c.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}},c.CurveUtils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){var f=6*a*a-6*a,g=3*a*a-4*a+1,h=-6*a*a+6*a,i=3*a*a-2*a;return f+g+h+i},interpolate:function(a,b,c,d,e){var f=.5*(c-a),g=.5*(d-b),h=e*e,i=e*h;return(2*b-2*c+f+g)*i+(-3*b+3*c-2*f-g)*h+f*e+b}},c.SceneUtils={createMultiMaterialObject:function(a,b){for(var d=new c.Group,e=0,f=b.length;e<f;e++)d.add(new c.Mesh(a,b[e]));return d},detach:function(a,b,c){a.applyMatrix(b.matrixWorld),b.remove(a),c.add(a)},attach:function(a,b,d){var e=new c.Matrix4;e.getInverse(d.matrixWorld),a.applyMatrix(e),b.remove(a),d.add(a)}},c.ShapeUtils={area:function(a){for(var b=a.length,c=0,d=b-1,e=0;e<b;d=e++)c+=a[d].x*a[e].y-a[e].x*a[d].y;return.5*c},triangulate:function(){function a(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o;if(h=a[f[b]].x,i=a[f[b]].y,j=a[f[c]].x,k=a[f[c]].y,l=a[f[d]].x,m=a[f[d]].y,Number.EPSILON>(j-h)*(m-i)-(k-i)*(l-h))return!1;var p,q,r,s,t,u,v,w,x,y,z,A,B,C,D;for(p=l-j,q=m-k,r=h-l,s=i-m,t=j-h,u=k-i,g=0;g<e;g++)if(n=a[f[g]].x,o=a[f[g]].y,!(n===h&&o===i||n===j&&o===k||n===l&&o===m)&&(v=n-h,w=o-i,x=n-j,y=o-k,z=n-l,A=o-m,D=p*y-q*x,B=t*w-u*v,C=r*A-s*z,D>=-Number.EPSILON&&C>=-Number.EPSILON&&B>=-Number.EPSILON))return!1;return!0}return function b(d,e){var f=d.length;if(f<3)return null;var g=[],h=[],i=[],j,k,l;if(c.ShapeUtils.area(d)>0)for(k=0;k<f;k++)h[k]=k;else for(k=0;k<f;k++)h[k]=f-1-k;var m=f,n=2*m;for(k=m-1;m>2;){if(n--<=0)return console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"),e?i:g;if(j=k,m<=j&&(j=0),k=j+1,m<=k&&(k=0),l=k+1,m<=l&&(l=0),a(d,j,k,l,m,h)){var o,p,q,r,s;for(o=h[j],p=h[k],q=h[l],g.push([d[o],d[p],d[q]]),i.push([h[j],h[k],h[l]]),r=k,s=k+1;s<m;r++,s++)h[r]=h[s];m--,n=2*m}}return e?i:g}}(),triangulateShape:function(a,b){function d(a){var b=a.length;b>2&&a[b-1].equals(a[0])&&a.pop()}function e(a,b,c){return a.x!==b.x?a.x<b.x?a.x<=c.x&&c.x<=b.x:b.x<=c.x&&c.x<=a.x:a.y<b.y?a.y<=c.y&&c.y<=b.y:b.y<=c.y&&c.y<=a.y}function f(a,b,c,d,f){var g=b.x-a.x,h=b.y-a.y,i=d.x-c.x,j=d.y-c.y,k=a.x-c.x,l=a.y-c.y,m=h*i-g*j,n=h*k-g*l;if(Math.abs(m)>Number.EPSILON){var o;if(m>0){if(n<0||n>m)return[];if(o=j*k-i*l,o<0||o>m)return[]}else{if(n>0||n<m)return[];if(o=j*k-i*l,o>0||o<m)return[]}if(0===o)return!f||0!==n&&n!==m?[a]:[];if(o===m)return!f||0!==n&&n!==m?[b]:[];if(0===n)return[c];if(n===m)return[d];var p=o/m;return[{x:a.x+p*g,y:a.y+p*h}]}if(0!==n||j*k!==i*l)return[];var q=0===g&&0===h,r=0===i&&0===j;if(q&&r)return a.x!==c.x||a.y!==c.y?[]:[a];if(q)return e(c,d,a)?[a]:[];if(r)return e(a,b,c)?[c]:[];var s,t,u,v,w,x,y,z;return 0!==g?(a.x<b.x?(s=a,u=a.x,t=b,v=b.x):(s=b,u=b.x,t=a,v=a.x),c.x<d.x?(w=c,y=c.x,x=d,z=d.x):(w=d,y=d.x,x=c,z=c.x)):(a.y<b.y?(s=a,u=a.y,t=b,v=b.y):(s=b,u=b.y,t=a,v=a.y),c.y<d.y?(w=c,y=c.y,x=d,z=d.y):(w=d,y=d.y,x=c,z=c.y)),u<=y?v<y?[]:v===y?f?[]:[w]:v<=z?[w,t]:[w,x]:u>z?[]:u===z?f?[]:[s]:v<=z?[s,t]:[s,x]}function g(a,b,c,d){var e=b.x-a.x,f=b.y-a.y,g=c.x-a.x,h=c.y-a.y,i=d.x-a.x,j=d.y-a.y,k=e*h-f*g,l=e*j-f*i;if(Math.abs(k)>Number.EPSILON){var m=i*h-j*g;return k>0?l>=0&&m>=0:l>=0||m>=0}return l>0}function h(a,b){function c(a,b){var c=h.length-1,d=a-1;d<0&&(d=c);var e=a+1;e>c&&(e=0);var f=g(h[a],h[d],h[e],i[b]);if(!f)return!1;var j=i.length-1,k=b-1;k<0&&(k=j);var l=b+1;return l>j&&(l=0),f=g(i[b],i[k],i[l],h[a]),!!f}function d(a,b){var c,d,e;for(c=0;c<h.length;c++)if(d=c+1,d%=h.length,e=f(a,b,h[c],h[d],!0),e.length>0)return!0;return!1}function e(a,c){var d,e,g,h,i;for(d=0;d<j.length;d++)for(e=b[j[d]],g=0;g<e.length;g++)if(h=g+1,h%=e.length,i=f(a,c,e[g],e[h],!0),i.length>0)return!0;return!1}for(var h=a.concat(),i,j=[],k,l,m,n,o,p,q=[],r,s,t,u,v=0,w=b.length;v<w;v++)j.push(v);for(var x=0,y=2*j.length;j.length>0;){if(y--,y<0){console.log("Infinite Loop! Holes left:"+j.length+", Probably Hole outside Shape!");break}for(l=x;l<h.length;l++){m=h[l],k=-1;for(var v=0;v<j.length;v++)if(o=j[v],p=m.x+":"+m.y+":"+o,void 0===q[p]){i=b[o];for(var z=0;z<i.length;z++)if(n=i[z],c(l,z)&&!d(m,n)&&!e(m,n)){k=z,j.splice(v,1),r=h.slice(0,l+1),s=h.slice(l),t=i.slice(k),u=i.slice(0,k+1),h=r.concat(t).concat(u).concat(s),x=l;break}if(k>=0)break;q[p]=!0}if(k>=0)break}}return h}d(a),b.forEach(d);for(var i,j,k,l,m,n,o={},p=a.concat(),q=0,r=b.length;q<r;q++)Array.prototype.push.apply(p,b[q]);for(i=0,j=p.length;i<j;i++)m=p[i].x+":"+p[i].y,void 0!==o[m]&&console.warn("THREE.ShapeUtils: Duplicate point",m,i),o[m]=i;var s=h(a,b),t=c.ShapeUtils.triangulate(s,!1);for(i=0,j=t.length;i<j;i++)for(l=t[i],k=0;k<3;k++)m=l[k].x+":"+l[k].y,n=o[m],void 0!==n&&(l[k]=n);return t.concat()},isClockWise:function(a){return c.ShapeUtils.area(a)<0},b2:function(){function a(a,b){var c=1-a;return c*c*b}function b(a,b){return 2*(1-a)*a*b}function c(a,b){return a*a*b}return function d(e,f,g,h){return a(e,f)+b(e,g)+c(e,h)}}(),b3:function(){function a(a,b){var c=1-a;return c*c*c*b}function b(a,b){var c=1-a;return 3*c*c*a*b}function c(a,b){var c=1-a;return 3*c*a*a*b}function d(a,b){return a*a*a*b}return function e(f,g,h,i,j){return a(f,g)+b(f,h)+c(f,i)+d(f,j)}}()},c.Curve=function(){},c.Curve.prototype={constructor:c.Curve,getPoint:function(a){return console.warn("THREE.Curve: Warning, getPoint() not implemented!"),null},getPointAt:function(a){var b=this.getUtoTmapping(a);return this.getPoint(b)},getPoints:function(a){a||(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));return b},getSpacedPoints:function(a){a||(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPointAt(c/a));return b},getLength:function(){var a=this.getLengths();return a[a.length-1]},getLengths:function(a){if(a||(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200),this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;for(b.push(0),e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b,b},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-1,i;g<=h;)if(d=Math.floor(g+(h-g)/2),i=c[d]-f,i<0)g=d+1;else{if(!(i>0)){h=d;break}h=d-1}if(d=h,c[d]===f){var j=d/(e-1);return j}var k=c[d],l=c[d+1],m=l-k,n=(f-k)/m,j=(d+n)/(e-1);return j},getTangent:function(a){var b=1e-4,c=a-b,d=a+b;c<0&&(c=0),d>1&&(d=1);var e=this.getPoint(c),f=this.getPoint(d),g=f.clone().sub(e);return g.normalize()},getTangentAt:function(a){var b=this.getUtoTmapping(a);return this.getTangent(b)}},c.Curve.create=function(a,b){return a.prototype=Object.create(c.Curve.prototype),a.prototype.constructor=a,a.prototype.getPoint=b,a},c.CurvePath=function(){this.curves=[],this.autoClose=!1},c.CurvePath.prototype=Object.assign(Object.create(c.Curve.prototype),{constructor:c.CurvePath,add:function(a){this.curves.push(a)},closePath:function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new c.LineCurve(b,a))},getPoint:function(a){for(var b=a*this.getLength(),c=this.getCurveLengths(),d=0;d<c.length;){if(c[d]>=b){var e=c[d]-b,f=this.curves[d],g=f.getLength(),h=0===g?0:1-e/g;return f.getPointAt(h)}d++}return null},getLength:function(){var a=this.getCurveLengths();return a[a.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],b=0,c=0,d=this.curves.length;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a,a},getSpacedPoints:function(a){a||(a=40);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));return this.autoClose&&b.push(b[0]),b},getPoints:function(a){a=a||12;for(var b=[],d,e=0,f=this.curves;e<f.length;e++)for(var g=f[e],h=g instanceof c.EllipseCurve?2*a:g instanceof c.LineCurve?1:g instanceof c.SplineCurve?a*g.points.length:a,i=g.getPoints(h),j=0;j<i.length;j++){var k=i[j];d&&d.equals(k)||(b.push(k),d=k)}return this.autoClose&&b.length>1&&!b[b.length-1].equals(b[0])&&b.push(b[0]),b},createPointsGeometry:function(a){var b=this.getPoints(a);return this.createGeometry(b)},createSpacedPointsGeometry:function(a){var b=this.getSpacedPoints(a);return this.createGeometry(b)},createGeometry:function(a){for(var b=new c.Geometry,d=0,e=a.length;d<e;d++){var f=a[d];b.vertices.push(new c.Vector3(f.x,f.y,f.z||0))}return b}}),c.Font=function(a){this.data=a},Object.assign(c.Font.prototype,{generateShapes:function(a,b,d){function e(a){for(var c=String(a).split(""),d=b/g.resolution,e=0,h=[],i=0;i<c.length;i++){var j=f(c[i],d,e);e+=j.offset,h.push(j.path)}return h}function f(a,b,e){var f=g.glyphs[a]||g.glyphs["?"];if(f){var h=new c.ShapePath,i=[],j=c.ShapeUtils.b2,k=c.ShapeUtils.b3,l,m,n,o,p,q,r,s,t,u,v;if(f.o)for(var w=f._cachedOutline||(f._cachedOutline=f.o.split(" ")),x=0,y=w.length;x<y;){var z=w[x++];switch(z){case"m":l=w[x++]*b+e,m=w[x++]*b,h.moveTo(l,m);break;case"l":l=w[x++]*b+e,m=w[x++]*b,h.lineTo(l,m);break;case"q":if(n=w[x++]*b+e,o=w[x++]*b,r=w[x++]*b+e,s=w[x++]*b,h.quadraticCurveTo(r,s,n,o),v=i[i.length-1]){p=v.x,q=v.y;for(var A=1;A<=d;A++){var B=A/d;j(B,p,r,n),j(B,q,s,o)}}break;case"b":if(n=w[x++]*b+e,o=w[x++]*b,r=w[x++]*b+e,s=w[x++]*b,t=w[x++]*b+e,u=w[x++]*b,h.bezierCurveTo(r,s,t,u,n,o),v=i[i.length-1]){p=v.x,q=v.y;for(var A=1;A<=d;A++){var B=A/d;k(B,p,r,t,n),k(B,q,s,u,o)}}}}return{offset:f.ha*b,path:h}}}void 0===b&&(b=100),void 0===d&&(d=4);for(var g=this.data,h=e(a),i=[],j=0,k=h.length;j<k;j++)Array.prototype.push.apply(i,h[j].toShapes());return i}}),c.Path=function(a){c.CurvePath.call(this),this.currentPoint=new c.Vector2,a&&this.fromPoints(a)},c.Path.prototype=Object.assign(Object.create(c.CurvePath.prototype),{constructor:c.Path,fromPoints:function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)},moveTo:function(a,b){this.currentPoint.set(a,b)},lineTo:function(a,b){var d=new c.LineCurve(this.currentPoint.clone(),new c.Vector2(a,b));this.curves.push(d),this.currentPoint.set(a,b)},quadraticCurveTo:function(a,b,d,e){var f=new c.QuadraticBezierCurve(this.currentPoint.clone(),new c.Vector2(a,b),new c.Vector2(d,e));this.curves.push(f),this.currentPoint.set(d,e)},bezierCurveTo:function(a,b,d,e,f,g){var h=new c.CubicBezierCurve(this.currentPoint.clone(),new c.Vector2(a,b),new c.Vector2(d,e),new c.Vector2(f,g));this.curves.push(h),this.currentPoint.set(f,g)},splineThru:function(a){var b=[this.currentPoint.clone()].concat(a),d=new c.SplineCurve(b);this.curves.push(d),this.currentPoint.copy(a[a.length-1])},arc:function(a,b,c,d,e,f){var g=this.currentPoint.x,h=this.currentPoint.y;this.absarc(a+g,b+h,c,d,e,f)},absarc:function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)},ellipse:function(a,b,c,d,e,f,g,h){var i=this.currentPoint.x,j=this.currentPoint.y;this.absellipse(a+i,b+j,c,d,e,f,g,h)},absellipse:function(a,b,d,e,f,g,h,i){var j=new c.EllipseCurve(a,b,d,e,f,g,h,i);if(this.curves.length>0){var k=j.getPoint(0);k.equals(this.currentPoint)||this.lineTo(k.x,k.y)}this.curves.push(j);var l=j.getPoint(1);this.currentPoint.copy(l)}}),c.ShapePath=function(){this.subPaths=[],this.currentPath=null},c.ShapePath.prototype={moveTo:function(a,b){this.currentPath=new c.Path,this.subPaths.push(this.currentPath),this.currentPath.moveTo(a,b)},lineTo:function(a,b){this.currentPath.lineTo(a,b)},quadraticCurveTo:function(a,b,c,d){this.currentPath.quadraticCurveTo(a,b,c,d)},bezierCurveTo:function(a,b,c,d,e,f){this.currentPath.bezierCurveTo(a,b,c,d,e,f)},splineThru:function(a){this.currentPath.splineThru(a)},toShapes:function(a,b){function d(a){for(var b=[],d=0,e=a.length;d<e;d++){var f=a[d],g=new c.Shape;g.curves=f.curves,b.push(g)}return b}function e(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],i=h.x-g.x,j=h.y-g.y;if(Math.abs(j)>Number.EPSILON){if(j<0&&(g=b[f],i=-i,h=b[e],j=-j),a.y<g.y||a.y>h.y)continue;if(a.y===g.y){if(a.x===g.x)return!0}else{var k=j*(a.x-g.x)-i*(a.y-g.y);if(0===k)return!0;if(k<0)continue;d=!d}}else{if(a.y!==g.y)continue;if(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=h.x)return!0}}return d}var f=c.ShapeUtils.isClockWise,g=this.subPaths;if(0===g.length)return[];if(b===!0)return d(g);var h,i,j,k=[];if(1===g.length)return i=g[0],j=new c.Shape,j.curves=i.curves,k.push(j),k;var l=!f(g[0].getPoints());l=a?!l:l;var m=[],n=[],o=[],p=0,q;n[p]=void 0,o[p]=[];for(var r=0,s=g.length;r<s;r++)i=g[r],q=i.getPoints(),h=f(q),h=a?!h:h,h?(!l&&n[p]&&p++,n[p]={s:new c.Shape,p:q},n[p].s.curves=i.curves,l&&p++,o[p]=[]):o[p].push({h:i,p:q[0]});if(!n[0])return d(g);if(n.length>1){for(var t=!1,u=[],v=0,w=n.length;v<w;v++)m[v]=[];for(var v=0,w=n.length;v<w;v++)for(var x=o[v],y=0;y<x.length;y++){for(var z=x[y],A=!0,B=0;B<n.length;B++)e(z.p,n[B].p)&&(v!==B&&u.push({froms:v,tos:B,hole:y}),A?(A=!1,m[B].push(z)):t=!0);A&&m[v].push(z)}u.length>0&&(t||(o=m))}for(var C,r=0,D=n.length;r<D;r++){j=n[r].s,k.push(j),C=o[r];for(var E=0,F=C.length;E<F;E++)j.holes.push(C[E].h)}return k}},c.Shape=function(){c.Path.apply(this,arguments),this.holes=[]},c.Shape.prototype=Object.assign(Object.create(c.Path.prototype),{constructor:c.Shape,extrude:function(a){return new c.ExtrudeGeometry(this,a)},makeGeometry:function(a){return new c.ShapeGeometry(this,a)},getPointsHoles:function(a){for(var b=[],c=0,d=this.holes.length;c<d;c++)b[c]=this.holes[c].getPoints(a);return b},extractAllPoints:function(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}},extractPoints:function(a){return this.extractAllPoints(a)}}),c.LineCurve=function(a,b){this.v1=a,this.v2=b},c.LineCurve.prototype=Object.create(c.Curve.prototype),c.LineCurve.prototype.constructor=c.LineCurve,c.LineCurve.prototype.getPoint=function(a){if(1===a)return this.v2.clone();var b=this.v2.clone().sub(this.v1);return b.multiplyScalar(a).add(this.v1),b},c.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)},c.LineCurve.prototype.getTangent=function(a){var b=this.v2.clone().sub(this.v1);return b.normalize()},c.QuadraticBezierCurve=function(a,b,c){this.v0=a,this.v1=b,this.v2=c},c.QuadraticBezierCurve.prototype=Object.create(c.Curve.prototype),c.QuadraticBezierCurve.prototype.constructor=c.QuadraticBezierCurve,c.QuadraticBezierCurve.prototype.getPoint=function(a){var b=c.ShapeUtils.b2;return new c.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y))},c.QuadraticBezierCurve.prototype.getTangent=function(a){var b=c.CurveUtils.tangentQuadraticBezier;return new c.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y)).normalize()},c.CubicBezierCurve=function(a,b,c,d){this.v0=a,this.v1=b,this.v2=c,this.v3=d},c.CubicBezierCurve.prototype=Object.create(c.Curve.prototype),c.CubicBezierCurve.prototype.constructor=c.CubicBezierCurve,c.CubicBezierCurve.prototype.getPoint=function(a){var b=c.ShapeUtils.b3;return new c.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y))},c.CubicBezierCurve.prototype.getTangent=function(a){var b=c.CurveUtils.tangentCubicBezier;return new c.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y)).normalize()},c.SplineCurve=function(a){this.points=void 0==a?[]:a},c.SplineCurve.prototype=Object.create(c.Curve.prototype),c.SplineCurve.prototype.constructor=c.SplineCurve,c.SplineCurve.prototype.getPoint=function(a){var b=this.points,d=(b.length-1)*a,e=Math.floor(d),f=d-e,g=b[0===e?e:e-1],h=b[e],i=b[e>b.length-2?b.length-1:e+1],j=b[e>b.length-3?b.length-1:e+2],k=c.CurveUtils.interpolate;return new c.Vector2(k(g.x,h.x,i.x,j.x,f),k(g.y,h.y,i.y,j.y,f));
},c.EllipseCurve=function(a,b,c,d,e,f,g,h){this.aX=a,this.aY=b,this.xRadius=c,this.yRadius=d,this.aStartAngle=e,this.aEndAngle=f,this.aClockwise=g,this.aRotation=h||0},c.EllipseCurve.prototype=Object.create(c.Curve.prototype),c.EllipseCurve.prototype.constructor=c.EllipseCurve,c.EllipseCurve.prototype.getPoint=function(a){for(var b=2*Math.PI,d=this.aEndAngle-this.aStartAngle,e=Math.abs(d)<Number.EPSILON;d<0;)d+=b;for(;d>b;)d-=b;d<Number.EPSILON&&(d=e?0:b),this.aClockwise!==!0||e||(d===b?d=-b:d-=b);var f=this.aStartAngle+a*d,g=this.aX+this.xRadius*Math.cos(f),h=this.aY+this.yRadius*Math.sin(f);if(0!==this.aRotation){var i=Math.cos(this.aRotation),j=Math.sin(this.aRotation),k=g-this.aX,l=h-this.aY;g=k*i-l*j+this.aX,h=k*j+l*i+this.aY}return new c.Vector2(g,h)},c.ArcCurve=function(a,b,d,e,f,g){c.EllipseCurve.call(this,a,b,d,d,e,f,g)},c.ArcCurve.prototype=Object.create(c.EllipseCurve.prototype),c.ArcCurve.prototype.constructor=c.ArcCurve,c.LineCurve3=c.Curve.create(function(a,b){this.v1=a,this.v2=b},function(a){if(1===a)return this.v2.clone();var b=new c.Vector3;return b.subVectors(this.v2,this.v1),b.multiplyScalar(a),b.add(this.v1),b}),c.QuadraticBezierCurve3=c.Curve.create(function(a,b,c){this.v0=a,this.v1=b,this.v2=c},function(a){var b=c.ShapeUtils.b2;return new c.Vector3(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y),b(a,this.v0.z,this.v1.z,this.v2.z))}),c.CubicBezierCurve3=c.Curve.create(function(a,b,c,d){this.v0=a,this.v1=b,this.v2=c,this.v3=d},function(a){var b=c.ShapeUtils.b3;return new c.Vector3(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y),b(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z))}),c.SplineCurve3=c.Curve.create(function(a){console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3"),this.points=void 0==a?[]:a},function(a){var b=this.points,d=(b.length-1)*a,e=Math.floor(d),f=d-e,g=b[0==e?e:e-1],h=b[e],i=b[e>b.length-2?b.length-1:e+1],j=b[e>b.length-3?b.length-1:e+2],k=c.CurveUtils.interpolate;return new c.Vector3(k(g.x,h.x,i.x,j.x,f),k(g.y,h.y,i.y,j.y,f),k(g.z,h.z,i.z,j.z,f))}),c.CatmullRomCurve3=function(){function a(){}var b=new c.Vector3,d=new a,e=new a,f=new a;return a.prototype.init=function(a,b,c,d){this.c0=a,this.c1=c,this.c2=-3*a+3*b-2*c-d,this.c3=2*a-2*b+c+d},a.prototype.initNonuniformCatmullRom=function(a,b,c,d,e,f,g){var h=(b-a)/e-(c-a)/(e+f)+(c-b)/f,i=(c-b)/f-(d-b)/(f+g)+(d-c)/g;h*=f,i*=f,this.init(b,c,h,i)},a.prototype.initCatmullRom=function(a,b,c,d,e){this.init(b,c,e*(c-a),e*(d-b))},a.prototype.calc=function(a){var b=a*a,c=b*a;return this.c0+this.c1*a+this.c2*b+this.c3*c},c.Curve.create(function(a){this.points=a||[],this.closed=!1},function(a){var g=this.points,h,i,j,k;k=g.length,k<2&&console.log("duh, you need at least 2 points"),h=(k-(this.closed?0:1))*a,i=Math.floor(h),j=h-i,this.closed?i+=i>0?0:(Math.floor(Math.abs(i)/g.length)+1)*g.length:0===j&&i===k-1&&(i=k-2,j=1);var l,m,n,o;if(this.closed||i>0?l=g[(i-1)%k]:(b.subVectors(g[0],g[1]).add(g[0]),l=b),m=g[i%k],n=g[(i+1)%k],this.closed||i+2<k?o=g[(i+2)%k]:(b.subVectors(g[k-1],g[k-2]).add(g[k-1]),o=b),void 0===this.type||"centripetal"===this.type||"chordal"===this.type){var p="chordal"===this.type?.5:.25,q=Math.pow(l.distanceToSquared(m),p),r=Math.pow(m.distanceToSquared(n),p),s=Math.pow(n.distanceToSquared(o),p);r<1e-4&&(r=1),q<1e-4&&(q=r),s<1e-4&&(s=r),d.initNonuniformCatmullRom(l.x,m.x,n.x,o.x,q,r,s),e.initNonuniformCatmullRom(l.y,m.y,n.y,o.y,q,r,s),f.initNonuniformCatmullRom(l.z,m.z,n.z,o.z,q,r,s)}else if("catmullrom"===this.type){var t=void 0!==this.tension?this.tension:.5;d.initCatmullRom(l.x,m.x,n.x,o.x,t),e.initCatmullRom(l.y,m.y,n.y,o.y,t),f.initCatmullRom(l.z,m.z,n.z,o.z,t)}var u=new c.Vector3(d.calc(j),e.calc(j),f.calc(j));return u})}(),c.ClosedSplineCurve3=function(a){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3."),c.CatmullRomCurve3.call(this,a),this.type="catmullrom",this.closed=!0},c.ClosedSplineCurve3.prototype=Object.create(c.CatmullRomCurve3.prototype),c.BoxGeometry=function(a,b,d,e,f,g){c.Geometry.call(this),this.type="BoxGeometry",this.parameters={width:a,height:b,depth:d,widthSegments:e,heightSegments:f,depthSegments:g},this.fromBufferGeometry(new c.BoxBufferGeometry(a,b,d,e,f,g)),this.mergeVertices()},c.BoxGeometry.prototype=Object.create(c.Geometry.prototype),c.BoxGeometry.prototype.constructor=c.BoxGeometry,c.CubeGeometry=c.BoxGeometry,c.BoxBufferGeometry=function(a,b,d,e,f,g){function h(a,b,c){var d=0;return d+=(a+1)*(b+1)*2,d+=(a+1)*(c+1)*2,d+=(c+1)*(b+1)*2}function i(a,b,c){var d=0;return d+=a*b*2,d+=a*c*2,d+=c*b*2,6*d}function j(a,b,d,e,f,g,h,i,j,l,m){for(var w=g/j,x=h/l,y=g/2,z=h/2,A=i/2,B=j+1,C=l+1,D=0,E=0,F=new c.Vector3,G=0;G<C;G++)for(var H=G*x-z,I=0;I<B;I++){var J=I*w-y;F[a]=J*e,F[b]=H*f,F[d]=A,o[r]=F.x,o[r+1]=F.y,o[r+2]=F.z,F[a]=0,F[b]=0,F[d]=i>0?1:-1,p[r]=F.x,p[r+1]=F.y,p[r+2]=F.z,q[s]=I/j,q[s+1]=1-G/l,r+=3,s+=2,D+=1}for(G=0;G<l;G++)for(I=0;I<j;I++){var K=u+I+B*G,L=u+I+B*(G+1),M=u+(I+1)+B*(G+1),N=u+(I+1)+B*G;n[t]=K,n[t+1]=L,n[t+2]=N,n[t+3]=L,n[t+4]=M,n[t+5]=N,t+=6,E+=6}k.addGroup(v,E,m),v+=E,u+=D}c.BufferGeometry.call(this),this.type="BoxBufferGeometry",this.parameters={width:a,height:b,depth:d,widthSegments:e,heightSegments:f,depthSegments:g};var k=this;e=Math.floor(e)||1,f=Math.floor(f)||1,g=Math.floor(g)||1;var l=h(e,f,g),m=i(e,f,g),n=new(m>65535?Uint32Array:Uint16Array)(m),o=new Float32Array(3*l),p=new Float32Array(3*l),q=new Float32Array(2*l),r=0,s=0,t=0,u=0,v=0;j("z","y","x",-1,-1,d,b,a,g,f,0),j("z","y","x",1,-1,d,b,-a,g,f,1),j("x","z","y",1,1,a,d,b,e,g,2),j("x","z","y",1,-1,a,d,-b,e,g,3),j("x","y","z",1,-1,a,b,d,e,f,4),j("x","y","z",-1,-1,a,b,-d,e,f,5),this.setIndex(new c.BufferAttribute(n,1)),this.addAttribute("position",new c.BufferAttribute(o,3)),this.addAttribute("normal",new c.BufferAttribute(p,3)),this.addAttribute("uv",new c.BufferAttribute(q,2))},c.BoxBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.BoxBufferGeometry.prototype.constructor=c.BoxBufferGeometry,c.CircleGeometry=function(a,b,d,e){c.Geometry.call(this),this.type="CircleGeometry",this.parameters={radius:a,segments:b,thetaStart:d,thetaLength:e},this.fromBufferGeometry(new c.CircleBufferGeometry(a,b,d,e))},c.CircleGeometry.prototype=Object.create(c.Geometry.prototype),c.CircleGeometry.prototype.constructor=c.CircleGeometry,c.CircleBufferGeometry=function(a,b,d,e){c.BufferGeometry.call(this),this.type="CircleBufferGeometry",this.parameters={radius:a,segments:b,thetaStart:d,thetaLength:e},a=a||50,b=void 0!==b?Math.max(3,b):8,d=void 0!==d?d:0,e=void 0!==e?e:2*Math.PI;var f=b+2,g=new Float32Array(3*f),h=new Float32Array(3*f),i=new Float32Array(2*f);h[2]=1,i[0]=.5,i[1]=.5;for(var j=0,k=3,l=2;j<=b;j++,k+=3,l+=2){var m=d+j/b*e;g[k]=a*Math.cos(m),g[k+1]=a*Math.sin(m),h[k+2]=1,i[l]=(g[k]/a+1)/2,i[l+1]=(g[k+1]/a+1)/2}for(var n=[],k=1;k<=b;k++)n.push(k,k+1,0);this.setIndex(new c.BufferAttribute(new Uint16Array(n),1)),this.addAttribute("position",new c.BufferAttribute(g,3)),this.addAttribute("normal",new c.BufferAttribute(h,3)),this.addAttribute("uv",new c.BufferAttribute(i,2)),this.boundingSphere=new c.Sphere(new c.Vector3,a)},c.CircleBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.CircleBufferGeometry.prototype.constructor=c.CircleBufferGeometry,c.CylinderBufferGeometry=function(a,b,d,e,f,g,h,i){function j(){var a=(e+1)*(f+1);return g===!1&&(a+=(e+1)*o+e*o),a}function k(){var a=e*f*2*3;return g===!1&&(a+=e*o*3),a}function l(){var g,j,k=new c.Vector3,l=new c.Vector3,m=0,o=(b-a)/d;for(j=0;j<=f;j++){var p=[],q=j/f,A=q*(b-a)+a;for(g=0;g<=e;g++){var B=g/e;l.x=A*Math.sin(B*i+h),l.y=-q*d+y,l.z=A*Math.cos(B*i+h),s.setXYZ(v,l.x,l.y,l.z),k.copy(l),(0===a&&0===j||0===b&&j===f)&&(k.x=Math.sin(B*i+h),k.z=Math.cos(B*i+h)),k.setY(Math.sqrt(k.x*k.x+k.z*k.z)*o).normalize(),t.setXYZ(v,k.x,k.y,k.z),u.setXY(v,B,1-q),p.push(v),v++}x.push(p)}for(g=0;g<e;g++)for(j=0;j<f;j++){var C=x[j][g],D=x[j+1][g],E=x[j+1][g+1],F=x[j][g+1];r.setX(w,C),w++,r.setX(w,D),w++,r.setX(w,F),w++,r.setX(w,D),w++,r.setX(w,E),w++,r.setX(w,F),w++,m+=6}n.addGroup(z,m,0),z+=m}function m(d){var f,g,j,k=new c.Vector2,l=new c.Vector3,m=0,o=d===!0?a:b,p=d===!0?1:-1;for(g=v,f=1;f<=e;f++)s.setXYZ(v,0,y*p,0),t.setXYZ(v,0,p,0),k.x=.5,k.y=.5,u.setXY(v,k.x,k.y),v++;for(j=v,f=0;f<=e;f++){var q=f/e,x=q*i+h,A=Math.cos(x),B=Math.sin(x);l.x=o*B,l.y=y*p,l.z=o*A,s.setXYZ(v,l.x,l.y,l.z),t.setXYZ(v,0,p,0),k.x=.5*A+.5,k.y=.5*B*p+.5,u.setXY(v,k.x,k.y),v++}for(f=0;f<e;f++){var C=g+f,D=j+f;d===!0?(r.setX(w,D),w++,r.setX(w,D+1),w++,r.setX(w,C),w++):(r.setX(w,D+1),w++,r.setX(w,D),w++,r.setX(w,C),w++),m+=3}n.addGroup(z,m,d===!0?1:2),z+=m}c.BufferGeometry.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:a,radiusBottom:b,height:d,radialSegments:e,heightSegments:f,openEnded:g,thetaStart:h,thetaLength:i};var n=this;a=void 0!==a?a:20,b=void 0!==b?b:20,d=void 0!==d?d:100,e=Math.floor(e)||8,f=Math.floor(f)||1,g=void 0!==g&&g,h=void 0!==h?h:0,i=void 0!==i?i:2*Math.PI;var o=0;g===!1&&(a>0&&o++,b>0&&o++);var p=j(),q=k(),r=new c.BufferAttribute(new(q>65535?Uint32Array:Uint16Array)(q),1),s=new c.BufferAttribute(new Float32Array(3*p),3),t=new c.BufferAttribute(new Float32Array(3*p),3),u=new c.BufferAttribute(new Float32Array(2*p),2),v=0,w=0,x=[],y=d/2,z=0;l(),g===!1&&(a>0&&m(!0),b>0&&m(!1)),this.setIndex(r),this.addAttribute("position",s),this.addAttribute("normal",t),this.addAttribute("uv",u)},c.CylinderBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.CylinderBufferGeometry.prototype.constructor=c.CylinderBufferGeometry,c.CylinderGeometry=function(a,b,d,e,f,g,h,i){c.Geometry.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:a,radiusBottom:b,height:d,radialSegments:e,heightSegments:f,openEnded:g,thetaStart:h,thetaLength:i},this.fromBufferGeometry(new c.CylinderBufferGeometry(a,b,d,e,f,g,h,i)),this.mergeVertices()},c.CylinderGeometry.prototype=Object.create(c.Geometry.prototype),c.CylinderGeometry.prototype.constructor=c.CylinderGeometry,c.ConeBufferGeometry=function(a,b,d,e,f,g,h){c.CylinderBufferGeometry.call(this,0,a,b,d,e,f,g,h),this.type="ConeBufferGeometry",this.parameters={radius:a,height:b,radialSegments:d,heightSegments:e,thetaStart:g,thetaLength:h}},c.ConeBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.ConeBufferGeometry.prototype.constructor=c.ConeBufferGeometry,c.ConeGeometry=function(a,b,d,e,f,g,h){c.CylinderGeometry.call(this,0,a,b,d,e,f,g,h),this.type="ConeGeometry",this.parameters={radius:a,height:b,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h}},c.ConeGeometry.prototype=Object.create(c.CylinderGeometry.prototype),c.ConeGeometry.prototype.constructor=c.ConeGeometry,c.EdgesGeometry=function(a,b){function d(a,b){return a-b}c.BufferGeometry.call(this),b=void 0!==b?b:1;var e=Math.cos(c.Math.DEG2RAD*b),f=[0,0],g={},h=["a","b","c"],i;a instanceof c.BufferGeometry?(i=new c.Geometry,i.fromBufferGeometry(a)):i=a.clone(),i.mergeVertices(),i.computeFaceNormals();for(var j=i.vertices,k=i.faces,l=0,m=k.length;l<m;l++)for(var n=k[l],o=0;o<3;o++){f[0]=n[h[o]],f[1]=n[h[(o+1)%3]],f.sort(d);var p=f.toString();void 0===g[p]?g[p]={vert1:f[0],vert2:f[1],face1:l,face2:void 0}:g[p].face2=l}var q=[];for(var p in g){var r=g[p];if(void 0===r.face2||k[r.face1].normal.dot(k[r.face2].normal)<=e){var s=j[r.vert1];q.push(s.x),q.push(s.y),q.push(s.z),s=j[r.vert2],q.push(s.x),q.push(s.y),q.push(s.z)}}this.addAttribute("position",new c.BufferAttribute(new Float32Array(q),3))},c.EdgesGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.EdgesGeometry.prototype.constructor=c.EdgesGeometry,c.ExtrudeGeometry=function(a,b){return"undefined"==typeof a?void(a=[]):(c.Geometry.call(this),this.type="ExtrudeGeometry",a=Array.isArray(a)?a:[a],this.addShapeList(a,b),void this.computeFaceNormals())},c.ExtrudeGeometry.prototype=Object.create(c.Geometry.prototype),c.ExtrudeGeometry.prototype.constructor=c.ExtrudeGeometry,c.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++){var e=a[d];this.addShape(e,b)}},c.ExtrudeGeometry.prototype.addShape=function(a,b){function d(a,b,c){return b||console.error("THREE.ExtrudeGeometry: vec does not exist"),b.clone().multiplyScalar(c).add(a)}function e(a,b,d){var e,f,g=1,h=a.x-b.x,i=a.y-b.y,j=d.x-a.x,k=d.y-a.y,l=h*h+i*i,m=h*k-i*j;if(Math.abs(m)>Number.EPSILON){var n=Math.sqrt(l),o=Math.sqrt(j*j+k*k),p=b.x-i/n,q=b.y+h/n,r=d.x-k/o,s=d.y+j/o,t=((r-p)*k-(s-q)*j)/(h*k-i*j);e=p+h*t-a.x,f=q+i*t-a.y;var u=e*e+f*f;if(u<=2)return new c.Vector2(e,f);g=Math.sqrt(u/2)}else{var v=!1;h>Number.EPSILON?j>Number.EPSILON&&(v=!0):h<-Number.EPSILON?j<-Number.EPSILON&&(v=!0):Math.sign(i)===Math.sign(k)&&(v=!0),v?(e=-i,f=h,g=Math.sqrt(l)):(e=h,f=i,g=Math.sqrt(l/2))}return new c.Vector2(e/g,f/g)}function f(){if(p){var a=0,b=Q*a;for(U=0;U<S;U++)R=J[U],j(R[2]+b,R[1]+b,R[0]+b);for(a=r+2*o,b=Q*a,U=0;U<S;U++)R=J[U],j(R[0]+b,R[1]+b,R[2]+b)}else{for(U=0;U<S;U++)R=J[U],j(R[2],R[1],R[0]);for(U=0;U<S;U++)R=J[U],j(R[0]+Q*r,R[1]+Q*r,R[2]+Q*r)}}function g(){var a=0;for(h(K,a),a+=K.length,B=0,C=H.length;B<C;B++)A=H[B],h(A,a),a+=A.length}function h(a,b){var c,d;for(U=a.length;--U>=0;){c=U,d=U-1,d<0&&(d=a.length-1);var e=0,f=r+2*o;for(e=0;e<f;e++){var g=Q*e,h=Q*(e+1),i=b+c+g,j=b+d+g,l=b+d+h,m=b+c+h;k(i,j,l,m,a,e,f,c,d)}}}function i(a,b,d){D.vertices.push(new c.Vector3(a,b,d))}function j(a,b,d){a+=E,b+=E,d+=E,D.faces.push(new c.Face3(a,b,d,null,null,0));var e=v.generateTopUV(D,a,b,d);D.faceVertexUvs[0].push(e)}function k(a,b,d,e,f,g,h,i,j){a+=E,b+=E,d+=E,e+=E,D.faces.push(new c.Face3(a,b,e,null,null,1)),D.faces.push(new c.Face3(b,d,e,null,null,1));var k=v.generateSideWallUV(D,a,b,d,e);D.faceVertexUvs[0].push([k[0],k[1],k[3]]),D.faceVertexUvs[0].push([k[1],k[2],k[3]])}var l=void 0!==b.amount?b.amount:100,m=void 0!==b.bevelThickness?b.bevelThickness:6,n=void 0!==b.bevelSize?b.bevelSize:m-2,o=void 0!==b.bevelSegments?b.bevelSegments:3,p=void 0===b.bevelEnabled||b.bevelEnabled,q=void 0!==b.curveSegments?b.curveSegments:12,r=void 0!==b.steps?b.steps:1,s=b.extrudePath,t,u=!1,v=void 0!==b.UVGenerator?b.UVGenerator:c.ExtrudeGeometry.WorldUVGenerator,w,x,y,z;s&&(t=s.getSpacedPoints(r),u=!0,p=!1,w=void 0!==b.frames?b.frames:new c.TubeGeometry.FrenetFrames(s,r,(!1)),x=new c.Vector3,y=new c.Vector3,z=new c.Vector3),p||(o=0,m=0,n=0);var A,B,C,D=this,E=this.vertices.length,F=a.extractPoints(q),G=F.shape,H=F.holes,I=!c.ShapeUtils.isClockWise(G);if(I){for(G=G.reverse(),B=0,C=H.length;B<C;B++)A=H[B],c.ShapeUtils.isClockWise(A)&&(H[B]=A.reverse());I=!1}var J=c.ShapeUtils.triangulateShape(G,H),K=G;for(B=0,C=H.length;B<C;B++)A=H[B],G=G.concat(A);for(var L,M,N,O,P,Q=G.length,R,S=J.length,T=[],U=0,V=K.length,W=V-1,X=U+1;U<V;U++,W++,X++)W===V&&(W=0),X===V&&(X=0),T[U]=e(K[U],K[W],K[X]);var Y=[],Z,$=T.concat();for(B=0,C=H.length;B<C;B++){for(A=H[B],Z=[],U=0,V=A.length,W=V-1,X=U+1;U<V;U++,W++,X++)W===V&&(W=0),X===V&&(X=0),Z[U]=e(A[U],A[W],A[X]);Y.push(Z),$=$.concat(Z)}for(L=0;L<o;L++){for(N=L/o,O=m*(1-N),M=n*Math.sin(N*Math.PI/2),U=0,V=K.length;U<V;U++)P=d(K[U],T[U],M),i(P.x,P.y,-O);for(B=0,C=H.length;B<C;B++)for(A=H[B],Z=Y[B],U=0,V=A.length;U<V;U++)P=d(A[U],Z[U],M),i(P.x,P.y,-O)}for(M=n,U=0;U<Q;U++)P=p?d(G[U],$[U],M):G[U],u?(y.copy(w.normals[0]).multiplyScalar(P.x),x.copy(w.binormals[0]).multiplyScalar(P.y),z.copy(t[0]).add(y).add(x),i(z.x,z.y,z.z)):i(P.x,P.y,0);var _;for(_=1;_<=r;_++)for(U=0;U<Q;U++)P=p?d(G[U],$[U],M):G[U],u?(y.copy(w.normals[_]).multiplyScalar(P.x),x.copy(w.binormals[_]).multiplyScalar(P.y),z.copy(t[_]).add(y).add(x),i(z.x,z.y,z.z)):i(P.x,P.y,l/r*_);for(L=o-1;L>=0;L--){for(N=L/o,O=m*(1-N),M=n*Math.sin(N*Math.PI/2),U=0,V=K.length;U<V;U++)P=d(K[U],T[U],M),i(P.x,P.y,l+O);for(B=0,C=H.length;B<C;B++)for(A=H[B],Z=Y[B],U=0,V=A.length;U<V;U++)P=d(A[U],Z[U],M),u?i(P.x,P.y+t[r-1].y,t[r-1].x+O):i(P.x,P.y,l+O)}f(),g()},c.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,d,e){var f=a.vertices,g=f[b],h=f[d],i=f[e];return[new c.Vector2(g.x,g.y),new c.Vector2(h.x,h.y),new c.Vector2(i.x,i.y)]},generateSideWallUV:function(a,b,d,e,f){var g=a.vertices,h=g[b],i=g[d],j=g[e],k=g[f];return Math.abs(h.y-i.y)<.01?[new c.Vector2(h.x,1-h.z),new c.Vector2(i.x,1-i.z),new c.Vector2(j.x,1-j.z),new c.Vector2(k.x,1-k.z)]:[new c.Vector2(h.y,1-h.z),new c.Vector2(i.y,1-i.z),new c.Vector2(j.y,1-j.z),new c.Vector2(k.y,1-k.z)]}},c.ShapeGeometry=function(a,b){c.Geometry.call(this),this.type="ShapeGeometry",Array.isArray(a)===!1&&(a=[a]),this.addShapeList(a,b),this.computeFaceNormals()},c.ShapeGeometry.prototype=Object.create(c.Geometry.prototype),c.ShapeGeometry.prototype.constructor=c.ShapeGeometry,c.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this},c.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var d=void 0!==b.curveSegments?b.curveSegments:12,e=b.material,f=void 0===b.UVGenerator?c.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,g,h,i,j=this.vertices.length,k=a.extractPoints(d),l=k.shape,m=k.holes,n=!c.ShapeUtils.isClockWise(l);if(n){for(l=l.reverse(),g=0,h=m.length;g<h;g++)i=m[g],c.ShapeUtils.isClockWise(i)&&(m[g]=i.reverse());n=!1}var o=c.ShapeUtils.triangulateShape(l,m);for(g=0,h=m.length;g<h;g++)i=m[g],l=l.concat(i);var p,q=l.length,r,s=o.length;for(g=0;g<q;g++)p=l[g],this.vertices.push(new c.Vector3(p.x,p.y,0));for(g=0;g<s;g++){r=o[g];var t=r[0]+j,u=r[1]+j,v=r[2]+j;this.faces.push(new c.Face3(t,u,v,null,null,e)),this.faceVertexUvs[0].push(f.generateTopUV(this,t,u,v))}},c.LatheBufferGeometry=function(a,b,d,e){c.BufferGeometry.call(this),this.type="LatheBufferGeometry",this.parameters={points:a,segments:b,phiStart:d,phiLength:e},b=Math.floor(b)||12,d=d||0,e=e||2*Math.PI,e=c.Math.clamp(e,0,2*Math.PI);var f=(b+1)*a.length,g=b*a.length*2*3,h=new c.BufferAttribute(new(g>65535?Uint32Array:Uint16Array)(g),1),i=new c.BufferAttribute(new Float32Array(3*f),3),j=new c.BufferAttribute(new Float32Array(2*f),2),k=0,l=0,m,n=1/(a.length-1),o=1/b,p=new c.Vector3,q=new c.Vector2,r,s;for(r=0;r<=b;r++){var t=d+r*o*e,u=Math.sin(t),v=Math.cos(t);for(s=0;s<=a.length-1;s++)p.x=a[s].x*u,p.y=a[s].y,p.z=a[s].x*v,i.setXYZ(k,p.x,p.y,p.z),q.x=r/b,q.y=s/(a.length-1),j.setXY(k,q.x,q.y),k++}for(r=0;r<b;r++)for(s=0;s<a.length-1;s++){m=s+r*a.length;var w=m,x=m+a.length,y=m+a.length+1,z=m+1;h.setX(l,w),l++,h.setX(l,x),l++,h.setX(l,z),l++,h.setX(l,x),l++,h.setX(l,y),l++,h.setX(l,z),l++}if(this.setIndex(h),this.addAttribute("position",i),this.addAttribute("uv",j),this.computeVertexNormals(),e===2*Math.PI){var A=this.attributes.normal.array,B=new c.Vector3,C=new c.Vector3,D=new c.Vector3;for(m=b*a.length*3,r=0,s=0;r<a.length;r++,s+=3)B.x=A[s+0],B.y=A[s+1],B.z=A[s+2],C.x=A[m+s+0],C.y=A[m+s+1],C.z=A[m+s+2],D.addVectors(B,C).normalize(),A[s+0]=A[m+s+0]=D.x,A[s+1]=A[m+s+1]=D.y,A[s+2]=A[m+s+2]=D.z}},c.LatheBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.LatheBufferGeometry.prototype.constructor=c.LatheBufferGeometry,c.LatheGeometry=function(a,b,d,e){c.Geometry.call(this),this.type="LatheGeometry",this.parameters={points:a,segments:b,phiStart:d,phiLength:e},this.fromBufferGeometry(new c.LatheBufferGeometry(a,b,d,e)),this.mergeVertices()},c.LatheGeometry.prototype=Object.create(c.Geometry.prototype),c.LatheGeometry.prototype.constructor=c.LatheGeometry,c.PlaneGeometry=function(a,b,d,e){c.Geometry.call(this),this.type="PlaneGeometry",this.parameters={width:a,height:b,widthSegments:d,heightSegments:e},this.fromBufferGeometry(new c.PlaneBufferGeometry(a,b,d,e))},c.PlaneGeometry.prototype=Object.create(c.Geometry.prototype),c.PlaneGeometry.prototype.constructor=c.PlaneGeometry,c.PlaneBufferGeometry=function(a,b,d,e){c.BufferGeometry.call(this),this.type="PlaneBufferGeometry",this.parameters={width:a,height:b,widthSegments:d,heightSegments:e};for(var f=a/2,g=b/2,h=Math.floor(d)||1,i=Math.floor(e)||1,j=h+1,k=i+1,l=a/h,m=b/i,n=new Float32Array(j*k*3),o=new Float32Array(j*k*3),p=new Float32Array(j*k*2),q=0,r=0,s=0;s<k;s++)for(var t=s*m-g,u=0;u<j;u++){var v=u*l-f;n[q]=v,n[q+1]=-t,o[q+2]=1,p[r]=u/h,p[r+1]=1-s/i,q+=3,r+=2}q=0;for(var w=new(n.length/3>65535?Uint32Array:Uint16Array)(h*i*6),s=0;s<i;s++)for(var u=0;u<h;u++){var x=u+j*s,y=u+j*(s+1),z=u+1+j*(s+1),A=u+1+j*s;w[q]=x,w[q+1]=y,w[q+2]=A,w[q+3]=y,w[q+4]=z,w[q+5]=A,q+=6}this.setIndex(new c.BufferAttribute(w,1)),this.addAttribute("position",new c.BufferAttribute(n,3)),this.addAttribute("normal",new c.BufferAttribute(o,3)),this.addAttribute("uv",new c.BufferAttribute(p,2))},c.PlaneBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.PlaneBufferGeometry.prototype.constructor=c.PlaneBufferGeometry,c.RingBufferGeometry=function(a,b,d,e,f,g){c.BufferGeometry.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:a,outerRadius:b,thetaSegments:d,phiSegments:e,thetaStart:f,thetaLength:g},a=a||20,b=b||50,f=void 0!==f?f:0,g=void 0!==g?g:2*Math.PI,d=void 0!==d?Math.max(3,d):8,e=void 0!==e?Math.max(1,e):1;var h=(d+1)*(e+1),i=d*e*2*3,j=new c.BufferAttribute(new(i>65535?Uint32Array:Uint16Array)(i),1),k=new c.BufferAttribute(new Float32Array(3*h),3),l=new c.BufferAttribute(new Float32Array(3*h),3),m=new c.BufferAttribute(new Float32Array(2*h),2),n=0,o=0,p,q=a,r=(b-a)/e,s=new c.Vector3,t=new c.Vector2,u,v;for(u=0;u<=e;u++){for(v=0;v<=d;v++)p=f+v/d*g,s.x=q*Math.cos(p),s.y=q*Math.sin(p),k.setXYZ(n,s.x,s.y,s.z),l.setXYZ(n,0,0,1),t.x=(s.x/b+1)/2,t.y=(s.y/b+1)/2,m.setXY(n,t.x,t.y),n++;q+=r}for(u=0;u<e;u++){var w=u*(d+1);for(v=0;v<d;v++){p=v+w;var x=p,y=p+d+1,z=p+d+2,A=p+1;j.setX(o,x),o++,j.setX(o,y),o++,j.setX(o,z),o++,j.setX(o,x),o++,j.setX(o,z),o++,j.setX(o,A),o++}}this.setIndex(j),this.addAttribute("position",k),this.addAttribute("normal",l),this.addAttribute("uv",m)},c.RingBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.RingBufferGeometry.prototype.constructor=c.RingBufferGeometry,c.RingGeometry=function(a,b,d,e,f,g){c.Geometry.call(this),this.type="RingGeometry",this.parameters={innerRadius:a,outerRadius:b,thetaSegments:d,phiSegments:e,thetaStart:f,thetaLength:g},this.fromBufferGeometry(new c.RingBufferGeometry(a,b,d,e,f,g))},c.RingGeometry.prototype=Object.create(c.Geometry.prototype),c.RingGeometry.prototype.constructor=c.RingGeometry,c.SphereGeometry=function(a,b,d,e,f,g,h){c.Geometry.call(this),this.type="SphereGeometry",this.parameters={radius:a,widthSegments:b,heightSegments:d,phiStart:e,phiLength:f,thetaStart:g,thetaLength:h},this.fromBufferGeometry(new c.SphereBufferGeometry(a,b,d,e,f,g,h))},c.SphereGeometry.prototype=Object.create(c.Geometry.prototype),c.SphereGeometry.prototype.constructor=c.SphereGeometry,c.SphereBufferGeometry=function(a,b,d,e,f,g,h){c.BufferGeometry.call(this),this.type="SphereBufferGeometry",this.parameters={radius:a,widthSegments:b,heightSegments:d,phiStart:e,phiLength:f,thetaStart:g,thetaLength:h},a=a||50,b=Math.max(3,Math.floor(b)||8),d=Math.max(2,Math.floor(d)||6),e=void 0!==e?e:0,f=void 0!==f?f:2*Math.PI,g=void 0!==g?g:0,h=void 0!==h?h:Math.PI;for(var i=g+h,j=(b+1)*(d+1),k=new c.BufferAttribute(new Float32Array(3*j),3),l=new c.BufferAttribute(new Float32Array(3*j),3),m=new c.BufferAttribute(new Float32Array(2*j),2),n=0,o=[],p=new c.Vector3,q=0;q<=d;q++){for(var r=[],s=q/d,t=0;t<=b;t++){var u=t/b,v=-a*Math.cos(e+u*f)*Math.sin(g+s*h),w=a*Math.cos(g+s*h),x=a*Math.sin(e+u*f)*Math.sin(g+s*h);p.set(v,w,x).normalize(),k.setXYZ(n,v,w,x),l.setXYZ(n,p.x,p.y,p.z),m.setXY(n,u,1-s),r.push(n),n++}o.push(r)}for(var y=[],q=0;q<d;q++)for(var t=0;t<b;t++){var z=o[q][t+1],A=o[q][t],B=o[q+1][t],C=o[q+1][t+1];(0!==q||g>0)&&y.push(z,A,C),(q!==d-1||i<Math.PI)&&y.push(A,B,C)}this.setIndex(new(k.count>65535?c.Uint32Attribute:c.Uint16Attribute)(y,1)),this.addAttribute("position",k),this.addAttribute("normal",l),this.addAttribute("uv",m),this.boundingSphere=new c.Sphere(new c.Vector3,a)},c.SphereBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.SphereBufferGeometry.prototype.constructor=c.SphereBufferGeometry,c.TextGeometry=function(a,b){b=b||{};var d=b.font;if(d instanceof c.Font==!1)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new c.Geometry;var e=d.generateShapes(a,b.size,b.curveSegments);b.amount=void 0!==b.height?b.height:50,void 0===b.bevelThickness&&(b.bevelThickness=10),void 0===b.bevelSize&&(b.bevelSize=8),void 0===b.bevelEnabled&&(b.bevelEnabled=!1),c.ExtrudeGeometry.call(this,e,b),this.type="TextGeometry"},c.TextGeometry.prototype=Object.create(c.ExtrudeGeometry.prototype),c.TextGeometry.prototype.constructor=c.TextGeometry,c.TorusBufferGeometry=function(a,b,d,e,f){c.BufferGeometry.call(this),this.type="TorusBufferGeometry",this.parameters={radius:a,tube:b,radialSegments:d,tubularSegments:e,arc:f},a=a||100,b=b||40,d=Math.floor(d)||8,e=Math.floor(e)||6,f=f||2*Math.PI;var g=(d+1)*(e+1),h=d*e*2*3,i=new(h>65535?Uint32Array:Uint16Array)(h),j=new Float32Array(3*g),k=new Float32Array(3*g),l=new Float32Array(2*g),m=0,n=0,o=0,p=new c.Vector3,q=new c.Vector3,r=new c.Vector3,s,t;for(s=0;s<=d;s++)for(t=0;t<=e;t++){var u=t/e*f,v=s/d*Math.PI*2;q.x=(a+b*Math.cos(v))*Math.cos(u),q.y=(a+b*Math.cos(v))*Math.sin(u),q.z=b*Math.sin(v),j[m]=q.x,j[m+1]=q.y,j[m+2]=q.z,p.x=a*Math.cos(u),p.y=a*Math.sin(u),r.subVectors(q,p).normalize(),k[m]=r.x,k[m+1]=r.y,k[m+2]=r.z,l[n]=t/e,l[n+1]=s/d,m+=3,n+=2}for(s=1;s<=d;s++)for(t=1;t<=e;t++){var w=(e+1)*s+t-1,x=(e+1)*(s-1)+t-1,y=(e+1)*(s-1)+t,z=(e+1)*s+t;i[o]=w,i[o+1]=x,i[o+2]=z,i[o+3]=x,i[o+4]=y,i[o+5]=z,o+=6}this.setIndex(new c.BufferAttribute(i,1)),this.addAttribute("position",new c.BufferAttribute(j,3)),this.addAttribute("normal",new c.BufferAttribute(k,3)),this.addAttribute("uv",new c.BufferAttribute(l,2))},c.TorusBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.TorusBufferGeometry.prototype.constructor=c.TorusBufferGeometry,c.TorusGeometry=function(a,b,d,e,f){c.Geometry.call(this),this.type="TorusGeometry",this.parameters={radius:a,tube:b,radialSegments:d,tubularSegments:e,arc:f},this.fromBufferGeometry(new c.TorusBufferGeometry(a,b,d,e,f))},c.TorusGeometry.prototype=Object.create(c.Geometry.prototype),c.TorusGeometry.prototype.constructor=c.TorusGeometry,c.TorusKnotBufferGeometry=function(a,b,d,e,f,g){function h(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a),h=c/b*a,i=Math.cos(h);e.x=d*(2+i)*.5*f,e.y=d*(2+i)*g*.5,e.z=d*Math.sin(h)*.5}c.BufferGeometry.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:a,tube:b,tubularSegments:d,radialSegments:e,p:f,q:g},a=a||100,b=b||40,d=Math.floor(d)||64,e=Math.floor(e)||8,f=f||2,g=g||3;var i=(e+1)*(d+1),j=e*d*2*3,k=new c.BufferAttribute(new(j>65535?Uint32Array:Uint16Array)(j),1),l=new c.BufferAttribute(new Float32Array(3*i),3),m=new c.BufferAttribute(new Float32Array(3*i),3),n=new c.BufferAttribute(new Float32Array(2*i),2),o,p,q=0,r=0,s=new c.Vector3,t=new c.Vector3,u=new c.Vector2,v=new c.Vector3,w=new c.Vector3,x=new c.Vector3,y=new c.Vector3,z=new c.Vector3;for(o=0;o<=d;++o){var A=o/d*f*Math.PI*2;for(h(A,f,g,a,v),h(A+.01,f,g,a,w),y.subVectors(w,v),z.addVectors(w,v),x.crossVectors(y,z),z.crossVectors(x,y),x.normalize(),z.normalize(),p=0;p<=e;++p){var B=p/e*Math.PI*2,C=-b*Math.cos(B),D=b*Math.sin(B);s.x=v.x+(C*z.x+D*x.x),s.y=v.y+(C*z.y+D*x.y),s.z=v.z+(C*z.z+D*x.z),l.setXYZ(q,s.x,s.y,s.z),t.subVectors(s,v).normalize(),m.setXYZ(q,t.x,t.y,t.z),u.x=o/d,u.y=p/e,n.setXY(q,u.x,u.y),q++}}for(p=1;p<=d;p++)for(o=1;o<=e;o++){var E=(e+1)*(p-1)+(o-1),F=(e+1)*p+(o-1),G=(e+1)*p+o,H=(e+1)*(p-1)+o;k.setX(r,E),r++,k.setX(r,F),r++,k.setX(r,H),r++,k.setX(r,F),r++,k.setX(r,G),r++,k.setX(r,H),r++}this.setIndex(k),this.addAttribute("position",l),this.addAttribute("normal",m),this.addAttribute("uv",n)},c.TorusKnotBufferGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.TorusKnotBufferGeometry.prototype.constructor=c.TorusKnotBufferGeometry,c.TorusKnotGeometry=function(a,b,d,e,f,g,h){c.Geometry.call(this),this.type="TorusKnotGeometry",this.parameters={radius:a,tube:b,tubularSegments:d,radialSegments:e,p:f,q:g},void 0!==h&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new c.TorusKnotBufferGeometry(a,b,d,e,f,g)),this.mergeVertices()},c.TorusKnotGeometry.prototype=Object.create(c.Geometry.prototype),c.TorusKnotGeometry.prototype.constructor=c.TorusKnotGeometry,c.TubeGeometry=function(a,b,d,e,f,g){function h(a,b,d){return j.vertices.push(new c.Vector3(a,b,d))-1}c.Geometry.call(this),this.type="TubeGeometry",this.parameters={path:a,segments:b,radius:d,radialSegments:e,closed:f,taper:g},b=b||64,d=d||1,e=e||8,f=f||!1,g=g||c.TubeGeometry.NoTaper;var i=[],j=this,k,l,m,n=b+1,o,p,q,r,s,t,u=new c.Vector3,v,w,x,y,z,A,B,C,D,E,F,G,H=new c.TubeGeometry.FrenetFrames(a,b,f),I=H.tangents,J=H.normals,K=H.binormals;for(this.tangents=I,this.normals=J,this.binormals=K,v=0;v<n;v++)for(i[v]=[],o=v/(n-1),t=a.getPointAt(o),k=I[v],l=J[v],m=K[v],q=d*g(o),w=0;w<e;w++)p=w/e*2*Math.PI,r=-q*Math.cos(p),s=q*Math.sin(p),u.copy(t),u.x+=r*l.x+s*m.x,u.y+=r*l.y+s*m.y,u.z+=r*l.z+s*m.z,i[v][w]=h(u.x,u.y,u.z);for(v=0;v<b;v++)for(w=0;w<e;w++)x=f?(v+1)%b:v+1,y=(w+1)%e,z=i[v][w],A=i[x][w],B=i[x][y],C=i[v][y],D=new c.Vector2(v/b,w/e),E=new c.Vector2((v+1)/b,w/e),F=new c.Vector2((v+1)/b,(w+1)/e),G=new c.Vector2(v/b,(w+1)/e),this.faces.push(new c.Face3(z,A,C)),this.faceVertexUvs[0].push([D,E,G]),this.faces.push(new c.Face3(A,B,C)),this.faceVertexUvs[0].push([E.clone(),F,G.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},c.TubeGeometry.prototype=Object.create(c.Geometry.prototype),c.TubeGeometry.prototype.constructor=c.TubeGeometry,c.TubeGeometry.NoTaper=function(a){return 1},c.TubeGeometry.SinusoidalTaper=function(a){return Math.sin(Math.PI*a)},c.TubeGeometry.FrenetFrames=function(a,b,d){function e(){h[0]=new c.Vector3,i[0]=new c.Vector3,n=Number.MAX_VALUE,o=Math.abs(g[0].x),p=Math.abs(g[0].y),q=Math.abs(g[0].z),o<=n&&(n=o,f.set(1,0,0)),p<=n&&(n=p,f.set(0,1,0)),q<=n&&f.set(0,0,1),j.crossVectors(g[0],f).normalize(),h[0].crossVectors(g[0],j),i[0].crossVectors(g[0],h[0])}var f=new c.Vector3,g=[],h=[],i=[],j=new c.Vector3,k=new c.Matrix4,l=b+1,m,n,o,p,q,r,s;for(this.tangents=g,this.normals=h,this.binormals=i,r=0;r<l;r++)s=r/(l-1),g[r]=a.getTangentAt(s),g[r].normalize();for(e(),r=1;r<l;r++)h[r]=h[r-1].clone(),i[r]=i[r-1].clone(),j.crossVectors(g[r-1],g[r]),j.length()>Number.EPSILON&&(j.normalize(),m=Math.acos(c.Math.clamp(g[r-1].dot(g[r]),-1,1)),h[r].applyMatrix4(k.makeRotationAxis(j,m))),i[r].crossVectors(g[r],h[r]);if(d)for(m=Math.acos(c.Math.clamp(h[0].dot(h[l-1]),-1,1)),m/=l-1,g[0].dot(j.crossVectors(h[0],h[l-1]))>0&&(m=-m),r=1;r<l;r++)h[r].applyMatrix4(k.makeRotationAxis(g[r],m*r)),i[r].crossVectors(g[r],h[r])},c.PolyhedronGeometry=function(a,b,d,e){function f(a){var b=a.normalize().clone();b.index=l.vertices.push(b)-1;var d=i(a)/2/Math.PI+.5,e=j(a)/Math.PI+.5;return b.uv=new c.Vector2(d,1-e),b}function g(a,b,d){var e=new c.Face3(a.index,b.index,d.index,[a.clone(),b.clone(),d.clone()]);l.faces.push(e),u.copy(a).add(b).add(d).divideScalar(3);var f=i(u);l.faceVertexUvs[0].push([k(a.uv,a,f),k(b.uv,b,f),k(d.uv,d,f)])}function h(a,b){for(var c=Math.pow(2,b),d=f(l.vertices[a.a]),e=f(l.vertices[a.b]),h=f(l.vertices[a.c]),i=[],j=0;j<=c;j++){i[j]=[];for(var k=f(d.clone().lerp(h,j/c)),m=f(e.clone().lerp(h,j/c)),n=c-j,o=0;o<=n;o++)0===o&&j===c?i[j][o]=k:i[j][o]=f(k.clone().lerp(m,o/n))}for(var j=0;j<c;j++)for(var o=0;o<2*(c-j)-1;o++){var p=Math.floor(o/2);o%2===0?g(i[j][p+1],i[j+1][p],i[j][p]):g(i[j][p+1],i[j+1][p+1],i[j+1][p])}}function i(a){return Math.atan2(a.z,-a.x)}function j(a){return Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))}function k(a,b,d){return d<0&&1===a.x&&(a=new c.Vector2(a.x-1,a.y)),0===b.x&&0===b.z&&(a=new c.Vector2(d/2/Math.PI+.5,a.y)),a.clone()}c.Geometry.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:a,indices:b,radius:d,detail:e},d=d||1,e=e||0;for(var l=this,m=0,n=a.length;m<n;m+=3)f(new c.Vector3(a[m],a[m+1],a[m+2]));for(var o=this.vertices,p=[],m=0,q=0,n=b.length;m<n;m+=3,
q++){var r=o[b[m]],s=o[b[m+1]],t=o[b[m+2]];p[q]=new c.Face3(r.index,s.index,t.index,[r.clone(),s.clone(),t.clone()])}for(var u=new c.Vector3,m=0,n=p.length;m<n;m++)h(p[m],e);for(var m=0,n=this.faceVertexUvs[0].length;m<n;m++){var v=this.faceVertexUvs[0][m],w=v[0].x,x=v[1].x,y=v[2].x,z=Math.max(w,x,y),A=Math.min(w,x,y);z>.9&&A<.1&&(w<.2&&(v[0].x+=1),x<.2&&(v[1].x+=1),y<.2&&(v[2].x+=1))}for(var m=0,n=this.vertices.length;m<n;m++)this.vertices[m].multiplyScalar(d);this.mergeVertices(),this.computeFaceNormals(),this.boundingSphere=new c.Sphere(new c.Vector3,d)},c.PolyhedronGeometry.prototype=Object.create(c.Geometry.prototype),c.PolyhedronGeometry.prototype.constructor=c.PolyhedronGeometry,c.DodecahedronGeometry=function(a,b){var d=(1+Math.sqrt(5))/2,e=1/d,f=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-e,-d,0,-e,d,0,e,-d,0,e,d,-e,-d,0,-e,d,0,e,-d,0,e,d,0,-d,0,-e,d,0,-e,-d,0,e,d,0,e],g=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];c.PolyhedronGeometry.call(this,f,g,a,b),this.type="DodecahedronGeometry",this.parameters={radius:a,detail:b}},c.DodecahedronGeometry.prototype=Object.create(c.PolyhedronGeometry.prototype),c.DodecahedronGeometry.prototype.constructor=c.DodecahedronGeometry,c.IcosahedronGeometry=function(a,b){var d=(1+Math.sqrt(5))/2,e=[-1,d,0,1,d,0,-1,-d,0,1,-d,0,0,-1,d,0,1,d,0,-1,-d,0,1,-d,d,0,-1,d,0,1,-d,0,-1,-d,0,1],f=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];c.PolyhedronGeometry.call(this,e,f,a,b),this.type="IcosahedronGeometry",this.parameters={radius:a,detail:b}},c.IcosahedronGeometry.prototype=Object.create(c.PolyhedronGeometry.prototype),c.IcosahedronGeometry.prototype.constructor=c.IcosahedronGeometry,c.OctahedronGeometry=function(a,b){var d=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],e=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];c.PolyhedronGeometry.call(this,d,e,a,b),this.type="OctahedronGeometry",this.parameters={radius:a,detail:b}},c.OctahedronGeometry.prototype=Object.create(c.PolyhedronGeometry.prototype),c.OctahedronGeometry.prototype.constructor=c.OctahedronGeometry,c.TetrahedronGeometry=function(a,b){var d=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],e=[2,1,0,0,3,2,1,3,0,2,3,1];c.PolyhedronGeometry.call(this,d,e,a,b),this.type="TetrahedronGeometry",this.parameters={radius:a,detail:b}},c.TetrahedronGeometry.prototype=Object.create(c.PolyhedronGeometry.prototype),c.TetrahedronGeometry.prototype.constructor=c.TetrahedronGeometry,c.ParametricGeometry=function(a,b,d){c.Geometry.call(this),this.type="ParametricGeometry",this.parameters={func:a,slices:b,stacks:d};var e=this.vertices,f=this.faces,g=this.faceVertexUvs[0],h,i,j,k,l,m=b+1;for(h=0;h<=d;h++)for(l=h/d,i=0;i<=b;i++)k=i/b,j=a(k,l),e.push(j);var n,o,p,q,r,s,t,u;for(h=0;h<d;h++)for(i=0;i<b;i++)n=h*m+i,o=h*m+i+1,p=(h+1)*m+i+1,q=(h+1)*m+i,r=new c.Vector2(i/b,h/d),s=new c.Vector2((i+1)/b,h/d),t=new c.Vector2((i+1)/b,(h+1)/d),u=new c.Vector2(i/b,(h+1)/d),f.push(new c.Face3(n,o,q)),g.push([r,s,u]),f.push(new c.Face3(o,p,q)),g.push([s.clone(),t,u.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},c.ParametricGeometry.prototype=Object.create(c.Geometry.prototype),c.ParametricGeometry.prototype.constructor=c.ParametricGeometry,c.WireframeGeometry=function(a){function b(a,b){return a-b}c.BufferGeometry.call(this);var d=[0,0],e={},f=["a","b","c"];if(a instanceof c.Geometry){for(var g=a.vertices,h=a.faces,i=0,j=new Uint32Array(6*h.length),k=0,l=h.length;k<l;k++)for(var m=h[k],n=0;n<3;n++){d[0]=m[f[n]],d[1]=m[f[(n+1)%3]],d.sort(b);var o=d.toString();void 0===e[o]&&(j[2*i]=d[0],j[2*i+1]=d[1],e[o]=!0,i++)}for(var p=new Float32Array(2*i*3),k=0,l=i;k<l;k++)for(var n=0;n<2;n++){var q=g[j[2*k+n]],r=6*k+3*n;p[r+0]=q.x,p[r+1]=q.y,p[r+2]=q.z}this.addAttribute("position",new c.BufferAttribute(p,3))}else if(a instanceof c.BufferGeometry)if(null!==a.index){var s=a.index.array,g=a.attributes.position,t=a.groups,i=0;0===t.length&&a.addGroup(0,s.length);for(var j=new Uint32Array(2*s.length),u=0,v=t.length;u<v;++u)for(var w=t[u],x=w.start,y=w.count,k=x,z=x+y;k<z;k+=3)for(var n=0;n<3;n++){d[0]=s[k+n],d[1]=s[k+(n+1)%3],d.sort(b);var o=d.toString();void 0===e[o]&&(j[2*i]=d[0],j[2*i+1]=d[1],e[o]=!0,i++)}for(var p=new Float32Array(2*i*3),k=0,l=i;k<l;k++)for(var n=0;n<2;n++){var r=6*k+3*n,A=j[2*k+n];p[r+0]=g.getX(A),p[r+1]=g.getY(A),p[r+2]=g.getZ(A)}this.addAttribute("position",new c.BufferAttribute(p,3))}else{for(var g=a.attributes.position.array,i=g.length/3,B=i/3,p=new Float32Array(2*i*3),k=0,l=B;k<l;k++)for(var n=0;n<3;n++){var r=18*k+6*n,C=9*k+3*n;p[r+0]=g[C],p[r+1]=g[C+1],p[r+2]=g[C+2];var A=9*k+3*((n+1)%3);p[r+3]=g[A],p[r+4]=g[A+1],p[r+5]=g[A+2]}this.addAttribute("position",new c.BufferAttribute(p,3))}},c.WireframeGeometry.prototype=Object.create(c.BufferGeometry.prototype),c.WireframeGeometry.prototype.constructor=c.WireframeGeometry,c.AxisHelper=function(a){a=a||1;var b=new Float32Array([0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a]),d=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]),e=new c.BufferGeometry;e.addAttribute("position",new c.BufferAttribute(b,3)),e.addAttribute("color",new c.BufferAttribute(d,3));var f=new c.LineBasicMaterial({vertexColors:c.VertexColors});c.LineSegments.call(this,e,f)},c.AxisHelper.prototype=Object.create(c.LineSegments.prototype),c.AxisHelper.prototype.constructor=c.AxisHelper,c.ArrowHelper=function(){var a=new c.BufferGeometry;a.addAttribute("position",new c.Float32Attribute([0,0,0,0,1,0],3));var b=new c.CylinderBufferGeometry(0,.5,1,5,1);return b.translate(0,-.5,0),function d(e,f,g,h,i,j){c.Object3D.call(this),void 0===h&&(h=16776960),void 0===g&&(g=1),void 0===i&&(i=.2*g),void 0===j&&(j=.2*i),this.position.copy(f),this.line=new c.Line(a,new c.LineBasicMaterial({color:h})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new c.Mesh(b,new c.MeshBasicMaterial({color:h})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(g,i,j)}}(),c.ArrowHelper.prototype=Object.create(c.Object3D.prototype),c.ArrowHelper.prototype.constructor=c.ArrowHelper,c.ArrowHelper.prototype.setDirection=function(){var a=new c.Vector3,b;return function d(c){c.y>.99999?this.quaternion.set(0,0,0,1):c.y<-.99999?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}(),c.ArrowHelper.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a),void 0===c&&(c=.2*b),this.line.scale.set(1,Math.max(0,a-b),1),this.line.updateMatrix(),this.cone.scale.set(c,b,c),this.cone.position.y=a,this.cone.updateMatrix()},c.ArrowHelper.prototype.setColor=function(a){this.line.material.color.copy(a),this.cone.material.color.copy(a)},c.BoxHelper=function(a,b){void 0===b&&(b=16776960);var d=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),e=new Float32Array(24),f=new c.BufferGeometry;f.setIndex(new c.BufferAttribute(d,1)),f.addAttribute("position",new c.BufferAttribute(e,3)),c.LineSegments.call(this,f,new c.LineBasicMaterial({color:b})),void 0!==a&&this.update(a)},c.BoxHelper.prototype=Object.create(c.LineSegments.prototype),c.BoxHelper.prototype.constructor=c.BoxHelper,c.BoxHelper.prototype.update=function(){var a=new c.Box3;return function b(d){if(d instanceof c.Box3?a.copy(d):a.setFromObject(d),!a.isEmpty()){var e=a.min,f=a.max,g=this.geometry.attributes.position,h=g.array;h[0]=f.x,h[1]=f.y,h[2]=f.z,h[3]=e.x,h[4]=f.y,h[5]=f.z,h[6]=e.x,h[7]=e.y,h[8]=f.z,h[9]=f.x,h[10]=e.y,h[11]=f.z,h[12]=f.x,h[13]=f.y,h[14]=e.z,h[15]=e.x,h[16]=f.y,h[17]=e.z,h[18]=e.x,h[19]=e.y,h[20]=e.z,h[21]=f.x,h[22]=e.y,h[23]=e.z,g.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),c.BoundingBoxHelper=function(a,b){var d=void 0!==b?b:8947848;this.object=a,this.box=new c.Box3,c.Mesh.call(this,new c.BoxGeometry(1,1,1),new c.MeshBasicMaterial({color:d,wireframe:!0}))},c.BoundingBoxHelper.prototype=Object.create(c.Mesh.prototype),c.BoundingBoxHelper.prototype.constructor=c.BoundingBoxHelper,c.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object),this.box.size(this.scale),this.box.center(this.position)},c.CameraHelper=function(a){function b(a,b,c){d(a,c),d(b,c)}function d(a,b){e.vertices.push(new c.Vector3),e.colors.push(new c.Color(b)),void 0===g[a]&&(g[a]=[]),g[a].push(e.vertices.length-1)}var e=new c.Geometry,f=new c.LineBasicMaterial({color:16777215,vertexColors:c.FaceColors}),g={},h=16755200,i=16711680,j=43775,k=16777215,l=3355443;b("n1","n2",h),b("n2","n4",h),b("n4","n3",h),b("n3","n1",h),b("f1","f2",h),b("f2","f4",h),b("f4","f3",h),b("f3","f1",h),b("n1","f1",h),b("n2","f2",h),b("n3","f3",h),b("n4","f4",h),b("p","n1",i),b("p","n2",i),b("p","n3",i),b("p","n4",i),b("u1","u2",j),b("u2","u3",j),b("u3","u1",j),b("c","t",k),b("p","c",l),b("cn1","cn2",l),b("cn3","cn4",l),b("cf1","cf2",l),b("cf3","cf4",l),c.LineSegments.call(this,e,f),this.camera=a,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=g,this.update()},c.CameraHelper.prototype=Object.create(c.LineSegments.prototype),c.CameraHelper.prototype.constructor=c.CameraHelper,c.CameraHelper.prototype.update=function(){function a(a,c,g,h){e.set(c,g,h).unproject(f);var i=d[a];if(void 0!==i)for(var j=0,k=i.length;j<k;j++)b.vertices[i[j]].copy(e)}var b,d,e=new c.Vector3,f=new c.Camera;return function g(){b=this.geometry,d=this.pointMap;var c=1,e=1;f.projectionMatrix.copy(this.camera.projectionMatrix),a("c",0,0,-1),a("t",0,0,1),a("n1",-c,-e,-1),a("n2",c,-e,-1),a("n3",-c,e,-1),a("n4",c,e,-1),a("f1",-c,-e,1),a("f2",c,-e,1),a("f3",-c,e,1),a("f4",c,e,1),a("u1",.7*c,1.1*e,-1),a("u2",.7*-c,1.1*e,-1),a("u3",0,2*e,-1),a("cf1",-c,0,1),a("cf2",c,0,1),a("cf3",0,-e,1),a("cf4",0,e,1),a("cn1",-c,0,-1),a("cn2",c,0,-1),a("cn3",0,-e,-1),a("cn4",0,e,-1),b.verticesNeedUpdate=!0}}(),c.DirectionalLightHelper=function(a,b){c.Object3D.call(this),this.light=a,this.light.updateMatrixWorld(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,void 0===b&&(b=1);var d=new c.BufferGeometry;d.addAttribute("position",new c.Float32Attribute([-b,b,0,b,b,0,b,-b,0,-b,-b,0,-b,b,0],3));var e=new c.LineBasicMaterial({fog:!1});this.add(new c.Line(d,e)),d=new c.BufferGeometry,d.addAttribute("position",new c.Float32Attribute([0,0,0,0,0,1],3)),this.add(new c.Line(d,e)),this.update()},c.DirectionalLightHelper.prototype=Object.create(c.Object3D.prototype),c.DirectionalLightHelper.prototype.constructor=c.DirectionalLightHelper,c.DirectionalLightHelper.prototype.dispose=function(){var a=this.children[0],b=this.children[1];a.geometry.dispose(),a.material.dispose(),b.geometry.dispose(),b.material.dispose()},c.DirectionalLightHelper.prototype.update=function(){var a=new c.Vector3,b=new c.Vector3,d=new c.Vector3;return function e(){a.setFromMatrixPosition(this.light.matrixWorld),b.setFromMatrixPosition(this.light.target.matrixWorld),d.subVectors(b,a);var c=this.children[0],e=this.children[1];c.lookAt(d),c.material.color.copy(this.light.color).multiplyScalar(this.light.intensity),e.lookAt(d),e.scale.z=d.length()}}(),c.EdgesHelper=function(a,b,d){var e=void 0!==b?b:16777215;c.LineSegments.call(this,new c.EdgesGeometry(a.geometry,d),new c.LineBasicMaterial({color:e})),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1},c.EdgesHelper.prototype=Object.create(c.LineSegments.prototype),c.EdgesHelper.prototype.constructor=c.EdgesHelper,c.FaceNormalsHelper=function(a,b,d,e){this.object=a,this.size=void 0!==b?b:1;var f=void 0!==d?d:16776960,g=void 0!==e?e:1,h=0,i=this.object.geometry;i instanceof c.Geometry?h=i.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var j=new c.BufferGeometry,k=new c.Float32Attribute(2*h*3,3);j.addAttribute("position",k),c.LineSegments.call(this,j,new c.LineBasicMaterial({color:f,linewidth:g})),this.matrixAutoUpdate=!1,this.update()},c.FaceNormalsHelper.prototype=Object.create(c.LineSegments.prototype),c.FaceNormalsHelper.prototype.constructor=c.FaceNormalsHelper,c.FaceNormalsHelper.prototype.update=function(){var a=new c.Vector3,b=new c.Vector3,d=new c.Matrix3;return function e(){this.object.updateMatrixWorld(!0),d.getNormalMatrix(this.object.matrixWorld);for(var c=this.object.matrixWorld,e=this.geometry.attributes.position,f=this.object.geometry,g=f.vertices,h=f.faces,i=0,j=0,k=h.length;j<k;j++){var l=h[j],m=l.normal;a.copy(g[l.a]).add(g[l.b]).add(g[l.c]).divideScalar(3).applyMatrix4(c),b.copy(m).applyMatrix3(d).normalize().multiplyScalar(this.size).add(a),e.setXYZ(i,a.x,a.y,a.z),i+=1,e.setXYZ(i,b.x,b.y,b.z),i+=1}return e.needsUpdate=!0,this}}(),c.GridHelper=function(a,b,d,e){b=b||1,d=new c.Color(void 0!==d?d:4473924),e=new c.Color(void 0!==e?e:8947848);for(var f=b/2,g=2*a/b,h=[],i=[],j=0,k=0,l=-a;j<=b;j++,l+=g){h.push(-a,0,l,a,0,l),h.push(l,0,-a,l,0,a);var m=j===f?d:e;m.toArray(i,k),k+=3,m.toArray(i,k),k+=3,m.toArray(i,k),k+=3,m.toArray(i,k),k+=3}var n=new c.BufferGeometry;n.addAttribute("position",new c.Float32Attribute(h,3)),n.addAttribute("color",new c.Float32Attribute(i,3));var o=new c.LineBasicMaterial({vertexColors:c.VertexColors});c.LineSegments.call(this,n,o)},c.GridHelper.prototype=Object.create(c.LineSegments.prototype),c.GridHelper.prototype.constructor=c.GridHelper,c.GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},c.HemisphereLightHelper=function(a,b){c.Object3D.call(this),this.light=a,this.light.updateMatrixWorld(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,this.colors=[new c.Color,new c.Color];var d=new c.SphereGeometry(b,4,2);d.rotateX(-Math.PI/2);for(var e=0,f=8;e<f;e++)d.faces[e].color=this.colors[e<4?0:1];var g=new c.MeshBasicMaterial({vertexColors:c.FaceColors,wireframe:!0});this.lightSphere=new c.Mesh(d,g),this.add(this.lightSphere),this.update()},c.HemisphereLightHelper.prototype=Object.create(c.Object3D.prototype),c.HemisphereLightHelper.prototype.constructor=c.HemisphereLightHelper,c.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose(),this.lightSphere.material.dispose()},c.HemisphereLightHelper.prototype.update=function(){var a=new c.Vector3;return function b(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity),this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity),this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate()),this.lightSphere.geometry.colorsNeedUpdate=!0}}(),c.PointLightHelper=function(a,b){this.light=a,this.light.updateMatrixWorld();var d=new c.SphereBufferGeometry(b,4,2),e=new c.MeshBasicMaterial({wireframe:!0,fog:!1});e.color.copy(this.light.color).multiplyScalar(this.light.intensity),c.Mesh.call(this,d,e),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1},c.PointLightHelper.prototype=Object.create(c.Mesh.prototype),c.PointLightHelper.prototype.constructor=c.PointLightHelper,c.PointLightHelper.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},c.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)},c.SkeletonHelper=function(a){this.bones=this.getBoneList(a);for(var b=new c.Geometry,d=0;d<this.bones.length;d++){var e=this.bones[d];e.parent instanceof c.Bone&&(b.vertices.push(new c.Vector3),b.vertices.push(new c.Vector3),b.colors.push(new c.Color(0,0,1)),b.colors.push(new c.Color(0,1,0)))}b.dynamic=!0;var f=new c.LineBasicMaterial({vertexColors:c.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});c.LineSegments.call(this,b,f),this.root=a,this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,this.update()},c.SkeletonHelper.prototype=Object.create(c.LineSegments.prototype),c.SkeletonHelper.prototype.constructor=c.SkeletonHelper,c.SkeletonHelper.prototype.getBoneList=function(a){var b=[];a instanceof c.Bone&&b.push(a);for(var d=0;d<a.children.length;d++)b.push.apply(b,this.getBoneList(a.children[d]));return b},c.SkeletonHelper.prototype.update=function(){for(var a=this.geometry,b=(new c.Matrix4).getInverse(this.root.matrixWorld),d=new c.Matrix4,e=0,f=0;f<this.bones.length;f++){var g=this.bones[f];g.parent instanceof c.Bone&&(d.multiplyMatrices(b,g.matrixWorld),a.vertices[e].setFromMatrixPosition(d),d.multiplyMatrices(b,g.parent.matrixWorld),a.vertices[e+1].setFromMatrixPosition(d),e+=2)}a.verticesNeedUpdate=!0,a.computeBoundingSphere()},c.SpotLightHelper=function(a){c.Object3D.call(this),this.light=a,this.light.updateMatrixWorld(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1;for(var b=new c.BufferGeometry,d=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],e=0,f=1,g=32;e<g;e++,f++){var h=e/g*Math.PI*2,i=f/g*Math.PI*2;d.push(Math.cos(h),Math.sin(h),1,Math.cos(i),Math.sin(i),1)}b.addAttribute("position",new c.Float32Attribute(d,3));var j=new c.LineBasicMaterial({fog:!1});this.cone=new c.LineSegments(b,j),this.add(this.cone),this.update()},c.SpotLightHelper.prototype=Object.create(c.Object3D.prototype),c.SpotLightHelper.prototype.constructor=c.SpotLightHelper,c.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},c.SpotLightHelper.prototype.update=function(){var a=new c.Vector3,b=new c.Vector3;return function d(){var c=this.light.distance?this.light.distance:1e3,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c),a.setFromMatrixPosition(this.light.matrixWorld),b.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(b.sub(a)),this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}(),c.VertexNormalsHelper=function(a,b,d,e){this.object=a,this.size=void 0!==b?b:1;var f=void 0!==d?d:16711680,g=void 0!==e?e:1,h=0,i=this.object.geometry;i instanceof c.Geometry?h=3*i.faces.length:i instanceof c.BufferGeometry&&(h=i.attributes.normal.count);var j=new c.BufferGeometry,k=new c.Float32Attribute(2*h*3,3);j.addAttribute("position",k),c.LineSegments.call(this,j,new c.LineBasicMaterial({color:f,linewidth:g})),this.matrixAutoUpdate=!1,this.update()},c.VertexNormalsHelper.prototype=Object.create(c.LineSegments.prototype),c.VertexNormalsHelper.prototype.constructor=c.VertexNormalsHelper,c.VertexNormalsHelper.prototype.update=function(){var a=new c.Vector3,b=new c.Vector3,d=new c.Matrix3;return function e(){var e=["a","b","c"];this.object.updateMatrixWorld(!0),d.getNormalMatrix(this.object.matrixWorld);var f=this.object.matrixWorld,g=this.geometry.attributes.position,h=this.object.geometry;if(h instanceof c.Geometry)for(var i=h.vertices,j=h.faces,k=0,l=0,m=j.length;l<m;l++)for(var n=j[l],o=0,p=n.vertexNormals.length;o<p;o++){var q=i[n[e[o]]],r=n.vertexNormals[o];a.copy(q).applyMatrix4(f),b.copy(r).applyMatrix3(d).normalize().multiplyScalar(this.size).add(a),g.setXYZ(k,a.x,a.y,a.z),k+=1,g.setXYZ(k,b.x,b.y,b.z),k+=1}else if(h instanceof c.BufferGeometry)for(var s=h.attributes.position,t=h.attributes.normal,k=0,o=0,p=s.count;o<p;o++)a.set(s.getX(o),s.getY(o),s.getZ(o)).applyMatrix4(f),b.set(t.getX(o),t.getY(o),t.getZ(o)),b.applyMatrix3(d).normalize().multiplyScalar(this.size).add(a),g.setXYZ(k,a.x,a.y,a.z),k+=1,g.setXYZ(k,b.x,b.y,b.z),k+=1;return g.needsUpdate=!0,this}}(),c.WireframeHelper=function(a,b){var d=void 0!==b?b:16777215;c.LineSegments.call(this,new c.WireframeGeometry(a.geometry),new c.LineBasicMaterial({color:d})),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1},c.WireframeHelper.prototype=Object.create(c.LineSegments.prototype),c.WireframeHelper.prototype.constructor=c.WireframeHelper,c.ImmediateRenderObject=function(a){c.Object3D.call(this),this.material=a,this.render=function(a){}},c.ImmediateRenderObject.prototype=Object.create(c.Object3D.prototype),c.ImmediateRenderObject.prototype.constructor=c.ImmediateRenderObject,c.MorphBlendMesh=function(a,b){c.Mesh.call(this,a,b),this.animationsMap={},this.animationsList=[];var d=this.geometry.morphTargets.length,e="__default",f=0,g=d-1,h=d/1;this.createAnimation(e,f,g,h),this.setAnimationWeight(e,1)},c.MorphBlendMesh.prototype=Object.create(c.Mesh.prototype),c.MorphBlendMesh.prototype.constructor=c.MorphBlendMesh,c.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){var e={start:b,end:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=e,this.animationsList.push(e)},c.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)_?(\d+)/i,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f],i=h.name.match(b);if(i&&i.length>1){var j=i[1];d[j]||(d[j]={start:1/0,end:-(1/0)});var k=d[j];f<k.start&&(k.start=f),f>k.end&&(k.end=f),c||(c=j)}}for(var j in d){var k=d[j];this.createAnimation(j,k.start,k.end,a)}this.firstAnimation=c},c.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){var b=this.animationsMap[a];b&&(b.direction=1,b.directionBackwards=!1)},c.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){var b=this.animationsMap[a];b&&(b.direction=-1,b.directionBackwards=!0)},c.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)},c.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)},c.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)},c.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)},c.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0,c=this.animationsMap[a];return c&&(b=c.time),b},c.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1,c=this.animationsMap[a];return c&&(b=c.duration),b},c.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];b?(b.time=0,b.active=!0):console.warn("THREE.MorphBlendMesh: animation["+a+"] undefined in .playAnimation()")},c.MorphBlendMesh.prototype.stopAnimation=function(a){var b=this.animationsMap[a];b&&(b.active=!1)},c.MorphBlendMesh.prototype.update=function(a){for(var b=0,d=this.animationsList.length;b<d;b++){var e=this.animationsList[b];if(e.active){var f=e.duration/e.length;e.time+=e.direction*a,e.mirroredLoop?(e.time>e.duration||e.time<0)&&(e.direction*=-1,e.time>e.duration&&(e.time=e.duration,e.directionBackwards=!0),e.time<0&&(e.time=0,e.directionBackwards=!1)):(e.time=e.time%e.duration,e.time<0&&(e.time+=e.duration));var g=e.start+c.Math.clamp(Math.floor(e.time/f),0,e.length-1),h=e.weight;g!==e.currentFrame&&(this.morphTargetInfluences[e.lastFrame]=0,this.morphTargetInfluences[e.currentFrame]=1*h,this.morphTargetInfluences[g]=0,e.lastFrame=e.currentFrame,e.currentFrame=g);var i=e.time%f/f;e.directionBackwards&&(i=1-i),e.currentFrame!==e.lastFrame?(this.morphTargetInfluences[e.currentFrame]=i*h,this.morphTargetInfluences[e.lastFrame]=(1-i)*h):this.morphTargetInfluences[e.currentFrame]=h}}},b["true"]=a}({},function(){return this}());
=======



<!DOCTYPE html>
<html lang="en" class=" is-copy-enabled">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    <meta name="viewport" content="width=1020">
    
    
    <title>three.js/three.min.js at master · mrdoob/three.js · GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="mrdoob/three.js" name="twitter:title" /><meta content="three.js - JavaScript 3D library." name="twitter:description" /><meta content="https://avatars1.githubusercontent.com/u/97088?v=3&amp;s=400" name="twitter:image:src" />
      <meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars1.githubusercontent.com/u/97088?v=3&amp;s=400" property="og:image" /><meta content="mrdoob/three.js" property="og:title" /><meta content="https://github.com/mrdoob/three.js" property="og:url" /><meta content="three.js - JavaScript 3D library." property="og:description" />
      <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">
    <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">
    <link rel="assets" href="https://assets-cdn.github.com/">
    
    <meta name="pjax-timeout" content="1000">
    

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
        <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="18CDD7DE:75C9:629D909:55FB7E56" name="octolytics-dimension-request_id" />
    
    <meta content="Rails, view, blob#show" data-pjax-transient="true" name="analytics-event" />
    <meta class="js-ga-set" name="dimension1" content="Logged Out">
      <meta class="js-ga-set" name="dimension4" content="Current repo nav">
    <meta name="is-dotcom" content="true">
        <meta name="hostname" content="github.com">
    <meta name="user-login" content="">

      <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#4078c0">
      <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">

    <!-- </textarea> --><!-- '"` --><meta content="authenticity_token" name="csrf-param" />
<meta content="zF0SOdGR4ZY5I9rHnN2UokTFSG79GbqrxjG581YSu8cw6voPO1xzFecwAnwPpBmTkD8SjEc507Bc5I5Th6KqIA==" name="csrf-token" />
    

    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-aef3088517c60128e10c5cce8d392985504018745a58a13691f1a278951852bb.css" media="all" rel="stylesheet" />
    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github2-eba1f472eb1c7c893e4310c05138905845443f7f2469812a9bd2ba71aa488cc5.css" media="all" rel="stylesheet" />
    
    


    <meta http-equiv="x-pjax-version" content="87dbf4dad0b70976ed64b3bf4976701e">

      
  <meta name="description" content="three.js - JavaScript 3D library.">
  <meta name="go-import" content="github.com/mrdoob/three.js git https://github.com/mrdoob/three.js.git">

  <meta content="97088" name="octolytics-dimension-user_id" /><meta content="mrdoob" name="octolytics-dimension-user_login" /><meta content="576201" name="octolytics-dimension-repository_id" /><meta content="mrdoob/three.js" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="576201" name="octolytics-dimension-repository_network_root_id" /><meta content="mrdoob/three.js" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/mrdoob/three.js/commits/master.atom" rel="alternate" title="Recent Commits to three.js:master" type="application/atom+xml">

  </head>


  <body class="logged_out  env-production windows vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>

    
    
    



      
      <div class="header header-logged-out" role="banner">
  <div class="container clearfix">

    <a class="header-logo-wordmark" href="https://github.com/" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
      <span class="mega-octicon octicon-logo-github"></span>
    </a>

    <div class="header-actions" role="navigation">
        <a class="btn btn-primary" href="/join" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up">Sign up</a>
      <a class="btn" href="/login?return_to=%2Fmrdoob%2Fthree.js%2Fblob%2Fmaster%2Fbuild%2Fthree.min.js" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">Sign in</a>
    </div>

    <div class="site-search repo-scope js-site-search" role="search">
      <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/mrdoob/three.js/search" class="js-site-search-form" data-global-search-url="/search" data-repo-search-url="/mrdoob/three.js/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
  <label class="js-chromeless-input-container form-control">
    <div class="scope-badge">This repository</div>
    <input type="text"
      class="js-site-search-focus js-site-search-field is-clearable chromeless-input"
      data-hotkey="s"
      name="q"
      placeholder="Search"
      aria-label="Search this repository"
      data-global-scope-placeholder="Search GitHub"
      data-repo-scope-placeholder="Search"
      tabindex="1"
      autocapitalize="off">
  </label>
</form>
    </div>

      <ul class="header-nav left" role="navigation">
          <li class="header-nav-item">
            <a class="header-nav-link" href="/explore" data-ga-click="(Logged out) Header, go to explore, text:explore">Explore</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/features" data-ga-click="(Logged out) Header, go to features, text:features">Features</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://enterprise.github.com/" data-ga-click="(Logged out) Header, go to enterprise, text:enterprise">Enterprise</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/pricing" data-ga-click="(Logged out) Header, go to pricing, text:pricing">Pricing</a>
          </li>
      </ul>

  </div>
</div>



    <div id="start-of-content" class="accessibility-aid"></div>

    <div id="js-flash-container">
</div>


    <div role="main" class="main-content">
        <div itemscope itemtype="http://schema.org/WebPage">
    <div class="pagehead repohead instapaper_ignore readability-menu">

      <div class="container">

        <div class="clearfix">
          
<ul class="pagehead-actions">

  <li>
      <a href="/login?return_to=%2Fmrdoob%2Fthree.js"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to watch a repository" rel="nofollow">
    <span class="octicon octicon-eye"></span>
    Watch
  </a>
  <a class="social-count" href="/mrdoob/three.js/watchers">
    1,413
  </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fmrdoob%2Fthree.js"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <span class="octicon octicon-star"></span>
    Star
  </a>

    <a class="social-count js-social-count" href="/mrdoob/three.js/stargazers">
      21,136
    </a>

  </li>

    <li>
      <a href="/login?return_to=%2Fmrdoob%2Fthree.js"
        class="btn btn-sm btn-with-count tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <span class="octicon octicon-repo-forked"></span>
        Fork
      </a>
      <a href="/mrdoob/three.js/network" class="social-count">
        6,469
      </a>
    </li>
</ul>

          <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public ">
  <span class="mega-octicon octicon-repo"></span>
  <span class="author"><a href="/mrdoob" class="url fn" itemprop="url" rel="author"><span itemprop="title">mrdoob</span></a></span><!--
--><span class="path-divider">/</span><!--
--><strong><a href="/mrdoob/three.js" data-pjax="#js-repo-pjax-container">three.js</a></strong>

  <span class="page-context-loader">
    <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
  </span>

</h1>

        </div>
      </div>
    </div>

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline ">
        <div class="repository-sidebar clearfix">
          
<nav class="sunken-menu repo-nav js-repo-nav js-sidenav-container-pjax js-octicon-loaders"
     role="navigation"
     data-pjax="#js-repo-pjax-container"
     data-issue-count-url="/mrdoob/three.js/issues/counts">
  <ul class="sunken-menu-group">
    <li class="tooltipped tooltipped-w" aria-label="Code">
      <a href="/mrdoob/three.js" aria-label="Code" aria-selected="true" class="js-selected-navigation-item selected sunken-menu-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /mrdoob/three.js">
        <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

      <li class="tooltipped tooltipped-w" aria-label="Issues">
        <a href="/mrdoob/three.js/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /mrdoob/three.js/issues">
          <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
          <span class="js-issue-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

    <li class="tooltipped tooltipped-w" aria-label="Pull requests">
      <a href="/mrdoob/three.js/pulls" aria-label="Pull requests" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g p" data-selected-links="repo_pulls /mrdoob/three.js/pulls">
          <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull requests</span>
          <span class="js-pull-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

      <li class="tooltipped tooltipped-w" aria-label="Wiki">
        <a href="/mrdoob/three.js/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g w" data-selected-links="repo_wiki /mrdoob/three.js/wiki">
          <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
  </ul>
  <div class="sunken-menu-separator"></div>
  <ul class="sunken-menu-group">

    <li class="tooltipped tooltipped-w" aria-label="Pulse">
      <a href="/mrdoob/three.js/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-selected-links="pulse /mrdoob/three.js/pulse">
        <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

    <li class="tooltipped tooltipped-w" aria-label="Graphs">
      <a href="/mrdoob/three.js/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-selected-links="repo_graphs repo_contributors /mrdoob/three.js/graphs">
        <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>
  </ul>


</nav>

            <div class="only-with-full-nav">
                
<div class="js-clone-url clone-url open"
  data-protocol-type="http">
  <h3><span class="text-emphasized">HTTPS</span> clone URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/mrdoob/three.js.git" readonly="readonly" aria-label="HTTPS clone URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="js-clone-url clone-url "
  data-protocol-type="subversion">
  <h3><span class="text-emphasized">Subversion</span> checkout URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/mrdoob/three.js" readonly="readonly" aria-label="Subversion checkout URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>



<div class="clone-options">You can clone with
  <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone" class="inline-form js-clone-selector-form " data-form-nonce="b7a5b696755f50482047ace364b94f97779f67ab" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="WewEpxPkYVDuQnYAO8HS4oqtQoFPT29ca0s2+4Gn7n3IPu0eHQ3sMbFEvfaCmMOxWc2V5MK5/lceCkh2YanU+w==" /></div><button class="btn-link js-clone-selector" data-protocol="http" type="submit">HTTPS</button></form> or <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone" class="inline-form js-clone-selector-form " data-form-nonce="b7a5b696755f50482047ace364b94f97779f67ab" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="MS7VAkkSGYVcTXhhlOib88cOvfT0INuqQecDZRGTdmnD613bmCO3ytxjk04hdhcc+ME9XRrBsBKAYBWgmf8+TQ==" /></div><button class="btn-link js-clone-selector" data-protocol="subversion" type="submit">Subversion</button></form>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</div>
  <a href="https://windows.github.com" class="btn btn-sm sidebar-button" title="Save mrdoob/three.js to your computer and use it in GitHub Desktop." aria-label="Save mrdoob/three.js to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-desktop-download"></span>
    Clone in Desktop
  </a>

              <a href="/mrdoob/three.js/archive/master.zip"
                 class="btn btn-sm sidebar-button"
                 aria-label="Download the contents of mrdoob/three.js as a zip file"
                 title="Download the contents of mrdoob/three.js as a zip file"
                 rel="nofollow">
                <span class="octicon octicon-cloud-download"></span>
                Download ZIP
              </a>
            </div>
        </div>
        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>

          

<a href="/mrdoob/three.js/blob/5c6ec4a60dd4862eb55ab07dde8aab68404fd293/build/three.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:a6bf8dd0325b159f37e2e5e9964df9df -->

  <div class="file-navigation js-zeroclipboard-container">
    
<div class="select-menu js-menu-container js-select-menu left">
  <span class="btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-ref="master"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <i>Branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/mrdoob/three.js/blob/dev/build/three.min.js"
               data-name="dev"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="dev">
                dev
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/mrdoob/three.js/blob/gh-pages/build/three.min.js"
               data-name="gh-pages"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="gh-pages">
                gh-pages
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/mrdoob/three.js/blob/master/build/three.min.js"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="master">
                master
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r72/build/three.min.js"
                 data-name="r72"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r72">r72</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r71/build/three.min.js"
                 data-name="r71"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r71">r71</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r70/build/three.min.js"
                 data-name="r70"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r70">r70</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r69/build/three.min.js"
                 data-name="r69"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r69">r69</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r68/build/three.min.js"
                 data-name="r68"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r68">r68</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r67/build/three.min.js"
                 data-name="r67"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r67">r67</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r66/build/three.min.js"
                 data-name="r66"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r66">r66</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r65/build/three.min.js"
                 data-name="r65"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r65">r65</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r64/build/three.min.js"
                 data-name="r64"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r64">r64</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r63/build/three.min.js"
                 data-name="r63"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r63">r63</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r62/build/three.min.js"
                 data-name="r62"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r62">r62</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r61/build/three.min.js"
                 data-name="r61"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r61">r61</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r60/build/three.min.js"
                 data-name="r60"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r60">r60</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r59/build/three.min.js"
                 data-name="r59"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r59">r59</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r58/build/three.min.js"
                 data-name="r58"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r58">r58</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r57/build/three.min.js"
                 data-name="r57"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r57">r57</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r56/build/three.min.js"
                 data-name="r56"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r56">r56</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r55/build/three.min.js"
                 data-name="r55"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r55">r55</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r54/build/three.min.js"
                 data-name="r54"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r54">r54</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r53/build/three.min.js"
                 data-name="r53"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r53">r53</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r52/build/three.min.js"
                 data-name="r52"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r52">r52</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r51/build/three.min.js"
                 data-name="r51"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r51">r51</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r50/build/three.min.js"
                 data-name="r50"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r50">r50</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r49/build/three.min.js"
                 data-name="r49"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r49">r49</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r48/build/three.min.js"
                 data-name="r48"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r48">r48</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r47/build/three.min.js"
                 data-name="r47"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r47">r47</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r46/build/three.min.js"
                 data-name="r46"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r46">r46</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r45/build/three.min.js"
                 data-name="r45"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r45">r45</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r44/build/three.min.js"
                 data-name="r44"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r44">r44</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r43/build/three.min.js"
                 data-name="r43"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r43">r43</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r42/build/three.min.js"
                 data-name="r42"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r42">r42</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r41/ROME/build/three.min.js"
                 data-name="r41/ROME"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r41/ROME">r41/ROME</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r40/build/three.min.js"
                 data-name="r40"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r40">r40</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r39/build/three.min.js"
                 data-name="r39"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r39">r39</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r38/build/three.min.js"
                 data-name="r38"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r38">r38</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r37/build/three.min.js"
                 data-name="r37"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r37">r37</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r36/build/three.min.js"
                 data-name="r36"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r36">r36</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r35/build/three.min.js"
                 data-name="r35"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r35">r35</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r34/build/three.min.js"
                 data-name="r34"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r34">r34</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r33/build/three.min.js"
                 data-name="r33"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r33">r33</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r32/build/three.min.js"
                 data-name="r32"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r32">r32</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r31/build/three.min.js"
                 data-name="r31"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r31">r31</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r30/build/three.min.js"
                 data-name="r30"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r30">r30</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r29/build/three.min.js"
                 data-name="r29"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r29">r29</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r28/build/three.min.js"
                 data-name="r28"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r28">r28</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r25/build/three.min.js"
                 data-name="r25"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r25">r25</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r18/build/three.min.js"
                 data-name="r18"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r18">r18</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r17/build/three.min.js"
                 data-name="r17"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r17">r17</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r16/build/three.min.js"
                 data-name="r16"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r16">r16</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r15/build/three.min.js"
                 data-name="r15"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r15">r15</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r14/build/three.min.js"
                 data-name="r14"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r14">r14</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r13/build/three.min.js"
                 data-name="r13"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r13">r13</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r12/build/three.min.js"
                 data-name="r12"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r12">r12</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r11/build/three.min.js"
                 data-name="r11"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r11">r11</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r10/build/three.min.js"
                 data-name="r10"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r10">r10</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r9/build/three.min.js"
                 data-name="r9"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r9">r9</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r8/build/three.min.js"
                 data-name="r8"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r8">r8</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r7/build/three.min.js"
                 data-name="r7"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r7">r7</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r6/build/three.min.js"
                 data-name="r6"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r6">r6</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r5/build/three.min.js"
                 data-name="r5"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r5">r5</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r4/build/three.min.js"
                 data-name="r4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r4">r4</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r3/build/three.min.js"
                 data-name="r3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r3">r3</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r2/build/three.min.js"
                 data-name="r2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r2">r2</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/mrdoob/three.js/tree/r1/build/three.min.js"
                 data-name="r1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="r1">r1</a>
            </div>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="btn-group right">
      <a href="/mrdoob/three.js/find/master"
            class="js-show-file-finder btn btn-sm empty-icon tooltipped tooltipped-nw"
            data-pjax
            data-hotkey="t"
            aria-label="Quickly jump between files">
        <span class="octicon octicon-list-unordered"></span>
      </a>
      <button aria-label="Copy file path to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </div>

    <div class="breadcrumb js-zeroclipboard-target">
      <span class="repo-root js-repo-root"><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/mrdoob/three.js" class="" data-branch="master" data-pjax="true" itemscope="url"><span itemprop="title">three.js</span></a></span></span><span class="separator">/</span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/mrdoob/three.js/tree/master/build" class="" data-branch="master" data-pjax="true" itemscope="url"><span itemprop="title">build</span></a></span><span class="separator">/</span><strong class="final-path">three.min.js</strong>
    </div>
  </div>


  <div class="commit file-history-tease">
    <div class="file-history-tease-header">
        <img alt="@mrdoob" class="avatar" height="24" src="https://avatars1.githubusercontent.com/u/97088?v=3&amp;s=48" width="24" />
        <span class="author"><a href="/mrdoob" rel="author">mrdoob</a></span>
        <time datetime="2015-09-15T21:51:01Z" is="relative-time">Sep 15, 2015</time>
        <div class="commit-title">
            <a href="/mrdoob/three.js/commit/5c6ec4a60dd4862eb55ab07dde8aab68404fd293" class="message" data-pjax="true" title="Updated builds.">Updated builds.</a>
        </div>
    </div>

    <div class="participation">
      <p class="quickstat">
        <a href="#blob_contributors_box" rel="facebox">
          <strong>10</strong>
           contributors
        </a>
      </p>
          <a class="avatar-link tooltipped tooltipped-s" aria-label="mrdoob" href="/mrdoob/three.js/commits/master/build/three.min.js?author=mrdoob"><img alt="@mrdoob" class="avatar" height="20" src="https://avatars3.githubusercontent.com/u/97088?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="alteredq" href="/mrdoob/three.js/commits/master/build/three.min.js?author=alteredq"><img alt="@alteredq" class="avatar" height="20" src="https://avatars1.githubusercontent.com/u/438022?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="daoshengmu" href="/mrdoob/three.js/commits/master/build/three.min.js?author=daoshengmu"><img alt="@daoshengmu" class="avatar" height="20" src="https://avatars2.githubusercontent.com/u/1263177?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="plepers" href="/mrdoob/three.js/commits/master/build/three.min.js?author=plepers"><img alt="@plepers" class="avatar" height="20" src="https://avatars2.githubusercontent.com/u/1036540?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="crobi" href="/mrdoob/three.js/commits/master/build/three.min.js?author=crobi"><img alt="@crobi" class="avatar" height="20" src="https://avatars0.githubusercontent.com/u/577871?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="tsherif" href="/mrdoob/three.js/commits/master/build/three.min.js?author=tsherif"><img alt="@tsherif" class="avatar" height="20" src="https://avatars3.githubusercontent.com/u/476017?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="manuq" href="/mrdoob/three.js/commits/master/build/three.min.js?author=manuq"><img alt="@manuq" class="avatar" height="20" src="https://avatars3.githubusercontent.com/u/83944?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="WestLangley" href="/mrdoob/three.js/commits/master/build/three.min.js?author=WestLangley"><img alt="@WestLangley" class="avatar" height="20" src="https://avatars3.githubusercontent.com/u/1000017?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="MiiBond" href="/mrdoob/three.js/commits/master/build/three.min.js?author=MiiBond"><img alt="@MiiBond" class="avatar" height="20" src="https://avatars2.githubusercontent.com/u/1069125?v=3&amp;s=40" width="20" /> </a>
    <a class="avatar-link tooltipped tooltipped-s" aria-label="chmp" href="/mrdoob/three.js/commits/master/build/three.min.js?author=chmp"><img alt="@chmp" class="avatar" height="20" src="https://avatars1.githubusercontent.com/u/949987?v=3&amp;s=40" width="20" /> </a>


    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header" data-facebox-id="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list" data-facebox-id="facebox-description">
          <li class="facebox-user-list-item">
            <img alt="@mrdoob" height="24" src="https://avatars1.githubusercontent.com/u/97088?v=3&amp;s=48" width="24" />
            <a href="/mrdoob">mrdoob</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@alteredq" height="24" src="https://avatars3.githubusercontent.com/u/438022?v=3&amp;s=48" width="24" />
            <a href="/alteredq">alteredq</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@daoshengmu" height="24" src="https://avatars0.githubusercontent.com/u/1263177?v=3&amp;s=48" width="24" />
            <a href="/daoshengmu">daoshengmu</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@plepers" height="24" src="https://avatars0.githubusercontent.com/u/1036540?v=3&amp;s=48" width="24" />
            <a href="/plepers">plepers</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@crobi" height="24" src="https://avatars2.githubusercontent.com/u/577871?v=3&amp;s=48" width="24" />
            <a href="/crobi">crobi</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@tsherif" height="24" src="https://avatars1.githubusercontent.com/u/476017?v=3&amp;s=48" width="24" />
            <a href="/tsherif">tsherif</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@manuq" height="24" src="https://avatars1.githubusercontent.com/u/83944?v=3&amp;s=48" width="24" />
            <a href="/manuq">manuq</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@WestLangley" height="24" src="https://avatars1.githubusercontent.com/u/1000017?v=3&amp;s=48" width="24" />
            <a href="/WestLangley">WestLangley</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@MiiBond" height="24" src="https://avatars0.githubusercontent.com/u/1069125?v=3&amp;s=48" width="24" />
            <a href="/MiiBond">MiiBond</a>
          </li>
          <li class="facebox-user-list-item">
            <img alt="@chmp" height="24" src="https://avatars3.githubusercontent.com/u/949987?v=3&amp;s=48" width="24" />
            <a href="/chmp">chmp</a>
          </li>
      </ul>
    </div>
  </div>

<div class="file">
  <div class="file-header">
  <div class="file-actions">

    <div class="btn-group">
      <a href="/mrdoob/three.js/raw/master/build/three.min.js" class="btn btn-sm " id="raw-url">Raw</a>
        <a href="/mrdoob/three.js/blame/master/build/three.min.js" class="btn btn-sm js-update-url-with-hash">Blame</a>
      <a href="/mrdoob/three.js/commits/master/build/three.min.js" class="btn btn-sm " rel="nofollow">History</a>
    </div>

      <a class="octicon-btn tooltipped tooltipped-nw"
         href="https://windows.github.com"
         aria-label="Open this file in GitHub Desktop"
         data-ga-click="Repository, open with desktop, type:windows">
          <span class="octicon octicon-device-desktop"></span>
      </a>

        <button type="button" class="octicon-btn disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <span class="octicon octicon-pencil"></span>
        </button>
        <button type="button" class="octicon-btn octicon-btn-danger disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <span class="octicon octicon-trashcan"></span>
        </button>
  </div>

  <div class="file-info">
      870 lines (869 sloc)
      <span class="file-info-divider"></span>
    414 KB
  </div>
</div>

  

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// threejs.org/license</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&#39;</span>use strict<span class="pl-pds">&#39;</span></span>;<span class="pl-k">var</span> <span class="pl-c1">THREE</span><span class="pl-k">=</span>{REVISION<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>72<span class="pl-pds">&quot;</span></span>};<span class="pl-s"><span class="pl-pds">&quot;</span>function<span class="pl-pds">&quot;</span></span><span class="pl-k">===typeof</span> define<span class="pl-k">&amp;&amp;</span>define.amd<span class="pl-k">?</span>define(<span class="pl-s"><span class="pl-pds">&quot;</span>three<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!==typeof</span> <span class="pl-c1">exports</span><span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!==typeof</span> <span class="pl-c1">module</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">module</span>.exports<span class="pl-k">=</span><span class="pl-c1">THREE</span>);</td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.requestAnimationFrame<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.cancelAnimationFrame<span class="pl-k">||</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>ms<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>moz<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>webkit<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>o<span class="pl-pds">&quot;</span></span>],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;!</span>self.requestAnimationFrame;<span class="pl-k">++</span>c)self.requestAnimationFrame<span class="pl-k">=</span>self[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>RequestAnimationFrame<span class="pl-pds">&quot;</span></span>],self.cancelAnimationFrame<span class="pl-k">=</span>self[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>CancelAnimationFrame<span class="pl-pds">&quot;</span></span>]<span class="pl-k">||</span>self[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>CancelRequestAnimationFrame<span class="pl-pds">&quot;</span></span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>self.requestAnimationFrame<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.setTimeout<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">self</span>.<span class="pl-en">requestAnimationFrame</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Date</span>.now(),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">16</span><span class="pl-k">-</span>(c<span class="pl-k">-</span>a)),f<span class="pl-k">=</span>self.<span class="pl-c1">setTimeout</span>(<span class="pl-k">function</span>(){b(c<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line">g)},g);a<span class="pl-k">=</span>c<span class="pl-k">+</span>g;<span class="pl-k">return</span> f});<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>self.cancelAnimationFrame<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.clearTimeout<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">self</span>.<span class="pl-en">cancelAnimationFrame</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){self.<span class="pl-c1">clearTimeout</span>(a)})}();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Math</span>.sign<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Math</span>.<span class="pl-en">sign</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">?-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:+</span>a});<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">Object</span>.defineProperty<span class="pl-k">&amp;&amp;</span><span class="pl-c1">Object</span>.defineProperty(<span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>name<span class="pl-pds">&quot;</span></span>,{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">toString</span>().<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">\s</span><span class="pl-k">*</span>function<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\S</span><span class="pl-k">*</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-cce">\(</span><span class="pl-pds">/</span></span>)[<span class="pl-c1">1</span>]}});<span class="pl-c1">THREE</span>.MOUSE<span class="pl-k">=</span>{LEFT<span class="pl-k">:</span><span class="pl-c1">0</span>,MIDDLE<span class="pl-k">:</span><span class="pl-c1">1</span>,RIGHT<span class="pl-k">:</span><span class="pl-c1">2</span>};<span class="pl-c1">THREE</span>.CullFaceNone<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.CullFaceBack<span class="pl-k">=</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.CullFaceFront<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.CullFaceFrontBack<span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">THREE</span>.FrontFaceDirectionCW<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.FrontFaceDirectionCCW<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.BasicShadowMap<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.PCFShadowMap<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.PCFSoftShadowMap<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.FrontSide<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.BackSide<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.DoubleSide<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.FlatShading<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.SmoothShading<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.NoColors<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.FaceColors<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.VertexColors<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.NoBlending<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.NormalBlending<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.AdditiveBlending<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.SubtractiveBlending<span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">THREE</span>.MultiplyBlending<span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">THREE</span>.CustomBlending<span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-c1">THREE</span>.AddEquation<span class="pl-k">=</span><span class="pl-c1">100</span>;</td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.SubtractEquation<span class="pl-k">=</span><span class="pl-c1">101</span>;<span class="pl-c1">THREE</span>.ReverseSubtractEquation<span class="pl-k">=</span><span class="pl-c1">102</span>;<span class="pl-c1">THREE</span>.MinEquation<span class="pl-k">=</span><span class="pl-c1">103</span>;<span class="pl-c1">THREE</span>.MaxEquation<span class="pl-k">=</span><span class="pl-c1">104</span>;<span class="pl-c1">THREE</span>.ZeroFactor<span class="pl-k">=</span><span class="pl-c1">200</span>;<span class="pl-c1">THREE</span>.OneFactor<span class="pl-k">=</span><span class="pl-c1">201</span>;<span class="pl-c1">THREE</span>.SrcColorFactor<span class="pl-k">=</span><span class="pl-c1">202</span>;<span class="pl-c1">THREE</span>.OneMinusSrcColorFactor<span class="pl-k">=</span><span class="pl-c1">203</span>;<span class="pl-c1">THREE</span>.SrcAlphaFactor<span class="pl-k">=</span><span class="pl-c1">204</span>;<span class="pl-c1">THREE</span>.OneMinusSrcAlphaFactor<span class="pl-k">=</span><span class="pl-c1">205</span>;<span class="pl-c1">THREE</span>.DstAlphaFactor<span class="pl-k">=</span><span class="pl-c1">206</span>;<span class="pl-c1">THREE</span>.OneMinusDstAlphaFactor<span class="pl-k">=</span><span class="pl-c1">207</span>;<span class="pl-c1">THREE</span>.DstColorFactor<span class="pl-k">=</span><span class="pl-c1">208</span>;<span class="pl-c1">THREE</span>.OneMinusDstColorFactor<span class="pl-k">=</span><span class="pl-c1">209</span>;<span class="pl-c1">THREE</span>.SrcAlphaSaturateFactor<span class="pl-k">=</span><span class="pl-c1">210</span>;<span class="pl-c1">THREE</span>.NeverDepth<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.AlwaysDepth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.LessDepth<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.LessEqualDepth<span class="pl-k">=</span><span class="pl-c1">3</span>;</td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.EqualDepth<span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">THREE</span>.GreaterEqualDepth<span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-c1">THREE</span>.GreaterDepth<span class="pl-k">=</span><span class="pl-c1">6</span>;<span class="pl-c1">THREE</span>.NotEqualDepth<span class="pl-k">=</span><span class="pl-c1">7</span>;<span class="pl-c1">THREE</span>.MultiplyOperation<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.MixOperation<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.AddOperation<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.UVMapping<span class="pl-k">=</span><span class="pl-c1">300</span>;<span class="pl-c1">THREE</span>.CubeReflectionMapping<span class="pl-k">=</span><span class="pl-c1">301</span>;<span class="pl-c1">THREE</span>.CubeRefractionMapping<span class="pl-k">=</span><span class="pl-c1">302</span>;<span class="pl-c1">THREE</span>.EquirectangularReflectionMapping<span class="pl-k">=</span><span class="pl-c1">303</span>;<span class="pl-c1">THREE</span>.EquirectangularRefractionMapping<span class="pl-k">=</span><span class="pl-c1">304</span>;<span class="pl-c1">THREE</span>.SphericalReflectionMapping<span class="pl-k">=</span><span class="pl-c1">305</span>;<span class="pl-c1">THREE</span>.RepeatWrapping<span class="pl-k">=</span><span class="pl-c1">1E3</span>;<span class="pl-c1">THREE</span>.ClampToEdgeWrapping<span class="pl-k">=</span><span class="pl-c1">1001</span>;<span class="pl-c1">THREE</span>.MirroredRepeatWrapping<span class="pl-k">=</span><span class="pl-c1">1002</span>;<span class="pl-c1">THREE</span>.NearestFilter<span class="pl-k">=</span><span class="pl-c1">1003</span>;</td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.NearestMipMapNearestFilter<span class="pl-k">=</span><span class="pl-c1">1004</span>;<span class="pl-c1">THREE</span>.NearestMipMapLinearFilter<span class="pl-k">=</span><span class="pl-c1">1005</span>;<span class="pl-c1">THREE</span>.LinearFilter<span class="pl-k">=</span><span class="pl-c1">1006</span>;<span class="pl-c1">THREE</span>.LinearMipMapNearestFilter<span class="pl-k">=</span><span class="pl-c1">1007</span>;<span class="pl-c1">THREE</span>.LinearMipMapLinearFilter<span class="pl-k">=</span><span class="pl-c1">1008</span>;<span class="pl-c1">THREE</span>.UnsignedByteType<span class="pl-k">=</span><span class="pl-c1">1009</span>;<span class="pl-c1">THREE</span>.ByteType<span class="pl-k">=</span><span class="pl-c1">1010</span>;<span class="pl-c1">THREE</span>.ShortType<span class="pl-k">=</span><span class="pl-c1">1011</span>;<span class="pl-c1">THREE</span>.UnsignedShortType<span class="pl-k">=</span><span class="pl-c1">1012</span>;<span class="pl-c1">THREE</span>.IntType<span class="pl-k">=</span><span class="pl-c1">1013</span>;<span class="pl-c1">THREE</span>.UnsignedIntType<span class="pl-k">=</span><span class="pl-c1">1014</span>;<span class="pl-c1">THREE</span>.FloatType<span class="pl-k">=</span><span class="pl-c1">1015</span>;<span class="pl-c1">THREE</span>.HalfFloatType<span class="pl-k">=</span><span class="pl-c1">1025</span>;<span class="pl-c1">THREE</span>.UnsignedShort4444Type<span class="pl-k">=</span><span class="pl-c1">1016</span>;<span class="pl-c1">THREE</span>.UnsignedShort5551Type<span class="pl-k">=</span><span class="pl-c1">1017</span>;<span class="pl-c1">THREE</span>.UnsignedShort565Type<span class="pl-k">=</span><span class="pl-c1">1018</span>;<span class="pl-c1">THREE</span>.AlphaFormat<span class="pl-k">=</span><span class="pl-c1">1019</span>;<span class="pl-c1">THREE</span>.RGBFormat<span class="pl-k">=</span><span class="pl-c1">1020</span>;</td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.RGBAFormat<span class="pl-k">=</span><span class="pl-c1">1021</span>;<span class="pl-c1">THREE</span>.LuminanceFormat<span class="pl-k">=</span><span class="pl-c1">1022</span>;<span class="pl-c1">THREE</span>.LuminanceAlphaFormat<span class="pl-k">=</span><span class="pl-c1">1023</span>;<span class="pl-c1">THREE</span>.RGBEFormat<span class="pl-k">=</span><span class="pl-c1">THREE</span>.RGBAFormat;<span class="pl-c1">THREE</span>.RGB_S3TC_DXT1_Format<span class="pl-k">=</span><span class="pl-c1">2001</span>;<span class="pl-c1">THREE</span>.RGBA_S3TC_DXT1_Format<span class="pl-k">=</span><span class="pl-c1">2002</span>;<span class="pl-c1">THREE</span>.RGBA_S3TC_DXT3_Format<span class="pl-k">=</span><span class="pl-c1">2003</span>;<span class="pl-c1">THREE</span>.RGBA_S3TC_DXT5_Format<span class="pl-k">=</span><span class="pl-c1">2004</span>;<span class="pl-c1">THREE</span>.RGB_PVRTC_4BPPV1_Format<span class="pl-k">=</span><span class="pl-c1">2100</span>;<span class="pl-c1">THREE</span>.RGB_PVRTC_2BPPV1_Format<span class="pl-k">=</span><span class="pl-c1">2101</span>;<span class="pl-c1">THREE</span>.RGBA_PVRTC_4BPPV1_Format<span class="pl-k">=</span><span class="pl-c1">2102</span>;<span class="pl-c1">THREE</span>.RGBA_PVRTC_2BPPV1_Format<span class="pl-k">=</span><span class="pl-c1">2103</span>;</td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Projector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector has been moved to /examples/js/renderers/Projector.js.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">projectVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector: .projectVector() is now vector.project().<span class="pl-pds">&quot;</span></span>);a.project(b)};<span class="pl-c1">this</span>.<span class="pl-en">unprojectVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector: .unprojectVector() is now vector.unproject().<span class="pl-pds">&quot;</span></span>);a.unproject(b)};<span class="pl-c1">this</span>.<span class="pl-en">pickingRay</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Projector: .pickingRay() is now raycaster.setFromCamera().<span class="pl-pds">&quot;</span></span>)}};</td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CanvasRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.domElement<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">setClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">setSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}};<span class="pl-c1">THREE</span>.<span class="pl-en">Color</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">3</span><span class="pl-k">===</span>arguments.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-v">this</span>.setRGB(arguments[<span class="pl-c1">0</span>],arguments[<span class="pl-c1">1</span>],arguments[<span class="pl-c1">2</span>])<span class="pl-k">:</span><span class="pl-v">this</span>.set(a)};</td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Color</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Color,r<span class="pl-k">:</span><span class="pl-c1">1</span>,g<span class="pl-k">:</span><span class="pl-c1">1</span>,b<span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Color<span class="pl-k">?</span><span class="pl-v">this</span>.copy(a)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span><span class="pl-k">===typeof</span> a<span class="pl-k">?</span><span class="pl-v">this</span>.setHex(a)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span><span class="pl-k">===typeof</span> a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.setStyle(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setHex</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);<span class="pl-v">this</span>.r<span class="pl-k">=</span>(a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-v">this</span>.g<span class="pl-k">=</span>(a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-v">this</span>.b<span class="pl-k">=</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setRGB</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.r<span class="pl-k">=</span>a;<span class="pl-v">this</span>.g<span class="pl-k">=</span>b;<span class="pl-v">this</span>.b<span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setHSL</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">+=</span><span class="pl-c1">1</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">-=</span><span class="pl-c1">1</span>);<span class="pl-k">return</span> d<span class="pl-k">&lt;</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">6</span><span class="pl-k">?</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a)<span class="pl-k">*</span>d<span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span>c<span class="pl-k">:</span>d<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">?</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">-</span>d)<span class="pl-k">:</span>a}<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,</td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>,<span class="pl-smi">d</span>){b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.euclideanModulo(b,<span class="pl-c1">1</span>);c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(d,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">?</span><span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-v">this</span>.b<span class="pl-k">=</span>d<span class="pl-k">:</span>(c<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">&gt;=</span>d<span class="pl-k">?</span>d<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>c)<span class="pl-k">:</span>d<span class="pl-k">+</span>c<span class="pl-k">-</span>d<span class="pl-k">*</span>c,d<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>d<span class="pl-k">-</span>c,<span class="pl-v">this</span>.r<span class="pl-k">=</span>a(d,c,b<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>),<span class="pl-v">this</span>.g<span class="pl-k">=</span>a(d,c,b),<span class="pl-v">this</span>.b<span class="pl-k">=</span>a(d,c,b<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>));<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">setStyle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> <span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span><span class="pl-c1">parseFloat</span>(b);<span class="pl-c1">1</span><span class="pl-k">&gt;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Color: Alpha component of color <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> will be ignored.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> b},c;<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>((?:rgb<span class="pl-k">|</span>hsl)a<span class="pl-k">?</span>)<span class="pl-cce">\(</span><span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-k">^</span><span class="pl-cce">\)</span>]</span><span class="pl-k">*</span>)<span class="pl-cce">\)</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(a)){<span class="pl-k">var</span> d<span class="pl-k">=</span>c[<span class="pl-c1">2</span>];<span class="pl-k">switch</span>(c[<span class="pl-c1">1</span>]){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>rgb<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d))<span class="pl-k">return</span> <span class="pl-v">this</span>.r<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>;<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d))<span class="pl-k">return</span> <span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-v">this</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>rgba<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d))<span class="pl-k">return</span> <span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">255</span>,<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">255</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">255</span>,b(c[<span class="pl-c1">4</span>]),<span class="pl-v">this</span>;<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d))<span class="pl-k">return</span> <span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">1</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">100</span>,<span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>))<span class="pl-k">/</span><span class="pl-c1">100</span>,b(c[<span class="pl-c1">4</span>]),<span class="pl-v">this</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>hsl<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d)){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">parseFloat</span>(c[<span class="pl-c1">1</span>]),e<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>)<span class="pl-k">/</span><span class="pl-c1">100</span>,g<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>)<span class="pl-k">/</span><span class="pl-c1">100</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>.setHSL(d,e,g)}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>hsla<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-cce">\%</span><span class="pl-c1">\s</span><span class="pl-k">*</span>,<span class="pl-c1">\s</span><span class="pl-k">*</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-cce">\.</span><span class="pl-k">?</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-c1">\s</span><span class="pl-k">*</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(d))<span class="pl-k">return</span> d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">parseFloat</span>(c[<span class="pl-c1">1</span>]),e<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">2</span>],<span class="pl-c1">10</span>)<span class="pl-k">/</span><span class="pl-c1">100</span>,g<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(c[<span class="pl-c1">3</span>],<span class="pl-c1">10</span>)<span class="pl-k">/</span><span class="pl-c1">100</span>,b(c[<span class="pl-c1">4</span>]),<span class="pl-v">this</span>.setHSL(d,e,g)}}<span class="pl-k">else</span> <span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\#</span>(<span class="pl-c1">[<span class="pl-c1">A-Fa-f0-9</span>]</span><span class="pl-k">+</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(a)){b<span class="pl-k">=</span>c[<span class="pl-c1">1</span>];c<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">===</span>c)<span class="pl-k">return</span> <span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>)<span class="pl-k">+</span>b.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>)<span class="pl-k">+</span>b.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.<span class="pl-c1">charAt</span>(<span class="pl-c1">2</span>)<span class="pl-k">+</span>b.<span class="pl-c1">charAt</span>(<span class="pl-c1">2</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>;<span class="pl-k">if</span>(<span class="pl-c1">6</span><span class="pl-k">===</span>c)<span class="pl-k">return</span> <span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>)<span class="pl-k">+</span>b.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.<span class="pl-c1">charAt</span>(<span class="pl-c1">2</span>)<span class="pl-k">+</span>b.<span class="pl-c1">charAt</span>(<span class="pl-c1">3</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.<span class="pl-c1">charAt</span>(<span class="pl-c1">4</span>)<span class="pl-k">+</span>b.<span class="pl-c1">charAt</span>(<span class="pl-c1">5</span>),<span class="pl-c1">16</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>,<span class="pl-v">this</span>}a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.ColorKeywords[a],</td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span><span class="pl-v">this</span>.setHex(b)<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Color: Unknown color <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a));<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.r,<span class="pl-v">this</span>.g,<span class="pl-v">this</span>.b)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.r<span class="pl-k">=</span>a.r;<span class="pl-v">this</span>.g<span class="pl-k">=</span>a.g;<span class="pl-v">this</span>.b<span class="pl-k">=</span>a.b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyGammaToLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">2</span>);<span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(a.r,b);<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(a.g,b);<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(a.b,b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyLinearToGamma</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">2</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(a.r,c);<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(a.g,c);<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(a.b,c);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">convertGammaToLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.r,b<span class="pl-k">=</span><span class="pl-v">this</span>.g,c<span class="pl-k">=</span><span class="pl-v">this</span>.b;<span class="pl-v">this</span>.r<span class="pl-k">=</span>a<span class="pl-k">*</span>a;<span class="pl-v">this</span>.g<span class="pl-k">=</span>b<span class="pl-k">*</span>b;<span class="pl-v">this</span>.b<span class="pl-k">=</span>c<span class="pl-k">*</span>c;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">convertLinearToGamma</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.r);<span class="pl-v">this</span>.g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.g);<span class="pl-v">this</span>.b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getHex</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-v">this</span>.r<span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span><span class="pl-k">^</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-v">this</span>.g<span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span><span class="pl-k">^</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-v">this</span>.b<span class="pl-k">&lt;&lt;</span><span class="pl-c1">0</span>},<span class="pl-en">getHexString</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>000000<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.getHex().<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>)).<span class="pl-c1">slice</span>(<span class="pl-k">-</span><span class="pl-c1">6</span>)},<span class="pl-en">getHSL</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span>{h<span class="pl-k">:</span><span class="pl-c1">0</span>,s<span class="pl-k">:</span><span class="pl-c1">0</span>,l<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.r,c<span class="pl-k">=</span><span class="pl-v">this</span>.g,d<span class="pl-k">=</span><span class="pl-v">this</span>.b,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(b,c,d),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b,c,d),f,h<span class="pl-k">=</span>(g<span class="pl-k">+</span>e)<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-k">if</span>(g<span class="pl-k">===</span>e)g<span class="pl-k">=</span>f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> k<span class="pl-k">=</span>e<span class="pl-k">-</span>g,g<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">&gt;=</span>h<span class="pl-k">?</span>k<span class="pl-k">/</span>(e<span class="pl-k">+</span>g)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">-</span>e<span class="pl-k">-</span>g);<span class="pl-k">switch</span>(e){<span class="pl-k">case</span> b<span class="pl-k">:</span>f<span class="pl-k">=</span>(c<span class="pl-k">-</span>d)<span class="pl-k">/</span>k<span class="pl-k">+</span>(c<span class="pl-k">&lt;</span>d<span class="pl-k">?</span><span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">0</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> c<span class="pl-k">:</span>f<span class="pl-k">=</span>(d<span class="pl-k">-</span>b)<span class="pl-k">/</span>k<span class="pl-k">+</span><span class="pl-c1">2</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> d<span class="pl-k">:</span>f<span class="pl-k">=</span>(b<span class="pl-k">-</span>c)<span class="pl-k">/</span>k<span class="pl-k">+</span><span class="pl-c1">4</span>}f<span class="pl-k">/=</span><span class="pl-c1">6</span>}a.h<span class="pl-k">=</span>f;a.s<span class="pl-k">=</span>g;a.l<span class="pl-k">=</span>h;<span class="pl-k">return</span> a},<span class="pl-en">getStyle</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgb(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-v">this</span>.r|<span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-v">this</span>.g|<span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-v">this</span>.b|<span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-en">offsetHSL</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.getHSL();d.h<span class="pl-k">+=</span>a;d.s<span class="pl-k">+=</span>b;d.l<span class="pl-k">+=</span>c;<span class="pl-v">this</span>.setHSL(d.h,d.s,d.l);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.r<span class="pl-k">+=</span>a.r;<span class="pl-v">this</span>.g<span class="pl-k">+=</span>a.g;<span class="pl-v">this</span>.b<span class="pl-k">+=</span>a.b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addColors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.r<span class="pl-k">=</span>a.r<span class="pl-k">+</span>b.r;<span class="pl-v">this</span>.g<span class="pl-k">=</span>a.g<span class="pl-k">+</span>b.g;<span class="pl-v">this</span>.b<span class="pl-k">=</span>a.b<span class="pl-k">+</span>b.b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.r<span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line">a;<span class="pl-v">this</span>.g<span class="pl-k">+=</span>a;<span class="pl-v">this</span>.b<span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.r<span class="pl-k">*=</span>a.r;<span class="pl-v">this</span>.g<span class="pl-k">*=</span>a.g;<span class="pl-v">this</span>.b<span class="pl-k">*=</span>a.b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.r<span class="pl-k">*=</span>a;<span class="pl-v">this</span>.g<span class="pl-k">*=</span>a;<span class="pl-v">this</span>.b<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.r<span class="pl-k">+=</span>(a.r<span class="pl-k">-</span><span class="pl-v">this</span>.r)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.g<span class="pl-k">+=</span>(a.g<span class="pl-k">-</span><span class="pl-v">this</span>.g)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.b<span class="pl-k">+=</span>(a.b<span class="pl-k">-</span><span class="pl-v">this</span>.b)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.r<span class="pl-k">===</span><span class="pl-v">this</span>.r<span class="pl-k">&amp;&amp;</span>a.g<span class="pl-k">===</span><span class="pl-v">this</span>.g<span class="pl-k">&amp;&amp;</span>a.b<span class="pl-k">===</span><span class="pl-v">this</span>.b},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.r<span class="pl-k">=</span>a[<span class="pl-c1">0</span>];<span class="pl-v">this</span>.g<span class="pl-k">=</span>a[<span class="pl-c1">1</span>];<span class="pl-v">this</span>.b<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-v">this</span>.r;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.g;a[b<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.b;<span class="pl-k">return</span> a}};</td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ColorKeywords<span class="pl-k">=</span>{aliceblue<span class="pl-k">:</span><span class="pl-c1">15792383</span>,antiquewhite<span class="pl-k">:</span><span class="pl-c1">16444375</span>,aqua<span class="pl-k">:</span><span class="pl-c1">65535</span>,aquamarine<span class="pl-k">:</span><span class="pl-c1">8388564</span>,azure<span class="pl-k">:</span><span class="pl-c1">15794175</span>,beige<span class="pl-k">:</span><span class="pl-c1">16119260</span>,bisque<span class="pl-k">:</span><span class="pl-c1">16770244</span>,black<span class="pl-k">:</span><span class="pl-c1">0</span>,blanchedalmond<span class="pl-k">:</span><span class="pl-c1">16772045</span>,blue<span class="pl-k">:</span><span class="pl-c1">255</span>,blueviolet<span class="pl-k">:</span><span class="pl-c1">9055202</span>,brown<span class="pl-k">:</span><span class="pl-c1">10824234</span>,burlywood<span class="pl-k">:</span><span class="pl-c1">14596231</span>,cadetblue<span class="pl-k">:</span><span class="pl-c1">6266528</span>,chartreuse<span class="pl-k">:</span><span class="pl-c1">8388352</span>,chocolate<span class="pl-k">:</span><span class="pl-c1">13789470</span>,coral<span class="pl-k">:</span><span class="pl-c1">16744272</span>,cornflowerblue<span class="pl-k">:</span><span class="pl-c1">6591981</span>,cornsilk<span class="pl-k">:</span><span class="pl-c1">16775388</span>,crimson<span class="pl-k">:</span><span class="pl-c1">14423100</span>,cyan<span class="pl-k">:</span><span class="pl-c1">65535</span>,darkblue<span class="pl-k">:</span><span class="pl-c1">139</span>,darkcyan<span class="pl-k">:</span><span class="pl-c1">35723</span>,darkgoldenrod<span class="pl-k">:</span><span class="pl-c1">12092939</span>,darkgray<span class="pl-k">:</span><span class="pl-c1">11119017</span>,darkgreen<span class="pl-k">:</span><span class="pl-c1">25600</span>,darkgrey<span class="pl-k">:</span><span class="pl-c1">11119017</span>,darkkhaki<span class="pl-k">:</span><span class="pl-c1">12433259</span>,darkmagenta<span class="pl-k">:</span><span class="pl-c1">9109643</span>,</td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line">darkolivegreen<span class="pl-k">:</span><span class="pl-c1">5597999</span>,darkorange<span class="pl-k">:</span><span class="pl-c1">16747520</span>,darkorchid<span class="pl-k">:</span><span class="pl-c1">10040012</span>,darkred<span class="pl-k">:</span><span class="pl-c1">9109504</span>,darksalmon<span class="pl-k">:</span><span class="pl-c1">15308410</span>,darkseagreen<span class="pl-k">:</span><span class="pl-c1">9419919</span>,darkslateblue<span class="pl-k">:</span><span class="pl-c1">4734347</span>,darkslategray<span class="pl-k">:</span><span class="pl-c1">3100495</span>,darkslategrey<span class="pl-k">:</span><span class="pl-c1">3100495</span>,darkturquoise<span class="pl-k">:</span><span class="pl-c1">52945</span>,darkviolet<span class="pl-k">:</span><span class="pl-c1">9699539</span>,deeppink<span class="pl-k">:</span><span class="pl-c1">16716947</span>,deepskyblue<span class="pl-k">:</span><span class="pl-c1">49151</span>,dimgray<span class="pl-k">:</span><span class="pl-c1">6908265</span>,dimgrey<span class="pl-k">:</span><span class="pl-c1">6908265</span>,dodgerblue<span class="pl-k">:</span><span class="pl-c1">2003199</span>,firebrick<span class="pl-k">:</span><span class="pl-c1">11674146</span>,floralwhite<span class="pl-k">:</span><span class="pl-c1">16775920</span>,forestgreen<span class="pl-k">:</span><span class="pl-c1">2263842</span>,fuchsia<span class="pl-k">:</span><span class="pl-c1">16711935</span>,gainsboro<span class="pl-k">:</span><span class="pl-c1">14474460</span>,ghostwhite<span class="pl-k">:</span><span class="pl-c1">16316671</span>,gold<span class="pl-k">:</span><span class="pl-c1">16766720</span>,goldenrod<span class="pl-k">:</span><span class="pl-c1">14329120</span>,gray<span class="pl-k">:</span><span class="pl-c1">8421504</span>,green<span class="pl-k">:</span><span class="pl-c1">32768</span>,greenyellow<span class="pl-k">:</span><span class="pl-c1">11403055</span>,</td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">grey<span class="pl-k">:</span><span class="pl-c1">8421504</span>,honeydew<span class="pl-k">:</span><span class="pl-c1">15794160</span>,hotpink<span class="pl-k">:</span><span class="pl-c1">16738740</span>,indianred<span class="pl-k">:</span><span class="pl-c1">13458524</span>,indigo<span class="pl-k">:</span><span class="pl-c1">4915330</span>,ivory<span class="pl-k">:</span><span class="pl-c1">16777200</span>,khaki<span class="pl-k">:</span><span class="pl-c1">15787660</span>,lavender<span class="pl-k">:</span><span class="pl-c1">15132410</span>,lavenderblush<span class="pl-k">:</span><span class="pl-c1">16773365</span>,lawngreen<span class="pl-k">:</span><span class="pl-c1">8190976</span>,lemonchiffon<span class="pl-k">:</span><span class="pl-c1">16775885</span>,lightblue<span class="pl-k">:</span><span class="pl-c1">11393254</span>,lightcoral<span class="pl-k">:</span><span class="pl-c1">15761536</span>,lightcyan<span class="pl-k">:</span><span class="pl-c1">14745599</span>,lightgoldenrodyellow<span class="pl-k">:</span><span class="pl-c1">16448210</span>,lightgray<span class="pl-k">:</span><span class="pl-c1">13882323</span>,lightgreen<span class="pl-k">:</span><span class="pl-c1">9498256</span>,lightgrey<span class="pl-k">:</span><span class="pl-c1">13882323</span>,lightpink<span class="pl-k">:</span><span class="pl-c1">16758465</span>,lightsalmon<span class="pl-k">:</span><span class="pl-c1">16752762</span>,lightseagreen<span class="pl-k">:</span><span class="pl-c1">2142890</span>,lightskyblue<span class="pl-k">:</span><span class="pl-c1">8900346</span>,lightslategray<span class="pl-k">:</span><span class="pl-c1">7833753</span>,lightslategrey<span class="pl-k">:</span><span class="pl-c1">7833753</span>,lightsteelblue<span class="pl-k">:</span><span class="pl-c1">11584734</span>,lightyellow<span class="pl-k">:</span><span class="pl-c1">16777184</span>,</td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line">lime<span class="pl-k">:</span><span class="pl-c1">65280</span>,limegreen<span class="pl-k">:</span><span class="pl-c1">3329330</span>,linen<span class="pl-k">:</span><span class="pl-c1">16445670</span>,magenta<span class="pl-k">:</span><span class="pl-c1">16711935</span>,maroon<span class="pl-k">:</span><span class="pl-c1">8388608</span>,mediumaquamarine<span class="pl-k">:</span><span class="pl-c1">6737322</span>,mediumblue<span class="pl-k">:</span><span class="pl-c1">205</span>,mediumorchid<span class="pl-k">:</span><span class="pl-c1">12211667</span>,mediumpurple<span class="pl-k">:</span><span class="pl-c1">9662683</span>,mediumseagreen<span class="pl-k">:</span><span class="pl-c1">3978097</span>,mediumslateblue<span class="pl-k">:</span><span class="pl-c1">8087790</span>,mediumspringgreen<span class="pl-k">:</span><span class="pl-c1">64154</span>,mediumturquoise<span class="pl-k">:</span><span class="pl-c1">4772300</span>,mediumvioletred<span class="pl-k">:</span><span class="pl-c1">13047173</span>,midnightblue<span class="pl-k">:</span><span class="pl-c1">1644912</span>,mintcream<span class="pl-k">:</span><span class="pl-c1">16121850</span>,mistyrose<span class="pl-k">:</span><span class="pl-c1">16770273</span>,moccasin<span class="pl-k">:</span><span class="pl-c1">16770229</span>,navajowhite<span class="pl-k">:</span><span class="pl-c1">16768685</span>,navy<span class="pl-k">:</span><span class="pl-c1">128</span>,oldlace<span class="pl-k">:</span><span class="pl-c1">16643558</span>,olive<span class="pl-k">:</span><span class="pl-c1">8421376</span>,olivedrab<span class="pl-k">:</span><span class="pl-c1">7048739</span>,orange<span class="pl-k">:</span><span class="pl-c1">16753920</span>,orangered<span class="pl-k">:</span><span class="pl-c1">16729344</span>,orchid<span class="pl-k">:</span><span class="pl-c1">14315734</span>,palegoldenrod<span class="pl-k">:</span><span class="pl-c1">15657130</span>,</td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line">palegreen<span class="pl-k">:</span><span class="pl-c1">10025880</span>,paleturquoise<span class="pl-k">:</span><span class="pl-c1">11529966</span>,palevioletred<span class="pl-k">:</span><span class="pl-c1">14381203</span>,papayawhip<span class="pl-k">:</span><span class="pl-c1">16773077</span>,peachpuff<span class="pl-k">:</span><span class="pl-c1">16767673</span>,peru<span class="pl-k">:</span><span class="pl-c1">13468991</span>,pink<span class="pl-k">:</span><span class="pl-c1">16761035</span>,plum<span class="pl-k">:</span><span class="pl-c1">14524637</span>,powderblue<span class="pl-k">:</span><span class="pl-c1">11591910</span>,purple<span class="pl-k">:</span><span class="pl-c1">8388736</span>,red<span class="pl-k">:</span><span class="pl-c1">16711680</span>,rosybrown<span class="pl-k">:</span><span class="pl-c1">12357519</span>,royalblue<span class="pl-k">:</span><span class="pl-c1">4286945</span>,saddlebrown<span class="pl-k">:</span><span class="pl-c1">9127187</span>,salmon<span class="pl-k">:</span><span class="pl-c1">16416882</span>,sandybrown<span class="pl-k">:</span><span class="pl-c1">16032864</span>,seagreen<span class="pl-k">:</span><span class="pl-c1">3050327</span>,seashell<span class="pl-k">:</span><span class="pl-c1">16774638</span>,sienna<span class="pl-k">:</span><span class="pl-c1">10506797</span>,silver<span class="pl-k">:</span><span class="pl-c1">12632256</span>,skyblue<span class="pl-k">:</span><span class="pl-c1">8900331</span>,slateblue<span class="pl-k">:</span><span class="pl-c1">6970061</span>,slategray<span class="pl-k">:</span><span class="pl-c1">7372944</span>,slategrey<span class="pl-k">:</span><span class="pl-c1">7372944</span>,snow<span class="pl-k">:</span><span class="pl-c1">16775930</span>,springgreen<span class="pl-k">:</span><span class="pl-c1">65407</span>,steelblue<span class="pl-k">:</span><span class="pl-c1">4620980</span>,tan<span class="pl-k">:</span><span class="pl-c1">13808780</span>,teal<span class="pl-k">:</span><span class="pl-c1">32896</span>,thistle<span class="pl-k">:</span><span class="pl-c1">14204888</span>,</td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line">tomato<span class="pl-k">:</span><span class="pl-c1">16737095</span>,turquoise<span class="pl-k">:</span><span class="pl-c1">4251856</span>,violet<span class="pl-k">:</span><span class="pl-c1">15631086</span>,wheat<span class="pl-k">:</span><span class="pl-c1">16113331</span>,white<span class="pl-k">:</span><span class="pl-c1">16777215</span>,whitesmoke<span class="pl-k">:</span><span class="pl-c1">16119285</span>,yellow<span class="pl-k">:</span><span class="pl-c1">16776960</span>,yellowgreen<span class="pl-k">:</span><span class="pl-c1">10145074</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">Quaternion</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._y<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._w<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Quaternion</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Quaternion,get <span class="pl-en">x</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._x},set <span class="pl-en">x</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},get <span class="pl-en">y</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._y},set <span class="pl-en">y</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._y<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},get <span class="pl-en">z</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._z},set <span class="pl-en">z</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._z<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},get <span class="pl-en">w</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._w},set <span class="pl-en">w</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._w<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a;<span class="pl-v">this</span>._y<span class="pl-k">=</span>b;<span class="pl-v">this</span>._z<span class="pl-k">=</span>c;<span class="pl-v">this</span>._w<span class="pl-k">=</span>d;<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>._x,<span class="pl-v">this</span>._y,<span class="pl-v">this</span>._z,<span class="pl-v">this</span>._w)},</td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line"><span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>._y<span class="pl-k">=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>._z<span class="pl-k">=</span>a.<span class="pl-c1">z</span>;<span class="pl-v">this</span>._w<span class="pl-k">=</span>a.w;<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Euler)<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a._x<span class="pl-k">/</span><span class="pl-c1">2</span>),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a._y<span class="pl-k">/</span><span class="pl-c1">2</span>),e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a._z<span class="pl-k">/</span><span class="pl-c1">2</span>),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a._x<span class="pl-k">/</span><span class="pl-c1">2</span>),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a._y<span class="pl-k">/</span><span class="pl-c1">2</span>),h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a._z<span class="pl-k">/</span><span class="pl-c1">2</span>),k<span class="pl-k">=</span>a.order;<span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>k<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-v">this</span>._y<span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-v">this</span>._w<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-v">this</span>._y<span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-v">this</span>._w<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>k<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-v">this</span>._y<span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-v">this</span>._w<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>k<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-v">this</span>._y<span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-v">this</span>._w<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>k<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-v">this</span>._y<span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-v">this</span>._w<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>k<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h,<span class="pl-v">this</span>._y<span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>e,<span class="pl-v">this</span>._w<span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">*</span>h);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b)<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromAxisAngle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(c);<span class="pl-v">this</span>._x<span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">*</span>d;<span class="pl-v">this</span>._y<span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">*</span>d;<span class="pl-v">this</span>._z<span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">*</span>d;<span class="pl-v">this</span>._w<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(c);<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];a<span class="pl-k">=</span>b[<span class="pl-c1">4</span>];<span class="pl-k">var</span> d<span class="pl-k">=</span>b[<span class="pl-c1">8</span>],e<span class="pl-k">=</span>b[<span class="pl-c1">1</span>],g<span class="pl-k">=</span>b[<span class="pl-c1">5</span>],f<span class="pl-k">=</span>b[<span class="pl-c1">9</span>],h<span class="pl-k">=</span>b[<span class="pl-c1">2</span>],k<span class="pl-k">=</span>b[<span class="pl-c1">6</span>],b<span class="pl-k">=</span>b[<span class="pl-c1">10</span>],l<span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>l<span class="pl-k">?</span>(c<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(l<span class="pl-k">+</span><span class="pl-c1">1</span>),<span class="pl-v">this</span>._w<span class="pl-k">=</span>.<span class="pl-c1">25</span><span class="pl-k">/</span>c,<span class="pl-v">this</span>._x<span class="pl-k">=</span>(k<span class="pl-k">-</span>f)<span class="pl-k">*</span>c,<span class="pl-v">this</span>._y<span class="pl-k">=</span>(d<span class="pl-k">-</span>h)<span class="pl-k">*</span>c,<span class="pl-v">this</span>._z<span class="pl-k">=</span>(e<span class="pl-k">-</span>a)<span class="pl-k">*</span>c)<span class="pl-k">:</span>c<span class="pl-k">&gt;</span>g<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>c<span class="pl-k">-</span>g<span class="pl-k">-</span>b),<span class="pl-v">this</span>._w<span class="pl-k">=</span>(k<span class="pl-k">-</span>f)<span class="pl-k">/</span>c,<span class="pl-v">this</span>._x<span class="pl-k">=</span>.<span class="pl-c1">25</span><span class="pl-k">*</span>c,<span class="pl-v">this</span>._y<span class="pl-k">=</span>(a<span class="pl-k">+</span>e)<span class="pl-k">/</span>c,<span class="pl-v">this</span>._z<span class="pl-k">=</span>(d<span class="pl-k">+</span>h)<span class="pl-k">/</span>c)<span class="pl-k">:</span>g<span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>g<span class="pl-k">-</span>c<span class="pl-k">-</span>b),<span class="pl-v">this</span>._w<span class="pl-k">=</span>(d<span class="pl-k">-</span>h)<span class="pl-k">/</span>c,<span class="pl-v">this</span>._x<span class="pl-k">=</span>(a<span class="pl-k">+</span>e)<span class="pl-k">/</span>c,<span class="pl-v">this</span>._y<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line">.<span class="pl-c1">25</span><span class="pl-k">*</span>c,<span class="pl-v">this</span>._z<span class="pl-k">=</span>(f<span class="pl-k">+</span>k)<span class="pl-k">/</span>c)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>b<span class="pl-k">-</span>c<span class="pl-k">-</span>g),<span class="pl-v">this</span>._w<span class="pl-k">=</span>(e<span class="pl-k">-</span>a)<span class="pl-k">/</span>c,<span class="pl-v">this</span>._x<span class="pl-k">=</span>(d<span class="pl-k">+</span>h)<span class="pl-k">/</span>c,<span class="pl-v">this</span>._y<span class="pl-k">=</span>(f<span class="pl-k">+</span>k)<span class="pl-k">/</span>c,<span class="pl-v">this</span>._z<span class="pl-k">=</span>.<span class="pl-c1">25</span><span class="pl-k">*</span>c);<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromUnitVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);b<span class="pl-k">=</span>c.dot(d)<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-c1">1E-6</span><span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c.<span class="pl-c1">x</span>)<span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c.<span class="pl-c1">z</span>)<span class="pl-k">?</span>a.set(<span class="pl-k">-</span>c.<span class="pl-c1">y</span>,c.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>)<span class="pl-k">:</span>a.set(<span class="pl-c1">0</span>,<span class="pl-k">-</span>c.<span class="pl-c1">z</span>,c.<span class="pl-c1">y</span>))<span class="pl-k">:</span>a.crossVectors(c,d);<span class="pl-v">this</span>._x<span class="pl-k">=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>._y<span class="pl-k">=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>._z<span class="pl-k">=</span>a.<span class="pl-c1">z</span>;<span class="pl-v">this</span>._w<span class="pl-k">=</span>b;<span class="pl-v">this</span>.normalize();<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">inverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.conjugate().normalize();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">conjugate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._x<span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>._y<span class="pl-k">*=-</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>._z<span class="pl-k">*=-</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>._x<span class="pl-k">*</span>a._x<span class="pl-k">+</span><span class="pl-v">this</span>._y<span class="pl-k">*</span>a._y<span class="pl-k">+</span><span class="pl-v">this</span>._z<span class="pl-k">*</span>a._z<span class="pl-k">+</span><span class="pl-v">this</span>._w<span class="pl-k">*</span>a._w},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._x<span class="pl-k">*</span><span class="pl-v">this</span>._x<span class="pl-k">+</span><span class="pl-v">this</span>._y<span class="pl-k">*</span><span class="pl-v">this</span>._y<span class="pl-k">+</span><span class="pl-v">this</span>._z<span class="pl-k">*</span><span class="pl-v">this</span>._z<span class="pl-k">+</span><span class="pl-v">this</span>._w<span class="pl-k">*</span><span class="pl-v">this</span>._w},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>._x<span class="pl-k">*</span><span class="pl-v">this</span>._x<span class="pl-k">+</span><span class="pl-v">this</span>._y<span class="pl-k">*</span><span class="pl-v">this</span>._y<span class="pl-k">+</span><span class="pl-v">this</span>._z<span class="pl-k">*</span><span class="pl-v">this</span>._z<span class="pl-k">+</span><span class="pl-v">this</span>._w<span class="pl-k">*</span><span class="pl-v">this</span>._w)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>();<span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">?</span>(<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>._w<span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a,<span class="pl-v">this</span>._x<span class="pl-k">*=</span>a,<span class="pl-v">this</span>._y<span class="pl-k">*=</span>a,<span class="pl-v">this</span>._z<span class="pl-k">*=</span>a,<span class="pl-v">this</span>._w<span class="pl-k">*=</span>a);<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},</td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line"><span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.multiplyQuaternions(a,b))<span class="pl-k">:</span><span class="pl-v">this</span>.multiplyQuaternions(<span class="pl-v">this</span>,a)},<span class="pl-en">multiplyQuaternions</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a._x,d<span class="pl-k">=</span>a._y,e<span class="pl-k">=</span>a._z,g<span class="pl-k">=</span>a._w,f<span class="pl-k">=</span>b._x,h<span class="pl-k">=</span>b._y,k<span class="pl-k">=</span>b._z,l<span class="pl-k">=</span>b._w;<span class="pl-v">this</span>._x<span class="pl-k">=</span>c<span class="pl-k">*</span>l<span class="pl-k">+</span>g<span class="pl-k">*</span>f<span class="pl-k">+</span>d<span class="pl-k">*</span>k<span class="pl-k">-</span>e<span class="pl-k">*</span>h;<span class="pl-v">this</span>._y<span class="pl-k">=</span>d<span class="pl-k">*</span>l<span class="pl-k">+</span>g<span class="pl-k">*</span>h<span class="pl-k">+</span>e<span class="pl-k">*</span>f<span class="pl-k">-</span>c<span class="pl-k">*</span>k;<span class="pl-v">this</span>._z<span class="pl-k">=</span>e<span class="pl-k">*</span>l<span class="pl-k">+</span>g<span class="pl-k">*</span>k<span class="pl-k">+</span>c<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>f;<span class="pl-v">this</span>._w<span class="pl-k">=</span>g<span class="pl-k">*</span>l<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">-</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>e<span class="pl-k">*</span>k;<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> a.applyQuaternion(<span class="pl-v">this</span>)},<span class="pl-en">slerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-v">this</span>;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-v">this</span>.copy(a);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._x,d<span class="pl-k">=</span><span class="pl-v">this</span>._y,e<span class="pl-k">=</span><span class="pl-v">this</span>._z,g<span class="pl-k">=</span><span class="pl-v">this</span>._w,f<span class="pl-k">=</span>g<span class="pl-k">*</span>a._w<span class="pl-k">+</span>c<span class="pl-k">*</span>a._x<span class="pl-k">+</span>d<span class="pl-k">*</span>a._y<span class="pl-k">+</span>e<span class="pl-k">*</span>a._z;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">?</span>(<span class="pl-v">this</span>._w<span class="pl-k">=-</span>a._w,<span class="pl-v">this</span>._x<span class="pl-k">=-</span>a._x,<span class="pl-v">this</span>._y<span class="pl-k">=-</span>a._y,<span class="pl-v">this</span>._z<span class="pl-k">=-</span>a._z,f<span class="pl-k">=-</span>f)<span class="pl-k">:</span><span class="pl-v">this</span>.copy(a);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;=</span>f)<span class="pl-k">return</span> <span class="pl-v">this</span>._w<span class="pl-k">=</span>g,<span class="pl-v">this</span>._x<span class="pl-k">=</span>c,<span class="pl-v">this</span>._y<span class="pl-k">=</span>d,<span class="pl-v">this</span>._z<span class="pl-k">=</span>e,<span class="pl-v">this</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(f),k<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>f<span class="pl-k">*</span>f);<span class="pl-k">if</span>(.<span class="pl-c1">001</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(k))<span class="pl-k">return</span> <span class="pl-v">this</span>._w<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(g<span class="pl-k">+</span><span class="pl-v">this</span>._w),<span class="pl-v">this</span>._x<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(c<span class="pl-k">+</span><span class="pl-v">this</span>._x),<span class="pl-v">this</span>._y<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(d<span class="pl-k">+</span><span class="pl-v">this</span>._y),<span class="pl-v">this</span>._z<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-v">this</span>._z),<span class="pl-v">this</span>;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>((<span class="pl-c1">1</span><span class="pl-k">-</span>b)<span class="pl-k">*</span>h)<span class="pl-k">/</span>k;h<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b<span class="pl-k">*</span>h)<span class="pl-k">/</span>k;<span class="pl-v">this</span>._w<span class="pl-k">=</span>g<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-v">this</span>._w<span class="pl-k">*</span>h;<span class="pl-v">this</span>._x<span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-v">this</span>._x<span class="pl-k">*</span>h;<span class="pl-v">this</span>._y<span class="pl-k">=</span>d<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-v">this</span>._y<span class="pl-k">*</span>h;<span class="pl-v">this</span>._z<span class="pl-k">=</span>e<span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-v">this</span>._z<span class="pl-k">*</span>h;<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a._x<span class="pl-k">===</span><span class="pl-v">this</span>._x<span class="pl-k">&amp;&amp;</span>a._y<span class="pl-k">===</span><span class="pl-v">this</span>._y<span class="pl-k">&amp;&amp;</span>a._z<span class="pl-k">===</span><span class="pl-v">this</span>._z<span class="pl-k">&amp;&amp;</span>a._w<span class="pl-k">===</span><span class="pl-v">this</span>._w},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>._x<span class="pl-k">=</span>a[b];<span class="pl-v">this</span>._y<span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-v">this</span>._z<span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-v">this</span>._w<span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">3</span>];<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-v">this</span>._x;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-v">this</span>._y;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-v">this</span>._z;a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-v">this</span>._w;<span class="pl-k">return</span> a},<span class="pl-en">onChange</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.onChangeCallback<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line">a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">onChangeCallback</span><span class="pl-k">:</span><span class="pl-k">function</span>(){}};<span class="pl-c1">THREE.Quaternion</span>.<span class="pl-en">slerp</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> c.copy(a).slerp(b,d)};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Vector2</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Vector2,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">getComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.<span class="pl-c1">y</span>)},</td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line"><span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.addVectors(a,b);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>b.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">+</span>b.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addScaledVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span><span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span><span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.subVectors(a,b);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">subScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">subVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">-</span>b.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>b.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">divide</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span>a.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a,<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a,<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a)<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">min</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">max</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clampScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>);a.set(c,c);b.set(d,d);<span class="pl-k">return</span> <span class="pl-v">this</span>.clamp(a,b)}}(),<span class="pl-en">floor</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">ceil</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);</td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">round</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">roundToZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>)},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.divideScalar(<span class="pl-v">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">distanceTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.distanceToSquared(a))},<span class="pl-en">distanceToSquared</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>;<span class="pl-k">return</span> b<span class="pl-k">*</span>b<span class="pl-k">+</span>a<span class="pl-k">*</span>a},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>();<span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>a<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.multiplyScalar(a<span class="pl-k">/</span>b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lerpVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.subVectors(b,a).multiplyScalar(c).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">x</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>a.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[b];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> a},<span class="pl-en">fromAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span>b<span class="pl-k">*</span>a.itemSize<span class="pl-k">+</span>c;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.array[b];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.array[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Vector3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Vector3,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">getComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line">a);}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.<span class="pl-c1">z</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.addVectors(a,b);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>b.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">+</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">+</span>b.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addScaledVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span><span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span><span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a.<span class="pl-c1">z</span><span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.subVectors(a,b);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span>a.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">subScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">subVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">-</span>b.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">-</span>b.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.multiplyVectors(a,b);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">*</span>b.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">applyEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Euler<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>);<span class="pl-v">this</span>.applyQuaternion(a.setFromEuler(b));<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),</td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line"><span class="pl-en">applyAxisAngle</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>);<span class="pl-v">this</span>.applyQuaternion(a.setFromAxisAngle(b,c));<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">applyMatrix3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>d;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>d;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">12</span>];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">13</span>];<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">14</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},</td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line"><span class="pl-en">applyProjection</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">11</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">15</span>]);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">12</span>])<span class="pl-k">*</span>e;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">13</span>])<span class="pl-k">*</span>e;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">14</span>])<span class="pl-k">*</span>e;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">applyQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">x</span>,g<span class="pl-k">=</span>a.<span class="pl-c1">y</span>,f<span class="pl-k">=</span>a.<span class="pl-c1">z</span>;a<span class="pl-k">=</span>a.w;<span class="pl-k">var</span> h<span class="pl-k">=</span>a<span class="pl-k">*</span>b<span class="pl-k">+</span>g<span class="pl-k">*</span>d<span class="pl-k">-</span>f<span class="pl-k">*</span>c,k<span class="pl-k">=</span>a<span class="pl-k">*</span>c<span class="pl-k">+</span>f<span class="pl-k">*</span>b<span class="pl-k">-</span>e<span class="pl-k">*</span>d,l<span class="pl-k">=</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>c<span class="pl-k">-</span>g<span class="pl-k">*</span>b,b<span class="pl-k">=-</span>e<span class="pl-k">*</span>b<span class="pl-k">-</span>g<span class="pl-k">*</span>c<span class="pl-k">-</span>f<span class="pl-k">*</span>d;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">*</span>a<span class="pl-k">+</span>b<span class="pl-k">*-</span>e<span class="pl-k">+</span>k<span class="pl-k">*-</span>f<span class="pl-k">-</span>l<span class="pl-k">*-</span>g;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>k<span class="pl-k">*</span>a<span class="pl-k">+</span>b<span class="pl-k">*-</span>g<span class="pl-k">+</span>l<span class="pl-k">*-</span>e<span class="pl-k">-</span>h<span class="pl-k">*-</span>f;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>l<span class="pl-k">*</span>a<span class="pl-k">+</span>b<span class="pl-k">*-</span>f<span class="pl-k">+</span>h<span class="pl-k">*-</span>g<span class="pl-k">-</span>k<span class="pl-k">*-</span>e;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">project</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.multiplyMatrices(b.projectionMatrix,a.getInverse(b.matrixWorld));<span class="pl-k">return</span> <span class="pl-v">this</span>.applyProjection(a)}}(),<span class="pl-en">unproject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.multiplyMatrices(b.matrixWorld,a.getInverse(b.projectionMatrix));<span class="pl-k">return</span> <span class="pl-v">this</span>.applyProjection(a)}}(),<span class="pl-en">transformDirection</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d;<span class="pl-v">this</span>.normalize();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">divide</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span></td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">/=</span>a.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a,<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a,<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a,<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a)<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">min</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">max</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line">(<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clampScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);a.set(c,c,c);b.set(d,d,d);<span class="pl-k">return</span> <span class="pl-v">this</span>.clamp(a,b)}}(),<span class="pl-en">floor</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">ceil</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">round</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line"><span class="pl-en">roundToZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>a.<span class="pl-c1">z</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>)},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.divideScalar(<span class="pl-v">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>();<span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>a<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.multiplyScalar(a<span class="pl-k">/</span>b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>(a.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lerpVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.subVectors(b,a).multiplyScalar(c).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">cross</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),</td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.crossVectors(a,b);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d<span class="pl-k">*</span>a.<span class="pl-c1">z</span><span class="pl-k">-</span>e<span class="pl-k">*</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e<span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">-</span>c<span class="pl-k">*</span>a.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>d<span class="pl-k">*</span>a.<span class="pl-c1">x</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">crossVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">x</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">y</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">z</span>,g<span class="pl-k">=</span>b.<span class="pl-c1">x</span>,f<span class="pl-k">=</span>b.<span class="pl-c1">y</span>,h<span class="pl-k">=</span>b.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>e<span class="pl-k">*</span>f;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>h;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>f<span class="pl-k">-</span>d<span class="pl-k">*</span>g;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">projectOnVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);a.copy(c).normalize();b<span class="pl-k">=</span><span class="pl-v">this</span>.dot(a);<span class="pl-k">return</span> <span class="pl-v">this</span>.copy(a).multiplyScalar(b)}}(),<span class="pl-en">projectOnPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);a.copy(<span class="pl-v">this</span>).projectOnVector(b);</td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">sub</span>(a)}}(),<span class="pl-en">reflect</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">sub</span>(a.copy(b).multiplyScalar(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>.dot(b)))}}(),<span class="pl-en">angleTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.dot(a)<span class="pl-k">/</span>(<span class="pl-v">this</span>.<span class="pl-c1">length</span>()<span class="pl-k">*</span>a.<span class="pl-c1">length</span>());<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(a,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>))},<span class="pl-en">distanceTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.distanceToSquared(a))},<span class="pl-en">distanceToSquared</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">-</span>a.<span class="pl-c1">z</span>;<span class="pl-k">return</span> b<span class="pl-k">*</span>b<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>a},<span class="pl-en">setEulerFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.<span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class="pl-en">setEulerFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">getPositionFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.setFromMatrixPosition(a)},<span class="pl-en">getScaleFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.setFromMatrixScale(a)},<span class="pl-en">getColumnFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.setFromMatrixColumn(a,b)},<span class="pl-en">setFromMatrixPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>];<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromMatrixScale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.set(a.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>],a.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>],a.<span class="pl-c1">elements</span>[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),c<span class="pl-k">=</span><span class="pl-v">this</span>.set(a.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>],a.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>],a.<span class="pl-c1">elements</span>[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>();a<span class="pl-k">=</span><span class="pl-v">this</span>.set(a.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>],a.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>],a.<span class="pl-c1">elements</span>[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line">a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromMatrixColumn</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>a,d<span class="pl-k">=</span>b.<span class="pl-c1">elements</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d[c];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d[c<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>d[c<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">x</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>a.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>a.<span class="pl-c1">z</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[b];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> a},<span class="pl-en">fromAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span>b<span class="pl-k">*</span>a.itemSize<span class="pl-k">+</span>c;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.array[b];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.array[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line">a.array[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector4</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.w<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Vector4</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Vector4,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c;<span class="pl-v">this</span>.w<span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.w<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-v">this</span>.w<span class="pl-k">=</span>b;<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">getComponent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">switch</span>(a){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line"><span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">z</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.w;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>index is out of range: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.<span class="pl-c1">z</span>,<span class="pl-v">this</span>.w)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.w<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.w<span class="pl-k">?</span>a.w<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.addVectors(a,b);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.w<span class="pl-k">+=</span>a.w;<span class="pl-k">return</span> <span class="pl-v">this</span>},</td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line"><span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a;<span class="pl-v">this</span>.w<span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>b.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">+</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">+</span>b.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.w<span class="pl-k">=</span>a.w<span class="pl-k">+</span>b.w;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">addScaledVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span><span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span><span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a.<span class="pl-c1">z</span><span class="pl-k">*</span>b;<span class="pl-v">this</span>.w<span class="pl-k">+=</span>a.w<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.subVectors(a,b);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span>a.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.w<span class="pl-k">-=</span>a.w;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">subScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line">a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span>a;<span class="pl-v">this</span>.w<span class="pl-k">-=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">subVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">-</span>b.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">-</span>b.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.w<span class="pl-k">=</span>a.w<span class="pl-k">-</span>b.w;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a;<span class="pl-v">this</span>.w<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>.w;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">12</span>]<span class="pl-k">*</span>e;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">13</span>]<span class="pl-k">*</span>e;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">14</span>]<span class="pl-k">*</span>e;<span class="pl-v">this</span>.w<span class="pl-k">=</span>a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>b<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>a[<span class="pl-c1">11</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>a[<span class="pl-c1">15</span>]<span class="pl-k">*</span>e;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a,<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line">a,<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a,<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a,<span class="pl-v">this</span>.w<span class="pl-k">*=</span>a)<span class="pl-k">:</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>.w<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setAxisAngleFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.w<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(a.w);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a.w<span class="pl-k">*</span>a.w);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">/</span>b,<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">/</span>b,<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">/</span>b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setAxisAngleFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>a[<span class="pl-c1">0</span>];d<span class="pl-k">=</span>a[<span class="pl-c1">4</span>];<span class="pl-k">var</span> g<span class="pl-k">=</span>a[<span class="pl-c1">8</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],k<span class="pl-k">=</span>a[<span class="pl-c1">9</span>];c<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];b<span class="pl-k">=</span>a[<span class="pl-c1">6</span>];<span class="pl-k">var</span> l<span class="pl-k">=</span>a[<span class="pl-c1">10</span>];<span class="pl-k">if</span>(.<span class="pl-c1">01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d<span class="pl-k">-</span>f)<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(g<span class="pl-k">-</span>c)<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(k<span class="pl-k">-</span>b)){<span class="pl-k">if</span>(.<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d<span class="pl-k">+</span>f)<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(g<span class="pl-k">+</span>c)<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">1</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(k<span class="pl-k">+</span>b)<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e<span class="pl-k">+</span>h<span class="pl-k">+</span>l<span class="pl-k">-</span><span class="pl-c1">3</span>))<span class="pl-k">return</span> <span class="pl-v">this</span>.set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-v">this</span>;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;e<span class="pl-k">=</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;h<span class="pl-k">=</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;l<span class="pl-k">=</span>(l<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;d<span class="pl-k">=</span>(d<span class="pl-k">+</span>f)<span class="pl-k">/</span><span class="pl-c1">4</span>;g<span class="pl-k">=</span>(g<span class="pl-k">+</span>c)<span class="pl-k">/</span><span class="pl-c1">4</span>;k<span class="pl-k">=</span>(k<span class="pl-k">+</span>b)<span class="pl-k">/</span><span class="pl-c1">4</span>;e<span class="pl-k">&gt;</span>h<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&gt;</span>l<span class="pl-k">?</span>.<span class="pl-c1">01</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>c<span class="pl-k">=</span>.<span class="pl-c1">707106781</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(e),c<span class="pl-k">=</span>d<span class="pl-k">/</span>b,d<span class="pl-k">=</span>g<span class="pl-k">/</span>b)<span class="pl-k">:</span>h<span class="pl-k">&gt;</span>l<span class="pl-k">?</span>.<span class="pl-c1">01</span><span class="pl-k">&gt;</span>h<span class="pl-k">?</span>(b<span class="pl-k">=</span>.<span class="pl-c1">707106781</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>.<span class="pl-c1">707106781</span>)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h),b<span class="pl-k">=</span>d<span class="pl-k">/</span>c,d<span class="pl-k">=</span>k<span class="pl-k">/</span>c)<span class="pl-k">:</span>.<span class="pl-c1">01</span><span class="pl-k">&gt;</span>l<span class="pl-k">?</span>(c<span class="pl-k">=</span>b<span class="pl-k">=</span>.<span class="pl-c1">707106781</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(l),b<span class="pl-k">=</span>g<span class="pl-k">/</span>d,c<span class="pl-k">=</span>k<span class="pl-k">/</span>d);<span class="pl-v">this</span>.set(b,c,d,a);<span class="pl-k">return</span> <span class="pl-v">this</span>}a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>((b<span class="pl-k">-</span>k)<span class="pl-k">*</span>(b<span class="pl-k">-</span>k)<span class="pl-k">+</span>(g<span class="pl-k">-</span>c)<span class="pl-k">*</span>(g<span class="pl-k">-</span>c)<span class="pl-k">+</span>(f<span class="pl-k">-</span>d)<span class="pl-k">*</span>(f<span class="pl-k">-</span>d));.<span class="pl-c1">001</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(b<span class="pl-k">-</span>k)<span class="pl-k">/</span>a;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(g<span class="pl-k">-</span>c)<span class="pl-k">/</span>a;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(f<span class="pl-k">-</span>d)<span class="pl-k">/</span>a;<span class="pl-v">this</span>.w<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>((e<span class="pl-k">+</span>h<span class="pl-k">+</span>l<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">min</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.w<span class="pl-k">&gt;</span>a.w<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.w<span class="pl-k">=</span>a.w);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">max</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.w<span class="pl-k">&lt;</span>a.w<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.w<span class="pl-k">=</span>a.w);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.<span class="pl-c1">z</span><span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span>b.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.w<span class="pl-k">&lt;</span>a.w<span class="pl-k">?</span><span class="pl-v">this</span>.w<span class="pl-k">=</span>a.w<span class="pl-k">:</span><span class="pl-v">this</span>.w<span class="pl-k">&gt;</span>b.w<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.w<span class="pl-k">=</span>b.w);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clampScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,</td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line">b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>);a.set(c,c,c,c);b.set(d,d,d,d);<span class="pl-k">return</span> <span class="pl-v">this</span>.clamp(a,b)}}(),<span class="pl-en">floor</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.w<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.w);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">ceil</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.w<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.w);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">round</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.w<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-v">this</span>.w);</td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">roundToZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.w<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.w<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-v">this</span>.w)<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.w);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.w<span class="pl-k">=-</span><span class="pl-v">this</span>.w;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>a.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-v">this</span>.w<span class="pl-k">*</span>a.w},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-v">this</span>.w<span class="pl-k">*</span><span class="pl-v">this</span>.w},</td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line"><span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-v">this</span>.w<span class="pl-k">*</span><span class="pl-v">this</span>.w)},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-v">this</span>.w)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.divideScalar(<span class="pl-v">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>();<span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>a<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.multiplyScalar(a<span class="pl-k">/</span>b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lerp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>(a.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>b;<span class="pl-v">this</span>.w<span class="pl-k">+=</span>(a.w<span class="pl-k">-</span><span class="pl-v">this</span>.w)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lerpVectors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,</td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>){<span class="pl-v">this</span>.subVectors(b,a).multiplyScalar(c).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">x</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>a.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>a.<span class="pl-c1">z</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>a.w<span class="pl-k">===</span><span class="pl-v">this</span>.w},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[b];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-v">this</span>.w<span class="pl-k">=</span>a[b<span class="pl-k">+</span><span class="pl-c1">3</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>;a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.w;<span class="pl-k">return</span> a},<span class="pl-en">fromAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span>b<span class="pl-k">*</span>a.itemSize<span class="pl-k">+</span>c;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a.array[b];<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a.array[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a.array[b<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-v">this</span>.w<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line">a.array[b<span class="pl-k">+</span><span class="pl-c1">3</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Euler</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._y<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._z<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._order<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">THREE</span>.Euler.DefaultOrder};<span class="pl-c1">THREE</span>.Euler.RotationOrders<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ YZX ZXY XZY YXZ ZYX<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>);<span class="pl-c1">THREE</span>.Euler.DefaultOrder<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Euler</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Euler,get <span class="pl-en">x</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._x},set <span class="pl-en">x</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},get <span class="pl-en">y</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._y},set <span class="pl-en">y</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._y<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},get <span class="pl-en">z</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._z},set <span class="pl-en">z</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._z<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},get <span class="pl-en">order</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._order},set <span class="pl-en">order</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._order<span class="pl-k">=</span>a;<span class="pl-v">this</span>.onChangeCallback()},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a;<span class="pl-v">this</span>._y<span class="pl-k">=</span>b;<span class="pl-v">this</span>._z<span class="pl-k">=</span>c;<span class="pl-v">this</span>._order<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-v">this</span>._order;<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>._x,</td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>._y,<span class="pl-v">this</span>._z,<span class="pl-v">this</span>._order)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a._x;<span class="pl-v">this</span>._y<span class="pl-k">=</span>a._y;<span class="pl-v">this</span>._z<span class="pl-k">=</span>a._z;<span class="pl-v">this</span>._order<span class="pl-k">=</span>a._order;<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp,e<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>e[<span class="pl-c1">0</span>];<span class="pl-k">var</span> g<span class="pl-k">=</span>e[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>e[<span class="pl-c1">8</span>],h<span class="pl-k">=</span>e[<span class="pl-c1">1</span>],k<span class="pl-k">=</span>e[<span class="pl-c1">5</span>],l<span class="pl-k">=</span>e[<span class="pl-c1">9</span>],n<span class="pl-k">=</span>e[<span class="pl-c1">2</span>],p<span class="pl-k">=</span>e[<span class="pl-c1">6</span>],e<span class="pl-k">=</span>e[<span class="pl-c1">10</span>];b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-v">this</span>._order;<span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(d(f,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),.<span class="pl-c1">99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f)<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>l,e),<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>g,a))<span class="pl-k">:</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(p,k),<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span>d(l,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),.<span class="pl-c1">99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(l)<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line">(<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(f,e),<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,k))<span class="pl-k">:</span>(<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>n,a),<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(d(p,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),.<span class="pl-c1">99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(p)<span class="pl-k">?</span>(<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>n,e),<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>g,k))<span class="pl-k">:</span>(<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,a)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span>d(n,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),.<span class="pl-c1">99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(n)<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(p,e),<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,a))<span class="pl-k">:</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>g,k)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(d(h,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),.<span class="pl-c1">99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(h)<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>l,k),<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>n,a))<span class="pl-k">:</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(f,e)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-v">this</span>._z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span>d(g,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),.<span class="pl-c1">99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(g)<span class="pl-k">?</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(p,k),<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(f,a))<span class="pl-k">:</span>(<span class="pl-v">this</span>._x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>l,e),<span class="pl-v">this</span>._y<span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Euler: .setFromRotationMatrix() given unsupported order: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b);<span class="pl-v">this</span>._order<span class="pl-k">=</span>b;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>c)<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeRotationFromQuaternion(b);<span class="pl-v">this</span>.setFromRotationMatrix(a,c,d);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">setFromVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.set(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>,b<span class="pl-k">||</span><span class="pl-v">this</span>._order)},<span class="pl-en">reorder</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){a.setFromEuler(<span class="pl-v">this</span>);<span class="pl-v">this</span>.setFromQuaternion(a,b)}}(),<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a._x<span class="pl-k">===</span><span class="pl-v">this</span>._x<span class="pl-k">&amp;&amp;</span>a._y<span class="pl-k">===</span><span class="pl-v">this</span>._y<span class="pl-k">&amp;&amp;</span>a._z<span class="pl-k">===</span><span class="pl-v">this</span>._z<span class="pl-k">&amp;&amp;</span>a._order<span class="pl-k">===</span><span class="pl-v">this</span>._order},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>._x<span class="pl-k">=</span>a[<span class="pl-c1">0</span>];<span class="pl-v">this</span>._y<span class="pl-k">=</span>a[<span class="pl-c1">1</span>];<span class="pl-v">this</span>._z<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a[<span class="pl-c1">3</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._order<span class="pl-k">=</span>a[<span class="pl-c1">3</span>]);<span class="pl-v">this</span>.onChangeCallback();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a[b]<span class="pl-k">=</span><span class="pl-v">this</span>._x;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-v">this</span>._y;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-v">this</span>._z;a[b<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-v">this</span>._order;<span class="pl-k">return</span> a},<span class="pl-en">toVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a<span class="pl-k">?</span>a.set(<span class="pl-v">this</span>._x,<span class="pl-v">this</span>._y,<span class="pl-v">this</span>._z)<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-v">this</span>._x,<span class="pl-v">this</span>._y,<span class="pl-v">this</span>._z)},<span class="pl-en">onChange</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.onChangeCallback<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">onChangeCallback</span><span class="pl-k">:</span><span class="pl-k">function</span>(){}};<span class="pl-c1">THREE</span>.<span class="pl-en">Line3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">start</span><span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.end<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Line3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Line3,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">start</span>.copy(a);<span class="pl-v">this</span>.end.copy(b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">start</span>.copy(a.<span class="pl-c1">start</span>);<span class="pl-v">this</span>.end.copy(a.end);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).addVectors(<span class="pl-v">this</span>.<span class="pl-c1">start</span>,<span class="pl-v">this</span>.end).multiplyScalar(.<span class="pl-c1">5</span>)},<span class="pl-en">delta</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).subVectors(<span class="pl-v">this</span>.end,<span class="pl-v">this</span>.<span class="pl-c1">start</span>)},<span class="pl-en">distanceSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">start</span>.distanceToSquared(<span class="pl-v">this</span>.end)},<span class="pl-en">distance</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">start</span>.distanceTo(<span class="pl-v">this</span>.end)},</td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line"><span class="pl-en">at</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>.delta(c).multiplyScalar(a).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.<span class="pl-c1">start</span>)},<span class="pl-en">closestPointToPointParameter</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a.subVectors(c,<span class="pl-v">this</span>.<span class="pl-c1">start</span>);b.subVectors(<span class="pl-v">this</span>.end,<span class="pl-v">this</span>.<span class="pl-c1">start</span>);<span class="pl-k">var</span> e<span class="pl-k">=</span>b.dot(b),e<span class="pl-k">=</span>b.dot(a)<span class="pl-k">/</span>e;d<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(e,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-k">return</span> e}}(),<span class="pl-en">closestPointToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.closestPointToPointParameter(a,b);c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>.delta(c).multiplyScalar(a).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.<span class="pl-c1">start</span>)},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">start</span>.applyMatrix4(a);</td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.end.applyMatrix4(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">start</span>.equals(<span class="pl-v">this</span>.<span class="pl-c1">start</span>)<span class="pl-k">&amp;&amp;</span>a.end.equals(<span class="pl-v">this</span>.end)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Box2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.min<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>);<span class="pl-v">this</span>.max<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>)};</td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Box2</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Box2,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.min.copy(a);<span class="pl-v">this</span>.max.copy(b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.makeEmpty();<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.expandByPoint(a[b]);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromCenterAndSize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a.copy(c).multiplyScalar(.<span class="pl-c1">5</span>);<span class="pl-v">this</span>.min.copy(b).<span class="pl-c1">sub</span>(d);<span class="pl-v">this</span>.max.copy(b).<span class="pl-c1">add</span>(d);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.copy(a.min);<span class="pl-v">this</span>.max.copy(a.max);</td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeEmpty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Infinity</span>;<span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-c1">Infinity</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">empty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).addVectors(<span class="pl-v">this</span>.min,<span class="pl-v">this</span>.max).multiplyScalar(.<span class="pl-c1">5</span>)},<span class="pl-en">size</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).subVectors(<span class="pl-v">this</span>.max,<span class="pl-v">this</span>.min)},<span class="pl-en">expandByPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">min</span>(a);<span class="pl-v">this</span>.max.<span class="pl-c1">max</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">expandByVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">sub</span>(a);<span class="pl-v">this</span>.max.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">expandByScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.addScalar(<span class="pl-k">-</span>a);</td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.max.addScalar(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">||</span>a.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">||</span>a.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">||</span>a.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:!</span><span class="pl-c1">0</span>},<span class="pl-en">containsBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>a.min.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>a.max.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span>a.min.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>a.max.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">?!</span><span class="pl-c1">0</span><span class="pl-k">:!</span><span class="pl-c1">1</span>},<span class="pl-en">getParameter</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).set((a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span>)<span class="pl-k">/</span>(<span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span>),(a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span>)<span class="pl-k">/</span>(<span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span>))},<span class="pl-en">isIntersectionBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.max.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">||</span>a.min.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">||</span>a.max.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">||</span>a.min.<span class="pl-c1">y</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:!</span><span class="pl-c1">0</span>},<span class="pl-en">clampPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>).copy(a).clamp(<span class="pl-v">this</span>.min,<span class="pl-v">this</span>.max)},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> a.copy(b).clamp(<span class="pl-v">this</span>.min,<span class="pl-v">this</span>.max).<span class="pl-c1">sub</span>(b).<span class="pl-c1">length</span>()}}(),<span class="pl-en">intersect</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">max</span>(a.min);<span class="pl-v">this</span>.max.<span class="pl-c1">min</span>(a.max);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">union</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">min</span>(a.min);<span class="pl-v">this</span>.max.<span class="pl-c1">max</span>(a.max);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">add</span>(a);<span class="pl-v">this</span>.max.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.min.equals(<span class="pl-v">this</span>.min)<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line">a.max.equals(<span class="pl-v">this</span>.max)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Box3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.min<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>);<span class="pl-v">this</span>.max<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>)};</td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Box3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Box3,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.min.copy(a);<span class="pl-v">this</span>.max.copy(b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.makeEmpty();<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.expandByPoint(a[b]);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromCenterAndSize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a.copy(c).multiplyScalar(.<span class="pl-c1">5</span>);<span class="pl-v">this</span>.min.copy(b).<span class="pl-c1">sub</span>(d);<span class="pl-v">this</span>.max.copy(b).<span class="pl-c1">add</span>(d);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">setFromObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>;b.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.makeEmpty();b.traverse(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b.geometry;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e)<span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry)<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>e.vertices,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>g.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>)a.copy(g[e]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a);<span class="pl-k">else</span> <span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e.<span class="pl-c1">attributes</span>.position)<span class="pl-k">for</span>(g<span class="pl-k">=</span>e.<span class="pl-c1">attributes</span>.position.array,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>g.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)a.set(g[e],g[e<span class="pl-k">+</span><span class="pl-c1">1</span>],g[e<span class="pl-k">+</span><span class="pl-c1">2</span>]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.copy(a.min);</td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.max.copy(a.max);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeEmpty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.min.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Infinity</span>;<span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.max.<span class="pl-c1">z</span><span class="pl-k">=-</span><span class="pl-c1">Infinity</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">empty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-v">this</span>.max.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">z</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).addVectors(<span class="pl-v">this</span>.min,<span class="pl-v">this</span>.max).multiplyScalar(.<span class="pl-c1">5</span>)},<span class="pl-en">size</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).subVectors(<span class="pl-v">this</span>.max,<span class="pl-v">this</span>.min)},<span class="pl-en">expandByPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">min</span>(a);<span class="pl-v">this</span>.max.<span class="pl-c1">max</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">expandByVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">sub</span>(a);</td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.max.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">expandByScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.addScalar(<span class="pl-k">-</span>a);<span class="pl-v">this</span>.max.addScalar(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">||</span>a.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">||</span>a.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">||</span>a.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">||</span>a.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">z</span><span class="pl-k">||</span>a.<span class="pl-c1">z</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">z</span><span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:!</span><span class="pl-c1">0</span>},<span class="pl-en">containsBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>a.min.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>a.max.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span>a.min.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>a.max.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.min.<span class="pl-c1">z</span><span class="pl-k">&lt;=</span>a.min.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>a.max.<span class="pl-c1">z</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.max.<span class="pl-c1">z</span><span class="pl-k">?!</span><span class="pl-c1">0</span><span class="pl-k">:!</span><span class="pl-c1">1</span>},<span class="pl-en">getParameter</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).set((a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span>)<span class="pl-k">/</span>(<span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.min.<span class="pl-c1">x</span>),(a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span>)<span class="pl-k">/</span>(<span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span>),(a.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">z</span>)<span class="pl-k">/</span>(<span class="pl-v">this</span>.max.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-v">this</span>.min.<span class="pl-c1">z</span>))},<span class="pl-en">isIntersectionBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.max.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">x</span><span class="pl-k">||</span>a.min.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">x</span><span class="pl-k">||</span>a.max.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">y</span><span class="pl-k">||</span>a.min.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">y</span><span class="pl-k">||</span>a.max.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.min.<span class="pl-c1">z</span><span class="pl-k">||</span>a.min.<span class="pl-c1">z</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.max.<span class="pl-c1">z</span><span class="pl-k">?!</span><span class="pl-c1">1</span><span class="pl-k">:!</span><span class="pl-c1">0</span>},<span class="pl-en">clampPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).copy(a).clamp(<span class="pl-v">this</span>.min,<span class="pl-v">this</span>.max)},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> a.copy(b).clamp(<span class="pl-v">this</span>.min,<span class="pl-v">this</span>.max).<span class="pl-c1">sub</span>(b).<span class="pl-c1">length</span>()}}(),<span class="pl-en">getBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>;b.center<span class="pl-k">=</span><span class="pl-v">this</span>.center();b.radius<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">size</span>(a).<span class="pl-c1">length</span>();<span class="pl-k">return</span> b}}(),<span class="pl-en">intersect</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">max</span>(a.min);<span class="pl-v">this</span>.max.<span class="pl-c1">min</span>(a.max);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">union</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">min</span>(a.min);<span class="pl-v">this</span>.max.<span class="pl-c1">max</span>(a.max);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>];<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){a[<span class="pl-c1">0</span>].set(<span class="pl-v">this</span>.min.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.min.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.min.<span class="pl-c1">z</span>).applyMatrix4(b);a[<span class="pl-c1">1</span>].set(<span class="pl-v">this</span>.min.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.min.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">z</span>).applyMatrix4(b);a[<span class="pl-c1">2</span>].set(<span class="pl-v">this</span>.min.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.min.<span class="pl-c1">z</span>).applyMatrix4(b);a[<span class="pl-c1">3</span>].set(<span class="pl-v">this</span>.min.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">z</span>).applyMatrix4(b);a[<span class="pl-c1">4</span>].set(<span class="pl-v">this</span>.max.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.min.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.min.<span class="pl-c1">z</span>).applyMatrix4(b);a[<span class="pl-c1">5</span>].set(<span class="pl-v">this</span>.max.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.min.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">z</span>).applyMatrix4(b);a[<span class="pl-c1">6</span>].set(<span class="pl-v">this</span>.max.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.min.<span class="pl-c1">z</span>).applyMatrix4(b);a[<span class="pl-c1">7</span>].set(<span class="pl-v">this</span>.max.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.max.<span class="pl-c1">z</span>).applyMatrix4(b);<span class="pl-v">this</span>.makeEmpty();<span class="pl-v">this</span>.setFromPoints(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.min.<span class="pl-c1">add</span>(a);</td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.max.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.min.equals(<span class="pl-v">this</span>.min)<span class="pl-k">&amp;&amp;</span>a.max.equals(<span class="pl-v">this</span>.max)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Matrix3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">elements</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]);<span class="pl-c1">0</span><span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Matrix3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Matrix3,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;l[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a;l[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b;l[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c;l[<span class="pl-c1">1</span>]<span class="pl-k">=</span>d;l[<span class="pl-c1">4</span>]<span class="pl-k">=</span>e;l[<span class="pl-c1">7</span>]<span class="pl-k">=</span>g;l[<span class="pl-c1">2</span>]<span class="pl-k">=</span>f;l[<span class="pl-c1">5</span>]<span class="pl-k">=</span>h;l[<span class="pl-c1">8</span>]<span class="pl-k">=</span>k;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">identity</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).fromArray(<span class="pl-v">this</span>.<span class="pl-c1">elements</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-v">this</span>.set(a[<span class="pl-c1">0</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">8</span>]);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> a.applyMatrix3(<span class="pl-v">this</span>)},<span class="pl-en">multiplyVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.applyToVector3Array(a)},<span class="pl-en">applyToVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">+=</span><span class="pl-c1">3</span>,c<span class="pl-k">+=</span><span class="pl-c1">3</span>)a.fromArray(b,c),a.applyMatrix3(<span class="pl-v">this</span>),a.toArray(b,c);<span class="pl-k">return</span> b}}(),<span class="pl-en">applyToBuffer</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>b.<span class="pl-c1">length</span><span class="pl-k">/</span>b.itemSize);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>,c<span class="pl-k">++</span>)a.<span class="pl-c1">x</span><span class="pl-k">=</span>b.getX(c),a.<span class="pl-c1">y</span><span class="pl-k">=</span>b.getY(c),a.<span class="pl-c1">z</span><span class="pl-k">=</span>b.getZ(c),a.applyMatrix3(<span class="pl-v">this</span>),b.setXYZ(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);<span class="pl-k">return</span> b}}(),<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">determinant</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,b<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],c<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">6</span>],k<span class="pl-k">=</span>a[<span class="pl-c1">7</span>],a<span class="pl-k">=</span>a[<span class="pl-c1">8</span>];<span class="pl-k">return</span> b<span class="pl-k">*</span>g<span class="pl-k">*</span>a<span class="pl-k">-</span>b<span class="pl-k">*</span>f<span class="pl-k">*</span>k<span class="pl-k">-</span>c<span class="pl-k">*</span>e<span class="pl-k">*</span>a<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>e<span class="pl-k">*</span>k<span class="pl-k">-</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>h},<span class="pl-en">getInverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;d[<span class="pl-c1">0</span>]<span class="pl-k">=</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">5</span>]<span class="pl-k">-</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">9</span>];d[<span class="pl-c1">1</span>]<span class="pl-k">=-</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">1</span>]<span class="pl-k">+</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">9</span>];d[<span class="pl-c1">2</span>]<span class="pl-k">=</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">1</span>]<span class="pl-k">-</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">5</span>];d[<span class="pl-c1">3</span>]<span class="pl-k">=-</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>]<span class="pl-k">+</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">4</span>]<span class="pl-k">=</span>c[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">-</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">5</span>]<span class="pl-k">=-</span>c[<span class="pl-c1">6</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">+</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>];d[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c[<span class="pl-c1">9</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>]<span class="pl-k">-</span>c[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">7</span>]<span class="pl-k">=-</span>c[<span class="pl-c1">9</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">+</span>c[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c[<span class="pl-c1">8</span>];d[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c[<span class="pl-c1">5</span>]<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">-</span>c[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c[<span class="pl-c1">4</span>];c<span class="pl-k">=</span>c[<span class="pl-c1">0</span>]<span class="pl-k">*</span>d[<span class="pl-c1">0</span>]<span class="pl-k">+</span>c[<span class="pl-c1">1</span>]<span class="pl-k">*</span>d[<span class="pl-c1">3</span>]<span class="pl-k">+</span>c[<span class="pl-c1">2</span>]<span class="pl-k">*</span>d[<span class="pl-c1">6</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>c){<span class="pl-k">if</span>(b)<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>Matrix3.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Matrix3.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.identity();<span class="pl-k">return</span> <span class="pl-v">this</span>}<span class="pl-v">this</span>.multiplyScalar(<span class="pl-c1">1</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line">c);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">transpose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>];b[<span class="pl-c1">3</span>]<span class="pl-k">=</span>a;a<span class="pl-k">=</span>b[<span class="pl-c1">2</span>];b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>];b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>a;a<span class="pl-k">=</span>b[<span class="pl-c1">5</span>];b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">7</span>];b[<span class="pl-c1">7</span>]<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">flattenToArrayOffset</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;a[b]<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[<span class="pl-c1">1</span>];a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c[<span class="pl-c1">2</span>];a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>c[<span class="pl-c1">3</span>];a[b<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>c[<span class="pl-c1">4</span>];a[b<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>c[<span class="pl-c1">5</span>];a[b<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>c[<span class="pl-c1">6</span>];a[b<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>c[<span class="pl-c1">7</span>];a[b<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>c[<span class="pl-c1">8</span>];<span class="pl-k">return</span> a},<span class="pl-en">getNormalMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.getInverse(a).transpose();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">transposeIntoArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;a[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>];a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>];a[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];a[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b[<span class="pl-c1">4</span>];a[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">7</span>];a[<span class="pl-c1">6</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line">b[<span class="pl-c1">2</span>];a[<span class="pl-c1">7</span>]<span class="pl-k">=</span>b[<span class="pl-c1">5</span>];a[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b[<span class="pl-c1">8</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">elements</span>.set(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span>[a[<span class="pl-c1">0</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">8</span>]]}};<span class="pl-c1">THREE</span>.<span class="pl-en">Matrix4</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">elements</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]);<span class="pl-c1">0</span><span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Matrix4</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Matrix4,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">n</span>,<span class="pl-smi">p</span>,<span class="pl-smi">m</span>,<span class="pl-smi">q</span>,<span class="pl-smi">t</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;u[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a;u[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b;u[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c;u[<span class="pl-c1">12</span>]<span class="pl-k">=</span>d;u[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e;u[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g;u[<span class="pl-c1">9</span>]<span class="pl-k">=</span>f;u[<span class="pl-c1">13</span>]<span class="pl-k">=</span>h;u[<span class="pl-c1">2</span>]<span class="pl-k">=</span>k;u[<span class="pl-c1">6</span>]<span class="pl-k">=</span>l;u[<span class="pl-c1">10</span>]<span class="pl-k">=</span>n;u[<span class="pl-c1">14</span>]<span class="pl-k">=</span>p;u[<span class="pl-c1">3</span>]<span class="pl-k">=</span>m;u[<span class="pl-c1">7</span>]<span class="pl-k">=</span>q;u[<span class="pl-c1">11</span>]<span class="pl-k">=</span>t;u[<span class="pl-c1">15</span>]<span class="pl-k">=</span>r;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">identity</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).fromArray(<span class="pl-v">this</span>.<span class="pl-c1">elements</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">elements</span>.set(a.<span class="pl-c1">elements</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">extractPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>.copyPosition(a)},<span class="pl-en">copyPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span>a[<span class="pl-c1">12</span>];b[<span class="pl-c1">13</span>]<span class="pl-k">=</span>a[<span class="pl-c1">13</span>];b[<span class="pl-c1">14</span>]<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">extractBasis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;a.set(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>]);b.set(d[<span class="pl-c1">4</span>],d[<span class="pl-c1">5</span>],d[<span class="pl-c1">6</span>]);c.set(d[<span class="pl-c1">8</span>],d[<span class="pl-c1">9</span>],d[<span class="pl-c1">10</span>]);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeBasis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.set(a.<span class="pl-c1">x</span>,b.<span class="pl-c1">x</span>,c.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>,a.<span class="pl-c1">y</span>,b.<span class="pl-c1">y</span>,c.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>,a.<span class="pl-c1">z</span>,b.<span class="pl-c1">z</span>,c.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">extractRotation</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;b<span class="pl-k">=</span>b.<span class="pl-c1">elements</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a.set(b[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line">b[<span class="pl-c1">1</span>],b[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a.set(b[<span class="pl-c1">4</span>],b[<span class="pl-c1">5</span>],b[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>(),g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a.set(b[<span class="pl-c1">8</span>],b[<span class="pl-c1">9</span>],b[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>d;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>d;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>d;c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b[<span class="pl-c1">4</span>]<span class="pl-k">*</span>e;c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span>e;c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>e;c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b[<span class="pl-c1">8</span>]<span class="pl-k">*</span>g;c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span>g;c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>g;<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">makeRotationFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Euler<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">x</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">y</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">z</span>,g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(c),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(c),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(d),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(d),h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(e),</td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(e);<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a.order){a<span class="pl-k">=</span>g<span class="pl-k">*</span>h;<span class="pl-k">var</span> k<span class="pl-k">=</span>g<span class="pl-k">*</span>e,l<span class="pl-k">=</span>c<span class="pl-k">*</span>h,n<span class="pl-k">=</span>c<span class="pl-k">*</span>e;b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h;b[<span class="pl-c1">4</span>]<span class="pl-k">=-</span>f<span class="pl-k">*</span>e;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>d;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>k<span class="pl-k">+</span>l<span class="pl-k">*</span>d;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>a<span class="pl-k">-</span>n<span class="pl-k">*</span>d;b[<span class="pl-c1">9</span>]<span class="pl-k">=-</span>c<span class="pl-k">*</span>f;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>n<span class="pl-k">-</span>a<span class="pl-k">*</span>d;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>l<span class="pl-k">+</span>k<span class="pl-k">*</span>d;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f}<span class="pl-k">else</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a.order<span class="pl-k">?</span>(a<span class="pl-k">=</span>f<span class="pl-k">*</span>h,k<span class="pl-k">=</span>f<span class="pl-k">*</span>e,l<span class="pl-k">=</span>d<span class="pl-k">*</span>h,n<span class="pl-k">=</span>d<span class="pl-k">*</span>e,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a<span class="pl-k">+</span>n<span class="pl-k">*</span>c,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>c<span class="pl-k">-</span>k,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>d,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>e,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=-</span>c,b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>c<span class="pl-k">-</span>l,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span>c,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a.order<span class="pl-k">?</span>(a<span class="pl-k">=</span>f<span class="pl-k">*</span>h,k<span class="pl-k">=</span>f<span class="pl-k">*</span>e,l<span class="pl-k">=</span>d<span class="pl-k">*</span>h,n<span class="pl-k">=</span>d<span class="pl-k">*</span>e,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a<span class="pl-k">-</span>n<span class="pl-k">*</span>c,b[<span class="pl-c1">4</span>]<span class="pl-k">=-</span>g<span class="pl-k">*</span>e,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>l<span class="pl-k">+</span>k<span class="pl-k">*</span>c,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>k<span class="pl-k">+</span>l<span class="pl-k">*</span>c,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>n<span class="pl-k">-</span>a<span class="pl-k">*</span>c,b[<span class="pl-c1">2</span>]<span class="pl-k">=-</span>g<span class="pl-k">*</span>d,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a.order<span class="pl-k">?</span>(a<span class="pl-k">=</span>g<span class="pl-k">*</span>h,k<span class="pl-k">=</span>g<span class="pl-k">*</span>e,l<span class="pl-k">=</span>c<span class="pl-k">*</span>h,n<span class="pl-k">=</span>c<span class="pl-k">*</span>e,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>d<span class="pl-k">-</span>k,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span>n,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>e,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">*</span>d<span class="pl-k">+</span>a,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>d<span class="pl-k">-</span>l,b[<span class="pl-c1">2</span>]<span class="pl-k">=-</span>d,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c<span class="pl-k">*</span>f,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a.order<span class="pl-k">?</span>(a<span class="pl-k">=</span>g<span class="pl-k">*</span>f,k<span class="pl-k">=</span>g<span class="pl-k">*</span>d,l<span class="pl-k">=</span>c<span class="pl-k">*</span>f,n<span class="pl-k">=</span>c<span class="pl-k">*</span>d,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h,b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>n<span class="pl-k">-</span>a<span class="pl-k">*</span>e,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>e<span class="pl-k">+</span>k,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=-</span>c<span class="pl-k">*</span>h,b[<span class="pl-c1">2</span>]<span class="pl-k">=-</span>d<span class="pl-k">*</span>h,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>e<span class="pl-k">+</span>l,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>a<span class="pl-k">-</span>n<span class="pl-k">*</span>e)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a.order<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>g<span class="pl-k">*</span>f,k<span class="pl-k">=</span>g<span class="pl-k">*</span>d,l<span class="pl-k">=</span>c<span class="pl-k">*</span>f,n<span class="pl-k">=</span>c<span class="pl-k">*</span>d,b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>h,b[<span class="pl-c1">4</span>]<span class="pl-k">=-</span>e,b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>d<span class="pl-k">*</span>h,b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>n,b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h,b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>k<span class="pl-k">*</span>e<span class="pl-k">-</span>l,b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>e<span class="pl-k">-</span>k,b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>c<span class="pl-k">*</span>h,b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>e<span class="pl-k">+</span>a);b[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setRotationFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>.makeRotationFromQuaternion(a)},<span class="pl-en">makeRotationFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">x</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">y</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">z</span>,g<span class="pl-k">=</span>a.w,f<span class="pl-k">=</span>c<span class="pl-k">+</span>c,h<span class="pl-k">=</span>d<span class="pl-k">+</span>d,k<span class="pl-k">=</span>e<span class="pl-k">+</span>e;a<span class="pl-k">=</span>c<span class="pl-k">*</span>f;<span class="pl-k">var</span> l<span class="pl-k">=</span>c<span class="pl-k">*</span>h,c<span class="pl-k">=</span>c<span class="pl-k">*</span>k,n<span class="pl-k">=</span>d<span class="pl-k">*</span>h,d<span class="pl-k">=</span>d<span class="pl-k">*</span>k,e<span class="pl-k">=</span>e<span class="pl-k">*</span>k,f<span class="pl-k">=</span>g<span class="pl-k">*</span>f,h<span class="pl-k">=</span>g<span class="pl-k">*</span>h,g<span class="pl-k">=</span>g<span class="pl-k">*</span>k;b[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(n<span class="pl-k">+</span>e);b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>l<span class="pl-k">-</span>g;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c<span class="pl-k">+</span>h;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">+</span>g;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>e);b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>d<span class="pl-k">-</span>f;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>c<span class="pl-k">-</span>h;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d<span class="pl-k">+</span>f;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>n);b[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;b[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);</td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;c.subVectors(d,e).normalize();<span class="pl-c1">0</span><span class="pl-k">===</span>c.<span class="pl-c1">length</span>()<span class="pl-k">&amp;&amp;</span>(c.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">1</span>);a.crossVectors(g,c).normalize();<span class="pl-c1">0</span><span class="pl-k">===</span>a.<span class="pl-c1">length</span>()<span class="pl-k">&amp;&amp;</span>(c.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1E-4</span>,a.crossVectors(g,c).normalize());b.crossVectors(c,a);f[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a.<span class="pl-c1">x</span>;f[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b.<span class="pl-c1">x</span>;f[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c.<span class="pl-c1">x</span>;f[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a.<span class="pl-c1">y</span>;f[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b.<span class="pl-c1">y</span>;f[<span class="pl-c1">9</span>]<span class="pl-k">=</span>c.<span class="pl-c1">y</span>;f[<span class="pl-c1">2</span>]<span class="pl-k">=</span>a.<span class="pl-c1">z</span>;f[<span class="pl-c1">6</span>]<span class="pl-k">=</span>b.<span class="pl-c1">z</span>;f[<span class="pl-c1">10</span>]<span class="pl-k">=</span>c.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.multiplyMatrices(a,b))<span class="pl-k">:</span><span class="pl-v">this</span>.multiplyMatrices(<span class="pl-v">this</span>,a)},<span class="pl-en">multiplyMatrices</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span>b.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,g<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],f<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],k<span class="pl-k">=</span>c[<span class="pl-c1">12</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">13</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">6</span>],r<span class="pl-k">=</span>c[<span class="pl-c1">10</span>],u<span class="pl-k">=</span>c[<span class="pl-c1">14</span>],w<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],v<span class="pl-k">=</span>c[<span class="pl-c1">7</span>],B<span class="pl-k">=</span>c[<span class="pl-c1">11</span>],c<span class="pl-k">=</span>c[<span class="pl-c1">15</span>],x<span class="pl-k">=</span>d[<span class="pl-c1">0</span>],H<span class="pl-k">=</span>d[<span class="pl-c1">4</span>],I<span class="pl-k">=</span>d[<span class="pl-c1">8</span>],z<span class="pl-k">=</span>d[<span class="pl-c1">12</span>],D<span class="pl-k">=</span>d[<span class="pl-c1">1</span>],G<span class="pl-k">=</span>d[<span class="pl-c1">5</span>],O<span class="pl-k">=</span>d[<span class="pl-c1">9</span>],C<span class="pl-k">=</span>d[<span class="pl-c1">13</span>],F<span class="pl-k">=</span>d[<span class="pl-c1">2</span>],K<span class="pl-k">=</span>d[<span class="pl-c1">6</span>],L<span class="pl-k">=</span>d[<span class="pl-c1">10</span>],E<span class="pl-k">=</span>d[<span class="pl-c1">14</span>],J<span class="pl-k">=</span>d[<span class="pl-c1">3</span>],y<span class="pl-k">=</span>d[<span class="pl-c1">7</span>],P<span class="pl-k">=</span>d[<span class="pl-c1">11</span>],d<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>x<span class="pl-k">+</span>f<span class="pl-k">*</span>D<span class="pl-k">+</span>h<span class="pl-k">*</span>F<span class="pl-k">+</span>k<span class="pl-k">*</span>J;e[<span class="pl-c1">4</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>H<span class="pl-k">+</span>f<span class="pl-k">*</span>G<span class="pl-k">+</span>h<span class="pl-k">*</span>K<span class="pl-k">+</span>k<span class="pl-k">*</span>y;e[<span class="pl-c1">8</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>I<span class="pl-k">+</span>f<span class="pl-k">*</span>O<span class="pl-k">+</span>h<span class="pl-k">*</span>L<span class="pl-k">+</span>k<span class="pl-k">*</span>P;e[<span class="pl-c1">12</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>z<span class="pl-k">+</span>f<span class="pl-k">*</span>C<span class="pl-k">+</span>h<span class="pl-k">*</span>E<span class="pl-k">+</span>k<span class="pl-k">*</span>d;e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>x<span class="pl-k">+</span>n<span class="pl-k">*</span>D<span class="pl-k">+</span>p<span class="pl-k">*</span>F<span class="pl-k">+</span>m<span class="pl-k">*</span>J;e[<span class="pl-c1">5</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>H<span class="pl-k">+</span>n<span class="pl-k">*</span>G<span class="pl-k">+</span>p<span class="pl-k">*</span>K<span class="pl-k">+</span>m<span class="pl-k">*</span>y;e[<span class="pl-c1">9</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>I<span class="pl-k">+</span>n<span class="pl-k">*</span>O<span class="pl-k">+</span>p<span class="pl-k">*</span>L<span class="pl-k">+</span>m<span class="pl-k">*</span>P;e[<span class="pl-c1">13</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>z<span class="pl-k">+</span>n<span class="pl-k">*</span>C<span class="pl-k">+</span>p<span class="pl-k">*</span>E<span class="pl-k">+</span>m<span class="pl-k">*</span>d;e[<span class="pl-c1">2</span>]<span class="pl-k">=</span>q<span class="pl-k">*</span>x<span class="pl-k">+</span>t<span class="pl-k">*</span>D<span class="pl-k">+</span>r<span class="pl-k">*</span>F<span class="pl-k">+</span>u<span class="pl-k">*</span>J;e[<span class="pl-c1">6</span>]<span class="pl-k">=</span>q<span class="pl-k">*</span>H<span class="pl-k">+</span>t<span class="pl-k">*</span>G<span class="pl-k">+</span>r<span class="pl-k">*</span>K<span class="pl-k">+</span>u<span class="pl-k">*</span>y;e[<span class="pl-c1">10</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">*</span>I<span class="pl-k">+</span>t<span class="pl-k">*</span>O<span class="pl-k">+</span>r<span class="pl-k">*</span>L<span class="pl-k">+</span>u<span class="pl-k">*</span>P;e[<span class="pl-c1">14</span>]<span class="pl-k">=</span>q<span class="pl-k">*</span>z<span class="pl-k">+</span>t<span class="pl-k">*</span>C<span class="pl-k">+</span>r<span class="pl-k">*</span>E<span class="pl-k">+</span>u<span class="pl-k">*</span>d;e[<span class="pl-c1">3</span>]<span class="pl-k">=</span>w<span class="pl-k">*</span>x<span class="pl-k">+</span>v<span class="pl-k">*</span>D<span class="pl-k">+</span>B<span class="pl-k">*</span>F<span class="pl-k">+</span>c<span class="pl-k">*</span>J;e[<span class="pl-c1">7</span>]<span class="pl-k">=</span>w<span class="pl-k">*</span>H<span class="pl-k">+</span>v<span class="pl-k">*</span>G<span class="pl-k">+</span>B<span class="pl-k">*</span>K<span class="pl-k">+</span>c<span class="pl-k">*</span>y;e[<span class="pl-c1">11</span>]<span class="pl-k">=</span>w<span class="pl-k">*</span>I<span class="pl-k">+</span>v<span class="pl-k">*</span>O<span class="pl-k">+</span>B<span class="pl-k">*</span>L<span class="pl-k">+</span>c<span class="pl-k">*</span>P;e[<span class="pl-c1">15</span>]<span class="pl-k">=</span>w<span class="pl-k">*</span>z<span class="pl-k">+</span>v<span class="pl-k">*</span>C<span class="pl-k">+</span>B<span class="pl-k">*</span>E<span class="pl-k">+</span>c<span class="pl-k">*</span>d;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyToArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;<span class="pl-v">this</span>.multiplyMatrices(a,b);c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>d[<span class="pl-c1">0</span>];c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>d[<span class="pl-c1">1</span>];c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>d[<span class="pl-c1">2</span>];c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>d[<span class="pl-c1">3</span>];c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>d[<span class="pl-c1">4</span>];c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>d[<span class="pl-c1">5</span>];c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d[<span class="pl-c1">6</span>];c[<span class="pl-c1">7</span>]<span class="pl-k">=</span>d[<span class="pl-c1">7</span>];c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>d[<span class="pl-c1">8</span>];c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>d[<span class="pl-c1">9</span>];c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>d[<span class="pl-c1">10</span>];c[<span class="pl-c1">11</span>]<span class="pl-k">=</span>d[<span class="pl-c1">11</span>];c[<span class="pl-c1">12</span>]<span class="pl-k">=</span>d[<span class="pl-c1">12</span>];c[<span class="pl-c1">13</span>]<span class="pl-k">=</span>d[<span class="pl-c1">13</span>];c[<span class="pl-c1">14</span>]<span class="pl-k">=</span>d[<span class="pl-c1">14</span>];c[<span class="pl-c1">15</span>]<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">12</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">9</span>]<span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line">a;b[<span class="pl-c1">13</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">14</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">11</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">15</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> a.applyProjection(<span class="pl-v">this</span>)},<span class="pl-en">multiplyVector4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> a.applyMatrix4(<span class="pl-v">this</span>)},<span class="pl-en">multiplyVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>.applyToVector3Array(a)},<span class="pl-en">applyToVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">+=</span><span class="pl-c1">3</span>,c<span class="pl-k">+=</span><span class="pl-c1">3</span>)a.fromArray(b,c),a.applyMatrix4(<span class="pl-v">this</span>),a.toArray(b,c);<span class="pl-k">return</span> b}}(),<span class="pl-en">applyToBuffer</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>b.<span class="pl-c1">length</span><span class="pl-k">/</span>b.itemSize);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>,c<span class="pl-k">++</span>)a.<span class="pl-c1">x</span><span class="pl-k">=</span>b.getX(c),a.<span class="pl-c1">y</span><span class="pl-k">=</span>b.getY(c),a.<span class="pl-c1">z</span><span class="pl-k">=</span>b.getZ(c),a.applyMatrix4(<span class="pl-v">this</span>),b.setXYZ(a.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);<span class="pl-k">return</span> b}}(),<span class="pl-en">rotateAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.<span class="pl-pds">&quot;</span></span>);a.transformDirection(<span class="pl-v">this</span>)},<span class="pl-en">crossVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> a.applyMatrix4(<span class="pl-v">this</span>)},<span class="pl-en">determinant</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,b<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],c<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">8</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">12</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">9</span>],k<span class="pl-k">=</span>a[<span class="pl-c1">13</span>],l<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],n<span class="pl-k">=</span>a[<span class="pl-c1">6</span>],p<span class="pl-k">=</span>a[<span class="pl-c1">10</span>],m<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];<span class="pl-k">return</span> a[<span class="pl-c1">3</span>]<span class="pl-k">*</span>(<span class="pl-k">+</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span>d<span class="pl-k">*</span>k<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">-</span>e<span class="pl-k">*</span>f<span class="pl-k">*</span>p<span class="pl-k">+</span>c<span class="pl-k">*</span>k<span class="pl-k">*</span>p<span class="pl-k">+</span>d<span class="pl-k">*</span>f<span class="pl-k">*</span>m<span class="pl-k">-</span>c<span class="pl-k">*</span>h<span class="pl-k">*</span>m)<span class="pl-k">+</span>a[<span class="pl-c1">7</span>]<span class="pl-k">*</span>(<span class="pl-k">+</span>b<span class="pl-k">*</span>h<span class="pl-k">*</span>m<span class="pl-k">-</span>b<span class="pl-k">*</span>k<span class="pl-k">*</span>p<span class="pl-k">+</span>e<span class="pl-k">*</span>g<span class="pl-k">*</span>p<span class="pl-k">-</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>m<span class="pl-k">+</span>d<span class="pl-k">*</span>k<span class="pl-k">*</span>l<span class="pl-k">-</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>l)<span class="pl-k">+</span>a[<span class="pl-c1">11</span>]<span class="pl-k">*</span>(<span class="pl-k">+</span>b<span class="pl-k">*</span>k<span class="pl-k">*</span>n<span class="pl-k">-</span>b<span class="pl-k">*</span>f<span class="pl-k">*</span>m<span class="pl-k">-</span>e<span class="pl-k">*</span>g<span class="pl-k">*</span>n<span class="pl-k">+</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>m<span class="pl-k">+</span>e<span class="pl-k">*</span>f<span class="pl-k">*</span>l<span class="pl-k">-</span>c<span class="pl-k">*</span>k<span class="pl-k">*</span>l)<span class="pl-k">+</span>a[<span class="pl-c1">15</span>]<span class="pl-k">*</span>(<span class="pl-k">-</span>d<span class="pl-k">*</span>f<span class="pl-k">*</span>l<span class="pl-k">-</span>b<span class="pl-k">*</span>h<span class="pl-k">*</span>n<span class="pl-k">+</span>b<span class="pl-k">*</span>f<span class="pl-k">*</span>p<span class="pl-k">+</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>n<span class="pl-k">-</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>p<span class="pl-k">+</span>c<span class="pl-k">*</span>h<span class="pl-k">*</span>l)},<span class="pl-en">transpose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,b;b<span class="pl-k">=</span>a[<span class="pl-c1">1</span>];a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a[<span class="pl-c1">4</span>];a[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>a[<span class="pl-c1">8</span>];a[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">6</span>];a[<span class="pl-c1">6</span>]<span class="pl-k">=</span>a[<span class="pl-c1">9</span>];a[<span class="pl-c1">9</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">3</span>];a[<span class="pl-c1">3</span>]<span class="pl-k">=</span>a[<span class="pl-c1">12</span>];a[<span class="pl-c1">12</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">7</span>];a[<span class="pl-c1">7</span>]<span class="pl-k">=</span>a[<span class="pl-c1">13</span>];a[<span class="pl-c1">13</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">11</span>];a[<span class="pl-c1">11</span>]<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];a[<span class="pl-c1">14</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">flattenToArrayOffset</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;a[b]<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[<span class="pl-c1">1</span>];a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c[<span class="pl-c1">2</span>];a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>c[<span class="pl-c1">3</span>];a[b<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>c[<span class="pl-c1">4</span>];a[b<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>c[<span class="pl-c1">5</span>];a[b<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line">c[<span class="pl-c1">6</span>];a[b<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>c[<span class="pl-c1">7</span>];a[b<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>c[<span class="pl-c1">8</span>];a[b<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span>c[<span class="pl-c1">9</span>];a[b<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span>c[<span class="pl-c1">10</span>];a[b<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span>c[<span class="pl-c1">11</span>];a[b<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span>c[<span class="pl-c1">12</span>];a[b<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span>c[<span class="pl-c1">13</span>];a[b<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span>c[<span class="pl-c1">14</span>];a[b<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span>c[<span class="pl-c1">15</span>];<span class="pl-k">return</span> a},<span class="pl-en">getPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> a.set(b[<span class="pl-c1">12</span>],b[<span class="pl-c1">13</span>],b[<span class="pl-c1">14</span>])}}(),<span class="pl-en">setPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span>a.<span class="pl-c1">x</span>;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span>a.<span class="pl-c1">y</span>;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span>a.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getInverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span>d[<span class="pl-c1">0</span>],g<span class="pl-k">=</span>d[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>d[<span class="pl-c1">8</span>],h<span class="pl-k">=</span>d[<span class="pl-c1">12</span>],k<span class="pl-k">=</span>d[<span class="pl-c1">1</span>],l<span class="pl-k">=</span>d[<span class="pl-c1">5</span>],n<span class="pl-k">=</span>d[<span class="pl-c1">9</span>],p<span class="pl-k">=</span>d[<span class="pl-c1">13</span>],m<span class="pl-k">=</span>d[<span class="pl-c1">2</span>],q<span class="pl-k">=</span>d[<span class="pl-c1">6</span>],t<span class="pl-k">=</span>d[<span class="pl-c1">10</span>],r<span class="pl-k">=</span>d[<span class="pl-c1">14</span>],u<span class="pl-k">=</span>d[<span class="pl-c1">3</span>],w<span class="pl-k">=</span>d[<span class="pl-c1">7</span>],v<span class="pl-k">=</span>d[<span class="pl-c1">11</span>],d<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>r<span class="pl-k">*</span>w<span class="pl-k">-</span>p<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">+</span>p<span class="pl-k">*</span>q<span class="pl-k">*</span>v<span class="pl-k">-</span>l<span class="pl-k">*</span>r<span class="pl-k">*</span>v<span class="pl-k">-</span>n<span class="pl-k">*</span>q<span class="pl-k">*</span>d<span class="pl-k">+</span>l<span class="pl-k">*</span>t<span class="pl-k">*</span>d;c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">-</span>f<span class="pl-k">*</span>r<span class="pl-k">*</span>w<span class="pl-k">-</span>h<span class="pl-k">*</span>q<span class="pl-k">*</span>v<span class="pl-k">+</span>g<span class="pl-k">*</span>r<span class="pl-k">*</span>v<span class="pl-k">+</span>f<span class="pl-k">*</span>q<span class="pl-k">*</span>d<span class="pl-k">-</span>g<span class="pl-k">*</span>t<span class="pl-k">*</span>d;c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>w<span class="pl-k">-</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>w<span class="pl-k">+</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>v<span class="pl-k">-</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>v<span class="pl-k">-</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>d<span class="pl-k">+</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>d;c[<span class="pl-c1">12</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">-</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">-</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>t<span class="pl-k">+</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>t<span class="pl-k">+</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>r<span class="pl-k">-</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>r;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>t<span class="pl-k">*</span>u<span class="pl-k">-</span>n<span class="pl-k">*</span>r<span class="pl-k">*</span>u<span class="pl-k">-</span>p<span class="pl-k">*</span>m<span class="pl-k">*</span>v<span class="pl-k">+</span>k<span class="pl-k">*</span>r<span class="pl-k">*</span>v<span class="pl-k">+</span>n<span class="pl-k">*</span>m<span class="pl-k">*</span>d<span class="pl-k">-</span>k<span class="pl-k">*</span>t<span class="pl-k">*</span>d;c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>r<span class="pl-k">*</span>u<span class="pl-k">-</span>h<span class="pl-k">*</span>t<span class="pl-k">*</span>u<span class="pl-k">+</span>h<span class="pl-k">*</span>m<span class="pl-k">*</span>v<span class="pl-k">-</span>e<span class="pl-k">*</span>r<span class="pl-k">*</span>v<span class="pl-k">-</span>f<span class="pl-k">*</span>m<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span>d;c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>u<span class="pl-k">-</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>u<span class="pl-k">-</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>v<span class="pl-k">+</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>d<span class="pl-k">-</span>e<span class="pl-k">*</span>n<span class="pl-k">*</span>d;c[<span class="pl-c1">13</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>p<span class="pl-k">*</span>m<span class="pl-k">-</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>m<span class="pl-k">+</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>t<span class="pl-k">-</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>t<span class="pl-k">-</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>r<span class="pl-k">+</span>e<span class="pl-k">*</span>n<span class="pl-k">*</span>r;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>r<span class="pl-k">*</span>u<span class="pl-k">-</span>p<span class="pl-k">*</span>q<span class="pl-k">*</span>u<span class="pl-k">+</span>p<span class="pl-k">*</span>m<span class="pl-k">*</span>w<span class="pl-k">-</span>k<span class="pl-k">*</span>r<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line">w<span class="pl-k">-</span>l<span class="pl-k">*</span>m<span class="pl-k">*</span>d<span class="pl-k">+</span>k<span class="pl-k">*</span>q<span class="pl-k">*</span>d;c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>q<span class="pl-k">*</span>u<span class="pl-k">-</span>g<span class="pl-k">*</span>r<span class="pl-k">*</span>u<span class="pl-k">-</span>h<span class="pl-k">*</span>m<span class="pl-k">*</span>w<span class="pl-k">+</span>e<span class="pl-k">*</span>r<span class="pl-k">*</span>w<span class="pl-k">+</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>d<span class="pl-k">-</span>e<span class="pl-k">*</span>q<span class="pl-k">*</span>d;c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>u<span class="pl-k">-</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>u<span class="pl-k">+</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>w<span class="pl-k">-</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>w<span class="pl-k">-</span>g<span class="pl-k">*</span>k<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>d;c[<span class="pl-c1">14</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>m<span class="pl-k">-</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>m<span class="pl-k">-</span>h<span class="pl-k">*</span>k<span class="pl-k">*</span>q<span class="pl-k">+</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">+</span>g<span class="pl-k">*</span>k<span class="pl-k">*</span>r<span class="pl-k">-</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>r;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>q<span class="pl-k">*</span>u<span class="pl-k">-</span>l<span class="pl-k">*</span>t<span class="pl-k">*</span>u<span class="pl-k">-</span>n<span class="pl-k">*</span>m<span class="pl-k">*</span>w<span class="pl-k">+</span>k<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">+</span>l<span class="pl-k">*</span>m<span class="pl-k">*</span>v<span class="pl-k">-</span>k<span class="pl-k">*</span>q<span class="pl-k">*</span>v;c[<span class="pl-c1">7</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>t<span class="pl-k">*</span>u<span class="pl-k">-</span>f<span class="pl-k">*</span>q<span class="pl-k">*</span>u<span class="pl-k">+</span>f<span class="pl-k">*</span>m<span class="pl-k">*</span>w<span class="pl-k">-</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span>w<span class="pl-k">-</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span>q<span class="pl-k">*</span>v;c[<span class="pl-c1">11</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>u<span class="pl-k">-</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>u<span class="pl-k">-</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>w<span class="pl-k">+</span>e<span class="pl-k">*</span>n<span class="pl-k">*</span>w<span class="pl-k">+</span>g<span class="pl-k">*</span>k<span class="pl-k">*</span>v<span class="pl-k">-</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>v;c[<span class="pl-c1">15</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>m<span class="pl-k">-</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>m<span class="pl-k">+</span>f<span class="pl-k">*</span>k<span class="pl-k">*</span>q<span class="pl-k">-</span>e<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">-</span>g<span class="pl-k">*</span>k<span class="pl-k">*</span>t<span class="pl-k">+</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>t;c<span class="pl-k">=</span>e<span class="pl-k">*</span>c[<span class="pl-c1">0</span>]<span class="pl-k">+</span>k<span class="pl-k">*</span>c[<span class="pl-c1">4</span>]<span class="pl-k">+</span>m<span class="pl-k">*</span>c[<span class="pl-c1">8</span>]<span class="pl-k">+</span>u<span class="pl-k">*</span>c[<span class="pl-c1">12</span>];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>c){<span class="pl-k">if</span>(b)<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4.getInverse(): can&#39;t invert matrix, determinant is 0<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.identity();<span class="pl-k">return</span> <span class="pl-v">this</span>}<span class="pl-v">this</span>.multiplyScalar(<span class="pl-c1">1</span><span class="pl-k">/</span>c);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .translate() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateX() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateY() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateZ() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">rotateByAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Matrix4: .rotateByAxis() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">x</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>a.<span class="pl-c1">z</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">9</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">11</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getMaxScaleOnAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>a[<span class="pl-c1">2</span>],<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>a[<span class="pl-c1">4</span>]<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>a[<span class="pl-c1">5</span>]<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>a[<span class="pl-c1">6</span>],a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>a[<span class="pl-c1">8</span>]<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>a[<span class="pl-c1">9</span>]<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>a[<span class="pl-c1">10</span>])))},<span class="pl-en">makeTranslation</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeRotationX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-v">this</span>.set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b,<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeRotationY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-v">this</span>.set(b,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeRotationZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-v">this</span>.set(b,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeRotationAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b),e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>c,g<span class="pl-k">=</span>a.<span class="pl-c1">x</span>,f<span class="pl-k">=</span>a.<span class="pl-c1">y</span>,h<span class="pl-k">=</span>a.<span class="pl-c1">z</span>,k<span class="pl-k">=</span>e<span class="pl-k">*</span>g,l<span class="pl-k">=</span>e<span class="pl-k">*</span>f;<span class="pl-v">this</span>.set(k<span class="pl-k">*</span>g<span class="pl-k">+</span>c,k<span class="pl-k">*</span>f<span class="pl-k">-</span>d<span class="pl-k">*</span>h,k<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>f,<span class="pl-c1">0</span>,k<span class="pl-k">*</span>f<span class="pl-k">+</span>d<span class="pl-k">*</span>h,l<span class="pl-k">*</span>f<span class="pl-k">+</span>c,l<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>g,<span class="pl-c1">0</span>,k<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>f,l<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>g,e<span class="pl-k">*</span>h<span class="pl-k">*</span>h<span class="pl-k">+</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makeScale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.set(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">compose</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.makeRotationFromQuaternion(b);<span class="pl-v">this</span>.scale(c);<span class="pl-v">this</span>.setPosition(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">decompose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,f<span class="pl-k">=</span>a.set(g[<span class="pl-c1">0</span>],g[<span class="pl-c1">1</span>],g[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),h<span class="pl-k">=</span>a.set(g[<span class="pl-c1">4</span>],g[<span class="pl-c1">5</span>],g[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>(),k<span class="pl-k">=</span>a.set(g[<span class="pl-c1">8</span>],g[<span class="pl-c1">9</span>],g[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.determinant()<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=-</span>f);c.<span class="pl-c1">x</span><span class="pl-k">=</span>g[<span class="pl-c1">12</span>];c.<span class="pl-c1">y</span><span class="pl-k">=</span>g[<span class="pl-c1">13</span>];c.<span class="pl-c1">z</span><span class="pl-k">=</span>g[<span class="pl-c1">14</span>];b.<span class="pl-c1">elements</span>.set(<span class="pl-v">this</span>.<span class="pl-c1">elements</span>);c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>f;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>h,l<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>k;b.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>]<span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line">c;b.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>c;b.<span class="pl-c1">elements</span>[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>c;b.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>g;b.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>g;b.<span class="pl-c1">elements</span>[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>g;b.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>l;b.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>]<span class="pl-k">*=</span>l;b.<span class="pl-c1">elements</span>[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>l;d.setFromRotationMatrix(b);e.<span class="pl-c1">x</span><span class="pl-k">=</span>f;e.<span class="pl-c1">y</span><span class="pl-k">=</span>h;e.<span class="pl-c1">z</span><span class="pl-k">=</span>k;<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">makeFrustum</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);f[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">8</span>]<span class="pl-k">=</span>(b<span class="pl-k">+</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);f[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">/</span>(d<span class="pl-k">-</span>c);f[<span class="pl-c1">9</span>]<span class="pl-k">=</span>(d<span class="pl-k">+</span>c)<span class="pl-k">/</span>(d<span class="pl-k">-</span>c);f[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">10</span>]<span class="pl-k">=-</span>(g<span class="pl-k">+</span>e)<span class="pl-k">/</span>(g<span class="pl-k">-</span>e);f[<span class="pl-c1">14</span>]<span class="pl-k">=-</span><span class="pl-c1">2</span><span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">/</span>(g<span class="pl-k">-</span>e);f[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">11</span>]<span class="pl-k">=-</span><span class="pl-c1">1</span>;f[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">makePerspective</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.degToRad(.<span class="pl-c1">5</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line">a));<span class="pl-k">var</span> e<span class="pl-k">=-</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>.makeFrustum(e<span class="pl-k">*</span>b,a<span class="pl-k">*</span>b,e,a,c,d)},<span class="pl-en">makeOrthographic</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>,h<span class="pl-k">=</span>b<span class="pl-k">-</span>a,k<span class="pl-k">=</span>c<span class="pl-k">-</span>d,l<span class="pl-k">=</span>g<span class="pl-k">-</span>e;f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span>h;f[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">12</span>]<span class="pl-k">=-</span>((b<span class="pl-k">+</span>a)<span class="pl-k">/</span>h);f[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span>k;f[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">13</span>]<span class="pl-k">=-</span>((c<span class="pl-k">+</span>d)<span class="pl-k">/</span>k);f[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">10</span>]<span class="pl-k">=-</span><span class="pl-c1">2</span><span class="pl-k">/</span>l;f[<span class="pl-c1">14</span>]<span class="pl-k">=-</span>((g<span class="pl-k">+</span>e)<span class="pl-k">/</span>l);f[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;f[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">16</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(b[c]<span class="pl-k">!==</span>a[c])<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">fromArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">elements</span>.set(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span>[a[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line">a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">8</span>],a[<span class="pl-c1">9</span>],a[<span class="pl-c1">10</span>],a[<span class="pl-c1">11</span>],a[<span class="pl-c1">12</span>],a[<span class="pl-c1">13</span>],a[<span class="pl-c1">14</span>],a[<span class="pl-c1">15</span>]]}};<span class="pl-c1">THREE</span>.<span class="pl-en">Ray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.origin<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.direction<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Ray</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Ray,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.origin.copy(a);<span class="pl-v">this</span>.direction.copy(b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.origin.copy(a.origin);<span class="pl-v">this</span>.direction.copy(a.direction);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">at</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).copy(<span class="pl-v">this</span>.direction).multiplyScalar(a).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.origin)},<span class="pl-en">recast</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.origin.copy(<span class="pl-v">this</span>.at(b,a));<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">closestPointToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;c.subVectors(a,<span class="pl-v">this</span>.origin);<span class="pl-k">var</span> d<span class="pl-k">=</span>c.dot(<span class="pl-v">this</span>.direction);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span>c.copy(<span class="pl-v">this</span>.origin)<span class="pl-k">:</span>c.copy(<span class="pl-v">this</span>.direction).multiplyScalar(d).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.origin)},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.distanceSqToPoint(a))},<span class="pl-en">distanceSqToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.subVectors(b,<span class="pl-v">this</span>.origin).dot(<span class="pl-v">this</span>.direction);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>c)<span class="pl-k">return</span> <span class="pl-v">this</span>.origin.distanceToSquared(b);a.copy(<span class="pl-v">this</span>.direction).multiplyScalar(c).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.origin);<span class="pl-k">return</span> a.distanceToSquared(b)}}(),</td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line"><span class="pl-en">distanceSqToSegment</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){a.copy(d).<span class="pl-c1">add</span>(e).multiplyScalar(.<span class="pl-c1">5</span>);b.copy(e).<span class="pl-c1">sub</span>(d).normalize();c.copy(<span class="pl-v">this</span>.origin).<span class="pl-c1">sub</span>(a);<span class="pl-k">var</span> h<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>d.distanceTo(e),k<span class="pl-k">=-</span><span class="pl-v">this</span>.direction.dot(b),l<span class="pl-k">=</span>c.dot(<span class="pl-v">this</span>.direction),n<span class="pl-k">=-</span>c.dot(b),p<span class="pl-k">=</span>c.lengthSq(),m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>k<span class="pl-k">*</span>k),q;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>m<span class="pl-k">?</span>(d<span class="pl-k">=</span>k<span class="pl-k">*</span>n<span class="pl-k">-</span>l,e<span class="pl-k">=</span>k<span class="pl-k">*</span>l<span class="pl-k">-</span>n,q<span class="pl-k">=</span>h<span class="pl-k">*</span>m,<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>e<span class="pl-k">&gt;=-</span>q<span class="pl-k">?</span>e<span class="pl-k">&lt;=</span>q<span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>m,d<span class="pl-k">*=</span>h,e<span class="pl-k">*=</span>h,k<span class="pl-k">=</span>d<span class="pl-k">*</span>(d<span class="pl-k">+</span>k<span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>l)<span class="pl-k">+</span>e<span class="pl-k">*</span>(k<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n)<span class="pl-k">+</span>p)<span class="pl-k">:</span>(e<span class="pl-k">=</span>h,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(k<span class="pl-k">*</span>e<span class="pl-k">+</span>l)),k<span class="pl-k">=-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n)<span class="pl-k">+</span>p)<span class="pl-k">:</span>(e<span class="pl-k">=-</span>h,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(k<span class="pl-k">*</span>e<span class="pl-k">+</span>l)),</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n)<span class="pl-k">+</span>p)<span class="pl-k">:</span>e<span class="pl-k">&lt;=-</span>q<span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(<span class="pl-k">-</span>k<span class="pl-k">*</span>h<span class="pl-k">+</span>l)),e<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d<span class="pl-k">?-</span>h<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-k">-</span>h,<span class="pl-k">-</span>n),h),k<span class="pl-k">=-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n)<span class="pl-k">+</span>p)<span class="pl-k">:</span>e<span class="pl-k">&lt;=</span>q<span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-k">-</span>h,<span class="pl-k">-</span>n),h),k<span class="pl-k">=</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n)<span class="pl-k">+</span>p)<span class="pl-k">:</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(k<span class="pl-k">*</span>h<span class="pl-k">+</span>l)),e<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d<span class="pl-k">?</span>h<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-k">-</span>h,<span class="pl-k">-</span>n),h),k<span class="pl-k">=-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n)<span class="pl-k">+</span>p))<span class="pl-k">:</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>k<span class="pl-k">?-</span>h<span class="pl-k">:</span>h,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>(k<span class="pl-k">*</span>e<span class="pl-k">+</span>l)),k<span class="pl-k">=-</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n)<span class="pl-k">+</span>p);g<span class="pl-k">&amp;&amp;</span>g.copy(<span class="pl-v">this</span>.direction).multiplyScalar(d).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.origin);f<span class="pl-k">&amp;&amp;</span>f.copy(b).multiplyScalar(e).<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> k}}(),<span class="pl-en">isIntersectionSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.distanceToPoint(a.center)<span class="pl-k">&lt;=</span>a.radius},<span class="pl-en">intersectSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a.subVectors(b.center,<span class="pl-v">this</span>.origin);<span class="pl-k">var</span> d<span class="pl-k">=</span>a.dot(<span class="pl-v">this</span>.direction),e<span class="pl-k">=</span>a.dot(a)<span class="pl-k">-</span>d<span class="pl-k">*</span>d,g<span class="pl-k">=</span>b.radius<span class="pl-k">*</span>b.radius;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>g)<span class="pl-k">return</span> <span class="pl-c1">null</span>;g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(g<span class="pl-k">-</span>e);e<span class="pl-k">=</span>d<span class="pl-k">-</span>g;d<span class="pl-k">+=</span>g;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span>null<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span><span class="pl-v">this</span>.at(d,c)<span class="pl-k">:</span><span class="pl-v">this</span>.at(e,c)}}(),<span class="pl-en">isIntersectionPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.distanceToPoint(<span class="pl-v">this</span>.origin);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>a.normal.dot(<span class="pl-v">this</span>.direction)<span class="pl-k">*</span>b<span class="pl-k">?!</span><span class="pl-c1">0</span><span class="pl-k">:!</span><span class="pl-c1">1</span>},<span class="pl-en">distanceToPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.normal.dot(<span class="pl-v">this</span>.direction);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.distanceToPoint(<span class="pl-v">this</span>.origin)<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">null</span>;a<span class="pl-k">=-</span>(<span class="pl-v">this</span>.origin.dot(a.normal)<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line">a.constant)<span class="pl-k">/</span>b;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;=</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>},<span class="pl-en">intersectPlane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.distanceToPlane(a);<span class="pl-k">return</span> <span class="pl-c1">null</span><span class="pl-k">===</span>c<span class="pl-k">?</span>null<span class="pl-k">:</span><span class="pl-v">this</span>.at(c,b)},<span class="pl-en">isIntersectionBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-v">this</span>.intersectBox(b,a)}}(),<span class="pl-en">intersectBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e,g,f;d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.direction.<span class="pl-c1">x</span>;g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.direction.<span class="pl-c1">y</span>;f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.direction.<span class="pl-c1">z</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.origin;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>(c<span class="pl-k">=</span>(a.min.<span class="pl-c1">x</span><span class="pl-k">-</span>h.<span class="pl-c1">x</span>)<span class="pl-k">*</span>d,d<span class="pl-k">*=</span>a.max.<span class="pl-c1">x</span><span class="pl-k">-</span>h.<span class="pl-c1">x</span>)<span class="pl-k">:</span>(c<span class="pl-k">=</span>(a.max.<span class="pl-c1">x</span><span class="pl-k">-</span>h.<span class="pl-c1">x</span>)<span class="pl-k">*</span>d,d<span class="pl-k">*=</span>a.min.<span class="pl-c1">x</span><span class="pl-k">-</span>h.<span class="pl-c1">x</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>g<span class="pl-k">?</span>(e<span class="pl-k">=</span>(a.min.<span class="pl-c1">y</span><span class="pl-k">-</span>h.<span class="pl-c1">y</span>)<span class="pl-k">*</span>g,g<span class="pl-k">*=</span>a.max.<span class="pl-c1">y</span><span class="pl-k">-</span>h.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(e<span class="pl-k">=</span>(a.max.<span class="pl-c1">y</span><span class="pl-k">-</span>h.<span class="pl-c1">y</span>)<span class="pl-k">*</span>g,g<span class="pl-k">*=</span>a.min.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line">h.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>e<span class="pl-k">&gt;</span>d)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>c<span class="pl-k">||</span>c<span class="pl-k">!==</span>c)c<span class="pl-k">=</span>e;<span class="pl-k">if</span>(g<span class="pl-k">&lt;</span>d<span class="pl-k">||</span>d<span class="pl-k">!==</span>d)d<span class="pl-k">=</span>g;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>f<span class="pl-k">?</span>(e<span class="pl-k">=</span>(a.min.<span class="pl-c1">z</span><span class="pl-k">-</span>h.<span class="pl-c1">z</span>)<span class="pl-k">*</span>f,f<span class="pl-k">*=</span>a.max.<span class="pl-c1">z</span><span class="pl-k">-</span>h.<span class="pl-c1">z</span>)<span class="pl-k">:</span>(e<span class="pl-k">=</span>(a.max.<span class="pl-c1">z</span><span class="pl-k">-</span>h.<span class="pl-c1">z</span>)<span class="pl-k">*</span>f,f<span class="pl-k">*=</span>a.min.<span class="pl-c1">z</span><span class="pl-k">-</span>h.<span class="pl-c1">z</span>);<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span>f<span class="pl-k">||</span>e<span class="pl-k">&gt;</span>d)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>c<span class="pl-k">||</span>c<span class="pl-k">!==</span>c)c<span class="pl-k">=</span>e;<span class="pl-k">if</span>(f<span class="pl-k">&lt;</span>d<span class="pl-k">||</span>d<span class="pl-k">!==</span>d)d<span class="pl-k">=</span>f;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span>null<span class="pl-k">:</span><span class="pl-v">this</span>.at(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>d,b)},<span class="pl-en">intersectTriangle</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){b.subVectors(g,e);c.subVectors(f,e);d.crossVectors(b,c);g<span class="pl-k">=</span><span class="pl-v">this</span>.direction.dot(d);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>g){<span class="pl-k">if</span>(h)<span class="pl-k">return</span> <span class="pl-c1">null</span>;h<span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>g)h<span class="pl-k">=-</span><span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=-</span>g;<span class="pl-k">else</span> <span class="pl-k">return</span> <span class="pl-c1">null</span>;a.subVectors(<span class="pl-v">this</span>.origin,e);e<span class="pl-k">=</span>h<span class="pl-k">*</span><span class="pl-v">this</span>.direction.dot(c.crossVectors(a,c));<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>e)<span class="pl-k">return</span> <span class="pl-c1">null</span>;f<span class="pl-k">=</span>h<span class="pl-k">*</span><span class="pl-v">this</span>.direction.dot(b.cross(a));<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">||</span>e<span class="pl-k">+</span>f<span class="pl-k">&gt;</span>g)<span class="pl-k">return</span> <span class="pl-c1">null</span>;e<span class="pl-k">=-</span>h<span class="pl-k">*</span>a.dot(d);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span>null<span class="pl-k">:</span><span class="pl-v">this</span>.at(e<span class="pl-k">/</span>g,k)}}(),<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.direction.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.origin).applyMatrix4(a);<span class="pl-v">this</span>.origin.applyMatrix4(a);<span class="pl-v">this</span>.direction.<span class="pl-c1">sub</span>(<span class="pl-v">this</span>.origin);<span class="pl-v">this</span>.direction.normalize();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.origin.equals(<span class="pl-v">this</span>.origin)<span class="pl-k">&amp;&amp;</span>a.direction.equals(<span class="pl-v">this</span>.direction)}};</td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Sphere</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.center<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.radius<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Sphere</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Sphere,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.center.copy(a);<span class="pl-v">this</span>.radius<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.center;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>d.copy(c)<span class="pl-k">:</span>a.setFromPoints(b).center(d);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(e,d.distanceToSquared(b[g]));<span class="pl-v">this</span>.radius<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(e);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.center.copy(a.center);<span class="pl-v">this</span>.radius<span class="pl-k">=</span>a.radius;<span class="pl-k">return</span> <span class="pl-v">this</span>},</td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line"><span class="pl-en">empty</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;=</span><span class="pl-v">this</span>.radius},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.distanceToSquared(<span class="pl-v">this</span>.center)<span class="pl-k">&lt;=</span><span class="pl-v">this</span>.radius<span class="pl-k">*</span><span class="pl-v">this</span>.radius},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.distanceTo(<span class="pl-v">this</span>.center)<span class="pl-k">-</span><span class="pl-v">this</span>.radius},<span class="pl-en">intersectsSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.radius<span class="pl-k">+</span>a.radius;<span class="pl-k">return</span> a.center.distanceToSquared(<span class="pl-v">this</span>.center)<span class="pl-k">&lt;=</span>b<span class="pl-k">*</span>b},<span class="pl-en">clampPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.center.distanceToSquared(a),d<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;d.copy(a);c<span class="pl-k">&gt;</span><span class="pl-v">this</span>.radius<span class="pl-k">*</span><span class="pl-v">this</span>.radius<span class="pl-k">&amp;&amp;</span>(d.<span class="pl-c1">sub</span>(<span class="pl-v">this</span>.center).normalize(),d.multiplyScalar(<span class="pl-v">this</span>.radius).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.center));</td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> d},<span class="pl-en">getBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;a.set(<span class="pl-v">this</span>.center,<span class="pl-v">this</span>.center);a.expandByScalar(<span class="pl-v">this</span>.radius);<span class="pl-k">return</span> a},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.center.applyMatrix4(a);<span class="pl-v">this</span>.radius<span class="pl-k">*=</span>a.getMaxScaleOnAxis();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.center.<span class="pl-c1">add</span>(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.center.equals(<span class="pl-v">this</span>.center)<span class="pl-k">&amp;&amp;</span>a.radius<span class="pl-k">===</span><span class="pl-v">this</span>.radius}};</td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Frustum</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-v">this</span>.planes<span class="pl-k">=</span>[<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>]};</td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Frustum</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Frustum,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.planes;f[<span class="pl-c1">0</span>].copy(a);f[<span class="pl-c1">1</span>].copy(b);f[<span class="pl-c1">2</span>].copy(c);f[<span class="pl-c1">3</span>].copy(d);f[<span class="pl-c1">4</span>].copy(e);f[<span class="pl-c1">5</span>].copy(g);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.planes,c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)b[c].copy(a.planes[c]);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.planes,c<span class="pl-k">=</span>a.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];<span class="pl-k">var</span> d<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],g<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],f<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],k<span class="pl-k">=</span>c[<span class="pl-c1">6</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">7</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">10</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">11</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">12</span>],r<span class="pl-k">=</span>c[<span class="pl-c1">13</span>],u<span class="pl-k">=</span>c[<span class="pl-c1">14</span>],</td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span>c[<span class="pl-c1">15</span>];b[<span class="pl-c1">0</span>].setComponents(g<span class="pl-k">-</span>a,l<span class="pl-k">-</span>f,q<span class="pl-k">-</span>n,c<span class="pl-k">-</span>t).normalize();b[<span class="pl-c1">1</span>].setComponents(g<span class="pl-k">+</span>a,l<span class="pl-k">+</span>f,q<span class="pl-k">+</span>n,c<span class="pl-k">+</span>t).normalize();b[<span class="pl-c1">2</span>].setComponents(g<span class="pl-k">+</span>d,l<span class="pl-k">+</span>h,q<span class="pl-k">+</span>p,c<span class="pl-k">+</span>r).normalize();b[<span class="pl-c1">3</span>].setComponents(g<span class="pl-k">-</span>d,l<span class="pl-k">-</span>h,q<span class="pl-k">-</span>p,c<span class="pl-k">-</span>r).normalize();b[<span class="pl-c1">4</span>].setComponents(g<span class="pl-k">-</span>e,l<span class="pl-k">-</span>k,q<span class="pl-k">-</span>m,c<span class="pl-k">-</span>u).normalize();b[<span class="pl-c1">5</span>].setComponents(g<span class="pl-k">+</span>e,l<span class="pl-k">+</span>k,q<span class="pl-k">+</span>m,c<span class="pl-k">+</span>u).normalize();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">intersectsObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b.geometry;<span class="pl-c1">null</span><span class="pl-k">===</span>c.boundingSphere<span class="pl-k">&amp;&amp;</span>c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);</td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>.intersectsSphere(a)}}(),<span class="pl-en">intersectsSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.planes,c<span class="pl-k">=</span>a.center;a<span class="pl-k">=-</span>a.radius;<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(b[d].distanceToPoint(c)<span class="pl-k">&lt;</span>a)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">intersectsBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.planes,e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>e;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>d[e];a.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.normal.<span class="pl-c1">x</span><span class="pl-k">?</span>c.min.<span class="pl-c1">x</span><span class="pl-k">:</span>c.max.<span class="pl-c1">x</span>;b.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.normal.<span class="pl-c1">x</span><span class="pl-k">?</span>c.max.<span class="pl-c1">x</span><span class="pl-k">:</span>c.min.<span class="pl-c1">x</span>;a.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.normal.<span class="pl-c1">y</span><span class="pl-k">?</span>c.min.<span class="pl-c1">y</span><span class="pl-k">:</span>c.max.<span class="pl-c1">y</span>;b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.normal.<span class="pl-c1">y</span><span class="pl-k">?</span>c.max.<span class="pl-c1">y</span><span class="pl-k">:</span>c.min.<span class="pl-c1">y</span>;a.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.normal.<span class="pl-c1">z</span><span class="pl-k">?</span>c.min.<span class="pl-c1">z</span><span class="pl-k">:</span>c.max.<span class="pl-c1">z</span>;b.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.normal.<span class="pl-c1">z</span><span class="pl-k">?</span>c.max.<span class="pl-c1">z</span><span class="pl-k">:</span>c.min.<span class="pl-c1">z</span>;</td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> f<span class="pl-k">=</span>g.distanceToPoint(a),g<span class="pl-k">=</span>g.distanceToPoint(b);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>g)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}(),<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.planes,c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>b[c].distanceToPoint(a))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Plane</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.normal<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.constant<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Plane</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Plane,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.normal.copy(a);<span class="pl-v">this</span>.constant<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setComponents</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.normal.set(a,b,c);<span class="pl-v">this</span>.constant<span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromNormalAndCoplanarPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.normal.copy(a);<span class="pl-v">this</span>.constant<span class="pl-k">=-</span>b.dot(<span class="pl-v">this</span>.normal);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromCoplanarPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){d<span class="pl-k">=</span>a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();<span class="pl-v">this</span>.setFromNormalAndCoplanarPoint(d,</td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line">c);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.normal.copy(a.normal);<span class="pl-v">this</span>.constant<span class="pl-k">=</span>a.constant;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.normal.<span class="pl-c1">length</span>();<span class="pl-v">this</span>.normal.multiplyScalar(a);<span class="pl-v">this</span>.constant<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.constant<span class="pl-k">*=-</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.normal.negate();<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">distanceToPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.normal.dot(a)<span class="pl-k">+</span><span class="pl-v">this</span>.constant},<span class="pl-en">distanceToSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.distanceToPoint(a.center)<span class="pl-k">-</span>a.radius},<span class="pl-en">projectPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.orthoPoint(a,b).<span class="pl-c1">sub</span>(a).negate()},<span class="pl-en">orthoPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.distanceToPoint(a);<span class="pl-k">return</span>(b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).copy(<span class="pl-v">this</span>.normal).multiplyScalar(c)},<span class="pl-en">isIntersectionLine</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.distanceToPoint(a.<span class="pl-c1">start</span>);a<span class="pl-k">=</span><span class="pl-v">this</span>.distanceToPoint(a.end);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>b},<span class="pl-en">intersectLine</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,e<span class="pl-k">=</span>b.delta(a),g<span class="pl-k">=</span><span class="pl-v">this</span>.normal.dot(e);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>g){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.distanceToPoint(b.<span class="pl-c1">start</span>))<span class="pl-k">return</span> d.copy(b.<span class="pl-c1">start</span>)}<span class="pl-k">else</span> <span class="pl-k">return</span> g<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span>(b.<span class="pl-c1">start</span>.dot(<span class="pl-v">this</span>.normal)<span class="pl-k">+</span><span class="pl-v">this</span>.constant)<span class="pl-k">/</span>g,<span class="pl-c1">0</span><span class="pl-k">&gt;</span>g<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>g<span class="pl-k">?void</span> <span class="pl-c1">0</span><span class="pl-k">:</span>d.copy(e).multiplyScalar(g).<span class="pl-c1">add</span>(b.<span class="pl-c1">start</span>)}}(),<span class="pl-en">coplanarPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).copy(<span class="pl-v">this</span>.normal).multiplyScalar(<span class="pl-k">-</span><span class="pl-v">this</span>.constant)},<span class="pl-en">applyMatrix4</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>e<span class="pl-k">||</span>c.getNormalMatrix(d),g<span class="pl-k">=</span>a.copy(<span class="pl-v">this</span>.normal).applyMatrix3(g),f<span class="pl-k">=</span><span class="pl-v">this</span>.coplanarPoint(b);f.applyMatrix4(d);<span class="pl-v">this</span>.setFromNormalAndCoplanarPoint(g,f);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.constant<span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line">a.dot(<span class="pl-v">this</span>.normal);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.normal.equals(<span class="pl-v">this</span>.normal)<span class="pl-k">&amp;&amp;</span>a.constant<span class="pl-k">===</span><span class="pl-v">this</span>.constant}};</td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span><span class="pl-k">=</span>{<span class="pl-en">generateUUID</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>),b<span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-c1">36</span>),c<span class="pl-k">=</span><span class="pl-c1">0</span>,d;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">36</span><span class="pl-k">&gt;</span>e;e<span class="pl-k">++</span>)<span class="pl-c1">8</span><span class="pl-k">===</span>e<span class="pl-k">||</span><span class="pl-c1">13</span><span class="pl-k">===</span>e<span class="pl-k">||</span><span class="pl-c1">18</span><span class="pl-k">===</span>e<span class="pl-k">||</span><span class="pl-c1">23</span><span class="pl-k">===</span>e<span class="pl-k">?</span>b[e]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">14</span><span class="pl-k">===</span>e<span class="pl-k">?</span>b[e]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>4<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>(<span class="pl-c1">2</span><span class="pl-k">&gt;=</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">33554432</span><span class="pl-k">+</span><span class="pl-c1">16777216</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()|<span class="pl-c1">0</span>),d<span class="pl-k">=</span>c<span class="pl-k">&amp;</span><span class="pl-c1">15</span>,c<span class="pl-k">&gt;&gt;=</span><span class="pl-c1">4</span>,b[e]<span class="pl-k">=</span>a[<span class="pl-c1">19</span><span class="pl-k">===</span>e<span class="pl-k">?</span>d<span class="pl-k">&amp;</span><span class="pl-c1">3</span>|<span class="pl-c1">8</span><span class="pl-k">:</span>d]);<span class="pl-k">return</span> b.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)}}(),<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span>a<span class="pl-k">&gt;</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>a},<span class="pl-en">clampBottom</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span>a},<span class="pl-en">euclideanModulo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span>(a<span class="pl-k">%</span>b<span class="pl-k">+</span>b)<span class="pl-k">%</span>b},<span class="pl-en">mapLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> d<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line">(a<span class="pl-k">-</span>b)<span class="pl-k">*</span>(e<span class="pl-k">-</span>d)<span class="pl-k">/</span>(c<span class="pl-k">-</span>b)},<span class="pl-en">smoothstep</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(a<span class="pl-k">&lt;=</span>b)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(a<span class="pl-k">&gt;=</span>c)<span class="pl-k">return</span> <span class="pl-c1">1</span>;a<span class="pl-k">=</span>(a<span class="pl-k">-</span>b)<span class="pl-k">/</span>(c<span class="pl-k">-</span>b);<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>(<span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a)},<span class="pl-en">smootherstep</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(a<span class="pl-k">&lt;=</span>b)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(a<span class="pl-k">&gt;=</span>c)<span class="pl-k">return</span> <span class="pl-c1">1</span>;a<span class="pl-k">=</span>(a<span class="pl-k">-</span>b)<span class="pl-k">/</span>(c<span class="pl-k">-</span>b);<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>(a<span class="pl-k">*</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">15</span>)<span class="pl-k">+</span><span class="pl-c1">10</span>)},<span class="pl-en">random16</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">65280</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">+</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>())<span class="pl-k">/</span><span class="pl-c1">65535</span>},<span class="pl-en">randInt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span>(b<span class="pl-k">-</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>))},<span class="pl-en">randFloat</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span>(b<span class="pl-k">-</span>a)},<span class="pl-en">randFloatSpread</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>(.<span class="pl-c1">5</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>())},<span class="pl-en">degToRad</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">180</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> b<span class="pl-k">*</span>a}}(),<span class="pl-en">radToDeg</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">180</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> b<span class="pl-k">*</span>a}}(),<span class="pl-en">isPowerOfTwo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">===</span>(a<span class="pl-k">&amp;</span>a<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">!==</span>a},<span class="pl-en">nextPowerOfTwo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">--</span>;a|<span class="pl-k">=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>;a|<span class="pl-k">=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>;a|<span class="pl-k">=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">4</span>;a|<span class="pl-k">=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span>;a|<span class="pl-k">=</span>a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span>;a<span class="pl-k">++</span>;<span class="pl-k">return</span> a}};</td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Spline</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){a<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a);d<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span>b);<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>f<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b}<span class="pl-v">this</span>.points<span class="pl-k">=</span>a;<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>{x<span class="pl-k">:</span><span class="pl-c1">0</span>,y<span class="pl-k">:</span><span class="pl-c1">0</span>,z<span class="pl-k">:</span><span class="pl-c1">0</span>},e,g,f,h,k,l,n,p,m;<span class="pl-c1">this</span>.<span class="pl-en">initFromArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.points<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.points[b]<span class="pl-k">=</span>{x<span class="pl-k">:</span>a[b][<span class="pl-c1">0</span>],y<span class="pl-k">:</span>a[b][<span class="pl-c1">1</span>],z<span class="pl-k">:</span>a[b][<span class="pl-c1">2</span>]}};<span class="pl-c1">this</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){e<span class="pl-k">=</span>(<span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>a;g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(e);f<span class="pl-k">=</span>e<span class="pl-k">-</span>g;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span>g<span class="pl-k">-</span><span class="pl-c1">1</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>g;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>g<span class="pl-k">&gt;</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>g<span class="pl-k">+</span><span class="pl-c1">1</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>g<span class="pl-k">&gt;</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>g<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>;l<span class="pl-k">=</span><span class="pl-v">this</span>.points[c[<span class="pl-c1">0</span>]];n<span class="pl-k">=</span><span class="pl-v">this</span>.points[c[<span class="pl-c1">1</span>]];p<span class="pl-k">=</span><span class="pl-v">this</span>.points[c[<span class="pl-c1">2</span>]];m<span class="pl-k">=</span><span class="pl-v">this</span>.points[c[<span class="pl-c1">3</span>]];h<span class="pl-k">=</span>f<span class="pl-k">*</span>f;k<span class="pl-k">=</span>f<span class="pl-k">*</span>h;d.<span class="pl-c1">x</span><span class="pl-k">=</span>b(l.<span class="pl-c1">x</span>,n.<span class="pl-c1">x</span>,p.<span class="pl-c1">x</span>,m.<span class="pl-c1">x</span>,f,h,k);d.<span class="pl-c1">y</span><span class="pl-k">=</span>b(l.<span class="pl-c1">y</span>,n.<span class="pl-c1">y</span>,p.<span class="pl-c1">y</span>,m.<span class="pl-c1">y</span>,f,h,k);d.<span class="pl-c1">z</span><span class="pl-k">=</span>b(l.<span class="pl-c1">z</span>,n.<span class="pl-c1">z</span>,p.<span class="pl-c1">z</span>,m.<span class="pl-c1">z</span>,f,h,k);<span class="pl-k">return</span> d};<span class="pl-c1">this</span>.<span class="pl-en">getControlPointsArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c<span class="pl-k">=</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span>,d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)b<span class="pl-k">=</span><span class="pl-v">this</span>.points[a],d[a]<span class="pl-k">=</span>[b.<span class="pl-c1">x</span>,b.<span class="pl-c1">y</span>,b.<span class="pl-c1">z</span>];<span class="pl-k">return</span> d};<span class="pl-c1">this</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e<span class="pl-k">=</span>b<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,h<span class="pl-k">=</span>[],k<span class="pl-k">=</span><span class="pl-c1">0</span>;h[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">100</span>);c<span class="pl-k">=</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">*</span>a;g.copy(<span class="pl-v">this</span>.points[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">/</span>c,d<span class="pl-k">=</span><span class="pl-v">this</span>.getPoint(b),f.copy(d),k<span class="pl-k">+=</span>f.distanceTo(g),g.copy(d),b<span class="pl-k">*=</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b),b<span class="pl-k">!==</span>e<span class="pl-k">&amp;&amp;</span>(h[b]<span class="pl-k">=</span>k,e<span class="pl-k">=</span>b);h[h.<span class="pl-c1">length</span>]<span class="pl-k">=</span>k;<span class="pl-k">return</span>{chunks<span class="pl-k">:</span>h,total<span class="pl-k">:</span>k}};<span class="pl-c1">this</span>.<span class="pl-en">reparametrizeByArcLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e,g,f,h<span class="pl-k">=</span>[],k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,m<span class="pl-k">=</span><span class="pl-v">this</span>.getLength();h.<span class="pl-c1">push</span>(k.copy(<span class="pl-v">this</span>.points[<span class="pl-c1">0</span>]).clone());<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">1</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.points.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){c<span class="pl-k">=</span>m.chunks[b]<span class="pl-k">-</span>m.chunks[b<span class="pl-k">-</span><span class="pl-c1">1</span>];f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a<span class="pl-k">*</span>c<span class="pl-k">/</span>m.total);e<span class="pl-k">=</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>(<span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);g<span class="pl-k">=</span>b<span class="pl-k">/</span>(<span class="pl-v">this</span>.points.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;</span>f<span class="pl-k">-</span><span class="pl-c1">1</span>;c<span class="pl-k">++</span>)d<span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">/</span>f<span class="pl-k">*</span>c<span class="pl-k">*</span>(g<span class="pl-k">-</span>e),d<span class="pl-k">=</span><span class="pl-v">this</span>.getPoint(d),</td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line">h.<span class="pl-c1">push</span>(k.copy(d).clone());h.<span class="pl-c1">push</span>(k.copy(<span class="pl-v">this</span>.points[b]).clone())}<span class="pl-v">this</span>.points<span class="pl-k">=</span>h}};<span class="pl-c1">THREE</span>.<span class="pl-en">Triangle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.a<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};<span class="pl-c1">THREE.Triangle</span>.<span class="pl-en">normal</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b<span class="pl-k">=</span>e.lengthSq();<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span>e.multiplyScalar(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b))<span class="pl-k">:</span>e.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}}();</td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Triangle</span>.<span class="pl-en">barycoordFromPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){a.subVectors(f,e);b.subVectors(g,e);c.subVectors(d,e);d<span class="pl-k">=</span>a.dot(a);e<span class="pl-k">=</span>a.dot(b);g<span class="pl-k">=</span>a.dot(c);<span class="pl-k">var</span> k<span class="pl-k">=</span>b.dot(b);f<span class="pl-k">=</span>b.dot(c);<span class="pl-k">var</span> l<span class="pl-k">=</span>d<span class="pl-k">*</span>k<span class="pl-k">-</span>e<span class="pl-k">*</span>e;h<span class="pl-k">=</span>h<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>l)<span class="pl-k">return</span> h.set(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);l<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>l;k<span class="pl-k">=</span>(k<span class="pl-k">*</span>g<span class="pl-k">-</span>e<span class="pl-k">*</span>f)<span class="pl-k">*</span>l;d<span class="pl-k">=</span>(d<span class="pl-k">*</span>f<span class="pl-k">-</span>e<span class="pl-k">*</span>g)<span class="pl-k">*</span>l;<span class="pl-k">return</span> h.set(<span class="pl-c1">1</span><span class="pl-k">-</span>k<span class="pl-k">-</span>d,d,k)}}();</td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Triangle</span>.<span class="pl-en">containsPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Triangle.barycoordFromPoint(b,c,d,e,a);<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span>b.<span class="pl-c1">y</span>}}();</td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Triangle</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Triangle,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.a.copy(a);<span class="pl-v">this</span>.b.copy(b);<span class="pl-v">this</span>.c.copy(c);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setFromPointsAndIndices</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.a.copy(a[b]);<span class="pl-v">this</span>.b.copy(a[c]);<span class="pl-v">this</span>.c.copy(a[d]);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.a.copy(a.a);<span class="pl-v">this</span>.b.copy(a.b);<span class="pl-v">this</span>.c.copy(a.c);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">area</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){a.subVectors(<span class="pl-v">this</span>.c,<span class="pl-v">this</span>.b);b.subVectors(<span class="pl-v">this</span>.a,</td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.b);<span class="pl-k">return</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>a.cross(b).<span class="pl-c1">length</span>()}}(),<span class="pl-en">midpoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).addVectors(<span class="pl-v">this</span>.a,<span class="pl-v">this</span>.b).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.c).multiplyScalar(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>)},<span class="pl-en">normal</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.Triangle.normal(<span class="pl-v">this</span>.a,<span class="pl-v">this</span>.b,<span class="pl-v">this</span>.c,a)},<span class="pl-en">plane</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Plane</span>).setFromCoplanarPoints(<span class="pl-v">this</span>.a,<span class="pl-v">this</span>.b,<span class="pl-v">this</span>.c)},<span class="pl-en">barycoordFromPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.Triangle.barycoordFromPoint(a,<span class="pl-v">this</span>.a,<span class="pl-v">this</span>.b,<span class="pl-v">this</span>.c,b)},<span class="pl-en">containsPoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.Triangle.containsPoint(a,<span class="pl-v">this</span>.a,<span class="pl-v">this</span>.b,<span class="pl-v">this</span>.c)},</td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line"><span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.a.equals(<span class="pl-v">this</span>.a)<span class="pl-k">&amp;&amp;</span>a.b.equals(<span class="pl-v">this</span>.b)<span class="pl-k">&amp;&amp;</span>a.c.equals(<span class="pl-v">this</span>.c)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Clock</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.autoStart<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.elapsedTime<span class="pl-k">=</span><span class="pl-v">this</span>.oldTime<span class="pl-k">=</span><span class="pl-v">this</span>.startTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.running<span class="pl-k">=!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Clock</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Clock,<span class="pl-en">start</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.oldTime<span class="pl-k">=</span><span class="pl-v">this</span>.startTime<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.performance<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.performance.now<span class="pl-k">?</span>self.performance.now()<span class="pl-k">:</span><span class="pl-c1">Date</span>.now();<span class="pl-v">this</span>.running<span class="pl-k">=!</span><span class="pl-c1">0</span>},<span class="pl-en">stop</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.getElapsedTime();<span class="pl-v">this</span>.running<span class="pl-k">=!</span><span class="pl-c1">1</span>},<span class="pl-en">getElapsedTime</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.getDelta();<span class="pl-k">return</span> <span class="pl-v">this</span>.elapsedTime},<span class="pl-en">getDelta</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.autoStart<span class="pl-k">&amp;&amp;!</span><span class="pl-v">this</span>.running<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">start</span>();<span class="pl-k">if</span>(<span class="pl-v">this</span>.running){<span class="pl-k">var</span> b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.performance<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>self.performance.now<span class="pl-k">?</span>self.performance.now()<span class="pl-k">:</span><span class="pl-c1">Date</span>.now(),</td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span>.<span class="pl-c1">001</span><span class="pl-k">*</span>(b<span class="pl-k">-</span><span class="pl-v">this</span>.oldTime);<span class="pl-v">this</span>.oldTime<span class="pl-k">=</span>b;<span class="pl-v">this</span>.elapsedTime<span class="pl-k">+=</span>a}<span class="pl-k">return</span> a}};<span class="pl-c1">THREE</span>.<span class="pl-en">EventDispatcher</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.EventDispatcher</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.EventDispatcher,<span class="pl-en">apply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a.addEventListener<span class="pl-k">=</span><span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.addEventListener;a.hasEventListener<span class="pl-k">=</span><span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.hasEventListener;a.removeEventListener<span class="pl-k">=</span><span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.removeEventListener;a.dispatchEvent<span class="pl-k">=</span><span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.dispatchEvent},<span class="pl-en">addEventListener</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>._listeners<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._listeners<span class="pl-k">=</span>{});<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._listeners;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c[a]<span class="pl-k">&amp;&amp;</span>(c[a]<span class="pl-k">=</span>[]);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span>c[a].<span class="pl-c1">indexOf</span>(b)<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line">c[a].<span class="pl-c1">push</span>(b)},<span class="pl-en">hasEventListener</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>._listeners)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._listeners;<span class="pl-k">return</span> <span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c[a]<span class="pl-k">&amp;&amp;-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>c[a].<span class="pl-c1">indexOf</span>(b)<span class="pl-k">?!</span><span class="pl-c1">0</span><span class="pl-k">:!</span><span class="pl-c1">1</span>},<span class="pl-en">removeEventListener</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>._listeners){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>._listeners[a];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c){<span class="pl-k">var</span> d<span class="pl-k">=</span>c.<span class="pl-c1">indexOf</span>(b);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">splice</span>(d,<span class="pl-c1">1</span>)}}},<span class="pl-en">dispatchEvent</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>._listeners){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>._listeners[a.<span class="pl-c1">type</span>];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b){a.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>)c[e]<span class="pl-k">=</span>b[e];<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>d;e<span class="pl-k">++</span>)c[e].<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a)}}}};</td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a.distance<span class="pl-k">-</span>b.distance}<span class="pl-c1">a</span>.<span class="pl-en">Raycaster</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-v">this</span>.ray<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Ray</span>(b,c);<span class="pl-v">this</span>.near<span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.far<span class="pl-k">=</span>f<span class="pl-k">||</span><span class="pl-c1">Infinity</span>;<span class="pl-v">this</span>.params<span class="pl-k">=</span>{Mesh<span class="pl-k">:</span>{},Line<span class="pl-k">:</span>{},LOD<span class="pl-k">:</span>{},Points<span class="pl-k">:</span>{threshold<span class="pl-k">:</span><span class="pl-c1">1</span>},Sprite<span class="pl-k">:</span>{}};<span class="pl-c1">Object</span>.defineProperties(<span class="pl-v">this</span>.params,{PointCloud<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Raycaster: params.PointCloud has been renamed to params.Points.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.Points}}})};<span class="pl-k">var</span> <span class="pl-en">c</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a.visible<span class="pl-k">&amp;&amp;</span>(a.raycast(b,g),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>f)){a<span class="pl-k">=</span>a.children;f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>h;f<span class="pl-k">++</span>)c(a[f],</td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line">b,g,<span class="pl-k">!</span><span class="pl-c1">0</span>)}};<span class="pl-c1">a.Raycaster</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span>a.Raycaster,linePrecision<span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.ray.set(a,b)},<span class="pl-en">setFromCamera</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c <span class="pl-k">instanceof</span> a.PerspectiveCamera<span class="pl-k">?</span>(<span class="pl-v">this</span>.ray.origin.setFromMatrixPosition(c.matrixWorld),<span class="pl-v">this</span>.ray.direction.set(b.<span class="pl-c1">x</span>,b.<span class="pl-c1">y</span>,.<span class="pl-c1">5</span>).unproject(c).<span class="pl-c1">sub</span>(<span class="pl-v">this</span>.ray.origin).normalize())<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> a.OrthographicCamera<span class="pl-k">?</span>(<span class="pl-v">this</span>.ray.origin.set(b.<span class="pl-c1">x</span>,b.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).unproject(c),<span class="pl-v">this</span>.ray.direction.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).transformDirection(c.matrixWorld))<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Raycaster: Unsupported camera type.<span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line"><span class="pl-en">intersectObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>[];c(a,<span class="pl-v">this</span>,g,e);g.<span class="pl-c1">sort</span>(b);<span class="pl-k">return</span> g},<span class="pl-en">intersectObjects</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>[];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Array</span>.isArray(a))<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Raycaster.intersectObjects: objects is not an Array.<span class="pl-pds">&quot;</span></span>),g;<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>h;f<span class="pl-k">++</span>)c(a[f],<span class="pl-v">this</span>,g,e);g.<span class="pl-c1">sort</span>(b);<span class="pl-k">return</span> g}}})(<span class="pl-c1">THREE</span>);</td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Object3D</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.defineProperty(<span class="pl-v">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Object3DIdCount<span class="pl-k">++</span>});<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Object3D<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.children<span class="pl-k">=</span>[];<span class="pl-v">this</span>.up<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.DefaultUp.clone();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Euler</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);b.<span class="pl-c1">onChange</span>(<span class="pl-k">function</span>(){c.setFromEuler(b,<span class="pl-k">!</span><span class="pl-c1">1</span>)});c.<span class="pl-c1">onChange</span>(<span class="pl-k">function</span>(){b.setFromQuaternion(c,<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>)});<span class="pl-c1">Object</span>.defineProperties(<span class="pl-v">this</span>,{position<span class="pl-k">:</span>{enumerable<span class="pl-k">:!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>a},rotation<span class="pl-k">:</span>{enumerable<span class="pl-k">:!</span><span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span>b},quaternion<span class="pl-k">:</span>{enumerable<span class="pl-k">:!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>c},scale<span class="pl-k">:</span>{enumerable<span class="pl-k">:!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>d},modelViewMatrix<span class="pl-k">:</span>{value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>},normalMatrix<span class="pl-k">:</span>{value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>}});<span class="pl-v">this</span>.rotationAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.matrix<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-v">this</span>.matrixWorld<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.DefaultMatrixAutoUpdate;<span class="pl-v">this</span>.matrixWorldNeedsUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.visible<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.receiveShadow<span class="pl-k">=</span><span class="pl-v">this</span>.castShadow<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.frustumCulled<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.renderOrder<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.userData<span class="pl-k">=</span>{}};</td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.Object3D.DefaultUp<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">THREE</span>.Object3D.DefaultMatrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Object3D</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Object3D,get <span class="pl-en">eulerOrder</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .eulerOrder has been moved to .rotation.order.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.rotation.order},set <span class="pl-en">eulerOrder</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .eulerOrder has been moved to .rotation.order.<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.rotation.order<span class="pl-k">=</span>a},get <span class="pl-en">useQuaternion</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.<span class="pl-pds">&quot;</span></span>)},set <span class="pl-en">useQuaternion</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.<span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line">set <span class="pl-en">renderDepth</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">applyMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.matrix.multiplyMatrices(a,<span class="pl-v">this</span>.matrix);<span class="pl-v">this</span>.matrix.decompose(<span class="pl-v">this</span>.position,<span class="pl-v">this</span>.quaternion,<span class="pl-v">this</span>.scale)},<span class="pl-en">setRotationFromAxisAngle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.quaternion.setFromAxisAngle(a,b)},<span class="pl-en">setRotationFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.quaternion.setFromEuler(a,<span class="pl-k">!</span><span class="pl-c1">0</span>)},<span class="pl-en">setRotationFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.quaternion.setFromRotationMatrix(a)},<span class="pl-en">setRotationFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.quaternion.copy(a)},</td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line"><span class="pl-en">rotateOnAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a.setFromAxisAngle(b,c);<span class="pl-v">this</span>.quaternion.multiply(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.rotateOnAxis(a,b)}}(),<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.rotateOnAxis(a,b)}}(),<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.rotateOnAxis(a,b)}}(),<span class="pl-en">translateOnAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,</td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>){a.copy(b).applyQuaternion(<span class="pl-v">this</span>.quaternion);<span class="pl-v">this</span>.position.<span class="pl-c1">add</span>(a.multiplyScalar(c));<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.translateOnAxis(b,a)},<span class="pl-en">translateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.translateOnAxis(a,b)}}(),<span class="pl-en">translateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.translateOnAxis(a,b)}}(),<span class="pl-en">translateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.translateOnAxis(a,b)}}(),<span class="pl-en">localToWorld</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a.applyMatrix4(<span class="pl-v">this</span>.matrixWorld)},<span class="pl-en">worldToLocal</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> b.applyMatrix4(a.getInverse(<span class="pl-v">this</span>.matrixWorld))}}(),<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){a.lookAt(b,<span class="pl-v">this</span>.position,<span class="pl-v">this</span>.up);<span class="pl-v">this</span>.quaternion.setFromRotationMatrix(a)}}(),<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.<span class="pl-c1">add</span>(arguments[b]);</td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>}<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-v">this</span>)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D.add: object can&#39;t be added as a child of itself.<span class="pl-pds">&quot;</span></span>,a),<span class="pl-v">this</span>;a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Object3D<span class="pl-k">?</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>a.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span>a.<span class="pl-c1">parent</span>.remove(a),a.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-v">this</span>,a.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>added<span class="pl-pds">&quot;</span></span>}),<span class="pl-v">this</span>.children.<span class="pl-c1">push</span>(a))<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D.add: object not an instance of THREE.Object3D.<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">remove</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>arguments.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.remove(arguments[b]);b<span class="pl-k">=</span><span class="pl-v">this</span>.children.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(a.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>,a.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>removed<span class="pl-pds">&quot;</span></span>}),</td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.children.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>))},<span class="pl-en">getChildByName</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.getObjectByName(a)},<span class="pl-en">getObjectById</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.getObjectByProperty(<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,a)},<span class="pl-en">getObjectByName</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.getObjectByProperty(<span class="pl-s"><span class="pl-pds">&quot;</span>name<span class="pl-pds">&quot;</span></span>,a)},<span class="pl-en">getObjectByProperty</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>[a]<span class="pl-k">===</span>b)<span class="pl-k">return</span> <span class="pl-v">this</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.children.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.children[c].getObjectByProperty(a,b);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e)<span class="pl-k">return</span> e}},<span class="pl-en">getWorldPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">return</span> a.setFromMatrixPosition(<span class="pl-v">this</span>.matrixWorld)},<span class="pl-en">getWorldQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-v">this</span>.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.matrixWorld.decompose(a,c,b);<span class="pl-k">return</span> c}}(),<span class="pl-en">getWorldRotation</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Euler</span>;<span class="pl-v">this</span>.getWorldQuaternion(a);<span class="pl-k">return</span> b.setFromQuaternion(a,<span class="pl-v">this</span>.rotation.order,<span class="pl-k">!</span><span class="pl-c1">1</span>)}}(),<span class="pl-en">getWorldScale</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.matrixWorld.decompose(a,b,c);<span class="pl-k">return</span> c}}(),<span class="pl-en">getWorldDirection</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.getWorldQuaternion(a);<span class="pl-k">return</span> b.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>).applyQuaternion(a)}}(),<span class="pl-en">raycast</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">traverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a(<span class="pl-v">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.children,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b[c].traverse(a)},<span class="pl-en">traverseVisible</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-v">this</span>.visible){a(<span class="pl-v">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.children,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b[c].traverseVisible(a)}},<span class="pl-en">traverseAncestors</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">parent</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(a(b),b.traverseAncestors(a))},<span class="pl-en">updateMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.matrix.compose(<span class="pl-v">this</span>.position,<span class="pl-v">this</span>.quaternion,<span class="pl-v">this</span>.scale);<span class="pl-v">this</span>.matrixWorldNeedsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>},<span class="pl-en">updateMatrixWorld</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.updateMatrix();<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.matrixWorldNeedsUpdate<span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a)<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">parent</span><span class="pl-k">?</span><span class="pl-v">this</span>.matrixWorld.copy(<span class="pl-v">this</span>.matrix)<span class="pl-k">:</span><span class="pl-v">this</span>.matrixWorld.multiplyMatrices(<span class="pl-v">this</span>.<span class="pl-c1">parent</span>.matrixWorld,</td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.matrix),<span class="pl-v">this</span>.matrixWorldNeedsUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>,a<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.children.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.children[b].updateMatrixWorld(a)},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[c];<span class="pl-k">delete</span> d.metadata;b.<span class="pl-c1">push</span>(d)}<span class="pl-k">return</span> b}<span class="pl-k">var</span> c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a,d<span class="pl-k">=</span>{};c<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>{geometries<span class="pl-k">:</span>{},materials<span class="pl-k">:</span>{},textures<span class="pl-k">:</span>{},images<span class="pl-k">:</span>{}},d.metadata<span class="pl-k">=</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Object<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Object3D.toJSON<span class="pl-pds">&quot;</span></span>});d.uuid<span class="pl-k">=</span><span class="pl-v">this</span>.uuid;d.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(d.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">name</span>);<span class="pl-s"><span class="pl-pds">&quot;</span>{}<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">JSON</span>.stringify(<span class="pl-v">this</span>.userData)<span class="pl-k">&amp;&amp;</span>(d.userData<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.userData);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.visible<span class="pl-k">&amp;&amp;</span>(d.visible<span class="pl-k">=</span><span class="pl-v">this</span>.visible);d.matrix<span class="pl-k">=</span><span class="pl-v">this</span>.matrix.toArray();<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.children.<span class="pl-c1">length</span>){d.children<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>.children.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>)d.children.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.children[e].toJSON(a).<span class="pl-c1">object</span>)}e<span class="pl-k">=</span>{};<span class="pl-k">if</span>(c){<span class="pl-k">var</span> c<span class="pl-k">=</span>b(a.geometries),g<span class="pl-k">=</span>b(a.materials),f<span class="pl-k">=</span>b(a.textures);a<span class="pl-k">=</span>b(a.<span class="pl-c1">images</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(e.geometries<span class="pl-k">=</span>c);<span class="pl-c1">0</span><span class="pl-k">&lt;</span>g.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(e.materials<span class="pl-k">=</span>g);<span class="pl-c1">0</span><span class="pl-k">&lt;</span>f.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(e.textures<span class="pl-k">=</span>f);<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(e.<span class="pl-c1">images</span><span class="pl-k">=</span>a)}e.<span class="pl-c1">object</span><span class="pl-k">=</span>d;<span class="pl-k">return</span> e},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>,a)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span>a.<span class="pl-c1">name</span>;<span class="pl-v">this</span>.up.copy(a.up);<span class="pl-v">this</span>.position.copy(a.position);<span class="pl-v">this</span>.quaternion.copy(a.quaternion);<span class="pl-v">this</span>.scale.copy(a.scale);<span class="pl-v">this</span>.rotationAutoUpdate<span class="pl-k">=</span>a.rotationAutoUpdate;<span class="pl-v">this</span>.matrix.copy(a.matrix);<span class="pl-v">this</span>.matrixWorld.copy(a.matrixWorld);<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=</span>a.matrixAutoUpdate;<span class="pl-v">this</span>.matrixWorldNeedsUpdate<span class="pl-k">=</span>a.matrixWorldNeedsUpdate;<span class="pl-v">this</span>.visible<span class="pl-k">=</span>a.visible;<span class="pl-v">this</span>.castShadow<span class="pl-k">=</span>a.castShadow;<span class="pl-v">this</span>.receiveShadow<span class="pl-k">=</span>a.receiveShadow;<span class="pl-v">this</span>.frustumCulled<span class="pl-k">=</span>a.frustumCulled;<span class="pl-v">this</span>.renderOrder<span class="pl-k">=</span>a.renderOrder;</td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.userData<span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.stringify(a.userData));<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.children.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-v">this</span>.<span class="pl-c1">add</span>(a.children[c].clone());<span class="pl-k">return</span> <span class="pl-v">this</span>}};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.Object3DIdCount<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Face3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-v">this</span>.a<span class="pl-k">=</span>a;<span class="pl-v">this</span>.b<span class="pl-k">=</span>b;<span class="pl-v">this</span>.c<span class="pl-k">=</span>c;<span class="pl-v">this</span>.normal<span class="pl-k">=</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Vector3<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.vertexNormals<span class="pl-k">=</span><span class="pl-c1">Array</span>.isArray(d)<span class="pl-k">?</span>d<span class="pl-k">:</span>[];<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Color<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span><span class="pl-c1">Array</span>.isArray(e)<span class="pl-k">?</span>e<span class="pl-k">:</span>[];<span class="pl-v">this</span>.materialIndex<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Face3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Face3,<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.a<span class="pl-k">=</span>a.a;<span class="pl-v">this</span>.b<span class="pl-k">=</span>a.b;<span class="pl-v">this</span>.c<span class="pl-k">=</span>a.c;<span class="pl-v">this</span>.normal.copy(a.normal);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.materialIndex<span class="pl-k">=</span>a.materialIndex;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>a.vertexNormals.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.vertexNormals[b]<span class="pl-k">=</span>a.vertexNormals[b].clone();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span>a.vertexColors.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.vertexColors[b]<span class="pl-k">=</span>a.vertexColors[b].clone();<span class="pl-k">return</span> <span class="pl-v">this</span>}};</td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Face4</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Face4 has been removed. A THREE.Face3 will be created instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,c,e,g,f)};<span class="pl-c1">THREE</span>.<span class="pl-en">BufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.array<span class="pl-k">=</span>a;<span class="pl-v">this</span>.itemSize<span class="pl-k">=</span>b;<span class="pl-v">this</span>.dynamic<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.updateRange<span class="pl-k">=</span>{offset<span class="pl-k">:</span><span class="pl-c1">0</span>,count<span class="pl-k">:-</span><span class="pl-c1">1</span>};<span class="pl-v">this</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.BufferAttribute</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.BufferAttribute,get <span class="pl-en">length</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute: .length has been deprecated. Please use .count.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.array.<span class="pl-c1">length</span>},get <span class="pl-en">count</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.array.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-v">this</span>.itemSize},set <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">version</span><span class="pl-k">++</span>},<span class="pl-en">setDynamic</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.dynamic<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.array<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.array</span>.<span class="pl-en">constructor</span>(<span class="pl-smi">a</span>.<span class="pl-smi">array</span>);<span class="pl-v">this</span>.itemSize<span class="pl-k">=</span>a.itemSize;<span class="pl-v">this</span>.dynamic<span class="pl-k">=</span>a.dynamic;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">*=</span><span class="pl-v">this</span>.itemSize;</td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">*=</span>b.itemSize;<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>.itemSize;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-v">this</span>.array[a<span class="pl-k">+</span>d]<span class="pl-k">=</span>b.array[c<span class="pl-k">+</span>d];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.array.set(a);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyColorsArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.array,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyColorsArray(): color is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.r;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.g;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.b}<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyIndicesArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.array,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.a;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.b;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line">g.c}<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyVector2sArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.array,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyVector2sArray(): vector is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">x</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">y</span>}<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copyVector3sArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.array,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyVector3sArray(): vector is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">x</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">y</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">z</span>}<span class="pl-k">return</span> <span class="pl-v">this</span>},</td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line"><span class="pl-en">copyVector4sArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.array,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute.copyVector4sArray(): vector is undefined<span class="pl-pds">&quot;</span></span>,d),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>);b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">x</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">y</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.<span class="pl-c1">z</span>;b[c<span class="pl-k">++</span>]<span class="pl-k">=</span>g.w}<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.array.set(a,b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize]},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize<span class="pl-k">+</span><span class="pl-c1">1</span>]},</td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line"><span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize<span class="pl-k">+</span><span class="pl-c1">2</span>]},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize<span class="pl-k">+</span><span class="pl-c1">3</span>]},<span class="pl-en">setW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.itemSize<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setXY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">*=</span><span class="pl-v">this</span>.itemSize;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setXYZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">*=</span><span class="pl-v">this</span>.itemSize;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setXYZW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">*=</span><span class="pl-v">this</span>.itemSize;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-v">this</span>.array[a<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>e;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Int8Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Int8Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint8Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint8ClampedAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint8ClampedArray</span>(a),b)};</td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Int16Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Int16Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint16Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Int32Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Int32Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Uint32Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint32Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">Float32Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(a),b)};</td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Float64Attribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float64Array</span>(a),b)};<span class="pl-c1">THREE</span>.<span class="pl-en">DynamicBufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(a,b)).setDynamic(<span class="pl-k">!</span><span class="pl-c1">0</span>)};<span class="pl-c1">THREE</span>.<span class="pl-en">InstancedBufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.BufferAttribute.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>.meshPerAttribute<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.InstancedBufferAttribute</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.BufferAttribute.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.InstancedBufferAttribute</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.InstancedBufferAttribute;<span class="pl-c1">THREE.InstancedBufferAttribute</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.BufferAttribute.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.meshPerAttribute<span class="pl-k">=</span>a.meshPerAttribute;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">InterleavedBuffer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.array<span class="pl-k">=</span>a;<span class="pl-v">this</span>.stride<span class="pl-k">=</span>b;<span class="pl-v">this</span>.dynamic<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.updateRange<span class="pl-k">=</span>{offset<span class="pl-k">:</span><span class="pl-c1">0</span>,count<span class="pl-k">:-</span><span class="pl-c1">1</span>};<span class="pl-v">this</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.InterleavedBuffer</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.InterleavedBuffer,get <span class="pl-en">length</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.array.<span class="pl-c1">length</span>},get <span class="pl-en">count</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.array.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-v">this</span>.stride},set <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">version</span><span class="pl-k">++</span>},<span class="pl-en">setDynamic</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.dynamic<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.array<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.array</span>.<span class="pl-en">constructor</span>(<span class="pl-smi">a</span>.<span class="pl-smi">array</span>);<span class="pl-v">this</span>.stride<span class="pl-k">=</span>a.stride;<span class="pl-v">this</span>.dynamic<span class="pl-k">=</span>a.dynamic},<span class="pl-en">copyAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">*=</span><span class="pl-v">this</span>.stride;c<span class="pl-k">*=</span>b.stride;<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-v">this</span>.stride;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-v">this</span>.array[a<span class="pl-k">+</span>d]<span class="pl-k">=</span>b.array[c<span class="pl-k">+</span>d];<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.array.set(a,b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">InstancedInterleavedBuffer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.InterleavedBuffer.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>.meshPerAttribute<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.InstancedInterleavedBuffer</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.InterleavedBuffer.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.InstancedInterleavedBuffer</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.InstancedInterleavedBuffer;</td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.InstancedInterleavedBuffer</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.InterleavedBuffer.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.meshPerAttribute<span class="pl-k">=</span>a.meshPerAttribute;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">InterleavedBufferAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">data</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.itemSize<span class="pl-k">=</span>b;<span class="pl-v">this</span>.offset<span class="pl-k">=</span>c};</td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.InterleavedBufferAttribute</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.InterleavedBufferAttribute,get <span class="pl-en">length</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferAttribute: .length has been deprecated. Please use .count.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.array.<span class="pl-c1">length</span>},get <span class="pl-en">count</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">data</span>.array.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">getX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset]},<span class="pl-en">getY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span><span class="pl-c1">1</span>]},<span class="pl-en">getZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span><span class="pl-c1">2</span>]},<span class="pl-en">getW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span><span class="pl-c1">3</span>]},<span class="pl-en">setXY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;</td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setXYZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">setXYZW</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.stride<span class="pl-k">+</span><span class="pl-v">this</span>.offset;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>d;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.array[a<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>e;<span class="pl-k">return</span> <span class="pl-v">this</span>}};</td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Geometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.defineProperty(<span class="pl-v">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.GeometryIdCount<span class="pl-k">++</span>});<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Geometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.vertices<span class="pl-k">=</span>[];<span class="pl-v">this</span>.colors<span class="pl-k">=</span>[];<span class="pl-v">this</span>.faces<span class="pl-k">=</span>[];<span class="pl-v">this</span>.faceVertexUvs<span class="pl-k">=</span>[[]];<span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span>[];<span class="pl-v">this</span>.morphColors<span class="pl-k">=</span>[];<span class="pl-v">this</span>.morphNormals<span class="pl-k">=</span>[];<span class="pl-v">this</span>.skinWeights<span class="pl-k">=</span>[];<span class="pl-v">this</span>.skinIndices<span class="pl-k">=</span>[];<span class="pl-v">this</span>.lineDistances<span class="pl-k">=</span>[];<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.groupsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.lineDistancesNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.colorsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.normalsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.uvsNeedUpdate<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.elementsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Geometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Geometry,<span class="pl-en">applyMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>).getNormalMatrix(a),c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-v">this</span>.vertices[c].applyMatrix4(a);c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.faces[c];a.normal.applyMatrix3(b).normalize();<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a.vertexNormals.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)a.vertexNormals[e].applyMatrix3(b).normalize()}<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-v">this</span>.boundingBox<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.computeBoundingBox();<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-v">this</span>.boundingSphere<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.computeBoundingSphere();<span class="pl-v">this</span>.normalsNeedUpdate<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>},<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeRotationX(b);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeRotationY(b);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeRotationZ(b);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);</td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line">a.makeTranslation(b,c,d);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeScale(b,c,d);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>);a.lookAt(b);a.updateMatrix();<span class="pl-v">this</span>.applyMatrix(a.matrix)}}(),<span class="pl-en">fromBufferGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>,c<span class="pl-k">=</span><span class="pl-c1">null</span><span class="pl-k">!==</span>a.<span class="pl-c1">index</span><span class="pl-k">?</span>a.<span class="pl-c1">index</span>.array<span class="pl-k">:void</span> <span class="pl-c1">0</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>,e<span class="pl-k">=</span>d.position.array,g<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.normal<span class="pl-k">?</span>d.normal.array<span class="pl-k">:void</span> <span class="pl-c1">0</span>,f<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line">d.<span class="pl-c1">color</span><span class="pl-k">?</span>d.<span class="pl-c1">color</span>.array<span class="pl-k">:void</span> <span class="pl-c1">0</span>,h<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.uv<span class="pl-k">?</span>d.uv.array<span class="pl-k">:void</span> <span class="pl-c1">0</span>,k<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.uv2<span class="pl-k">?</span>d.uv2.array<span class="pl-k">:void</span> <span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">1</span>]<span class="pl-k">=</span>[]);<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span>[],n<span class="pl-k">=</span>[],p<span class="pl-k">=</span>[],m<span class="pl-k">=</span>d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;d<span class="pl-k">+=</span><span class="pl-c1">3</span>,m<span class="pl-k">+=</span><span class="pl-c1">2</span>)b.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(e[d],e[d<span class="pl-k">+</span><span class="pl-c1">1</span>],e[d<span class="pl-k">+</span><span class="pl-c1">2</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">&amp;&amp;</span>l.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(g[d],g[d<span class="pl-k">+</span><span class="pl-c1">1</span>],g[d<span class="pl-k">+</span><span class="pl-c1">2</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>b.colors.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(f[d],f[d<span class="pl-k">+</span><span class="pl-c1">1</span>],f[d<span class="pl-k">+</span><span class="pl-c1">2</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">&amp;&amp;</span>n.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(h[m],h[m<span class="pl-k">+</span><span class="pl-c1">1</span>])),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>p.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(k[m],k[m<span class="pl-k">+</span><span class="pl-c1">1</span>]));<span class="pl-k">var</span> <span class="pl-en">q</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">?</span>[l[a].clone(),l[c].clone(),l[d].clone()]<span class="pl-k">:</span>[],m<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>[b.colors[a].clone(),b.colors[c].clone(),b.colors[d].clone()]<span class="pl-k">:</span>[],e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,c,d,e,m);b.faces.<span class="pl-c1">push</span>(e);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">&amp;&amp;</span>b.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([n[a].clone(),n[c].clone(),n[d].clone()]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>b.faceVertexUvs[<span class="pl-c1">1</span>].<span class="pl-c1">push</span>([p[a].clone(),p[c].clone(),p[d].clone()])};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c)<span class="pl-k">if</span>(e<span class="pl-k">=</span>a.groups,<span class="pl-c1">0</span><span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>e[d],t<span class="pl-k">=</span>m.<span class="pl-c1">start</span>,r<span class="pl-k">=</span>m.count,m<span class="pl-k">=</span>t,t<span class="pl-k">=</span>t<span class="pl-k">+</span>r;m<span class="pl-k">&lt;</span>t;m<span class="pl-k">+=</span><span class="pl-c1">3</span>)q(c[m],c[m<span class="pl-k">+</span><span class="pl-c1">1</span>],c[m<span class="pl-k">+</span><span class="pl-c1">2</span>]);<span class="pl-k">else</span> <span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;d<span class="pl-k">+=</span><span class="pl-c1">3</span>)q(c[d],c[d<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>],c[d<span class="pl-k">+</span><span class="pl-c1">2</span>]);<span class="pl-k">else</span> <span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>;d<span class="pl-k">+=</span><span class="pl-c1">3</span>)q(d,d<span class="pl-k">+</span><span class="pl-c1">1</span>,d<span class="pl-k">+</span><span class="pl-c1">2</span>);<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-c1">null</span><span class="pl-k">!==</span>a.boundingBox<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span>a.boundingBox.clone());<span class="pl-c1">null</span><span class="pl-k">!==</span>a.boundingSphere<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span>a.boundingSphere.clone());<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.computeBoundingBox();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.boundingBox.center().negate();<span class="pl-v">this</span>.translate(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);<span class="pl-k">return</span> a},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.computeBoundingSphere();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.boundingSphere.center,b<span class="pl-k">=</span><span class="pl-v">this</span>.boundingSphere.radius,b<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">/</span>b,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;c.set(b,</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>b<span class="pl-k">*</span>a.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-k">-</span>b<span class="pl-k">*</span>a.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,<span class="pl-k">-</span>b<span class="pl-k">*</span>a.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-v">this</span>.applyMatrix(c);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">computeFaceNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.faces[c],g<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[e.a],f<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[e.b];a.subVectors(<span class="pl-v">this</span>.vertices[e.c],f);b.subVectors(g,f);a.cross(b);a.normalize();e.normal.copy(a)}},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d;d<span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(a){<span class="pl-k">var</span> e,g,f,h<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.faces[a],e<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[c.a],g<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[c.b],f<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[c.c],h.subVectors(f,g),k.subVectors(e,g),h.cross(k),d[c.a].<span class="pl-c1">add</span>(h),d[c.b].<span class="pl-c1">add</span>(h),d[c.c].<span class="pl-c1">add</span>(h)}<span class="pl-k">else</span> <span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.faces[a],d[c.a].<span class="pl-c1">add</span>(c.normal),d[c.b].<span class="pl-c1">add</span>(c.normal),d[c.c].<span class="pl-c1">add</span>(c.normal);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b].normalize();a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.faces[a],e<span class="pl-k">=</span>c.vertexNormals,<span class="pl-c1">3</span><span class="pl-k">===</span>e.<span class="pl-c1">length</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line">(e[<span class="pl-c1">0</span>].copy(d[c.a]),e[<span class="pl-c1">1</span>].copy(d[c.b]),e[<span class="pl-c1">2</span>].copy(d[c.c]))<span class="pl-k">:</span>(e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>d[c.a].clone(),e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>d[c.b].clone(),e[<span class="pl-c1">2</span>]<span class="pl-k">=</span>d[c.c].clone())},<span class="pl-en">computeMorphNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c,d,e;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-v">this</span>.faces[c],e.__originalFaceNormal<span class="pl-k">?</span>e.__originalFaceNormal.copy(e.normal)<span class="pl-k">:</span>e.__originalFaceNormal<span class="pl-k">=</span>e.normal.clone(),e.__originalVertexNormals<span class="pl-k">||</span>(e.__originalVertexNormals<span class="pl-k">=</span>[]),a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>e.vertexNormals.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)e.__originalVertexNormals[a]<span class="pl-k">?</span>e.__originalVertexNormals[a].copy(e.vertexNormals[a])<span class="pl-k">:</span>e.__originalVertexNormals[a]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line">e.vertexNormals[a].clone();<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;g.faces<span class="pl-k">=</span><span class="pl-v">this</span>.faces;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargets.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>.morphNormals[a]){<span class="pl-v">this</span>.morphNormals[a]<span class="pl-k">=</span>{};<span class="pl-v">this</span>.morphNormals[a].faceNormals<span class="pl-k">=</span>[];<span class="pl-v">this</span>.morphNormals[a].vertexNormals<span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-v">this</span>.morphNormals[a].faceNormals;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.morphNormals[a].vertexNormals,h,k;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span>{a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>},e.<span class="pl-c1">push</span>(h),f.<span class="pl-c1">push</span>(k)}f<span class="pl-k">=</span><span class="pl-v">this</span>.morphNormals[a];g.vertices<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargets[a].vertices;</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line">g.computeFaceNormals();g.computeVertexNormals();c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-v">this</span>.faces[c],h<span class="pl-k">=</span>f.faceNormals[c],k<span class="pl-k">=</span>f.vertexNormals[c],h.copy(e.normal),k.a.copy(e.vertexNormals[<span class="pl-c1">0</span>]),k.b.copy(e.vertexNormals[<span class="pl-c1">1</span>]),k.c.copy(e.vertexNormals[<span class="pl-c1">2</span>])}c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-v">this</span>.faces[c],e.normal<span class="pl-k">=</span>e.__originalFaceNormal,e.vertexNormals<span class="pl-k">=</span>e.__originalVertexNormals},<span class="pl-en">computeTangents</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Geometry: .computeTangents() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeLineDistances</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.vertices,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">+=</span>b[c].distanceTo(b[c<span class="pl-k">-</span><span class="pl-c1">1</span>])),<span class="pl-v">this</span>.lineDistances[c]<span class="pl-k">=</span>a},<span class="pl-en">computeBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-v">this</span>.boundingBox<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>);<span class="pl-v">this</span>.boundingBox.setFromPoints(<span class="pl-v">this</span>.vertices)},<span class="pl-en">computeBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-v">this</span>.boundingSphere<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>);<span class="pl-v">this</span>.boundingSphere.setFromPoints(<span class="pl-v">this</span>.vertices)},<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry)<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line">a);<span class="pl-k">else</span>{<span class="pl-k">var</span> d,e<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>,g<span class="pl-k">=</span><span class="pl-v">this</span>.vertices,f<span class="pl-k">=</span>a.vertices,h<span class="pl-k">=</span><span class="pl-v">this</span>.faces,k<span class="pl-k">=</span>a.faces,l<span class="pl-k">=</span><span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>];a<span class="pl-k">=</span>a.faceVertexUvs[<span class="pl-c1">0</span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>).getNormalMatrix(b));<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span>f.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>p;n<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>f[n].clone();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>m.applyMatrix4(b);g.<span class="pl-c1">push</span>(m)}n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>p;n<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>k[n],q,t<span class="pl-k">=</span>f.vertexNormals,r<span class="pl-k">=</span>f.vertexColors,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(f.a<span class="pl-k">+</span>e,f.b<span class="pl-k">+</span>e,f.c<span class="pl-k">+</span>e);m.normal.copy(f.normal);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>m.normal.applyMatrix3(d).normalize();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span>t.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line">g;b<span class="pl-k">++</span>)q<span class="pl-k">=</span>t[b].clone(),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>q.applyMatrix3(d).normalize(),m.vertexNormals.<span class="pl-c1">push</span>(q);m.<span class="pl-c1">color</span>.copy(f.<span class="pl-c1">color</span>);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span>r.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>g;b<span class="pl-k">++</span>)q<span class="pl-k">=</span>r[b],m.vertexColors.<span class="pl-c1">push</span>(q.clone());m.materialIndex<span class="pl-k">=</span>f.materialIndex<span class="pl-k">+</span>c;h.<span class="pl-c1">push</span>(m)}n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>p;n<span class="pl-k">++</span>)<span class="pl-k">if</span>(c<span class="pl-k">=</span>a[n],d<span class="pl-k">=</span>[],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c){b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>g;b<span class="pl-k">++</span>)d.<span class="pl-c1">push</span>(c[b].clone());l.<span class="pl-c1">push</span>(d)}}},<span class="pl-en">mergeMesh</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Mesh<span class="pl-k">?</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.<span class="pl-pds">&quot;</span></span>,a)<span class="pl-k">:</span>(a.matrixAutoUpdate<span class="pl-k">&amp;&amp;</span>a.updateMatrix(),</td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.merge(a.geometry,a.matrix))},<span class="pl-en">mergeVertices</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{},b<span class="pl-k">=</span>[],c<span class="pl-k">=</span>[],d,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">10</span>,<span class="pl-c1">4</span>),g,f;g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)d<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[g],d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(d.<span class="pl-c1">x</span><span class="pl-k">*</span>e)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(d.<span class="pl-c1">y</span><span class="pl-k">*</span>e)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(d.<span class="pl-c1">z</span><span class="pl-k">*</span>e),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a[d]<span class="pl-k">?</span>(a[d]<span class="pl-k">=</span>g,b.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.vertices[g]),c[g]<span class="pl-k">=</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>c[g]<span class="pl-k">=</span>c[a[d]];a<span class="pl-k">=</span>[];g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-v">this</span>.faces[g],e.a<span class="pl-k">=</span>c[e.a],e.b<span class="pl-k">=</span>c[e.b],e.c<span class="pl-k">=</span>c[e.c],e<span class="pl-k">=</span>[e.a,e.b,e.c],d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(e[d]<span class="pl-k">===</span>e[(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>]){a.<span class="pl-c1">push</span>(g);<span class="pl-k">break</span>}<span class="pl-k">for</span>(g<span class="pl-k">=</span>a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>g;g<span class="pl-k">--</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span>a[g],<span class="pl-v">this</span>.faces.<span class="pl-c1">splice</span>(e,</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>),c<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>.faceVertexUvs.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>f;c<span class="pl-k">++</span>)<span class="pl-v">this</span>.faceVertexUvs[c].<span class="pl-c1">splice</span>(e,<span class="pl-c1">1</span>);g<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span><span class="pl-k">-</span>b.<span class="pl-c1">length</span>;<span class="pl-v">this</span>.vertices<span class="pl-k">=</span>b;<span class="pl-k">return</span> g},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> c<span class="pl-k">?</span>a|<span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>b<span class="pl-k">:</span>a<span class="pl-k">&amp;~</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;&lt;</span>b)}<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">x</span>.<span class="pl-c1">toString</span>()<span class="pl-k">+</span>a.<span class="pl-c1">y</span>.<span class="pl-c1">toString</span>()<span class="pl-k">+</span>a.<span class="pl-c1">z</span>.<span class="pl-c1">toString</span>();<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l[b])<span class="pl-k">return</span> l[b];l[b]<span class="pl-k">=</span>k.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>;k.<span class="pl-c1">push</span>(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);<span class="pl-k">return</span> l[b]}<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.r.<span class="pl-c1">toString</span>()<span class="pl-k">+</span>a.g.<span class="pl-c1">toString</span>()<span class="pl-k">+</span>a.b.<span class="pl-c1">toString</span>();<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>p[b])<span class="pl-k">return</span> p[b];p[b]<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;n.<span class="pl-c1">push</span>(a.getHex());<span class="pl-k">return</span> p[b]}<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">x</span>.<span class="pl-c1">toString</span>()<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">y</span>.<span class="pl-c1">toString</span>();<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>q[b])<span class="pl-k">return</span> q[b];q[b]<span class="pl-k">=</span>m.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">2</span>;m.<span class="pl-c1">push</span>(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>);<span class="pl-k">return</span> q[b]}<span class="pl-k">var</span> e<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Geometry<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Geometry.toJSON<span class="pl-pds">&quot;</span></span>}};e.uuid<span class="pl-k">=</span><span class="pl-v">this</span>.uuid;e.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(e.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">name</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.parameters){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.parameters,f;<span class="pl-k">for</span>(f <span class="pl-k">in</span> g)<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g[f]<span class="pl-k">&amp;&amp;</span>(e[f]<span class="pl-k">=</span>g[f]);<span class="pl-k">return</span> e}g<span class="pl-k">=</span>[];<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[f];g.<span class="pl-c1">push</span>(h.<span class="pl-c1">x</span>,h.<span class="pl-c1">y</span>,h.<span class="pl-c1">z</span>)}<span class="pl-k">var</span> h<span class="pl-k">=</span>[],k<span class="pl-k">=</span>[],l<span class="pl-k">=</span>{},n<span class="pl-k">=</span>[],p<span class="pl-k">=</span>{},m<span class="pl-k">=</span>[],q<span class="pl-k">=</span>{};<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-v">this</span>.faces.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-v">this</span>.faces[f],</td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line">r<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>][f],u<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>t.normal.<span class="pl-c1">length</span>(),w<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>t.vertexNormals.<span class="pl-c1">length</span>,v<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">!==</span>t.<span class="pl-c1">color</span>.r<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">!==</span>t.<span class="pl-c1">color</span>.g<span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">!==</span>t.<span class="pl-c1">color</span>.b,B<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>t.vertexColors.<span class="pl-c1">length</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>,x<span class="pl-k">=</span>a(x,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),x<span class="pl-k">=</span>a(x,<span class="pl-c1">1</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>),x<span class="pl-k">=</span>a(x,<span class="pl-c1">2</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>),x<span class="pl-k">=</span>a(x,<span class="pl-c1">3</span>,r),x<span class="pl-k">=</span>a(x,<span class="pl-c1">4</span>,u),x<span class="pl-k">=</span>a(x,<span class="pl-c1">5</span>,w),x<span class="pl-k">=</span>a(x,<span class="pl-c1">6</span>,v),x<span class="pl-k">=</span>a(x,<span class="pl-c1">7</span>,B);h.<span class="pl-c1">push</span>(x);h.<span class="pl-c1">push</span>(t.a,t.b,t.c);r<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span><span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>][f],h.<span class="pl-c1">push</span>(d(r[<span class="pl-c1">0</span>]),d(r[<span class="pl-c1">1</span>]),d(r[<span class="pl-c1">2</span>])));u<span class="pl-k">&amp;&amp;</span>h.<span class="pl-c1">push</span>(b(t.normal));w<span class="pl-k">&amp;&amp;</span>(u<span class="pl-k">=</span>t.vertexNormals,h.<span class="pl-c1">push</span>(b(u[<span class="pl-c1">0</span>]),b(u[<span class="pl-c1">1</span>]),b(u[<span class="pl-c1">2</span>])));v<span class="pl-k">&amp;&amp;</span>h.<span class="pl-c1">push</span>(c(t.<span class="pl-c1">color</span>));B<span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span>t.vertexColors,h.<span class="pl-c1">push</span>(c(t[<span class="pl-c1">0</span>]),c(t[<span class="pl-c1">1</span>]),c(t[<span class="pl-c1">2</span>])))}e.<span class="pl-c1">data</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line">{};e.<span class="pl-c1">data</span>.vertices<span class="pl-k">=</span>g;e.<span class="pl-c1">data</span>.normals<span class="pl-k">=</span>k;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>n.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(e.<span class="pl-c1">data</span>.colors<span class="pl-k">=</span>n);<span class="pl-c1">0</span><span class="pl-k">&lt;</span>m.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(e.<span class="pl-c1">data</span>.uvs<span class="pl-k">=</span>[m]);e.<span class="pl-c1">data</span>.faces<span class="pl-k">=</span>h;<span class="pl-k">return</span> e},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.vertices<span class="pl-k">=</span>[];<span class="pl-v">this</span>.faces<span class="pl-k">=</span>[];<span class="pl-v">this</span>.faceVertexUvs<span class="pl-k">=</span>[[]];<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>a.vertices,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(b[c].clone());b<span class="pl-k">=</span>a.faces;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(b[c].clone());c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span>a.faceVertexUvs.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){b<span class="pl-k">=</span>a.faceVertexUvs[c];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.faceVertexUvs[c]<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.faceVertexUvs[c]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line">[]);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span>b[e],h<span class="pl-k">=</span>[],k<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span>f.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>l;k<span class="pl-k">++</span>)h.<span class="pl-c1">push</span>(f[k].clone());<span class="pl-v">this</span>.faceVertexUvs[c].<span class="pl-c1">push</span>(h)}}<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.GeometryIdCount<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DirectGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.defineProperty(<span class="pl-v">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.GeometryIdCount<span class="pl-k">++</span>});<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>DirectGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.indices<span class="pl-k">=</span>[];<span class="pl-v">this</span>.vertices<span class="pl-k">=</span>[];<span class="pl-v">this</span>.normals<span class="pl-k">=</span>[];<span class="pl-v">this</span>.colors<span class="pl-k">=</span>[];<span class="pl-v">this</span>.uvs<span class="pl-k">=</span>[];<span class="pl-v">this</span>.uvs2<span class="pl-k">=</span>[];<span class="pl-v">this</span>.groups<span class="pl-k">=</span>[];<span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span>{};<span class="pl-v">this</span>.skinWeights<span class="pl-k">=</span>[];<span class="pl-v">this</span>.skinIndices<span class="pl-k">=</span>[];<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.groupsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.uvsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.colorsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.normalsNeedUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.DirectGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DirectGeometry,computeBoundingBox<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>.computeBoundingBox,computeBoundingSphere<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>.computeBoundingSphere,<span class="pl-en">computeFaceNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeGroups</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[],</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line">d;a<span class="pl-k">=</span>a.faces;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a[e];g.materialIndex<span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>g.materialIndex,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(b.count<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>e<span class="pl-k">-</span>b.<span class="pl-c1">start</span>,c.<span class="pl-c1">push</span>(b)),b<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">*</span>e,materialIndex<span class="pl-k">:</span>d})}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(b.count<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>e<span class="pl-k">-</span>b.<span class="pl-c1">start</span>,c.<span class="pl-c1">push</span>(b));<span class="pl-v">this</span>.groups<span class="pl-k">=</span>c},<span class="pl-en">fromGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.faces,c<span class="pl-k">=</span>a.vertices,d<span class="pl-k">=</span>a.faceVertexUvs,e<span class="pl-k">=</span>d[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d[<span class="pl-c1">0</span>].<span class="pl-c1">length</span>,g<span class="pl-k">=</span>d[<span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d[<span class="pl-c1">1</span>].<span class="pl-c1">length</span>,f<span class="pl-k">=</span>a.morphTargets,h<span class="pl-k">=</span>f.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>h){<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span>[],l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>h;l<span class="pl-k">++</span>)k[l]<span class="pl-k">=</span>[];<span class="pl-v">this</span>.morphTargets.position<span class="pl-k">=</span>k}<span class="pl-k">var</span> n<span class="pl-k">=</span>a.morphNormals,p<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>p){<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>[],l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>p;l<span class="pl-k">++</span>)m[l]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line">[];<span class="pl-v">this</span>.morphTargets.normal<span class="pl-k">=</span>m}<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span>a.skinIndices,t<span class="pl-k">=</span>a.skinWeights,r<span class="pl-k">=</span>q.<span class="pl-c1">length</span><span class="pl-k">===</span>c.<span class="pl-c1">length</span>,u<span class="pl-k">=</span>t.<span class="pl-c1">length</span><span class="pl-k">===</span>c.<span class="pl-c1">length</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span>;l<span class="pl-k">++</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>b[l];<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(c[w.a],c[w.b],c[w.c]);<span class="pl-k">var</span> v<span class="pl-k">=</span>w.vertexNormals;<span class="pl-c1">3</span><span class="pl-k">===</span>v.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-v">this</span>.normals.<span class="pl-c1">push</span>(v[<span class="pl-c1">0</span>],v[<span class="pl-c1">1</span>],v[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(v<span class="pl-k">=</span>w.normal,<span class="pl-v">this</span>.normals.<span class="pl-c1">push</span>(v,v,v));v<span class="pl-k">=</span>w.vertexColors;<span class="pl-c1">3</span><span class="pl-k">===</span>v.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-v">this</span>.colors.<span class="pl-c1">push</span>(v[<span class="pl-c1">0</span>],v[<span class="pl-c1">1</span>],v[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(v<span class="pl-k">=</span>w.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.colors.<span class="pl-c1">push</span>(v,v,v));<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span>d[<span class="pl-c1">0</span>][l],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>v<span class="pl-k">?</span><span class="pl-v">this</span>.uvs.<span class="pl-c1">push</span>(v[<span class="pl-c1">0</span>],v[<span class="pl-c1">1</span>],v[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry.fromGeometry(): Undefined vertexUv <span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line">l),<span class="pl-v">this</span>.uvs.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>)));<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span>d[<span class="pl-c1">1</span>][l],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>v<span class="pl-k">?</span><span class="pl-v">this</span>.uvs2.<span class="pl-c1">push</span>(v[<span class="pl-c1">0</span>],v[<span class="pl-c1">1</span>],v[<span class="pl-c1">2</span>])<span class="pl-k">:</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 <span class="pl-pds">&quot;</span></span>,l),<span class="pl-v">this</span>.uvs2.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>)));<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>h;v<span class="pl-k">++</span>){<span class="pl-k">var</span> B<span class="pl-k">=</span>f[v].vertices;k[v].<span class="pl-c1">push</span>(B[w.a],B[w.b],B[w.c])}<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>p;v<span class="pl-k">++</span>)B<span class="pl-k">=</span>n[v].vertexNormals[l],m[v].<span class="pl-c1">push</span>(B.a,B.b,B.c);r<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.skinIndices.<span class="pl-c1">push</span>(q[w.a],q[w.b],q[w.c]);u<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.skinWeights.<span class="pl-c1">push</span>(t[w.a],t[w.b],</td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line">t[w.c])}<span class="pl-v">this</span>.computeGroups(a);<span class="pl-v">this</span>.verticesNeedUpdate<span class="pl-k">=</span>a.verticesNeedUpdate;<span class="pl-v">this</span>.normalsNeedUpdate<span class="pl-k">=</span>a.normalsNeedUpdate;<span class="pl-v">this</span>.colorsNeedUpdate<span class="pl-k">=</span>a.colorsNeedUpdate;<span class="pl-v">this</span>.uvsNeedUpdate<span class="pl-k">=</span>a.uvsNeedUpdate;<span class="pl-v">this</span>.groupsNeedUpdate<span class="pl-k">=</span>a.groupsNeedUpdate;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.DirectGeometry.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.defineProperty(<span class="pl-v">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.GeometryIdCount<span class="pl-k">++</span>});<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">index</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span>{};<span class="pl-v">this</span>.morphAttributes<span class="pl-k">=</span>{};<span class="pl-v">this</span>.groups<span class="pl-k">=</span>[];<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.drawRange<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">0</span>,count<span class="pl-k">:</span><span class="pl-c1">Infinity</span>}};</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.BufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.BufferGeometry,<span class="pl-en">addIndex</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.setIndex(a)},<span class="pl-en">getIndex</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">index</span>},<span class="pl-en">setIndex</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">index</span><span class="pl-k">=</span>a},<span class="pl-en">addAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferAttribute<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute<span class="pl-k">?</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.addAttribute(a,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,</td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line">c)))<span class="pl-k">:</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>index<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.setIndex(b)),<span class="pl-v">this</span>.<span class="pl-c1">attributes</span>[a]<span class="pl-k">=</span>b)},<span class="pl-en">getAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">attributes</span>[a]},<span class="pl-en">removeAttribute</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">delete</span> <span class="pl-v">this</span>.<span class="pl-c1">attributes</span>[a]},get <span class="pl-en">drawcalls</span>(){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .drawcalls has been renamed to .groups.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.groups},get <span class="pl-en">offsets</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .offsets has been renamed to .groups.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.groups},<span class="pl-en">addDrawCall</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.<span class="pl-pds">&quot;</span></span>);<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .addDrawCall() is now .addGroup().<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.addGroup(a,b)},<span class="pl-en">clearDrawCalls</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.clearGroups()},<span class="pl-en">addGroup</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.groups.<span class="pl-c1">push</span>({start<span class="pl-k">:</span>a,count<span class="pl-k">:</span>b,materialIndex<span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>})},<span class="pl-en">clearGroups</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.groups<span class="pl-k">=</span>[]},<span class="pl-en">setDrawRange</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.drawRange.<span class="pl-c1">start</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.drawRange.count<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line">b},<span class="pl-en">applyMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.position;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(a.applyToVector3Array(b.array),b.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.normal;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>((<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>).getNormalMatrix(a).applyToVector3Array(b.array),b.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-v">this</span>.boundingBox<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.computeBoundingBox();<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-v">this</span>.boundingSphere<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.computeBoundingSphere()},<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeRotationX(b);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;</td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeRotationY(b);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeRotationZ(b);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeTranslation(b,c,d);<span class="pl-v">this</span>.applyMatrix(a);<span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>);a.makeScale(b,c,d);<span class="pl-v">this</span>.applyMatrix(a);</td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>}}(),<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>);a.lookAt(b);a.updateMatrix();<span class="pl-v">this</span>.applyMatrix(a.matrix)}}(),<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.computeBoundingBox();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.boundingBox.center().negate();<span class="pl-v">this</span>.translate(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);<span class="pl-k">return</span> a},<span class="pl-en">setFromObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.geometry;<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Points<span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Line){a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>b.vertices.<span class="pl-c1">length</span>,<span class="pl-c1">3</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>b.colors.<span class="pl-c1">length</span>,<span class="pl-c1">3</span>);<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line">a.copyVector3sArray(b.vertices));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,c.copyColorsArray(b.colors));b.lineDistances<span class="pl-k">&amp;&amp;</span>b.lineDistances.<span class="pl-c1">length</span><span class="pl-k">===</span>b.vertices.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(b.lineDistances.<span class="pl-c1">length</span>,<span class="pl-c1">1</span>),<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>lineDistance<span class="pl-pds">&quot;</span></span>,a.copyArray(b.lineDistances)));<span class="pl-c1">null</span><span class="pl-k">!==</span>b.boundingSphere<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span>b.boundingSphere.clone());<span class="pl-c1">null</span><span class="pl-k">!==</span>b.boundingBox<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span>b.boundingBox.clone())}<span class="pl-k">else</span> a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Mesh<span class="pl-k">&amp;&amp;</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.fromGeometry(b);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">updateFromObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line">a.geometry;<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Mesh){<span class="pl-k">var</span> c<span class="pl-k">=</span>b.__directGeometry;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c)<span class="pl-k">return</span> <span class="pl-v">this</span>.fromGeometry(b);c.verticesNeedUpdate<span class="pl-k">=</span>b.verticesNeedUpdate;c.normalsNeedUpdate<span class="pl-k">=</span>b.normalsNeedUpdate;c.colorsNeedUpdate<span class="pl-k">=</span>b.colorsNeedUpdate;c.uvsNeedUpdate<span class="pl-k">=</span>b.uvsNeedUpdate;c.groupsNeedUpdate<span class="pl-k">=</span>b.groupsNeedUpdate;b.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;b.normalsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;b.colorsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;b.uvsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;b.groupsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span>c}<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b.verticesNeedUpdate<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.position,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(c.copyVector3sArray(b.vertices),</td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line">c.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>),b.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b.normalsNeedUpdate<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.normal,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(c.copyVector3sArray(b.normals),c.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>),b.normalsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b.colorsNeedUpdate<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">color</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(c.copyColorsArray(b.colors),c.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>),b.colorsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>);b.lineDistancesNeedUpdate<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.lineDistance,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(c.copyArray(b.lineDistances),c.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>),b.lineDistancesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>);b.groupsNeedUpdate<span class="pl-k">&amp;&amp;</span>(b.computeGroups(a.geometry),</td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.groups<span class="pl-k">=</span>b.groups,b.groupsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">fromGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a.__directGeometry<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.DirectGeometry</span>).fromGeometry(a);<span class="pl-k">return</span> <span class="pl-v">this</span>.fromDirectGeometry(a.__directGeometry)},<span class="pl-en">fromDirectGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a.vertices.<span class="pl-c1">length</span>);<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>)).copyVector3sArray(a.vertices));<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.normals.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a.normals.<span class="pl-c1">length</span>),<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>)).copyVector3sArray(a.normals)));</td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.colors.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a.colors.<span class="pl-c1">length</span>),<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>)).copyColorsArray(a.colors)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.uvs.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>a.uvs.<span class="pl-c1">length</span>),<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">2</span>)).copyVector2sArray(a.uvs)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.uvs2.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>a.uvs2.<span class="pl-c1">length</span>),<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>uv2<span class="pl-pds">&quot;</span></span>,(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">2</span>)).copyVector2sArray(a.uvs2)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.indices.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=new</span> (<span class="pl-c1">65535</span><span class="pl-k">&lt;</span>a.vertices.<span class="pl-c1">length</span><span class="pl-k">?</span>Uint32Array<span class="pl-k">:</span>Uint16Array)(<span class="pl-c1">3</span><span class="pl-k">*</span>a.indices.<span class="pl-c1">length</span>),</td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.setIndex((<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">1</span>)).copyIndicesArray(a.indices)));<span class="pl-v">this</span>.groups<span class="pl-k">=</span>a.groups;<span class="pl-k">for</span>(<span class="pl-k">var</span> c <span class="pl-k">in</span> a.morphTargets){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],d<span class="pl-k">=</span>a.morphTargets[c],e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>d.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>d[e],h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>f.<span class="pl-c1">length</span>,<span class="pl-c1">3</span>);b.<span class="pl-c1">push</span>(h.copyVector3sArray(f))}<span class="pl-v">this</span>.morphAttributes[c]<span class="pl-k">=</span>b}<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.skinIndices.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">4</span><span class="pl-k">*</span>a.skinIndices.<span class="pl-c1">length</span>,<span class="pl-c1">4</span>),<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>skinIndex<span class="pl-pds">&quot;</span></span>,c.copyVector4sArray(a.skinIndices)));<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.skinWeights.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">4</span><span class="pl-k">*</span>a.skinWeights.<span class="pl-c1">length</span>,</td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">4</span>),<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>skinWeight<span class="pl-pds">&quot;</span></span>,c.copyVector4sArray(a.skinWeights)));<span class="pl-c1">null</span><span class="pl-k">!==</span>a.boundingSphere<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span>a.boundingSphere.clone());<span class="pl-c1">null</span><span class="pl-k">!==</span>a.boundingBox<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span>a.boundingBox.clone());<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">computeBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-v">this</span>.boundingBox<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingBox<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.position.array;<span class="pl-k">if</span>(b){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.boundingBox;c.makeEmpty();<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">+=</span><span class="pl-c1">3</span>)a.fromArray(b,d),c.expandByPoint(a)}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span>b.<span class="pl-c1">length</span>)<span class="pl-v">this</span>.boundingBox.min.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-v">this</span>.boundingBox.max.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);(<span class="pl-c1">isNaN</span>(<span class="pl-v">this</span>.boundingBox.min.<span class="pl-c1">x</span>)<span class="pl-k">||</span><span class="pl-c1">isNaN</span>(<span class="pl-v">this</span>.boundingBox.min.<span class="pl-c1">y</span>)<span class="pl-k">||</span><span class="pl-c1">isNaN</span>(<span class="pl-v">this</span>.boundingBox.min.<span class="pl-c1">z</span>))<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The &quot;position&quot; attribute is likely to have NaN values.<span class="pl-pds">&#39;</span></span>,<span class="pl-v">this</span>)}}(),<span class="pl-en">computeBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-v">this</span>.boundingSphere<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.position.array;</td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(c){a.makeEmpty();<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.boundingSphere.center,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)b.fromArray(c,e),a.expandByPoint(b);a.center(d);<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)b.fromArray(c,e),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(f,d.distanceToSquared(b));<span class="pl-v">this</span>.boundingSphere.radius<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f);<span class="pl-c1">isNaN</span>(<span class="pl-v">this</span>.boundingSphere.radius)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The &quot;position&quot; attribute is likely to have NaN values.<span class="pl-pds">&#39;</span></span>,<span class="pl-v">this</span>)}}}(),<span class="pl-en">computeFaceNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">index</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.groups;<span class="pl-k">if</span>(b.position){<span class="pl-k">var</span> d<span class="pl-k">=</span>b.position.array;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b.normal)<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(d.<span class="pl-c1">length</span>),<span class="pl-c1">3</span>));<span class="pl-k">else</span> <span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>b.normal.array,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)e[g]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>b.normal.array,h,k,l,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(a){a<span class="pl-k">=</span>a.array;<span class="pl-c1">0</span><span class="pl-k">===</span>c.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.addGroup(<span class="pl-c1">0</span>,a.<span class="pl-c1">length</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-c1">0</span>,u<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;r<span class="pl-k">&lt;</span>u;<span class="pl-k">++</span>r)<span class="pl-k">for</span>(g<span class="pl-k">=</span>c[r],f<span class="pl-k">=</span>g.<span class="pl-c1">start</span>,h<span class="pl-k">=</span>g.count,g<span class="pl-k">=</span>f,f<span class="pl-k">+=</span>h;g<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line">f;g<span class="pl-k">+=</span><span class="pl-c1">3</span>)h<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>a[g<span class="pl-k">+</span><span class="pl-c1">0</span>],k<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>a[g<span class="pl-k">+</span><span class="pl-c1">1</span>],l<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>a[g<span class="pl-k">+</span><span class="pl-c1">2</span>],n.fromArray(d,h),p.fromArray(d,k),m.fromArray(d,l),q.subVectors(m,p),t.subVectors(n,p),q.cross(t),e[h]<span class="pl-k">+=</span>q.<span class="pl-c1">x</span>,e[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span>q.<span class="pl-c1">y</span>,e[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span>q.<span class="pl-c1">z</span>,e[k]<span class="pl-k">+=</span>q.<span class="pl-c1">x</span>,e[k<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span>q.<span class="pl-c1">y</span>,e[k<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span>q.<span class="pl-c1">z</span>,e[l]<span class="pl-k">+=</span>q.<span class="pl-c1">x</span>,e[l<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span>q.<span class="pl-c1">y</span>,e[l<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span>q.<span class="pl-c1">z</span>}<span class="pl-k">else</span> <span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>d.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">+=</span><span class="pl-c1">9</span>)n.fromArray(d,g),p.fromArray(d,g<span class="pl-k">+</span><span class="pl-c1">3</span>),m.fromArray(d,g<span class="pl-k">+</span><span class="pl-c1">6</span>),q.subVectors(m,p),t.subVectors(n,p),q.cross(t),e[g]<span class="pl-k">=</span>q.<span class="pl-c1">x</span>,e[g<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>q.<span class="pl-c1">y</span>,e[g<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>q.<span class="pl-c1">z</span>,e[g<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>q.<span class="pl-c1">x</span>,e[g<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>q.<span class="pl-c1">y</span>,e[g<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>q.<span class="pl-c1">z</span>,e[g<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>q.<span class="pl-c1">x</span>,e[g<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>q.<span class="pl-c1">y</span>,e[g<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>q.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.normalizeNormals();b.normal.needsUpdate<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>}},<span class="pl-en">computeTangents</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .computeTangents() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">computeOffsets</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry: .computeOffsets() has been removed.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry)<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">else</span>{<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>,d;<span class="pl-k">for</span>(d <span class="pl-k">in</span> c)<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">attributes</span>[d])<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>c[d].array,g<span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>[d],f<span class="pl-k">=</span>g.array,</td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>g.itemSize<span class="pl-k">*</span>b;h<span class="pl-k">&lt;</span>f.<span class="pl-c1">length</span>;h<span class="pl-k">++</span>,g<span class="pl-k">++</span>)e[g]<span class="pl-k">=</span>f[h];<span class="pl-k">return</span> <span class="pl-v">this</span>}},<span class="pl-en">normalizeNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>.normal.array,b,c,d,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)b<span class="pl-k">=</span>a[e],c<span class="pl-k">=</span>a[e<span class="pl-k">+</span><span class="pl-c1">1</span>],d<span class="pl-k">=</span>a[e<span class="pl-k">+</span><span class="pl-c1">2</span>],b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b<span class="pl-k">*</span>b<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">+</span>d<span class="pl-k">*</span>d),a[e]<span class="pl-k">*=</span>b,a[e<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">*=</span>b,a[e<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">*=</span>b},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry.toJSON<span class="pl-pds">&quot;</span></span>}};a.uuid<span class="pl-k">=</span><span class="pl-v">this</span>.uuid;a.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(a.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">name</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.parameters){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.parameters,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> b)<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b[c]<span class="pl-k">&amp;&amp;</span>(a[c]<span class="pl-k">=</span>b[c]);</td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> a}a.<span class="pl-c1">data</span><span class="pl-k">=</span>{attributes<span class="pl-k">:</span>{}};<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">index</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(d.array),a.<span class="pl-c1">data</span>.<span class="pl-c1">index</span><span class="pl-k">=</span>{type<span class="pl-k">:</span>d.array.<span class="pl-c1">constructor</span>.<span class="pl-c1">name</span>,array<span class="pl-k">:</span>b});d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>;<span class="pl-k">for</span>(c <span class="pl-k">in</span> d){<span class="pl-k">var</span> e<span class="pl-k">=</span>d[c],b<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(e.array);a.<span class="pl-c1">data</span>.<span class="pl-c1">attributes</span>[c]<span class="pl-k">=</span>{itemSize<span class="pl-k">:</span>e.itemSize,type<span class="pl-k">:</span>e.array.<span class="pl-c1">constructor</span>.<span class="pl-c1">name</span>,array<span class="pl-k">:</span>b}}c<span class="pl-k">=</span><span class="pl-v">this</span>.groups;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(a.<span class="pl-c1">data</span>.groups<span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.stringify(c)));c<span class="pl-k">=</span><span class="pl-v">this</span>.boundingSphere;<span class="pl-c1">null</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(a.<span class="pl-c1">data</span>.boundingSphere<span class="pl-k">=</span>{center<span class="pl-k">:</span>c.center.toArray(),radius<span class="pl-k">:</span>c.radius});<span class="pl-k">return</span> a},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},</td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line"><span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">index</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.setIndex(b.clone());<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> b)<span class="pl-v">this</span>.addAttribute(c,b[c].clone());a<span class="pl-k">=</span>a.groups;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[c];<span class="pl-v">this</span>.addGroup(d.<span class="pl-c1">start</span>,d.count)}<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.BufferGeometry.MaxIndex<span class="pl-k">=</span><span class="pl-c1">65535</span>;</td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">InstancedBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>InstancedBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.maxInstancedCount<span class="pl-k">=void</span> <span class="pl-c1">0</span>};<span class="pl-c1">THREE.InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.InstancedBufferGeometry;<span class="pl-c1">THREE.InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addGroup</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.groups.<span class="pl-c1">push</span>({start<span class="pl-k">:</span>a,count<span class="pl-k">:</span>b,instances<span class="pl-k">:</span>c})};</td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.InstancedBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">index</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.setIndex(b.clone());<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>,c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> b)<span class="pl-v">this</span>.addAttribute(c,b[c].clone());a<span class="pl-k">=</span>a.groups;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[c];<span class="pl-v">this</span>.addGroup(d.<span class="pl-c1">start</span>,d.count,d.instances)}<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.InstancedBufferGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">Camera</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Camera<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.matrixWorldInverse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-v">this</span>.projectionMatrix<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>};</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Camera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Camera;<span class="pl-c1">THREE.Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getWorldDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.getWorldQuaternion(a);<span class="pl-k">return</span> b.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).applyQuaternion(a)}}();<span class="pl-c1">THREE.Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lookAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){a.lookAt(<span class="pl-v">this</span>.position,b,<span class="pl-v">this</span>.up);<span class="pl-v">this</span>.quaternion.setFromRotationMatrix(a)}}();<span class="pl-c1">THREE.Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)};</td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.matrixWorldInverse.copy(a.matrixWorldInverse);<span class="pl-v">this</span>.projectionMatrix.copy(a.projectionMatrix);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubeCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CubeCamera<span class="pl-pds">&quot;</span></span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);d.up.set(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);d.lookAt(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-v">this</span>.<span class="pl-c1">add</span>(d);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);e.up.set(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);e.lookAt(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-v">this</span>.<span class="pl-c1">add</span>(e);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);g.up.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);g.lookAt(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));<span class="pl-v">this</span>.<span class="pl-c1">add</span>(g);<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);f.up.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);f.lookAt(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">add</span>(f);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);h.up.set(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);h.lookAt(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-v">this</span>.<span class="pl-c1">add</span>(h);<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);k.up.set(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);k.lookAt(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>));<span class="pl-v">this</span>.<span class="pl-c1">add</span>(k);<span class="pl-v">this</span>.renderTarget<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLRenderTargetCube</span>(c,c,{format<span class="pl-k">:</span><span class="pl-c1">THREE</span>.RGBFormat,magFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearFilter,minFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearFilter});<span class="pl-c1">this</span>.<span class="pl-en">updateCubeMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.updateMatrixWorld();<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.renderTarget,m<span class="pl-k">=</span>c.generateMipmaps;c.generateMipmaps<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;c.activeCubeFace<span class="pl-k">=</span><span class="pl-c1">0</span>;a.render(b,d,c);c.activeCubeFace<span class="pl-k">=</span><span class="pl-c1">1</span>;a.render(b,e,c);c.activeCubeFace<span class="pl-k">=</span><span class="pl-c1">2</span>;a.render(b,g,c);c.activeCubeFace<span class="pl-k">=</span><span class="pl-c1">3</span>;a.render(b,f,c);c.activeCubeFace<span class="pl-k">=</span><span class="pl-c1">4</span>;a.render(b,h,c);c.generateMipmaps<span class="pl-k">=</span>m;c.activeCubeFace<span class="pl-k">=</span><span class="pl-c1">5</span>;a.render(b,k,c);a.setRenderTarget(<span class="pl-c1">null</span>)}};<span class="pl-c1">THREE.CubeCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CubeCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CubeCamera;</td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">OrthographicCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.Camera.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>OrthographicCamera<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.zoom<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.<span class="pl-c1">left</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>c;<span class="pl-v">this</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span>d;<span class="pl-v">this</span>.near<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span>.<span class="pl-c1">1</span>;<span class="pl-v">this</span>.far<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">2E3</span>;<span class="pl-v">this</span>.updateProjectionMatrix()};<span class="pl-c1">THREE.OrthographicCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Camera.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.OrthographicCamera;</td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateProjectionMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>(<span class="pl-v">this</span>.<span class="pl-c1">right</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">left</span>)<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>.zoom),b<span class="pl-k">=</span>(<span class="pl-v">this</span>.<span class="pl-c1">top</span><span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">bottom</span>)<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>.zoom),c<span class="pl-k">=</span>(<span class="pl-v">this</span>.<span class="pl-c1">right</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">left</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span>(<span class="pl-v">this</span>.<span class="pl-c1">top</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">bottom</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-v">this</span>.projectionMatrix.makeOrthographic(c<span class="pl-k">-</span>a,c<span class="pl-k">+</span>a,d<span class="pl-k">+</span>b,d<span class="pl-k">-</span>b,<span class="pl-v">this</span>.near,<span class="pl-v">this</span>.far)};<span class="pl-c1">THREE.OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Camera.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">left</span><span class="pl-k">=</span>a.<span class="pl-c1">left</span>;<span class="pl-v">this</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>a.<span class="pl-c1">right</span>;<span class="pl-v">this</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>a.<span class="pl-c1">top</span>;<span class="pl-v">this</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span>a.<span class="pl-c1">bottom</span>;<span class="pl-v">this</span>.near<span class="pl-k">=</span>a.near;<span class="pl-v">this</span>.far<span class="pl-k">=</span>a.far;<span class="pl-v">this</span>.zoom<span class="pl-k">=</span>a.zoom;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.zoom<span class="pl-k">=</span><span class="pl-v">this</span>.zoom;a.<span class="pl-c1">object</span>.<span class="pl-c1">left</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">left</span>;a.<span class="pl-c1">object</span>.<span class="pl-c1">right</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">right</span>;a.<span class="pl-c1">object</span>.<span class="pl-c1">top</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">top</span>;a.<span class="pl-c1">object</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">bottom</span>;a.<span class="pl-c1">object</span>.near<span class="pl-k">=</span><span class="pl-v">this</span>.near;a.<span class="pl-c1">object</span>.far<span class="pl-k">=</span><span class="pl-v">this</span>.far;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">PerspectiveCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.Camera.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PerspectiveCamera<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.zoom<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.fov<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">50</span>;<span class="pl-v">this</span>.aspect<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.near<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>.<span class="pl-c1">1</span>;<span class="pl-v">this</span>.far<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">2E3</span>;<span class="pl-v">this</span>.updateProjectionMatrix()};</td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PerspectiveCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Camera.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PerspectiveCamera;<span class="pl-c1">THREE.PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLens</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">24</span>);<span class="pl-v">this</span>.fov<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.radToDeg(<span class="pl-c1">Math</span>.<span class="pl-c1">atan</span>(b<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>a)));<span class="pl-v">this</span>.updateProjectionMatrix()};<span class="pl-c1">THREE.PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setViewOffset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-v">this</span>.fullWidth<span class="pl-k">=</span>a;<span class="pl-v">this</span>.fullHeight<span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d;<span class="pl-v">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>e;<span class="pl-v">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>g;<span class="pl-v">this</span>.updateProjectionMatrix()};</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateProjectionMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.radToDeg(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(.<span class="pl-c1">5</span><span class="pl-k">*</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.degToRad(<span class="pl-v">this</span>.fov))<span class="pl-k">/</span><span class="pl-v">this</span>.zoom));<span class="pl-k">if</span>(<span class="pl-v">this</span>.fullWidth){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.fullWidth<span class="pl-k">/</span><span class="pl-v">this</span>.fullHeight,a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.degToRad(.<span class="pl-c1">5</span><span class="pl-k">*</span>a))<span class="pl-k">*</span><span class="pl-v">this</span>.near,c<span class="pl-k">=-</span>a,d<span class="pl-k">=</span>b<span class="pl-k">*</span>c,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b<span class="pl-k">*</span>a<span class="pl-k">-</span>d),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a<span class="pl-k">-</span>c);<span class="pl-v">this</span>.projectionMatrix.makeFrustum(d<span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b<span class="pl-k">/</span><span class="pl-v">this</span>.fullWidth,d<span class="pl-k">+</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">width</span>)<span class="pl-k">*</span>b<span class="pl-k">/</span><span class="pl-v">this</span>.fullWidth,a<span class="pl-k">-</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">height</span>)<span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-v">this</span>.fullHeight,a<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-v">this</span>.fullHeight,<span class="pl-v">this</span>.near,<span class="pl-v">this</span>.far)}<span class="pl-k">else</span> <span class="pl-v">this</span>.projectionMatrix.makePerspective(a,</td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.aspect,<span class="pl-v">this</span>.near,<span class="pl-v">this</span>.far)};<span class="pl-c1">THREE.PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Camera.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.fov<span class="pl-k">=</span>a.fov;<span class="pl-v">this</span>.aspect<span class="pl-k">=</span>a.aspect;<span class="pl-v">this</span>.near<span class="pl-k">=</span>a.near;<span class="pl-v">this</span>.far<span class="pl-k">=</span>a.far;<span class="pl-v">this</span>.zoom<span class="pl-k">=</span>a.zoom;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE.PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.zoom<span class="pl-k">=</span><span class="pl-v">this</span>.zoom;a.<span class="pl-c1">object</span>.fov<span class="pl-k">=</span><span class="pl-v">this</span>.fov;a.<span class="pl-c1">object</span>.aspect<span class="pl-k">=</span><span class="pl-v">this</span>.aspect;a.<span class="pl-c1">object</span>.near<span class="pl-k">=</span><span class="pl-v">this</span>.near;a.<span class="pl-c1">object</span>.far<span class="pl-k">=</span><span class="pl-v">this</span>.far;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Light</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Light<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a)};<span class="pl-c1">THREE.Light</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Light;<span class="pl-c1">THREE.Light</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">AmbientLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>AmbientLight<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE.AmbientLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.AmbientLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.AmbientLight;<span class="pl-c1">THREE.AmbientLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex();<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DirectionalLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>DirectionalLight<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.position.set(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.updateMatrix();<span class="pl-v">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>;<span class="pl-v">this</span>.intensity<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.onlyShadow<span class="pl-k">=</span><span class="pl-v">this</span>.castShadow<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.shadowCameraNear<span class="pl-k">=</span><span class="pl-c1">50</span>;<span class="pl-v">this</span>.shadowCameraFar<span class="pl-k">=</span><span class="pl-c1">5E3</span>;<span class="pl-v">this</span>.shadowCameraLeft<span class="pl-k">=-</span><span class="pl-c1">500</span>;<span class="pl-v">this</span>.shadowCameraTop<span class="pl-k">=</span><span class="pl-v">this</span>.shadowCameraRight<span class="pl-k">=</span><span class="pl-c1">500</span>;<span class="pl-v">this</span>.shadowCameraBottom<span class="pl-k">=-</span><span class="pl-c1">500</span>;<span class="pl-v">this</span>.shadowCameraVisible<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.shadowBias<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.shadowDarkness<span class="pl-k">=</span>.<span class="pl-c1">5</span>;<span class="pl-v">this</span>.shadowMapHeight<span class="pl-k">=</span><span class="pl-v">this</span>.shadowMapWidth<span class="pl-k">=</span><span class="pl-c1">512</span>;<span class="pl-v">this</span>.shadowMatrix<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.shadowCamera<span class="pl-k">=</span><span class="pl-v">this</span>.shadowMapSize<span class="pl-k">=</span><span class="pl-v">this</span>.shadowMap<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE.DirectionalLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.DirectionalLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.DirectionalLight;</td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.DirectionalLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.intensity<span class="pl-k">=</span>a.intensity;<span class="pl-v">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span>a.<span class="pl-c1">target</span>.clone();<span class="pl-v">this</span>.castShadow<span class="pl-k">=</span>a.castShadow;<span class="pl-v">this</span>.onlyShadow<span class="pl-k">=</span>a.onlyShadow;<span class="pl-v">this</span>.shadowCameraNear<span class="pl-k">=</span>a.shadowCameraNear;<span class="pl-v">this</span>.shadowCameraFar<span class="pl-k">=</span>a.shadowCameraFar;<span class="pl-v">this</span>.shadowCameraLeft<span class="pl-k">=</span>a.shadowCameraLeft;<span class="pl-v">this</span>.shadowCameraRight<span class="pl-k">=</span>a.shadowCameraRight;<span class="pl-v">this</span>.shadowCameraTop<span class="pl-k">=</span>a.shadowCameraTop;<span class="pl-v">this</span>.shadowCameraBottom<span class="pl-k">=</span>a.shadowCameraBottom;<span class="pl-v">this</span>.shadowCameraVisible<span class="pl-k">=</span>a.shadowCameraVisible;<span class="pl-v">this</span>.shadowBias<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line">a.shadowBias;<span class="pl-v">this</span>.shadowDarkness<span class="pl-k">=</span>a.shadowDarkness;<span class="pl-v">this</span>.shadowMapWidth<span class="pl-k">=</span>a.shadowMapWidth;<span class="pl-v">this</span>.shadowMapHeight<span class="pl-k">=</span>a.shadowMapHeight;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE.DirectionalLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex();a.<span class="pl-c1">object</span>.intensity<span class="pl-k">=</span><span class="pl-v">this</span>.intensity;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">HemisphereLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>HemisphereLight<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.position.set(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.updateMatrix();<span class="pl-v">this</span>.groundColor<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(b);<span class="pl-v">this</span>.intensity<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.HemisphereLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.HemisphereLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.HemisphereLight;<span class="pl-c1">THREE.HemisphereLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.groundColor.copy(a.groundColor);<span class="pl-v">this</span>.intensity<span class="pl-k">=</span>a.intensity;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.HemisphereLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex();a.<span class="pl-c1">object</span>.groundColor<span class="pl-k">=</span><span class="pl-v">this</span>.groundColor.getHex();a.<span class="pl-c1">object</span>.intensity<span class="pl-k">=</span><span class="pl-v">this</span>.intensity;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">PointLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PointLight<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.intensity<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.distance<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.decay<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.PointLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.PointLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PointLight;</td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PointLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.intensity<span class="pl-k">=</span>a.intensity;<span class="pl-v">this</span>.distance<span class="pl-k">=</span>a.distance;<span class="pl-v">this</span>.decay<span class="pl-k">=</span>a.decay;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE.PointLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex();a.<span class="pl-c1">object</span>.intensity<span class="pl-k">=</span><span class="pl-v">this</span>.intensity;a.<span class="pl-c1">object</span>.distance<span class="pl-k">=</span><span class="pl-v">this</span>.distance;a.<span class="pl-c1">object</span>.decay<span class="pl-k">=</span><span class="pl-v">this</span>.decay;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpotLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SpotLight<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.position.set(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.updateMatrix();<span class="pl-v">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>;<span class="pl-v">this</span>.intensity<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.distance<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.angle<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-v">this</span>.exponent<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">10</span>;<span class="pl-v">this</span>.decay<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.onlyShadow<span class="pl-k">=</span><span class="pl-v">this</span>.castShadow<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.shadowCameraNear<span class="pl-k">=</span><span class="pl-c1">50</span>;<span class="pl-v">this</span>.shadowCameraFar<span class="pl-k">=</span><span class="pl-c1">5E3</span>;<span class="pl-v">this</span>.shadowCameraFov<span class="pl-k">=</span><span class="pl-c1">50</span>;<span class="pl-v">this</span>.shadowCameraVisible<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.shadowBias<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.shadowDarkness<span class="pl-k">=</span>.<span class="pl-c1">5</span>;<span class="pl-v">this</span>.shadowMapHeight<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.shadowMapWidth<span class="pl-k">=</span><span class="pl-c1">512</span>;<span class="pl-v">this</span>.shadowMatrix<span class="pl-k">=</span><span class="pl-v">this</span>.shadowCamera<span class="pl-k">=</span><span class="pl-v">this</span>.shadowMapSize<span class="pl-k">=</span><span class="pl-v">this</span>.shadowMap<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE.SpotLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SpotLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SpotLight;</td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SpotLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Light.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.intensity<span class="pl-k">=</span>a.intensity;<span class="pl-v">this</span>.distance<span class="pl-k">=</span>a.distance;<span class="pl-v">this</span>.angle<span class="pl-k">=</span>a.angle;<span class="pl-v">this</span>.exponent<span class="pl-k">=</span>a.exponent;<span class="pl-v">this</span>.decay<span class="pl-k">=</span>a.decay;<span class="pl-v">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span>a.<span class="pl-c1">target</span>.clone();<span class="pl-v">this</span>.castShadow<span class="pl-k">=</span>a.castShadow;<span class="pl-v">this</span>.onlyShadow<span class="pl-k">=</span>a.onlyShadow;<span class="pl-v">this</span>.shadowCameraNear<span class="pl-k">=</span>a.shadowCameraNear;<span class="pl-v">this</span>.shadowCameraFar<span class="pl-k">=</span>a.shadowCameraFar;<span class="pl-v">this</span>.shadowCameraFov<span class="pl-k">=</span>a.shadowCameraFov;<span class="pl-v">this</span>.shadowCameraVisible<span class="pl-k">=</span>a.shadowCameraVisible;<span class="pl-v">this</span>.shadowBias<span class="pl-k">=</span>a.shadowBias;<span class="pl-v">this</span>.shadowDarkness<span class="pl-k">=</span>a.shadowDarkness;</td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.shadowMapWidth<span class="pl-k">=</span>a.shadowMapWidth;<span class="pl-v">this</span>.shadowMapHeight<span class="pl-k">=</span>a.shadowMapHeight;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE.SpotLight</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex();a.<span class="pl-c1">object</span>.intensity<span class="pl-k">=</span><span class="pl-v">this</span>.intensity;a.<span class="pl-c1">object</span>.distance<span class="pl-k">=</span><span class="pl-v">this</span>.distance;a.<span class="pl-c1">object</span>.angle<span class="pl-k">=</span><span class="pl-v">this</span>.angle;a.<span class="pl-c1">object</span>.exponent<span class="pl-k">=</span><span class="pl-v">this</span>.exponent;a.<span class="pl-c1">object</span>.decay<span class="pl-k">=</span><span class="pl-v">this</span>.decay;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.Cache<span class="pl-k">=</span>{enabled<span class="pl-k">:!</span><span class="pl-c1">1</span>,files<span class="pl-k">:</span>{},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-v">this</span>.enabled<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.files[a]<span class="pl-k">=</span>b)},<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-v">this</span>.enabled)<span class="pl-k">return</span> <span class="pl-v">this</span>.files[a]},<span class="pl-en">remove</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">delete</span> <span class="pl-v">this</span>.files[a]},<span class="pl-en">clear</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.files<span class="pl-k">=</span>{}}};<span class="pl-c1">THREE</span>.<span class="pl-en">Loader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">onLoadStart</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadProgress</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadComplete</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}};</td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Loader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Loader,crossOrigin<span class="pl-k">:void</span> <span class="pl-c1">0</span>,<span class="pl-en">extractUrlBase</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span>a.<span class="pl-c1">length</span>)<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>./<span class="pl-pds">&quot;</span></span>;a.<span class="pl-c1">pop</span>();<span class="pl-k">return</span> a.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>},<span class="pl-en">initMaterials</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span>[],e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;<span class="pl-k">++</span>e)d[e]<span class="pl-k">=</span><span class="pl-v">this</span>.createMaterial(a[e],b,c);<span class="pl-k">return</span> d},<span class="pl-en">createMaterial</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">Math</span><span class="pl-c1">.log</span>(a)<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">LN2</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(a))}<span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-smi">b</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">u</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>c<span class="pl-k">+</span>f,v,B<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Loader.Handlers.get(w);<span class="pl-c1">null</span><span class="pl-k">!==</span>B<span class="pl-k">?</span>v<span class="pl-k">=</span>B.<span class="pl-c1">load</span>(w)<span class="pl-k">:</span>(v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>,</td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line">B<span class="pl-k">=</span>a,B.setCrossOrigin(d),B.<span class="pl-c1">load</span>(w,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(a.<span class="pl-c1">width</span>)<span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(a.<span class="pl-c1">height</span>)){<span class="pl-k">var</span> b<span class="pl-k">=</span>e(a.<span class="pl-c1">width</span>),c<span class="pl-k">=</span>e(a.<span class="pl-c1">height</span>),d<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);d.<span class="pl-c1">width</span><span class="pl-k">=</span>b;d.<span class="pl-c1">height</span><span class="pl-k">=</span>c;d.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).drawImage(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,c);v.image<span class="pl-k">=</span>d}<span class="pl-k">else</span> v.image<span class="pl-k">=</span>a;v.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>}));v.sourceFile<span class="pl-k">=</span>f;h<span class="pl-k">&amp;&amp;</span>(v.repeat.set(h[<span class="pl-c1">0</span>],h[<span class="pl-c1">1</span>]),<span class="pl-c1">1</span><span class="pl-k">!==</span>h[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span>(v.wrapS<span class="pl-k">=</span><span class="pl-c1">THREE</span>.RepeatWrapping),<span class="pl-c1">1</span><span class="pl-k">!==</span>h[<span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span>(v.wrapT<span class="pl-k">=</span><span class="pl-c1">THREE</span>.RepeatWrapping));k<span class="pl-k">&amp;&amp;</span>v.offset.set(k[<span class="pl-c1">0</span>],k[<span class="pl-c1">1</span>]);l<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>{repeat<span class="pl-k">:</span><span class="pl-c1">THREE</span>.RepeatWrapping,mirror<span class="pl-k">:</span><span class="pl-c1">THREE</span>.MirroredRepeatWrapping},</td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f[l[<span class="pl-c1">0</span>]]<span class="pl-k">&amp;&amp;</span>(v.wrapS<span class="pl-k">=</span>f[l[<span class="pl-c1">0</span>]]),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f[l[<span class="pl-c1">1</span>]]<span class="pl-k">&amp;&amp;</span>(v.wrapT<span class="pl-k">=</span>f[l[<span class="pl-c1">1</span>]]));u<span class="pl-k">&amp;&amp;</span>(v.anisotropy<span class="pl-k">=</span>u);b[g]<span class="pl-k">=</span>v}<span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>a[<span class="pl-c1">0</span>]<span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span>)<span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span>)<span class="pl-k">+</span><span class="pl-c1">255</span><span class="pl-k">*</span>a[<span class="pl-c1">2</span>]}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.crossOrigin<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-v">this</span>.crossOrigin);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshLambertMaterial<span class="pl-pds">&quot;</span></span>,k<span class="pl-k">=</span>{};<span class="pl-k">if</span>(b.shading){<span class="pl-k">var</span> l<span class="pl-k">=</span>b.shading.<span class="pl-c1">toLowerCase</span>();<span class="pl-s"><span class="pl-pds">&quot;</span>phong<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l<span class="pl-k">?</span>h<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshBasicMaterial<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.blending<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>[b.blending]<span class="pl-k">&amp;&amp;</span>(k.blending<span class="pl-k">=</span><span class="pl-c1">THREE</span>[b.blending]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.transparent<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line">(k.transparent<span class="pl-k">=</span>b.transparent);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.opacity<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>b.opacity<span class="pl-k">&amp;&amp;</span>(k.transparent<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.depthTest<span class="pl-k">&amp;&amp;</span>(k.depthTest<span class="pl-k">=</span>b.depthTest);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.depthWrite<span class="pl-k">&amp;&amp;</span>(k.depthWrite<span class="pl-k">=</span>b.depthWrite);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.visible<span class="pl-k">&amp;&amp;</span>(k.visible<span class="pl-k">=</span>b.visible);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.flipSided<span class="pl-k">&amp;&amp;</span>(k.side<span class="pl-k">=</span><span class="pl-c1">THREE</span>.BackSide);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.doubleSided<span class="pl-k">&amp;&amp;</span>(k.side<span class="pl-k">=</span><span class="pl-c1">THREE</span>.DoubleSide);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.wireframe<span class="pl-k">&amp;&amp;</span>(k.wireframe<span class="pl-k">=</span>b.wireframe);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.vertexColors<span class="pl-k">&amp;&amp;</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>face<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b.vertexColors<span class="pl-k">?</span>k.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.FaceColors<span class="pl-k">:</span>b.vertexColors<span class="pl-k">&amp;&amp;</span>(k.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.VertexColors));</td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line">b.colorDiffuse<span class="pl-k">?</span>k.<span class="pl-c1">color</span><span class="pl-k">=</span>f(b.colorDiffuse)<span class="pl-k">:</span>b.DbgColor<span class="pl-k">&amp;&amp;</span>(k.<span class="pl-c1">color</span><span class="pl-k">=</span>b.DbgColor);b.colorEmissive<span class="pl-k">&amp;&amp;</span>(k.emissive<span class="pl-k">=</span>f(b.colorEmissive));<span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>h<span class="pl-k">&amp;&amp;</span>(b.colorSpecular<span class="pl-k">&amp;&amp;</span>(k.specular<span class="pl-k">=</span>f(b.colorSpecular)),b.specularCoef<span class="pl-k">&amp;&amp;</span>(k.shininess<span class="pl-k">=</span>b.specularCoef));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.transparency<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Loader: transparency has been renamed to opacity<span class="pl-pds">&quot;</span></span>),b.opacity<span class="pl-k">=</span>b.transparency);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.opacity<span class="pl-k">&amp;&amp;</span>(k.opacity<span class="pl-k">=</span>b.opacity);c<span class="pl-k">&amp;&amp;</span>(b.mapDiffuse<span class="pl-k">&amp;&amp;</span>g(k,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>,b.mapDiffuse,b.mapDiffuseRepeat,b.mapDiffuseOffset,b.mapDiffuseWrap,</td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line">b.mapDiffuseAnisotropy),b.mapLight<span class="pl-k">&amp;&amp;</span>g(k,<span class="pl-s"><span class="pl-pds">&quot;</span>lightMap<span class="pl-pds">&quot;</span></span>,b.mapLight,b.mapLightRepeat,b.mapLightOffset,b.mapLightWrap,b.mapLightAnisotropy),b.mapAO<span class="pl-k">&amp;&amp;</span>g(k,<span class="pl-s"><span class="pl-pds">&quot;</span>aoMap<span class="pl-pds">&quot;</span></span>,b.mapAO,b.mapAORepeat,b.mapAOOffset,b.mapAOWrap,b.mapAOAnisotropy),b.mapBump<span class="pl-k">&amp;&amp;</span>g(k,<span class="pl-s"><span class="pl-pds">&quot;</span>bumpMap<span class="pl-pds">&quot;</span></span>,b.mapBump,b.mapBumpRepeat,b.mapBumpOffset,b.mapBumpWrap,b.mapBumpAnisotropy),b.mapNormal<span class="pl-k">&amp;&amp;</span>g(k,<span class="pl-s"><span class="pl-pds">&quot;</span>normalMap<span class="pl-pds">&quot;</span></span>,b.mapNormal,b.mapNormalRepeat,b.mapNormalOffset,b.mapNormalWrap,b.mapNormalAnisotropy),b.mapSpecular<span class="pl-k">&amp;&amp;</span>g(k,<span class="pl-s"><span class="pl-pds">&quot;</span>specularMap<span class="pl-pds">&quot;</span></span>,b.mapSpecular,b.mapSpecularRepeat,</td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line">b.mapSpecularOffset,b.mapSpecularWrap,b.mapSpecularAnisotropy),b.mapAlpha<span class="pl-k">&amp;&amp;</span>g(k,<span class="pl-s"><span class="pl-pds">&quot;</span>alphaMap<span class="pl-pds">&quot;</span></span>,b.mapAlpha,b.mapAlphaRepeat,b.mapAlphaOffset,b.mapAlphaWrap,b.mapAlphaAnisotropy));b.mapBumpScale<span class="pl-k">&amp;&amp;</span>(k.bumpScale<span class="pl-k">=</span>b.mapBumpScale);b.mapNormalFactor<span class="pl-k">&amp;&amp;</span>(k.normalScale<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b.mapNormalFactor,b.mapNormalFactor));h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[h](k);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.DbgName<span class="pl-k">&amp;&amp;</span>(h.<span class="pl-c1">name</span><span class="pl-k">=</span>b.DbgName);<span class="pl-k">return</span> h}}()};</td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.Loader.Handlers<span class="pl-k">=</span>{handlers<span class="pl-k">:</span>[],<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.handlers.<span class="pl-c1">push</span>(a,b)},<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.handlers.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">+=</span><span class="pl-c1">2</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.handlers[b<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-k">if</span>(<span class="pl-v">this</span>.handlers[b].<span class="pl-c1">test</span>(a))<span class="pl-k">return</span> d}<span class="pl-k">return</span> <span class="pl-c1">null</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">XHRLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager};</td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.XHRLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.XHRLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Cache.get(a);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g)<span class="pl-k">return</span> b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">setTimeout</span>(<span class="pl-k">function</span>(){b(g)},<span class="pl-c1">0</span>),g;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;f.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a,<span class="pl-k">!</span><span class="pl-c1">0</span>);f.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.Cache.<span class="pl-c1">add</span>(a,<span class="pl-v">this</span>.response);b<span class="pl-k">&amp;&amp;</span>b(<span class="pl-v">this</span>.response);e.manager.itemEnd(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>f.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>progress<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){c(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);f.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">b</span>){d<span class="pl-k">&amp;&amp;</span>d(b);e.manager.itemError(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.crossOrigin<span class="pl-k">&amp;&amp;</span>(f.crossOrigin<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.crossOrigin);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.responseType<span class="pl-k">&amp;&amp;</span>(f.responseType<span class="pl-k">=</span><span class="pl-v">this</span>.responseType);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.withCredentials<span class="pl-k">&amp;&amp;</span>(f.withCredentials<span class="pl-k">=</span><span class="pl-v">this</span>.withCredentials);f.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);e.manager.itemStart(a);<span class="pl-k">return</span> f},<span class="pl-en">setResponseType</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.responseType<span class="pl-k">=</span>a},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a},<span class="pl-en">setWithCredentials</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.withCredentials<span class="pl-k">=</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-en">ImageLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager};</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.ImageLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ImageLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Cache.get(a);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g)<span class="pl-k">return</span> b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">setTimeout</span>(<span class="pl-k">function</span>(){b(g)},<span class="pl-c1">0</span>),g;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>img<span class="pl-pds">&quot;</span></span>);f.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.Cache.<span class="pl-c1">add</span>(a,<span class="pl-v">this</span>);b<span class="pl-k">&amp;&amp;</span>b(<span class="pl-v">this</span>);e.manager.itemEnd(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>f.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>progress<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){c(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);f.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">b</span>){d<span class="pl-k">&amp;&amp;</span>d(b);e.manager.itemError(a)},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.crossOrigin<span class="pl-k">&amp;&amp;</span>(f.crossOrigin<span class="pl-k">=</span><span class="pl-v">this</span>.crossOrigin);</td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line">e.manager.itemStart(a);f.src<span class="pl-k">=</span>a;<span class="pl-k">return</span> f},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-en">JSONLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-s"><span class="pl-pds">&quot;</span>boolean<span class="pl-pds">&quot;</span></span><span class="pl-k">===typeof</span> a<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: showStatus parameter has been removed from constructor.<span class="pl-pds">&quot;</span></span>),a<span class="pl-k">=void</span> <span class="pl-c1">0</span>);<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager;<span class="pl-v">this</span>.withCredentials<span class="pl-k">=!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.JSONLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.JSONLoader,get <span class="pl-en">statusDomElement</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>._statusDomElement<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>._statusDomElement<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>div<span class="pl-pds">&quot;</span></span>));<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: .statusDomElement has been removed.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>._statusDomElement},<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span><span class="pl-v">this</span>.texturePath<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span><span class="pl-k">===typeof</span> <span class="pl-v">this</span>.texturePath<span class="pl-k">?</span><span class="pl-v">this</span>.texturePath<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Loader.<span class="pl-c1">prototype</span>.extractUrlBase(a);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-v">this</span>.manager);c.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);c.setWithCredentials(<span class="pl-v">this</span>.withCredentials);</td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line">c.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">c</span>){c<span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(c);<span class="pl-k">var</span> d<span class="pl-k">=</span>c.metadata;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>object<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>d.<span class="pl-c1">type</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> should be loaded with THREE.ObjectLoader instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span>}<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>scene<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>d.<span class="pl-c1">type</span>){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> should be loaded with THREE.SceneLoader instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span>}}c<span class="pl-k">=</span>e.<span class="pl-c1">parse</span>(c,g);b(c.geometry,c.materials)})},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a},<span class="pl-en">setTexturePath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.texturePath<span class="pl-k">=</span>a},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line">a.scale<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>a.scale<span class="pl-k">:</span><span class="pl-c1">1</span>;(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> d,f,h,k,l,n,p,m,q,t,r,u,w,v<span class="pl-k">=</span>a.faces;n<span class="pl-k">=</span>a.vertices;<span class="pl-k">var</span> B<span class="pl-k">=</span>a.normals,x<span class="pl-k">=</span>a.colors,H<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.uvs){<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>a.uvs.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)a.uvs[d].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>H<span class="pl-k">++</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>H;d<span class="pl-k">++</span>)c.faceVertexUvs[d]<span class="pl-k">=</span>[]}k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>l;)d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d.<span class="pl-c1">x</span><span class="pl-k">=</span>n[k<span class="pl-k">++</span>]<span class="pl-k">*</span>b,d.<span class="pl-c1">y</span><span class="pl-k">=</span>n[k<span class="pl-k">++</span>]<span class="pl-k">*</span>b,d.<span class="pl-c1">z</span><span class="pl-k">=</span>n[k<span class="pl-k">++</span>]<span class="pl-k">*</span>b,c.vertices.<span class="pl-c1">push</span>(d);k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span>v.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>l;)<span class="pl-k">if</span>(b<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],q<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">8</span>,p<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">16</span>,t<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">32</span>,n<span class="pl-k">=</span>b<span class="pl-k">&amp;</span><span class="pl-c1">64</span>,b<span class="pl-k">&amp;=</span><span class="pl-c1">128</span>,q){q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>;q.a<span class="pl-k">=</span>v[k];q.b<span class="pl-k">=</span>v[k<span class="pl-k">+</span><span class="pl-c1">1</span>];q.c<span class="pl-k">=</span>v[k<span class="pl-k">+</span><span class="pl-c1">3</span>];r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>;r.a<span class="pl-k">=</span>v[k<span class="pl-k">+</span><span class="pl-c1">1</span>];r.b<span class="pl-k">=</span>v[k<span class="pl-k">+</span><span class="pl-c1">2</span>];r.c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line">v[k<span class="pl-k">+</span><span class="pl-c1">3</span>];k<span class="pl-k">+=</span><span class="pl-c1">4</span>;h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],q.materialIndex<span class="pl-k">=</span>h,r.materialIndex<span class="pl-k">=</span>h);h<span class="pl-k">=</span>c.faces.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(d)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>H;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(u<span class="pl-k">=</span>a.uvs[d],c.faceVertexUvs[d][h]<span class="pl-k">=</span>[],c.faceVertexUvs[d][h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>f;f<span class="pl-k">++</span>)m<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],w<span class="pl-k">=</span>u[<span class="pl-c1">2</span><span class="pl-k">*</span>m],m<span class="pl-k">=</span>u[<span class="pl-c1">2</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-c1">1</span>],w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(w,m),<span class="pl-c1">2</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>c.faceVertexUvs[d][h].<span class="pl-c1">push</span>(w),<span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>c.faceVertexUvs[d][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-c1">push</span>(w);p<span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>v[k<span class="pl-k">++</span>],q.normal.set(B[p<span class="pl-k">++</span>],B[p<span class="pl-k">++</span>],B[p]),r.normal.copy(q.normal));<span class="pl-k">if</span>(t)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>v[k<span class="pl-k">++</span>],t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(B[p<span class="pl-k">++</span>],B[p<span class="pl-k">++</span>],B[p]),<span class="pl-c1">2</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>q.vertexNormals.<span class="pl-c1">push</span>(t),<span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>r.vertexNormals.<span class="pl-c1">push</span>(t);</td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],n<span class="pl-k">=</span>x[n],q.<span class="pl-c1">color</span>.setHex(n),r.<span class="pl-c1">color</span>.setHex(n));<span class="pl-k">if</span>(b)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)n<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],n<span class="pl-k">=</span>x[n],<span class="pl-c1">2</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>q.vertexColors.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(n)),<span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>r.vertexColors.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(n));c.faces.<span class="pl-c1">push</span>(q);c.faces.<span class="pl-c1">push</span>(r)}<span class="pl-k">else</span>{q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>;q.a<span class="pl-k">=</span>v[k<span class="pl-k">++</span>];q.b<span class="pl-k">=</span>v[k<span class="pl-k">++</span>];q.c<span class="pl-k">=</span>v[k<span class="pl-k">++</span>];h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],q.materialIndex<span class="pl-k">=</span>h);h<span class="pl-k">=</span>c.faces.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(d)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>H;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(u<span class="pl-k">=</span>a.uvs[d],c.faceVertexUvs[d][h]<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>f;f<span class="pl-k">++</span>)m<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],w<span class="pl-k">=</span>u[<span class="pl-c1">2</span><span class="pl-k">*</span>m],m<span class="pl-k">=</span>u[<span class="pl-c1">2</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-c1">1</span>],w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(w,m),c.faceVertexUvs[d][h].<span class="pl-c1">push</span>(w);p<span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>v[k<span class="pl-k">++</span>],q.normal.set(B[p<span class="pl-k">++</span>],</td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line">B[p<span class="pl-k">++</span>],B[p]));<span class="pl-k">if</span>(t)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>v[k<span class="pl-k">++</span>],t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(B[p<span class="pl-k">++</span>],B[p<span class="pl-k">++</span>],B[p]),q.vertexNormals.<span class="pl-c1">push</span>(t);n<span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],q.<span class="pl-c1">color</span>.setHex(x[n]));<span class="pl-k">if</span>(b)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)n<span class="pl-k">=</span>v[k<span class="pl-k">++</span>],q.vertexColors.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(x[n]));c.faces.<span class="pl-c1">push</span>(q)}})(d);(<span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.influencesPerVertex<span class="pl-k">?</span>a.influencesPerVertex<span class="pl-k">:</span><span class="pl-c1">2</span>;<span class="pl-k">if</span>(a.skinWeights)<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>a.skinWeights.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">+=</span>b)c.skinWeights.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(a.skinWeights[d],<span class="pl-c1">1</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span>a.skinWeights[d<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">2</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span>a.skinWeights[d<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">3</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span>a.skinWeights[d<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>));<span class="pl-k">if</span>(a.skinIndices)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>a.skinIndices.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">+=</span>b)c.skinIndices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(a.skinIndices[d],<span class="pl-c1">1</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span>a.skinIndices[d<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">2</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span>a.skinIndices[d<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-c1">3</span><span class="pl-k">&lt;</span>b<span class="pl-k">?</span>a.skinIndices[d<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">0</span>));c.bones<span class="pl-k">=</span>a.bones;c.bones<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>c.bones.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(c.skinWeights.<span class="pl-c1">length</span><span class="pl-k">!==</span>c.skinIndices.<span class="pl-c1">length</span><span class="pl-k">||</span>c.skinIndices.<span class="pl-c1">length</span><span class="pl-k">!==</span>c.vertices.<span class="pl-c1">length</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>When skinning, number of vertices (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c.vertices.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>), skinIndices (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c.skinIndices.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>), and skinWeights (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c.skinWeights.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>) should match.<span class="pl-pds">&quot;</span></span>);c.animation<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line">a.animation;c.animations<span class="pl-k">=</span>a.animations})();(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.morphTargets){<span class="pl-k">var</span> d,f,h,k,l,n;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span>a.morphTargets.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(c.morphTargets[d]<span class="pl-k">=</span>{},c.morphTargets[d].<span class="pl-c1">name</span><span class="pl-k">=</span>a.morphTargets[d].<span class="pl-c1">name</span>,c.morphTargets[d].vertices<span class="pl-k">=</span>[],l<span class="pl-k">=</span>c.morphTargets[d].vertices,n<span class="pl-k">=</span>a.morphTargets[d].vertices,h<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;h<span class="pl-k">&lt;</span>k;h<span class="pl-k">+=</span><span class="pl-c1">3</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;p.<span class="pl-c1">x</span><span class="pl-k">=</span>n[h]<span class="pl-k">*</span>b;p.<span class="pl-c1">y</span><span class="pl-k">=</span>n[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">*</span>b;p.<span class="pl-c1">z</span><span class="pl-k">=</span>n[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">*</span>b;l.<span class="pl-c1">push</span>(p)}}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.morphColors)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>a.morphColors.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(c.morphColors[d]<span class="pl-k">=</span>{},c.morphColors[d].<span class="pl-c1">name</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line">a.morphColors[d].<span class="pl-c1">name</span>,c.morphColors[d].colors<span class="pl-k">=</span>[],k<span class="pl-k">=</span>c.morphColors[d].colors,l<span class="pl-k">=</span>a.morphColors[d].colors,b<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>l.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>h;b<span class="pl-k">+=</span><span class="pl-c1">3</span>)n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16755200</span>),n.setRGB(l[b],l[b<span class="pl-k">+</span><span class="pl-c1">1</span>],l[b<span class="pl-k">+</span><span class="pl-c1">2</span>]),k.<span class="pl-c1">push</span>(n)})(d);c.computeFaceNormals();c.computeBoundingSphere();<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.materials<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span>a.materials.<span class="pl-c1">length</span>)<span class="pl-k">return</span>{geometry<span class="pl-k">:</span>c};d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Loader.<span class="pl-c1">prototype</span>.initMaterials(a.materials,b,<span class="pl-v">this</span>.crossOrigin);<span class="pl-k">return</span>{geometry<span class="pl-k">:</span>c,materials<span class="pl-k">:</span>d}}};</td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LoadingManager</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>,e<span class="pl-k">=!</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.onStart<span class="pl-k">=void</span> <span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">onLoad</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.onProgress<span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">onError</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-en">itemStart</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){f<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.onStart)d.onStart(a,g,f);e<span class="pl-k">=!</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">itemEnd</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){g<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.onProgress)d.onProgress(a,g,f);<span class="pl-k">if</span>(g<span class="pl-k">===</span>f<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=!</span><span class="pl-c1">1</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.<span class="pl-c1">onLoad</span>))d.<span class="pl-c1">onLoad</span>()};<span class="pl-c1">this</span>.<span class="pl-en">itemError</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.<span class="pl-c1">onError</span>)d.<span class="pl-c1">onError</span>(a)}};<span class="pl-c1">THREE</span>.DefaultLoadingManager<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LoadingManager</span>;</td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BufferGeometryLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager};</td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.BufferGeometryLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.BufferGeometryLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(e.manager);g.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);g.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){b(e.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(a)))},c,d)},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">data</span>.<span class="pl-c1">index</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">self</span>[c.<span class="pl-c1">type</span>](c.array),b.setIndex(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">1</span>)));<span class="pl-k">var</span> d<span class="pl-k">=</span>a.<span class="pl-c1">data</span>.<span class="pl-c1">attributes</span>,e;<span class="pl-k">for</span>(e <span class="pl-k">in</span> d){<span class="pl-k">var</span> g<span class="pl-k">=</span>d[e],c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">self</span>[g.<span class="pl-c1">type</span>](g.array);</td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line">b.addAttribute(e,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,g.itemSize))}e<span class="pl-k">=</span>a.<span class="pl-c1">data</span>.groups<span class="pl-k">||</span>a.<span class="pl-c1">data</span>.drawcalls<span class="pl-k">||</span>a.<span class="pl-c1">data</span>.offsets;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;c<span class="pl-k">!==</span>d;<span class="pl-k">++</span>c)g<span class="pl-k">=</span>e[c],b.addGroup(g.<span class="pl-c1">start</span>,g.count);a<span class="pl-k">=</span>a.<span class="pl-c1">data</span>.boundingSphere;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.center<span class="pl-k">&amp;&amp;</span>e.fromArray(a.center),b.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(e,a.radius));<span class="pl-k">return</span> b}};<span class="pl-c1">THREE</span>.<span class="pl-en">MaterialLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager;<span class="pl-v">this</span>.textures<span class="pl-k">=</span>{}};</td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MaterialLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.MaterialLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(e.manager);g.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);g.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){b(e.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(a)))},c,d)},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a},<span class="pl-en">setTextures</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.textures<span class="pl-k">=</span>a},<span class="pl-en">getTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.textures;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b[a]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.MaterialLoader: Undefined texture<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">return</span> b[a]},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[a.<span class="pl-c1">type</span>];b.uuid<span class="pl-k">=</span>a.uuid;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(b.<span class="pl-c1">name</span><span class="pl-k">=</span>a.<span class="pl-c1">name</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span>b.<span class="pl-c1">color</span>.setHex(a.<span class="pl-c1">color</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.emissive<span class="pl-k">&amp;&amp;</span>b.emissive.setHex(a.emissive);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.specular<span class="pl-k">&amp;&amp;</span>b.specular.setHex(a.specular);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.shininess<span class="pl-k">&amp;&amp;</span>(b.shininess<span class="pl-k">=</span>a.shininess);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.uniforms<span class="pl-k">&amp;&amp;</span>(b.uniforms<span class="pl-k">=</span>a.uniforms);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.vertexShader<span class="pl-k">&amp;&amp;</span>(b.vertexShader<span class="pl-k">=</span>a.vertexShader);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.fragmentShader<span class="pl-k">&amp;&amp;</span>(b.fragmentShader<span class="pl-k">=</span>a.fragmentShader);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.vertexColors<span class="pl-k">&amp;&amp;</span>(b.vertexColors<span class="pl-k">=</span>a.vertexColors);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.shading<span class="pl-k">&amp;&amp;</span>(b.shading<span class="pl-k">=</span>a.shading);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.blending<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line">(b.blending<span class="pl-k">=</span>a.blending);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.side<span class="pl-k">&amp;&amp;</span>(b.side<span class="pl-k">=</span>a.side);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.opacity<span class="pl-k">&amp;&amp;</span>(b.opacity<span class="pl-k">=</span>a.opacity);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.transparent<span class="pl-k">&amp;&amp;</span>(b.transparent<span class="pl-k">=</span>a.transparent);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.alphaTest<span class="pl-k">&amp;&amp;</span>(b.alphaTest<span class="pl-k">=</span>a.alphaTest);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.depthTest<span class="pl-k">&amp;&amp;</span>(b.depthTest<span class="pl-k">=</span>a.depthTest);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.depthWrite<span class="pl-k">&amp;&amp;</span>(b.depthWrite<span class="pl-k">=</span>a.depthWrite);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.wireframe<span class="pl-k">&amp;&amp;</span>(b.wireframe<span class="pl-k">=</span>a.wireframe);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.wireframeLinewidth<span class="pl-k">&amp;&amp;</span>(b.wireframeLinewidth<span class="pl-k">=</span>a.wireframeLinewidth);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">size</span><span class="pl-k">&amp;&amp;</span>(b.<span class="pl-c1">size</span><span class="pl-k">=</span>a.<span class="pl-c1">size</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.sizeAttenuation<span class="pl-k">&amp;&amp;</span>(b.sizeAttenuation<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line">a.sizeAttenuation);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.map<span class="pl-k">&amp;&amp;</span>(b.map<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.map));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.alphaMap<span class="pl-k">&amp;&amp;</span>(b.alphaMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.alphaMap),b.transparent<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.bumpMap<span class="pl-k">&amp;&amp;</span>(b.bumpMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.bumpMap));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.bumpScale<span class="pl-k">&amp;&amp;</span>(b.bumpScale<span class="pl-k">=</span>a.bumpScale);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.normalMap<span class="pl-k">&amp;&amp;</span>(b.normalMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.normalMap));a.normalScale<span class="pl-k">&amp;&amp;</span>(b.normalScale<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a.normalScale,a.normalScale));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.displacementMap<span class="pl-k">&amp;&amp;</span>(b.displacementMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.displacementMap));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.displacementScale<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line">(b.displacementScale<span class="pl-k">=</span>a.displacementScale);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.displacementBias<span class="pl-k">&amp;&amp;</span>(b.displacementBias<span class="pl-k">=</span>a.displacementBias);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.specularMap<span class="pl-k">&amp;&amp;</span>(b.specularMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.specularMap));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.envMap<span class="pl-k">&amp;&amp;</span>(b.envMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.envMap),b.combine<span class="pl-k">=</span><span class="pl-c1">THREE</span>.MultiplyOperation);a.reflectivity<span class="pl-k">&amp;&amp;</span>(b.reflectivity<span class="pl-k">=</span>a.reflectivity);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.lightMap<span class="pl-k">&amp;&amp;</span>(b.lightMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.lightMap));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.lightMapIntensity<span class="pl-k">&amp;&amp;</span>(b.lightMapIntensity<span class="pl-k">=</span>a.lightMapIntensity);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.aoMap<span class="pl-k">&amp;&amp;</span>(b.aoMap<span class="pl-k">=</span><span class="pl-v">this</span>.getTexture(a.aoMap));</td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.aoMapIntensity<span class="pl-k">&amp;&amp;</span>(b.aoMapIntensity<span class="pl-k">=</span>a.aoMapIntensity);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.materials)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>a.materials.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b.materials.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.<span class="pl-c1">parse</span>(a.materials[c]));<span class="pl-k">return</span> b}};<span class="pl-c1">THREE</span>.<span class="pl-en">ObjectLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager;<span class="pl-v">this</span>.texturePath<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.ObjectLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ObjectLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-v">this</span>.texturePath<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.texturePath<span class="pl-k">=</span>a.<span class="pl-c1">substring</span>(<span class="pl-c1">0</span>,a.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-c1">1</span>));<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(e.manager);g.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);g.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){e.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(a),b)},c,d)},<span class="pl-en">setTexturePath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.texturePath<span class="pl-k">=</span>a},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.parseGeometries(a.geometries),d<span class="pl-k">=</span><span class="pl-v">this</span>.parseImages(a.<span class="pl-c1">images</span>,<span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>b(e)}),</td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">=</span><span class="pl-v">this</span>.parseTextures(a.textures,d),d<span class="pl-k">=</span><span class="pl-v">this</span>.parseMaterials(a.materials,d),e<span class="pl-k">=</span><span class="pl-v">this</span>.parseObject(a.<span class="pl-c1">object</span>,c,d);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">images</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">images</span>.<span class="pl-c1">length</span><span class="pl-k">||void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span>b(e);<span class="pl-k">return</span> e},<span class="pl-en">parseGeometries</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.JSONLoader</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometryLoader</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f,h<span class="pl-k">=</span>a[e];<span class="pl-k">switch</span>(h.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>PlaneGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>PlaneBufferGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[h.<span class="pl-c1">type</span>](h.<span class="pl-c1">width</span>,h.<span class="pl-c1">height</span>,h.widthSegments,h.heightSegments);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>BoxGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CubeGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.BoxGeometry</span>(h.<span class="pl-c1">width</span>,h.<span class="pl-c1">height</span>,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CircleBufferGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CircleBufferGeometry</span>(h.radius,h.segments,h.thetaStart,h.thetaLength);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CircleGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CircleGeometry</span>(h.radius,h.segments,h.thetaStart,h.thetaLength);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>CylinderGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(h.radiusTop,h.radiusBottom,h.<span class="pl-c1">height</span>,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>SphereGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>SphereBufferGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereBufferGeometry</span>(h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>DodecahedronGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DodecahedronGeometry</span>(h.radius,h.detail);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>IcosahedronGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.IcosahedronGeometry</span>(h.radius,h.detail);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>OctahedronGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OctahedronGeometry</span>(h.radius,</td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line">h.detail);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TetrahedronGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TetrahedronGeometry</span>(h.radius,h.detail);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>RingGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RingGeometry</span>(h.innerRadius,h.outerRadius,h.thetaSegments,h.phiSegments,h.thetaStart,h.thetaLength);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TorusGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TorusGeometry</span>(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TorusKnotGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TorusKnotGeometry</span>(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.p,h.q,h.heightScale);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TextGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.TextGeometry</span>(h.<span class="pl-c1">text</span>,h.<span class="pl-c1">data</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>BufferGeometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span>d.<span class="pl-c1">parse</span>(h);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Geometry<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f<span class="pl-k">=</span>c.<span class="pl-c1">parse</span>(h.<span class="pl-c1">data</span>,<span class="pl-v">this</span>.texturePath).geometry;<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.ObjectLoader: Unsupported geometry type &quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>h.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>);<span class="pl-k">continue</span>}f.uuid<span class="pl-k">=</span>h.uuid;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(f.<span class="pl-c1">name</span><span class="pl-k">=</span>h.<span class="pl-c1">name</span>);b[h.uuid]<span class="pl-k">=</span>f}<span class="pl-k">return</span> b},<span class="pl-en">parseMaterials</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MaterialLoader</span>;d.setTextures(b);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>d.<span class="pl-c1">parse</span>(a[e]);c[f.uuid]<span class="pl-k">=</span>f}}<span class="pl-k">return</span> c},<span class="pl-en">parseImages</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){d.manager.itemStart(a);<span class="pl-k">return</span> f.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(){d.manager.itemEnd(a)})}<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>,e<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LoadingManager</span>(b),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>(g);f.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>h;g<span class="pl-k">++</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span>a[g],l<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-cce">\/\/</span>)<span class="pl-k">|</span>(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>:(<span class="pl-cce">\/\/</span>)<span class="pl-k">?</span>)<span class="pl-pds">/</span>i</span>.<span class="pl-c1">test</span>(k.url)<span class="pl-k">?</span>k.url<span class="pl-k">:</span>d.texturePath<span class="pl-k">+</span>k.url;e[k.uuid]<span class="pl-k">=</span>c(l)}}<span class="pl-k">return</span> e},<span class="pl-en">parseTextures</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span><span class="pl-k">===typeof</span> a)<span class="pl-k">return</span> a;<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ObjectLoader.parseTexture: Constant should be in numeric form.<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line">a);<span class="pl-k">return</span> <span class="pl-c1">THREE</span>[a]}<span class="pl-k">var</span> d<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>a[e];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>f.image<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>THREE.ObjectLoader: No &quot;image&quot; specified for<span class="pl-pds">&#39;</span></span>,f.uuid);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b[f.image]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ObjectLoader: Undefined image<span class="pl-pds">&quot;</span></span>,f.image);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(b[f.image]);h.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;h.uuid<span class="pl-k">=</span>f.uuid;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(h.<span class="pl-c1">name</span><span class="pl-k">=</span>f.<span class="pl-c1">name</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f.mapping<span class="pl-k">&amp;&amp;</span>(h.mapping<span class="pl-k">=</span>c(f.mapping));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f.offset<span class="pl-k">&amp;&amp;</span>(h.offset<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f.offset[<span class="pl-c1">0</span>],f.offset[<span class="pl-c1">1</span>]));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f.repeat<span class="pl-k">&amp;&amp;</span>(h.repeat<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f.repeat[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line">f.repeat[<span class="pl-c1">1</span>]));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f.minFilter<span class="pl-k">&amp;&amp;</span>(h.minFilter<span class="pl-k">=</span>c(f.minFilter));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f.magFilter<span class="pl-k">&amp;&amp;</span>(h.magFilter<span class="pl-k">=</span>c(f.magFilter));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f.anisotropy<span class="pl-k">&amp;&amp;</span>(h.anisotropy<span class="pl-k">=</span>f.anisotropy);<span class="pl-c1">Array</span>.isArray(f.wrap)<span class="pl-k">&amp;&amp;</span>(h.wrapS<span class="pl-k">=</span>c(f.wrap[<span class="pl-c1">0</span>]),h.wrapT<span class="pl-k">=</span>c(f.wrap[<span class="pl-c1">1</span>]));d[f.uuid]<span class="pl-k">=</span>h}<span class="pl-k">return</span> d},<span class="pl-en">parseObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e;<span class="pl-en">e</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c[a]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ObjectLoader: Undefined geometry<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">return</span> c[a]};<span class="pl-k">var</span> <span class="pl-en">g</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d[a]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ObjectLoader: Undefined material<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line">a);<span class="pl-k">return</span> d[a]};<span class="pl-k">switch</span>(b.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Scene<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Scene</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>PerspectiveCamera<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(b.fov,b.aspect,b.near,b.far);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>OrthographicCamera<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OrthographicCamera</span>(b.<span class="pl-c1">left</span>,b.<span class="pl-c1">right</span>,b.<span class="pl-c1">top</span>,b.<span class="pl-c1">bottom</span>,b.near,b.far);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>AmbientLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.AmbientLight</span>(b.<span class="pl-c1">color</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>DirectionalLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DirectionalLight</span>(b.<span class="pl-c1">color</span>,b.intensity);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>PointLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PointLight</span>(b.<span class="pl-c1">color</span>,b.intensity,b.distance,b.decay);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>SpotLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.SpotLight</span>(b.<span class="pl-c1">color</span>,b.intensity,b.distance,b.angle,b.exponent,b.decay);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>HemisphereLight<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.HemisphereLight</span>(b.<span class="pl-c1">color</span>,b.groundColor,b.intensity);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Mesh<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(e(b.geometry),g(b.material));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>LOD<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LOD</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Line<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(e(b.geometry),g(b.material),b.mode);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>PointCloud<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Points<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Points</span>(e(b.geometry),g(b.material));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Sprite<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sprite</span>(g(b.material));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Group<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Group</span>;</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>}e.uuid<span class="pl-k">=</span>b.uuid;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(e.<span class="pl-c1">name</span><span class="pl-k">=</span>b.<span class="pl-c1">name</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.matrix<span class="pl-k">?</span>(a.fromArray(b.matrix),a.decompose(e.position,e.quaternion,e.scale))<span class="pl-k">:</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.position<span class="pl-k">&amp;&amp;</span>e.position.fromArray(b.position),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.rotation<span class="pl-k">&amp;&amp;</span>e.rotation.fromArray(b.rotation),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.scale<span class="pl-k">&amp;&amp;</span>e.scale.fromArray(b.scale));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.castShadow<span class="pl-k">&amp;&amp;</span>(e.castShadow<span class="pl-k">=</span>b.castShadow);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.receiveShadow<span class="pl-k">&amp;&amp;</span>(e.receiveShadow<span class="pl-k">=</span>b.receiveShadow);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.visible<span class="pl-k">&amp;&amp;</span>(e.visible<span class="pl-k">=</span>b.visible);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.userData<span class="pl-k">&amp;&amp;</span>(e.userData<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line">b.userData);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.children)<span class="pl-k">for</span>(<span class="pl-k">var</span> f <span class="pl-k">in</span> b.children)e.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.parseObject(b.children[f],c,d));<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>LOD<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b.<span class="pl-c1">type</span>)<span class="pl-k">for</span>(b<span class="pl-k">=</span>b.levels,g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span>;g<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>b[g];f<span class="pl-k">=</span>e.getObjectByProperty(<span class="pl-s"><span class="pl-pds">&quot;</span>uuid<span class="pl-pds">&quot;</span></span>,h.<span class="pl-c1">object</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>e.addLevel(f,h.distance)}<span class="pl-k">return</span> e}}()};<span class="pl-c1">THREE</span>.<span class="pl-en">TextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager};</td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.TextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.TextureLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>(<span class="pl-v">this</span>.manager);e.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);e.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(a);a.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>b(a)},c,d)},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a}};<span class="pl-c1">THREE</span>.DataTextureLoader<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-en">BinaryTextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager;<span class="pl-v">this</span>._parser<span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.BinaryTextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.BinaryTextureLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-v">this</span>.manager);f.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);f.setResponseType(<span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>);f.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span>e._parser(a))<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.image<span class="pl-k">?</span>g.image<span class="pl-k">=</span>a.image<span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">data</span><span class="pl-k">&amp;&amp;</span>(g.image.<span class="pl-c1">width</span><span class="pl-k">=</span>a.<span class="pl-c1">width</span>,g.image.<span class="pl-c1">height</span><span class="pl-k">=</span>a.<span class="pl-c1">height</span>,g.image.<span class="pl-c1">data</span><span class="pl-k">=</span>a.<span class="pl-c1">data</span>),g.wrapS<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.wrapS<span class="pl-k">?</span>a.wrapS<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping,g.wrapT<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.wrapT<span class="pl-k">?</span>a.wrapT<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping,</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line">g.magFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.magFilter<span class="pl-k">?</span>a.magFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearFilter,g.minFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.minFilter<span class="pl-k">?</span>a.minFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearMipMapLinearFilter,g.anisotropy<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.anisotropy<span class="pl-k">?</span>a.anisotropy<span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.format<span class="pl-k">&amp;&amp;</span>(g.format<span class="pl-k">=</span>a.format),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(g.<span class="pl-c1">type</span><span class="pl-k">=</span>a.<span class="pl-c1">type</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.mipmaps<span class="pl-k">&amp;&amp;</span>(g.mipmaps<span class="pl-k">=</span>a.mipmaps),<span class="pl-c1">1</span><span class="pl-k">===</span>a.mipmapCount<span class="pl-k">&amp;&amp;</span>(g.minFilter<span class="pl-k">=</span><span class="pl-c1">THREE</span>.LinearFilter),g.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>,b<span class="pl-k">&amp;&amp;</span>b(g,a)},c,d);<span class="pl-k">return</span> g},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CompressedTextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.manager<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.DefaultLoadingManager;<span class="pl-v">this</span>._parser<span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CompressedTextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.CompressedTextureLoader,<span class="pl-en">load</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>,g<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CompressedTexture</span>;f.image<span class="pl-k">=</span>g;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.XHRLoader</span>(<span class="pl-v">this</span>.manager);h.setCrossOrigin(<span class="pl-v">this</span>.crossOrigin);h.setResponseType(<span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">Array</span>.isArray(a))<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-en">l</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">m</span>){h.<span class="pl-c1">load</span>(a[m],<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>e._parser(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);g[m]<span class="pl-k">=</span>{width<span class="pl-k">:</span>a.<span class="pl-c1">width</span>,height<span class="pl-k">:</span>a.<span class="pl-c1">height</span>,format<span class="pl-k">:</span>a.format,mipmaps<span class="pl-k">:</span>a.mipmaps};k<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-c1">6</span><span class="pl-k">===</span>k<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">1</span><span class="pl-k">===</span>a.mipmapCount<span class="pl-k">&amp;&amp;</span>(f.minFilter<span class="pl-k">=</span><span class="pl-c1">THREE</span>.LinearFilter),f.format<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line">a.format,f.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>,b<span class="pl-k">&amp;&amp;</span>b(f))},c,d)},n<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>p;<span class="pl-k">++</span>n)l(n);<span class="pl-k">else</span> h.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>e._parser(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">if</span>(a.isCubemap)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.mipmaps.<span class="pl-c1">length</span><span class="pl-k">/</span>a.mipmapCount,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c;d<span class="pl-k">++</span>){g[d]<span class="pl-k">=</span>{mipmaps<span class="pl-k">:</span>[]};<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>a.mipmapCount;h<span class="pl-k">++</span>)g[d].mipmaps.<span class="pl-c1">push</span>(a.mipmaps[d<span class="pl-k">*</span>a.mipmapCount<span class="pl-k">+</span>h]),g[d].format<span class="pl-k">=</span>a.format,g[d].<span class="pl-c1">width</span><span class="pl-k">=</span>a.<span class="pl-c1">width</span>,g[d].<span class="pl-c1">height</span><span class="pl-k">=</span>a.<span class="pl-c1">height</span>}<span class="pl-k">else</span> f.image.<span class="pl-c1">width</span><span class="pl-k">=</span>a.<span class="pl-c1">width</span>,f.image.<span class="pl-c1">height</span><span class="pl-k">=</span>a.<span class="pl-c1">height</span>,f.mipmaps<span class="pl-k">=</span>a.mipmaps;<span class="pl-c1">1</span><span class="pl-k">===</span>a.mipmapCount<span class="pl-k">&amp;&amp;</span>(f.minFilter<span class="pl-k">=</span><span class="pl-c1">THREE</span>.LinearFilter);f.format<span class="pl-k">=</span>a.format;f.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;b<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line">b(f)},c,d);<span class="pl-k">return</span> f},<span class="pl-en">setCrossOrigin</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.crossOrigin<span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Material</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">Object</span>.defineProperty(<span class="pl-v">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.MaterialIdCount<span class="pl-k">++</span>});<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Material<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.side<span class="pl-k">=</span><span class="pl-c1">THREE</span>.FrontSide;<span class="pl-v">this</span>.opacity<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.transparent<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.blending<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NormalBlending;<span class="pl-v">this</span>.blendSrc<span class="pl-k">=</span><span class="pl-c1">THREE</span>.SrcAlphaFactor;<span class="pl-v">this</span>.blendDst<span class="pl-k">=</span><span class="pl-c1">THREE</span>.OneMinusSrcAlphaFactor;<span class="pl-v">this</span>.blendEquation<span class="pl-k">=</span><span class="pl-c1">THREE</span>.AddEquation;<span class="pl-v">this</span>.blendEquationAlpha<span class="pl-k">=</span><span class="pl-v">this</span>.blendDstAlpha<span class="pl-k">=</span><span class="pl-v">this</span>.blendSrcAlpha<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.depthFunc<span class="pl-k">=</span><span class="pl-c1">THREE</span>.LessEqualDepth;<span class="pl-v">this</span>.colorWrite<span class="pl-k">=</span><span class="pl-v">this</span>.depthWrite<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.depthTest<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.precision<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.polygonOffset<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.overdraw<span class="pl-k">=</span><span class="pl-v">this</span>.alphaTest<span class="pl-k">=</span><span class="pl-v">this</span>.polygonOffsetUnits<span class="pl-k">=</span><span class="pl-v">this</span>.polygonOffsetFactor<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._needsUpdate<span class="pl-k">=</span><span class="pl-v">this</span>.visible<span class="pl-k">=!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Material</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Material,get <span class="pl-en">needsUpdate</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._needsUpdate},set <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.update();<span class="pl-v">this</span>._needsUpdate<span class="pl-k">=</span>a},<span class="pl-en">setValues</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> a){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[b];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c)<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Material: &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39; parameter is undefined.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>[b];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">?</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39; is not a property of this material.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Color<span class="pl-k">?</span>d.set(c)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Vector3<span class="pl-k">&amp;&amp;</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Vector3<span class="pl-k">?</span>d.copy(c)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>[b]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>overdraw<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span><span class="pl-c1">Number</span>(c)<span class="pl-k">:</span>c}}},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Material<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Material.toJSON<span class="pl-pds">&quot;</span></span>}};b.uuid<span class="pl-k">=</span><span class="pl-v">this</span>.uuid;b.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">type</span>;<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">&amp;&amp;</span>(b.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">name</span>);<span class="pl-v">this</span>.<span class="pl-c1">color</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Color<span class="pl-k">&amp;&amp;</span>(b.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex());<span class="pl-v">this</span>.emissive <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Color<span class="pl-k">&amp;&amp;</span>(b.emissive<span class="pl-k">=</span><span class="pl-v">this</span>.emissive.getHex());<span class="pl-v">this</span>.specular <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Color<span class="pl-k">&amp;&amp;</span>(b.specular<span class="pl-k">=</span><span class="pl-v">this</span>.specular.getHex());<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.shininess<span class="pl-k">&amp;&amp;</span>(b.shininess<span class="pl-k">=</span><span class="pl-v">this</span>.shininess);<span class="pl-v">this</span>.map <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line">(b.map<span class="pl-k">=</span><span class="pl-v">this</span>.map.toJSON(a).uuid);<span class="pl-v">this</span>.alphaMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span>(b.alphaMap<span class="pl-k">=</span><span class="pl-v">this</span>.alphaMap.toJSON(a).uuid);<span class="pl-v">this</span>.lightMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span>(b.lightMap<span class="pl-k">=</span><span class="pl-v">this</span>.lightMap.toJSON(a).uuid);<span class="pl-v">this</span>.bumpMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span>(b.bumpMap<span class="pl-k">=</span><span class="pl-v">this</span>.bumpMap.toJSON(a).uuid,b.bumpScale<span class="pl-k">=</span><span class="pl-v">this</span>.bumpScale);<span class="pl-v">this</span>.normalMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span>(b.normalMap<span class="pl-k">=</span><span class="pl-v">this</span>.normalMap.toJSON(a).uuid,b.normalScale<span class="pl-k">=</span><span class="pl-v">this</span>.normalScale);<span class="pl-v">this</span>.displacementMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span>(b.displacementMap<span class="pl-k">=</span><span class="pl-v">this</span>.displacementMap.toJSON(a).uuid,</td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line">b.displacementScale<span class="pl-k">=</span><span class="pl-v">this</span>.displacementScale,b.displacementBias<span class="pl-k">=</span><span class="pl-v">this</span>.displacementBias);<span class="pl-v">this</span>.specularMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span>(b.specularMap<span class="pl-k">=</span><span class="pl-v">this</span>.specularMap.toJSON(a).uuid);<span class="pl-v">this</span>.envMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">&amp;&amp;</span>(b.envMap<span class="pl-k">=</span><span class="pl-v">this</span>.envMap.toJSON(a).uuid,b.reflectivity<span class="pl-k">=</span><span class="pl-v">this</span>.reflectivity);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.<span class="pl-c1">size</span><span class="pl-k">&amp;&amp;</span>(b.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">size</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.sizeAttenuation<span class="pl-k">&amp;&amp;</span>(b.sizeAttenuation<span class="pl-k">=</span><span class="pl-v">this</span>.sizeAttenuation);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.vertexColors<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.vertexColors<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.NoColors<span class="pl-k">&amp;&amp;</span>(b.vertexColors<span class="pl-k">=</span><span class="pl-v">this</span>.vertexColors);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.shading<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.shading<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.SmoothShading<span class="pl-k">&amp;&amp;</span>(b.shading<span class="pl-k">=</span><span class="pl-v">this</span>.shading);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.blending<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.blending<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.NormalBlending<span class="pl-k">&amp;&amp;</span>(b.blending<span class="pl-k">=</span><span class="pl-v">this</span>.blending);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.side<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.side<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.FrontSide<span class="pl-k">&amp;&amp;</span>(b.side<span class="pl-k">=</span><span class="pl-v">this</span>.side);<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.opacity<span class="pl-k">&amp;&amp;</span>(b.opacity<span class="pl-k">=</span><span class="pl-v">this</span>.opacity);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.transparent<span class="pl-k">&amp;&amp;</span>(b.transparent<span class="pl-k">=</span><span class="pl-v">this</span>.transparent);<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.alphaTest<span class="pl-k">&amp;&amp;</span>(b.alphaTest<span class="pl-k">=</span><span class="pl-v">this</span>.alphaTest);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.wireframe<span class="pl-k">&amp;&amp;</span>(b.wireframe<span class="pl-k">=</span><span class="pl-v">this</span>.wireframe);<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">&amp;&amp;</span>(b.wireframeLinewidth<span class="pl-k">=</span><span class="pl-v">this</span>.wireframeLinewidth);<span class="pl-k">return</span> b},</td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line"><span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span>a.<span class="pl-c1">name</span>;<span class="pl-v">this</span>.side<span class="pl-k">=</span>a.side;<span class="pl-v">this</span>.opacity<span class="pl-k">=</span>a.opacity;<span class="pl-v">this</span>.transparent<span class="pl-k">=</span>a.transparent;<span class="pl-v">this</span>.blending<span class="pl-k">=</span>a.blending;<span class="pl-v">this</span>.blendSrc<span class="pl-k">=</span>a.blendSrc;<span class="pl-v">this</span>.blendDst<span class="pl-k">=</span>a.blendDst;<span class="pl-v">this</span>.blendEquation<span class="pl-k">=</span>a.blendEquation;<span class="pl-v">this</span>.blendSrcAlpha<span class="pl-k">=</span>a.blendSrcAlpha;<span class="pl-v">this</span>.blendDstAlpha<span class="pl-k">=</span>a.blendDstAlpha;<span class="pl-v">this</span>.blendEquationAlpha<span class="pl-k">=</span>a.blendEquationAlpha;<span class="pl-v">this</span>.depthFunc<span class="pl-k">=</span>a.depthFunc;<span class="pl-v">this</span>.depthTest<span class="pl-k">=</span>a.depthTest;<span class="pl-v">this</span>.depthWrite<span class="pl-k">=</span>a.depthWrite;<span class="pl-v">this</span>.precision<span class="pl-k">=</span>a.precision;<span class="pl-v">this</span>.polygonOffset<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line">a.polygonOffset;<span class="pl-v">this</span>.polygonOffsetFactor<span class="pl-k">=</span>a.polygonOffsetFactor;<span class="pl-v">this</span>.polygonOffsetUnits<span class="pl-k">=</span>a.polygonOffsetUnits;<span class="pl-v">this</span>.alphaTest<span class="pl-k">=</span>a.alphaTest;<span class="pl-v">this</span>.overdraw<span class="pl-k">=</span>a.overdraw;<span class="pl-v">this</span>.visible<span class="pl-k">=</span>a.visible;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>update<span class="pl-pds">&quot;</span></span>})},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})},get <span class="pl-en">wrapAround</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: .wrapAround has been removed.<span class="pl-pds">&quot;</span></span>)},set <span class="pl-en">wrapAround</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: .wrapAround has been removed.<span class="pl-pds">&quot;</span></span>)},get <span class="pl-en">wrapRGB</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: .wrapRGB has been removed.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>}};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.MaterialIdCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">LineBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LineBasicMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-v">this</span>.linewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.linejoin<span class="pl-k">=</span><span class="pl-v">this</span>.linecap<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NoColors;<span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.LineBasicMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LineBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.LineBasicMaterial;<span class="pl-c1">THREE.LineBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.linewidth<span class="pl-k">=</span>a.linewidth;<span class="pl-v">this</span>.linecap<span class="pl-k">=</span>a.linecap;<span class="pl-v">this</span>.linejoin<span class="pl-k">=</span>a.linejoin;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span>a.vertexColors;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LineDashedMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LineDashedMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-v">this</span>.scale<span class="pl-k">=</span><span class="pl-v">this</span>.linewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.dashSize<span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-v">this</span>.gapSize<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.LineDashedMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.LineDashedMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.LineDashedMaterial;</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LineDashedMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.linewidth<span class="pl-k">=</span>a.linewidth;<span class="pl-v">this</span>.scale<span class="pl-k">=</span>a.scale;<span class="pl-v">this</span>.dashSize<span class="pl-k">=</span>a.dashSize;<span class="pl-v">this</span>.gapSize<span class="pl-k">=</span>a.gapSize;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span>a.vertexColors;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshBasicMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-v">this</span>.aoMap<span class="pl-k">=</span><span class="pl-v">this</span>.map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.aoMapIntensity<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.envMap<span class="pl-k">=</span><span class="pl-v">this</span>.alphaMap<span class="pl-k">=</span><span class="pl-v">this</span>.specularMap<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.combine<span class="pl-k">=</span><span class="pl-c1">THREE</span>.MultiplyOperation;<span class="pl-v">this</span>.reflectivity<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.refractionRatio<span class="pl-k">=</span>.<span class="pl-c1">98</span>;<span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.shading<span class="pl-k">=</span><span class="pl-c1">THREE</span>.SmoothShading;<span class="pl-v">this</span>.wireframe<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinejoin<span class="pl-k">=</span><span class="pl-v">this</span>.wireframeLinecap<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NoColors;<span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span><span class="pl-v">this</span>.skinning<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.MeshBasicMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.MeshBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.MeshBasicMaterial;</td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MeshBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.map<span class="pl-k">=</span>a.map;<span class="pl-v">this</span>.aoMap<span class="pl-k">=</span>a.aoMap;<span class="pl-v">this</span>.aoMapIntensity<span class="pl-k">=</span>a.aoMapIntensity;<span class="pl-v">this</span>.specularMap<span class="pl-k">=</span>a.specularMap;<span class="pl-v">this</span>.alphaMap<span class="pl-k">=</span>a.alphaMap;<span class="pl-v">this</span>.envMap<span class="pl-k">=</span>a.envMap;<span class="pl-v">this</span>.combine<span class="pl-k">=</span>a.combine;<span class="pl-v">this</span>.reflectivity<span class="pl-k">=</span>a.reflectivity;<span class="pl-v">this</span>.refractionRatio<span class="pl-k">=</span>a.refractionRatio;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-v">this</span>.shading<span class="pl-k">=</span>a.shading;<span class="pl-v">this</span>.wireframe<span class="pl-k">=</span>a.wireframe;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span>a.wireframeLinewidth;<span class="pl-v">this</span>.wireframeLinecap<span class="pl-k">=</span>a.wireframeLinecap;</td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.wireframeLinejoin<span class="pl-k">=</span>a.wireframeLinejoin;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span>a.vertexColors;<span class="pl-v">this</span>.skinning<span class="pl-k">=</span>a.skinning;<span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span>a.morphTargets;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshLambertMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshLambertMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-v">this</span>.emissive<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>);<span class="pl-v">this</span>.envMap<span class="pl-k">=</span><span class="pl-v">this</span>.alphaMap<span class="pl-k">=</span><span class="pl-v">this</span>.specularMap<span class="pl-k">=</span><span class="pl-v">this</span>.map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.combine<span class="pl-k">=</span><span class="pl-c1">THREE</span>.MultiplyOperation;<span class="pl-v">this</span>.reflectivity<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.refractionRatio<span class="pl-k">=</span>.<span class="pl-c1">98</span>;<span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.wireframe<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinejoin<span class="pl-k">=</span><span class="pl-v">this</span>.wireframeLinecap<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NoColors;<span class="pl-v">this</span>.morphNormals<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span><span class="pl-v">this</span>.skinning<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.setValues(a)};</td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MeshLambertMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.MeshLambertMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.MeshLambertMaterial;</td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MeshLambertMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.emissive.copy(a.emissive);<span class="pl-v">this</span>.map<span class="pl-k">=</span>a.map;<span class="pl-v">this</span>.specularMap<span class="pl-k">=</span>a.specularMap;<span class="pl-v">this</span>.alphaMap<span class="pl-k">=</span>a.alphaMap;<span class="pl-v">this</span>.envMap<span class="pl-k">=</span>a.envMap;<span class="pl-v">this</span>.combine<span class="pl-k">=</span>a.combine;<span class="pl-v">this</span>.reflectivity<span class="pl-k">=</span>a.reflectivity;<span class="pl-v">this</span>.refractionRatio<span class="pl-k">=</span>a.refractionRatio;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-v">this</span>.wireframe<span class="pl-k">=</span>a.wireframe;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span>a.wireframeLinewidth;<span class="pl-v">this</span>.wireframeLinecap<span class="pl-k">=</span>a.wireframeLinecap;<span class="pl-v">this</span>.wireframeLinejoin<span class="pl-k">=</span>a.wireframeLinejoin;</td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span>a.vertexColors;<span class="pl-v">this</span>.skinning<span class="pl-k">=</span>a.skinning;<span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span>a.morphTargets;<span class="pl-v">this</span>.morphNormals<span class="pl-k">=</span>a.morphNormals;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshPhongMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-v">this</span>.emissive<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>);<span class="pl-v">this</span>.specular<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">1118481</span>);<span class="pl-v">this</span>.shininess<span class="pl-k">=</span><span class="pl-c1">30</span>;<span class="pl-v">this</span>.metal<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.lightMap<span class="pl-k">=</span><span class="pl-v">this</span>.map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.lightMapIntensity<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.aoMap<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.aoMapIntensity<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.bumpMap<span class="pl-k">=</span><span class="pl-v">this</span>.emissiveMap<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.bumpScale<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.normalMap<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.normalScale<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-v">this</span>.displacementMap<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.displacementScale<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.displacementBias<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-v">this</span>.envMap<span class="pl-k">=</span><span class="pl-v">this</span>.alphaMap<span class="pl-k">=</span><span class="pl-v">this</span>.specularMap<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.combine<span class="pl-k">=</span><span class="pl-c1">THREE</span>.MultiplyOperation;<span class="pl-v">this</span>.reflectivity<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.refractionRatio<span class="pl-k">=</span>.<span class="pl-c1">98</span>;<span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.shading<span class="pl-k">=</span><span class="pl-c1">THREE</span>.SmoothShading;<span class="pl-v">this</span>.wireframe<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinejoin<span class="pl-k">=</span><span class="pl-v">this</span>.wireframeLinecap<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NoColors;<span class="pl-v">this</span>.morphNormals<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span><span class="pl-v">this</span>.skinning<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.MeshPhongMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.MeshPhongMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.MeshPhongMaterial;</td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MeshPhongMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.emissive.copy(a.emissive);<span class="pl-v">this</span>.specular.copy(a.specular);<span class="pl-v">this</span>.shininess<span class="pl-k">=</span>a.shininess;<span class="pl-v">this</span>.metal<span class="pl-k">=</span>a.metal;<span class="pl-v">this</span>.map<span class="pl-k">=</span>a.map;<span class="pl-v">this</span>.lightMap<span class="pl-k">=</span>a.lightMap;<span class="pl-v">this</span>.lightMapIntensity<span class="pl-k">=</span>a.lightMapIntensity;<span class="pl-v">this</span>.aoMap<span class="pl-k">=</span>a.aoMap;<span class="pl-v">this</span>.aoMapIntensity<span class="pl-k">=</span>a.aoMapIntensity;<span class="pl-v">this</span>.emissiveMap<span class="pl-k">=</span>a.emissiveMap;<span class="pl-v">this</span>.bumpMap<span class="pl-k">=</span>a.bumpMap;<span class="pl-v">this</span>.bumpScale<span class="pl-k">=</span>a.bumpScale;<span class="pl-v">this</span>.normalMap<span class="pl-k">=</span>a.normalMap;<span class="pl-v">this</span>.normalScale.copy(a.normalScale);</td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.displacementMap<span class="pl-k">=</span>a.displacementMap;<span class="pl-v">this</span>.displacementScale<span class="pl-k">=</span>a.displacementScale;<span class="pl-v">this</span>.displacementBias<span class="pl-k">=</span>a.displacementBias;<span class="pl-v">this</span>.specularMap<span class="pl-k">=</span>a.specularMap;<span class="pl-v">this</span>.alphaMap<span class="pl-k">=</span>a.alphaMap;<span class="pl-v">this</span>.envMap<span class="pl-k">=</span>a.envMap;<span class="pl-v">this</span>.combine<span class="pl-k">=</span>a.combine;<span class="pl-v">this</span>.reflectivity<span class="pl-k">=</span>a.reflectivity;<span class="pl-v">this</span>.refractionRatio<span class="pl-k">=</span>a.refractionRatio;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-v">this</span>.shading<span class="pl-k">=</span>a.shading;<span class="pl-v">this</span>.wireframe<span class="pl-k">=</span>a.wireframe;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span>a.wireframeLinewidth;<span class="pl-v">this</span>.wireframeLinecap<span class="pl-k">=</span>a.wireframeLinecap;<span class="pl-v">this</span>.wireframeLinejoin<span class="pl-k">=</span>a.wireframeLinejoin;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line">a.vertexColors;<span class="pl-v">this</span>.skinning<span class="pl-k">=</span>a.skinning;<span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span>a.morphTargets;<span class="pl-v">this</span>.morphNormals<span class="pl-k">=</span>a.morphNormals;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">MeshDepthMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshDepthMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.wireframe<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargets<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.MeshDepthMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.MeshDepthMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.MeshDepthMaterial;</td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MeshDepthMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.wireframe<span class="pl-k">=</span>a.wireframe;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span>a.wireframeLinewidth;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">MeshNormalMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshNormalMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.wireframe<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.morphTargets<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.MeshNormalMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.MeshNormalMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.MeshNormalMaterial;</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MeshNormalMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.wireframe<span class="pl-k">=</span>a.wireframe;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span>a.wireframeLinewidth;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">MultiMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MultiMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.materials<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span>a<span class="pl-k">:</span>[];<span class="pl-v">this</span>.visible<span class="pl-k">=!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MultiMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.MultiMaterial,<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.2</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>material<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>MaterialExporter<span class="pl-pds">&quot;</span></span>},uuid<span class="pl-k">:</span><span class="pl-v">this</span>.uuid,type<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">type</span>,materials<span class="pl-k">:</span>[]},b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.materials.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)a.materials.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.materials[b].toJSON());a.visible<span class="pl-k">=</span><span class="pl-v">this</span>.visible;<span class="pl-k">return</span> a},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">this.constructor</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.materials.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)a.materials.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.materials[b].clone());a.visible<span class="pl-k">=</span><span class="pl-v">this</span>.visible;<span class="pl-k">return</span> a}};<span class="pl-c1">THREE</span>.MeshFaceMaterial<span class="pl-k">=</span><span class="pl-c1">THREE</span>.MultiMaterial;</td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PointsMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PointsMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-v">this</span>.map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.sizeAttenuation<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NoColors;<span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.PointsMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.PointsMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PointsMaterial;</td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PointsMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.map<span class="pl-k">=</span>a.map;<span class="pl-v">this</span>.<span class="pl-c1">size</span><span class="pl-k">=</span>a.<span class="pl-c1">size</span>;<span class="pl-v">this</span>.sizeAttenuation<span class="pl-k">=</span>a.sizeAttenuation;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span>a.vertexColors;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">PointCloudMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>(a)};</td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ParticleBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleSystemMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>(a)};</td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ShaderMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ShaderMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.defines<span class="pl-k">=</span>{};<span class="pl-v">this</span>.uniforms<span class="pl-k">=</span>{};<span class="pl-v">this</span>.vertexShader<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.fragmentShader<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.shading<span class="pl-k">=</span><span class="pl-c1">THREE</span>.SmoothShading;<span class="pl-v">this</span>.linewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframe<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.lights<span class="pl-k">=</span><span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NoColors;<span class="pl-v">this</span>.derivatives<span class="pl-k">=</span><span class="pl-v">this</span>.morphNormals<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span><span class="pl-v">this</span>.skinning<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.defaultAttributeValues<span class="pl-k">=</span>{color<span class="pl-k">:</span>[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],uv<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],uv2<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>]};<span class="pl-v">this</span>.index0AttributeName<span class="pl-k">=void</span> <span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.setValues(a))};<span class="pl-c1">THREE.ShaderMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.ShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.ShaderMaterial;</td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.ShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.fragmentShader<span class="pl-k">=</span>a.fragmentShader;<span class="pl-v">this</span>.vertexShader<span class="pl-k">=</span>a.vertexShader;<span class="pl-v">this</span>.uniforms<span class="pl-k">=</span><span class="pl-c1">THREE</span>.UniformsUtils.clone(a.uniforms);<span class="pl-v">this</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>;<span class="pl-v">this</span>.defines<span class="pl-k">=</span>a.defines;<span class="pl-v">this</span>.shading<span class="pl-k">=</span>a.shading;<span class="pl-v">this</span>.wireframe<span class="pl-k">=</span>a.wireframe;<span class="pl-v">this</span>.wireframeLinewidth<span class="pl-k">=</span>a.wireframeLinewidth;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-v">this</span>.lights<span class="pl-k">=</span>a.lights;<span class="pl-v">this</span>.vertexColors<span class="pl-k">=</span>a.vertexColors;<span class="pl-v">this</span>.skinning<span class="pl-k">=</span>a.skinning;<span class="pl-v">this</span>.morphTargets<span class="pl-k">=</span>a.morphTargets;<span class="pl-v">this</span>.morphNormals<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line">a.morphNormals;<span class="pl-v">this</span>.derivatives<span class="pl-k">=</span>a.derivatives;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE.ShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.uniforms<span class="pl-k">=</span><span class="pl-v">this</span>.uniforms;a.<span class="pl-c1">attributes</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">attributes</span>;a.vertexShader<span class="pl-k">=</span><span class="pl-v">this</span>.vertexShader;a.fragmentShader<span class="pl-k">=</span><span class="pl-v">this</span>.fragmentShader;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">RawShaderMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.ShaderMaterial.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>RawShaderMaterial<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE.RawShaderMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.ShaderMaterial.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.RawShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.RawShaderMaterial;<span class="pl-c1">THREE</span>.<span class="pl-en">SpriteMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SpriteMaterial<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-v">this</span>.map<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.rotation<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.fog<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.setValues(a)};<span class="pl-c1">THREE.SpriteMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SpriteMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SpriteMaterial;</td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SpriteMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Material.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">color</span>.copy(a.<span class="pl-c1">color</span>);<span class="pl-v">this</span>.map<span class="pl-k">=</span>a.map;<span class="pl-v">this</span>.rotation<span class="pl-k">=</span>a.rotation;<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Texture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){<span class="pl-c1">Object</span>.defineProperty(<span class="pl-v">this</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>id<span class="pl-pds">&quot;</span></span>,{value<span class="pl-k">:</span><span class="pl-c1">THREE</span>.TextureIdCount<span class="pl-k">++</span>});<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.sourceFile<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.image<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Texture.DEFAULT_IMAGE;<span class="pl-v">this</span>.mipmaps<span class="pl-k">=</span>[];<span class="pl-v">this</span>.mapping<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Texture.DEFAULT_MAPPING;<span class="pl-v">this</span>.wrapS<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping;<span class="pl-v">this</span>.wrapT<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping;<span class="pl-v">this</span>.magFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearFilter;<span class="pl-v">this</span>.minFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearMipMapLinearFilter;</td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.anisotropy<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">?</span>k<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.format<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">THREE</span>.RGBAFormat;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">?</span>h<span class="pl-k">:</span><span class="pl-c1">THREE</span>.UnsignedByteType;<span class="pl-v">this</span>.offset<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.repeat<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-v">this</span>.generateMipmaps<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.premultiplyAlpha<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.flipY<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.unpackAlignment<span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-v">this</span>.<span class="pl-c1">version</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.onUpdate<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.Texture.DEFAULT_IMAGE<span class="pl-k">=void</span> <span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.Texture.DEFAULT_MAPPING<span class="pl-k">=</span><span class="pl-c1">THREE</span>.UVMapping;</td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Texture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Texture,set <span class="pl-en">needsUpdate</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">version</span><span class="pl-k">++</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.image<span class="pl-k">=</span>a.image;<span class="pl-v">this</span>.mipmaps<span class="pl-k">=</span>a.mipmaps.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>);<span class="pl-v">this</span>.mapping<span class="pl-k">=</span>a.mapping;<span class="pl-v">this</span>.wrapS<span class="pl-k">=</span>a.wrapS;<span class="pl-v">this</span>.wrapT<span class="pl-k">=</span>a.wrapT;<span class="pl-v">this</span>.magFilter<span class="pl-k">=</span>a.magFilter;<span class="pl-v">this</span>.minFilter<span class="pl-k">=</span>a.minFilter;<span class="pl-v">this</span>.anisotropy<span class="pl-k">=</span>a.anisotropy;<span class="pl-v">this</span>.format<span class="pl-k">=</span>a.format;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>a.<span class="pl-c1">type</span>;<span class="pl-v">this</span>.offset.copy(a.offset);<span class="pl-v">this</span>.repeat.copy(a.repeat);<span class="pl-v">this</span>.generateMipmaps<span class="pl-k">=</span>a.generateMipmaps;<span class="pl-v">this</span>.premultiplyAlpha<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line">a.premultiplyAlpha;<span class="pl-v">this</span>.flipY<span class="pl-k">=</span>a.flipY;<span class="pl-v">this</span>.unpackAlignment<span class="pl-k">=</span>a.unpackAlignment;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">toJSON</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.textures[<span class="pl-v">this</span>.uuid])<span class="pl-k">return</span> a.textures[<span class="pl-v">this</span>.uuid];<span class="pl-k">var</span> b<span class="pl-k">=</span>{metadata<span class="pl-k">:</span>{version<span class="pl-k">:</span><span class="pl-c1">4.4</span>,type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Texture<span class="pl-pds">&quot;</span></span>,generator<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Texture.toJSON<span class="pl-pds">&quot;</span></span>},uuid<span class="pl-k">:</span><span class="pl-v">this</span>.uuid,name<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">name</span>,mapping<span class="pl-k">:</span><span class="pl-v">this</span>.mapping,repeat<span class="pl-k">:</span>[<span class="pl-v">this</span>.repeat.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.repeat.<span class="pl-c1">y</span>],offset<span class="pl-k">:</span>[<span class="pl-v">this</span>.offset.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.offset.<span class="pl-c1">y</span>],wrap<span class="pl-k">:</span>[<span class="pl-v">this</span>.wrapS,<span class="pl-v">this</span>.wrapT],minFilter<span class="pl-k">:</span><span class="pl-v">this</span>.minFilter,magFilter<span class="pl-k">:</span><span class="pl-v">this</span>.magFilter,anisotropy<span class="pl-k">:</span><span class="pl-v">this</span>.anisotropy};<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.image){<span class="pl-k">var</span> c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.image;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c.uuid<span class="pl-k">&amp;&amp;</span>(c.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID());<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.<span class="pl-c1">images</span>[c.uuid]){<span class="pl-k">var</span> d<span class="pl-k">=</span>a.<span class="pl-c1">images</span>,e<span class="pl-k">=</span>c.uuid,g<span class="pl-k">=</span>c.uuid,f;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.toDataURL<span class="pl-k">?</span>f<span class="pl-k">=</span>c<span class="pl-k">:</span>(f<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),f.<span class="pl-c1">width</span><span class="pl-k">=</span>c.<span class="pl-c1">width</span>,f.<span class="pl-c1">height</span><span class="pl-k">=</span>c.<span class="pl-c1">height</span>,f.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).drawImage(c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,c.<span class="pl-c1">width</span>,c.<span class="pl-c1">height</span>));f<span class="pl-k">=</span><span class="pl-c1">2048</span><span class="pl-k">&lt;</span>f.<span class="pl-c1">width</span><span class="pl-k">||</span><span class="pl-c1">2048</span><span class="pl-k">&lt;</span>f.<span class="pl-c1">height</span><span class="pl-k">?</span>f.toDataURL(<span class="pl-s"><span class="pl-pds">&quot;</span>image/jpeg<span class="pl-pds">&quot;</span></span>,.<span class="pl-c1">6</span>)<span class="pl-k">:</span>f.toDataURL(<span class="pl-s"><span class="pl-pds">&quot;</span>image/png<span class="pl-pds">&quot;</span></span>);d[e]<span class="pl-k">=</span>{uuid<span class="pl-k">:</span>g,url<span class="pl-k">:</span>f}}b.image<span class="pl-k">=</span>c.uuid}<span class="pl-k">return</span> a.textures[<span class="pl-v">this</span>.uuid]<span class="pl-k">=</span>b},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})},<span class="pl-en">transformUv</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.mapping<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.UVMapping){a.multiply(<span class="pl-v">this</span>.repeat);a.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.offset);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">x</span>)<span class="pl-k">switch</span>(<span class="pl-v">this</span>.wrapS){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.RepeatWrapping<span class="pl-k">:</span>a.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">x</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.ClampToEdgeWrapping<span class="pl-k">:</span>a.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.MirroredRepeatWrapping<span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">x</span>)<span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">?</span>a.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a.<span class="pl-c1">x</span>)<span class="pl-k">-</span>a.<span class="pl-c1">x</span><span class="pl-k">:</span>a.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">x</span>)}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">y</span>)<span class="pl-k">switch</span>(<span class="pl-v">this</span>.wrapT){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.RepeatWrapping<span class="pl-k">:</span>a.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">y</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.ClampToEdgeWrapping<span class="pl-k">:</span>a.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>a.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.MirroredRepeatWrapping<span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">y</span>)<span class="pl-k">%</span></td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>)<span class="pl-k">?</span>a.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a.<span class="pl-c1">y</span>)<span class="pl-k">-</span>a.<span class="pl-c1">y</span><span class="pl-k">:</span>a.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">y</span>)}<span class="pl-v">this</span>.flipY<span class="pl-k">&amp;&amp;</span>(a.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>)}}};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.TextureIdCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">CanvasTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b,c,d,e,g,f,h,k);<span class="pl-v">this</span>.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE.CanvasTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CanvasTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CanvasTexture;</td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubeTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">THREE</span>.CubeReflectionMapping;<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b,c,d,e,g,f,h,k);<span class="pl-v">this</span>.<span class="pl-c1">images</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.flipY<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.CubeTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CubeTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CubeTexture;<span class="pl-c1">THREE.CubeTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.<span class="pl-c1">images</span><span class="pl-k">=</span>a.<span class="pl-c1">images</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CompressedTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">n</span>){<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,<span class="pl-c1">null</span>,g,f,h,k,l,d,e,n);<span class="pl-v">this</span>.image<span class="pl-k">=</span>{width<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c};<span class="pl-v">this</span>.mipmaps<span class="pl-k">=</span>a;<span class="pl-v">this</span>.generateMipmaps<span class="pl-k">=</span><span class="pl-v">this</span>.flipY<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.CompressedTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CompressedTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CompressedTexture;</td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DataTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">n</span>){<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,<span class="pl-c1">null</span>,g,f,h,k,l,d,e,n);<span class="pl-v">this</span>.image<span class="pl-k">=</span>{data<span class="pl-k">:</span>a,width<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c};<span class="pl-v">this</span>.magFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">?</span>k<span class="pl-k">:</span><span class="pl-c1">THREE</span>.NearestFilter;<span class="pl-v">this</span>.minFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">?</span>l<span class="pl-k">:</span><span class="pl-c1">THREE</span>.NearestFilter;<span class="pl-v">this</span>.generateMipmaps<span class="pl-k">=</span><span class="pl-v">this</span>.flipY<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.DataTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.DataTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.DataTexture;</td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">VideoTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b,c,d,e,g,f,h,k);<span class="pl-v">this</span>.generateMipmaps<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-v">this</span>,<span class="pl-en">n</span><span class="pl-k">=</span><span class="pl-k">function</span>(){requestAnimationFrame(n);a.<span class="pl-c1">readyState</span><span class="pl-k">===</span>a.HAVE_ENOUGH_DATA<span class="pl-k">&amp;&amp;</span>(l.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>)};n()};<span class="pl-c1">THREE.VideoTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Texture.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.VideoTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.VideoTexture;<span class="pl-c1">THREE</span>.<span class="pl-en">Group</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Group<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE.Group</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Group</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Group;<span class="pl-c1">THREE</span>.<span class="pl-en">Points</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Points<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.geometry<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-v">this</span>.material<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.PointsMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()})};<span class="pl-c1">THREE.Points</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Points</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Points;</td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Points</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Ray</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>b.distanceSqToPoint(a);<span class="pl-k">if</span>(f<span class="pl-k">&lt;</span>k){<span class="pl-k">var</span> h<span class="pl-k">=</span>b.closestPointToPoint(a);h.applyMatrix4(g.matrixWorld);<span class="pl-k">var</span> l<span class="pl-k">=</span>c.ray.origin.distanceTo(h);l<span class="pl-k">&lt;</span>c.near<span class="pl-k">||</span>l<span class="pl-k">&gt;</span>c.far<span class="pl-k">||</span>d.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>l,distanceToRay<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f),point<span class="pl-k">:</span>h.clone(),index<span class="pl-k">:</span>e,face<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span>g})}}<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>,f<span class="pl-k">=</span>g.geometry,h<span class="pl-k">=</span>c.params.Points.threshold;a.getInverse(<span class="pl-v">this</span>.matrixWorld);b.copy(c.ray).applyMatrix4(a);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>f.boundingBox<span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line">b.isIntersectionBox(f.boundingBox)){<span class="pl-k">var</span> h<span class="pl-k">=</span>h<span class="pl-k">/</span>((<span class="pl-v">this</span>.scale.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.scale.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.scale.<span class="pl-c1">z</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>),k<span class="pl-k">=</span>h<span class="pl-k">*</span>h,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry){<span class="pl-k">var</span> l<span class="pl-k">=</span>f.<span class="pl-c1">index</span>,f<span class="pl-k">=</span>f.<span class="pl-c1">attributes</span>.position.array;<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>l)<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span>l.array,l<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>p;l<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>n[l];h.fromArray(f,<span class="pl-c1">3</span><span class="pl-k">*</span>m);e(h,m)}<span class="pl-k">else</span> <span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>f.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)h.fromArray(f,<span class="pl-c1">3</span><span class="pl-k">*</span>l),e(h,l)}<span class="pl-k">else</span> <span class="pl-k">for</span>(h<span class="pl-k">=</span>f.vertices,l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>h.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)e(h[l],l)}}}();<span class="pl-c1">THREE.Points</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.geometry,<span class="pl-v">this</span>.material)).copy(<span class="pl-v">this</span>)};</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Points</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.geometries[<span class="pl-v">this</span>.geometry.uuid]<span class="pl-k">&amp;&amp;</span>(a.geometries[<span class="pl-v">this</span>.geometry.uuid]<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.toJSON());<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">&amp;&amp;</span>(a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">=</span><span class="pl-v">this</span>.material.toJSON());b.<span class="pl-c1">object</span>.geometry<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.uuid;b.<span class="pl-c1">object</span>.material<span class="pl-k">=</span><span class="pl-v">this</span>.material.uuid;<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PointCloud</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.PointCloud has been renamed to THREE.Points.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Points</span>(a,b)};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleSystem</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ParticleSystem has been renamed to THREE.Points.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Points</span>(a,b)};</td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Line</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span>c)<span class="pl-k">return</span> <span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-k">new</span> <span class="pl-en">THREE.LineSegments</span>(a,b);<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Line<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.geometry<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-v">this</span>.material<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()})};<span class="pl-c1">THREE.Line</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Line;</td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Ray</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>d.linePrecision,g<span class="pl-k">=</span>g<span class="pl-k">*</span>g,f<span class="pl-k">=</span><span class="pl-v">this</span>.geometry;<span class="pl-c1">null</span><span class="pl-k">===</span>f.boundingSphere<span class="pl-k">&amp;&amp;</span>f.computeBoundingSphere();c.copy(f.boundingSphere);c.applyMatrix4(<span class="pl-v">this</span>.matrixWorld);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>d.ray.isIntersectionSphere(c)){a.getInverse(<span class="pl-v">this</span>.matrixWorld);b.copy(d.ray).applyMatrix4(a);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span><span class="pl-v">this</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.LineSegments<span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.BufferGeometry){<span class="pl-k">var</span> m<span class="pl-k">=</span>f.<span class="pl-c1">index</span>,q<span class="pl-k">=</span>f.<span class="pl-c1">attributes</span>;<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>m)<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span>m.array,q<span class="pl-k">=</span>q.position.array,m<span class="pl-k">=</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span>f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;m<span class="pl-k">&lt;</span>t;m<span class="pl-k">+=</span>p){<span class="pl-k">var</span> r<span class="pl-k">=</span>f[m<span class="pl-k">+</span><span class="pl-c1">1</span>];h.fromArray(q,<span class="pl-c1">3</span><span class="pl-k">*</span>f[m]);k.fromArray(q,<span class="pl-c1">3</span><span class="pl-k">*</span>r);r<span class="pl-k">=</span>b.distanceSqToSegment(h,k,n,l);r<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>(n.applyMatrix4(<span class="pl-v">this</span>.matrixWorld),r<span class="pl-k">=</span>d.ray.origin.distanceTo(n),r<span class="pl-k">&lt;</span>d.near<span class="pl-k">||</span>r<span class="pl-k">&gt;</span>d.far<span class="pl-k">||</span>e.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>r,point<span class="pl-k">:</span>l.clone().applyMatrix4(<span class="pl-v">this</span>.matrixWorld),index<span class="pl-k">:</span>m,face<span class="pl-k">:</span><span class="pl-c1">null</span>,faceIndex<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-v">this</span>}))}<span class="pl-k">else</span> <span class="pl-k">for</span>(q<span class="pl-k">=</span>q.position.array,m<span class="pl-k">=</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span>q.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">1</span>;m<span class="pl-k">&lt;</span>t;m<span class="pl-k">+=</span>p)h.fromArray(q,<span class="pl-c1">3</span><span class="pl-k">*</span>m),k.fromArray(q,</td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-c1">3</span>),r<span class="pl-k">=</span>b.distanceSqToSegment(h,k,n,l),r<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>(n.applyMatrix4(<span class="pl-v">this</span>.matrixWorld),r<span class="pl-k">=</span>d.ray.origin.distanceTo(n),r<span class="pl-k">&lt;</span>d.near<span class="pl-k">||</span>r<span class="pl-k">&gt;</span>d.far<span class="pl-k">||</span>e.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>r,point<span class="pl-k">:</span>l.clone().applyMatrix4(<span class="pl-v">this</span>.matrixWorld),index<span class="pl-k">:</span>m,face<span class="pl-k">:</span><span class="pl-c1">null</span>,faceIndex<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-v">this</span>}))}<span class="pl-k">else</span> <span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry)<span class="pl-k">for</span>(h<span class="pl-k">=</span>f.vertices,k<span class="pl-k">=</span>h.<span class="pl-c1">length</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>;m<span class="pl-k">+=</span>p)r<span class="pl-k">=</span>b.distanceSqToSegment(h[m],h[m<span class="pl-k">+</span><span class="pl-c1">1</span>],n,l),r<span class="pl-k">&gt;</span>g<span class="pl-k">||</span>(n.applyMatrix4(<span class="pl-v">this</span>.matrixWorld),r<span class="pl-k">=</span>d.ray.origin.distanceTo(n),r<span class="pl-k">&lt;</span>d.near<span class="pl-k">||</span>r<span class="pl-k">&gt;</span>d.far<span class="pl-k">||</span>e.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>r,point<span class="pl-k">:</span>l.clone().applyMatrix4(<span class="pl-v">this</span>.matrixWorld),</td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line">index<span class="pl-k">:</span>m,face<span class="pl-k">:</span><span class="pl-c1">null</span>,faceIndex<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-v">this</span>}))}}}();<span class="pl-c1">THREE.Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.geometry,<span class="pl-v">this</span>.material)).copy(<span class="pl-v">this</span>)};</td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.geometries[<span class="pl-v">this</span>.geometry.uuid]<span class="pl-k">&amp;&amp;</span>(a.geometries[<span class="pl-v">this</span>.geometry.uuid]<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.toJSON());<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">&amp;&amp;</span>(a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">=</span><span class="pl-v">this</span>.material.toJSON());b.<span class="pl-c1">object</span>.geometry<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.uuid;b.<span class="pl-c1">object</span>.material<span class="pl-k">=</span><span class="pl-v">this</span>.material.uuid;<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.LineStrip<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.LinePieces<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">LineSegments</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Line.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LineSegments<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LineSegments</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Line.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.LineSegments</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.LineSegments;<span class="pl-c1">THREE</span>.<span class="pl-en">Mesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Mesh<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.geometry<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-v">this</span>.material<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()});<span class="pl-v">this</span>.updateMorphTargets()};<span class="pl-c1">THREE.Mesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Mesh;</td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMorphTargets</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.geometry.morphTargets<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.geometry.morphTargets.<span class="pl-c1">length</span>){<span class="pl-v">this</span>.morphTargetBase<span class="pl-k">=-</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.morphTargetInfluences<span class="pl-k">=</span>[];<span class="pl-v">this</span>.morphTargetDictionary<span class="pl-k">=</span>{};<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.morphTargets.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)<span class="pl-v">this</span>.morphTargetInfluences.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>),<span class="pl-v">this</span>.morphTargetDictionary[<span class="pl-v">this</span>.geometry.morphTargets[a].<span class="pl-c1">name</span>]<span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getMorphTargetIndexByName</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.morphTargetDictionary[a])<span class="pl-k">return</span> <span class="pl-v">this</span>.morphTargetDictionary[a];<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Mesh.getMorphTargetIndexByName: morph target <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> does not exist. Returning 0.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.Triangle.barycoordFromPoint(a,b,c,d,q);e.multiplyScalar(q.<span class="pl-c1">x</span>);f.multiplyScalar(q.<span class="pl-c1">y</span>);g.multiplyScalar(q.<span class="pl-c1">z</span>);e.<span class="pl-c1">add</span>(f).<span class="pl-c1">add</span>(g);<span class="pl-k">return</span> e.clone()}<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Ray</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;</td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">w</span>){<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-v">this</span>.geometry,B<span class="pl-k">=</span><span class="pl-v">this</span>.material;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>B<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>v.boundingSphere<span class="pl-k">&amp;&amp;</span>v.computeBoundingSphere(),d.copy(v.boundingSphere),d.applyMatrix4(<span class="pl-v">this</span>.matrixWorld),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>q.ray.isIntersectionSphere(d)<span class="pl-k">&amp;&amp;</span>(b.getInverse(<span class="pl-v">this</span>.matrixWorld),c.copy(q.ray).applyMatrix4(b),<span class="pl-c1">null</span><span class="pl-k">===</span>v.boundingBox<span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>c.isIntersectionBox(v.boundingBox)))){<span class="pl-k">var</span> x,H,I;<span class="pl-k">if</span>(v <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry)<span class="pl-k">if</span>(x<span class="pl-k">=</span>v.<span class="pl-c1">index</span>,v<span class="pl-k">=</span>v.<span class="pl-c1">attributes</span>,<span class="pl-c1">null</span><span class="pl-k">!==</span>x)<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span>x.array,D<span class="pl-k">=</span>v.position.array,G<span class="pl-k">=</span><span class="pl-c1">0</span>,O<span class="pl-k">=</span>z.<span class="pl-c1">length</span>;G<span class="pl-k">&lt;</span>O;G<span class="pl-k">+=</span><span class="pl-c1">3</span>){x<span class="pl-k">=</span>z[G];H<span class="pl-k">=</span>z[G<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>];I<span class="pl-k">=</span>z[G<span class="pl-k">+</span><span class="pl-c1">2</span>];e.fromArray(D,<span class="pl-c1">3</span><span class="pl-k">*</span>x);g.fromArray(D,<span class="pl-c1">3</span><span class="pl-k">*</span>H);f.fromArray(D,<span class="pl-c1">3</span><span class="pl-k">*</span>I);<span class="pl-k">if</span>(B.side<span class="pl-k">===</span><span class="pl-c1">THREE</span>.BackSide){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c.intersectTriangle(f,g,e,<span class="pl-k">!</span><span class="pl-c1">0</span>,t))<span class="pl-k">continue</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c.intersectTriangle(e,g,f,B.side<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.DoubleSide,t))<span class="pl-k">continue</span>;r.copy(t);r.applyMatrix4(<span class="pl-v">this</span>.matrixWorld);<span class="pl-k">var</span> C<span class="pl-k">=</span>q.ray.origin.distanceTo(r);<span class="pl-k">if</span>(<span class="pl-k">!</span>(C<span class="pl-k">&lt;</span>q.near<span class="pl-k">||</span>C<span class="pl-k">&gt;</span>q.far)){<span class="pl-k">var</span> F;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>v.uv<span class="pl-k">&amp;&amp;</span>(F<span class="pl-k">=</span>v.uv.array,n.fromArray(F,<span class="pl-c1">2</span><span class="pl-k">*</span>x),p.fromArray(F,<span class="pl-c1">2</span><span class="pl-k">*</span>H),m.fromArray(F,<span class="pl-c1">2</span><span class="pl-k">*</span>I),F<span class="pl-k">=</span>a(t,e,g,f,n,p,m));w.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>C,point<span class="pl-k">:</span>r.clone(),uv<span class="pl-k">:</span>F,face<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(x,</td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line">H,I,<span class="pl-c1">THREE</span>.Triangle.normal(e,g,f)),faceIndex<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(G<span class="pl-k">/</span><span class="pl-c1">3</span>),object<span class="pl-k">:</span><span class="pl-v">this</span>})}}<span class="pl-k">else</span> <span class="pl-k">for</span>(D<span class="pl-k">=</span>v.position.array,G<span class="pl-k">=</span><span class="pl-c1">0</span>,O<span class="pl-k">=</span>D.<span class="pl-c1">length</span>;G<span class="pl-k">&lt;</span>O;G<span class="pl-k">+=</span><span class="pl-c1">9</span>){e.fromArray(D,G);g.fromArray(D,G<span class="pl-k">+</span><span class="pl-c1">3</span>);f.fromArray(D,G<span class="pl-k">+</span><span class="pl-c1">6</span>);<span class="pl-k">if</span>(B.side<span class="pl-k">===</span><span class="pl-c1">THREE</span>.BackSide){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c.intersectTriangle(f,g,e,<span class="pl-k">!</span><span class="pl-c1">0</span>,t))<span class="pl-k">continue</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c.intersectTriangle(e,g,f,B.side<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.DoubleSide,t))<span class="pl-k">continue</span>;r.copy(t);r.applyMatrix4(<span class="pl-v">this</span>.matrixWorld);C<span class="pl-k">=</span>q.ray.origin.distanceTo(r);C<span class="pl-k">&lt;</span>q.near<span class="pl-k">||</span>C<span class="pl-k">&gt;</span>q.far<span class="pl-k">||</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>v.uv<span class="pl-k">&amp;&amp;</span>(F<span class="pl-k">=</span>v.uv.array,n.fromArray(F,G),p.fromArray(F,G<span class="pl-k">+</span><span class="pl-c1">2</span>),m.fromArray(F,</td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line">G<span class="pl-k">+</span><span class="pl-c1">4</span>),F<span class="pl-k">=</span>a(t,e,g,f,n,p,m)),x<span class="pl-k">=</span>G<span class="pl-k">/</span><span class="pl-c1">3</span>,H<span class="pl-k">=</span>x<span class="pl-k">+</span><span class="pl-c1">1</span>,I<span class="pl-k">=</span>x<span class="pl-k">+</span><span class="pl-c1">2</span>,w.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>C,point<span class="pl-k">:</span>r.clone(),uv<span class="pl-k">:</span>F,face<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(x,H,I,<span class="pl-c1">THREE</span>.Triangle.normal(e,g,f)),index<span class="pl-k">:</span>x,object<span class="pl-k">:</span><span class="pl-v">this</span>}))}<span class="pl-k">else</span> <span class="pl-k">if</span>(v <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry)<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span>B <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshFaceMaterial,D<span class="pl-k">=!</span><span class="pl-c1">0</span><span class="pl-k">===</span>z<span class="pl-k">?</span>B.materials<span class="pl-k">:</span><span class="pl-c1">null</span>,G<span class="pl-k">=</span>v.vertices,O<span class="pl-k">=</span>v.faces,K<span class="pl-k">=</span><span class="pl-c1">0</span>,L<span class="pl-k">=</span>O.<span class="pl-c1">length</span>;K<span class="pl-k">&lt;</span>L;K<span class="pl-k">++</span>){<span class="pl-k">var</span> E<span class="pl-k">=</span>O[K],C<span class="pl-k">=!</span><span class="pl-c1">0</span><span class="pl-k">===</span>z<span class="pl-k">?</span>D[E.materialIndex]<span class="pl-k">:</span>B;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>C){x<span class="pl-k">=</span>G[E.a];H<span class="pl-k">=</span>G[E.b];I<span class="pl-k">=</span>G[E.c];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>C.morphTargets){<span class="pl-k">var</span> J<span class="pl-k">=</span>v.morphTargets,y<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargetInfluences;e.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);g.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line">f.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> P<span class="pl-k">=</span><span class="pl-c1">0</span>,U<span class="pl-k">=</span>J.<span class="pl-c1">length</span>;P<span class="pl-k">&lt;</span>U;P<span class="pl-k">++</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span>y[P];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>Q){<span class="pl-k">var</span> R<span class="pl-k">=</span>J[P].vertices;e.addScaledVector(h.subVectors(R[E.a],x),Q);g.addScaledVector(k.subVectors(R[E.b],H),Q);f.addScaledVector(l.subVectors(R[E.c],I),Q)}}e.<span class="pl-c1">add</span>(x);g.<span class="pl-c1">add</span>(H);f.<span class="pl-c1">add</span>(I);x<span class="pl-k">=</span>e;H<span class="pl-k">=</span>g;I<span class="pl-k">=</span>f}<span class="pl-k">if</span>(C.side<span class="pl-k">===</span><span class="pl-c1">THREE</span>.BackSide){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c.intersectTriangle(I,H,x,<span class="pl-k">!</span><span class="pl-c1">0</span>,t))<span class="pl-k">continue</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c.intersectTriangle(x,H,I,C.side<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.DoubleSide,t))<span class="pl-k">continue</span>;r.copy(t);r.applyMatrix4(<span class="pl-v">this</span>.matrixWorld);C<span class="pl-k">=</span>q.ray.origin.distanceTo(r);C<span class="pl-k">&lt;</span>q.near<span class="pl-k">||</span>C<span class="pl-k">&gt;</span>q.far<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>v.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(F<span class="pl-k">=</span>v.faceVertexUvs[<span class="pl-c1">0</span>][K],n.copy(F[<span class="pl-c1">0</span>]),p.copy(F[<span class="pl-c1">1</span>]),m.copy(F[<span class="pl-c1">2</span>]),F<span class="pl-k">=</span>a(t,x,H,I,n,p,m)),w.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span>C,point<span class="pl-k">:</span>r.clone(),uv<span class="pl-k">:</span>F,face<span class="pl-k">:</span>E,faceIndex<span class="pl-k">:</span>K,object<span class="pl-k">:</span><span class="pl-v">this</span>}))}}}}}();<span class="pl-c1">THREE.Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.geometry,<span class="pl-v">this</span>.material)).copy(<span class="pl-v">this</span>)};</td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.geometries[<span class="pl-v">this</span>.geometry.uuid]<span class="pl-k">&amp;&amp;</span>(a.geometries[<span class="pl-v">this</span>.geometry.uuid]<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.toJSON(a));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">&amp;&amp;</span>(a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">=</span><span class="pl-v">this</span>.material.toJSON(a));b.<span class="pl-c1">object</span>.geometry<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.uuid;b.<span class="pl-c1">object</span>.material<span class="pl-k">=</span><span class="pl-v">this</span>.material.uuid;<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-en">Bone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Bone<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.skin<span class="pl-k">=</span>a};<span class="pl-c1">THREE.Bone</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Bone</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Bone;<span class="pl-c1">THREE.Bone</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.skin<span class="pl-k">=</span>a.skin;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Skeleton</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.useVertexTexture<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.identityMatrix<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;a<span class="pl-k">=</span>a<span class="pl-k">||</span>[];<span class="pl-v">this</span>.bones<span class="pl-k">=</span>a.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>);<span class="pl-v">this</span>.useVertexTexture<span class="pl-k">?</span>(a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>),a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.nextPowerOfTwo(<span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a)),<span class="pl-v">this</span>.boneTextureHeight<span class="pl-k">=</span><span class="pl-v">this</span>.boneTextureWidth<span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,<span class="pl-c1">4</span>),<span class="pl-v">this</span>.boneMatrices<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-v">this</span>.boneTextureWidth<span class="pl-k">*</span><span class="pl-v">this</span>.boneTextureHeight<span class="pl-k">*</span><span class="pl-c1">4</span>),<span class="pl-v">this</span>.boneTexture<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>(<span class="pl-v">this</span>.boneMatrices,<span class="pl-v">this</span>.boneTextureWidth,<span class="pl-v">this</span>.boneTextureHeight,<span class="pl-c1">THREE</span>.RGBAFormat,<span class="pl-c1">THREE</span>.FloatType))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.boneMatrices<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span><span class="pl-k">*</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-v">this</span>.calculateInverses();<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-v">this</span>.bones.<span class="pl-c1">length</span><span class="pl-k">===</span>b.<span class="pl-c1">length</span>)<span class="pl-v">this</span>.boneInverses<span class="pl-k">=</span>b.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>);<span class="pl-k">else</span> <span class="pl-k">for</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Skeleton bonInverses is the wrong length.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.boneInverses<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>a;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.boneInverses.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>)};</td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">calculateInverses</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.boneInverses<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-v">this</span>.bones[a]<span class="pl-k">&amp;&amp;</span>c.getInverse(<span class="pl-v">this</span>.bones[a].matrixWorld);<span class="pl-v">this</span>.boneInverses.<span class="pl-c1">push</span>(c)}};</td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)(a<span class="pl-k">=</span><span class="pl-v">this</span>.bones[b])<span class="pl-k">&amp;&amp;</span>a.matrixWorld.getInverse(<span class="pl-v">this</span>.boneInverses[b]);b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.bones[b])a.<span class="pl-c1">parent</span><span class="pl-k">?</span>(a.matrix.getInverse(a.<span class="pl-c1">parent</span>.matrixWorld),a.matrix.multiply(a.matrixWorld))<span class="pl-k">:</span>a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)};</td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)a.multiplyMatrices(<span class="pl-v">this</span>.bones[b]<span class="pl-k">?</span><span class="pl-v">this</span>.bones[b].matrixWorld<span class="pl-k">:</span><span class="pl-v">this</span>.identityMatrix,<span class="pl-v">this</span>.boneInverses[b]),a.flattenToArrayOffset(<span class="pl-v">this</span>.boneMatrices,<span class="pl-c1">16</span><span class="pl-k">*</span>b);<span class="pl-v">this</span>.useVertexTexture<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.boneTexture.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>)}}();<span class="pl-c1">THREE.Skeleton</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Skeleton</span>(<span class="pl-v">this</span>.bones,<span class="pl-v">this</span>.boneInverses,<span class="pl-v">this</span>.useVertexTexture)};</td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SkinnedMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SkinnedMesh<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.bindMode<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>attached<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.bindMatrix<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-v">this</span>.bindMatrixInverse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;a<span class="pl-k">=</span>[];<span class="pl-k">if</span>(<span class="pl-v">this</span>.geometry<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.geometry.bones){<span class="pl-k">for</span>(<span class="pl-k">var</span> d,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.bones.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;<span class="pl-k">++</span>e)d<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.bones[e],b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Bone</span>(<span class="pl-v">this</span>),a.<span class="pl-c1">push</span>(b),b.<span class="pl-c1">name</span><span class="pl-k">=</span>d.<span class="pl-c1">name</span>,b.position.fromArray(d.pos),b.quaternion.fromArray(d.rotq),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d.scl<span class="pl-k">&amp;&amp;</span>b.scale.fromArray(d.scl);e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.bones.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;<span class="pl-k">++</span>e)d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.geometry.bones[e],<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>d.<span class="pl-c1">parent</span><span class="pl-k">?</span>a[d.<span class="pl-c1">parent</span>].<span class="pl-c1">add</span>(a[e])<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">add</span>(a[e])}<span class="pl-v">this</span>.normalizeSkinWeights();<span class="pl-v">this</span>.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-v">this</span>.bind(<span class="pl-k">new</span> <span class="pl-en">THREE.Skeleton</span>(a,<span class="pl-k">void</span> <span class="pl-c1">0</span>,c),<span class="pl-v">this</span>.matrixWorld)};<span class="pl-c1">THREE.SkinnedMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SkinnedMesh;<span class="pl-c1">THREE.SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bind</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.skeleton<span class="pl-k">=</span>a;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-v">this</span>.skeleton.calculateInverses(),b<span class="pl-k">=</span><span class="pl-v">this</span>.matrixWorld);<span class="pl-v">this</span>.bindMatrix.copy(b);<span class="pl-v">this</span>.bindMatrixInverse.getInverse(b)};</td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.skeleton.pose()};<span class="pl-c1">THREE.SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">normalizeSkinWeights</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-v">this</span>.geometry <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry)<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-v">this</span>.geometry.skinIndices.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.skinWeights[a],c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>b.lengthManhattan();<span class="pl-c1">Infinity</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>b.multiplyScalar(c)<span class="pl-k">:</span>b.set(<span class="pl-c1">1</span>)}};</td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">prototype</span>.updateMatrixWorld.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-s"><span class="pl-pds">&quot;</span>attached<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-v">this</span>.bindMode<span class="pl-k">?</span><span class="pl-v">this</span>.bindMatrixInverse.getInverse(<span class="pl-v">this</span>.matrixWorld)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>detached<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-v">this</span>.bindMode<span class="pl-k">?</span><span class="pl-v">this</span>.bindMatrixInverse.getInverse(<span class="pl-v">this</span>.bindMatrix)<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.SkinnedMesh unrecognized bindMode: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.bindMode)};<span class="pl-c1">THREE.SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.geometry,<span class="pl-v">this</span>.material,<span class="pl-v">this</span>.useVertexTexture)).copy(<span class="pl-v">this</span>)};</td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MorphAnimMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MorphAnimMesh<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.duration<span class="pl-k">=</span><span class="pl-c1">1E3</span>;<span class="pl-v">this</span>.mirroredLoop<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.currentKeyframe<span class="pl-k">=</span><span class="pl-v">this</span>.lastKeyframe<span class="pl-k">=</span><span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.direction<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.setFrameRange(<span class="pl-c1">0</span>,a.morphTargets.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)};<span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.MorphAnimMesh;</td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setFrameRange</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.startKeyframe<span class="pl-k">=</span>a;<span class="pl-v">this</span>.endKeyframe<span class="pl-k">=</span>b;<span class="pl-v">this</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-v">this</span>.endKeyframe<span class="pl-k">-</span><span class="pl-v">this</span>.startKeyframe<span class="pl-k">+</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDirectionForward</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.direction<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDirectionBackward</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.direction<span class="pl-k">=-</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">parseAnimations</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.geometry;a.animations<span class="pl-k">||</span>(a.animations<span class="pl-k">=</span>{});<span class="pl-k">for</span>(<span class="pl-k">var</span> b,c<span class="pl-k">=</span>a.animations,d<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>)_<span class="pl-k">?</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-pds">/</span></span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a.morphTargets.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>a.morphTargets[e].<span class="pl-c1">name</span>.<span class="pl-c1">match</span>(d);<span class="pl-k">if</span>(f<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>f.<span class="pl-c1">length</span>){f<span class="pl-k">=</span>f[<span class="pl-c1">1</span>];c[f]<span class="pl-k">||</span>(c[f]<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">Infinity</span>,end<span class="pl-k">:-</span><span class="pl-c1">Infinity</span>});<span class="pl-k">var</span> h<span class="pl-k">=</span>c[f];e<span class="pl-k">&lt;</span>h.<span class="pl-c1">start</span><span class="pl-k">&amp;&amp;</span>(h.<span class="pl-c1">start</span><span class="pl-k">=</span>e);e<span class="pl-k">&gt;</span>h.end<span class="pl-k">&amp;&amp;</span>(h.end<span class="pl-k">=</span>e);b<span class="pl-k">||</span>(b<span class="pl-k">=</span>f)}}a.firstAnimation<span class="pl-k">=</span>b};</td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationLabel</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.geometry.animations<span class="pl-k">||</span>(<span class="pl-v">this</span>.geometry.animations<span class="pl-k">=</span>{});<span class="pl-v">this</span>.geometry.animations[a]<span class="pl-k">=</span>{start<span class="pl-k">:</span>b,end<span class="pl-k">:</span>c}};<span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">playAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.animations[a];c<span class="pl-k">?</span>(<span class="pl-v">this</span>.setFrameRange(c.<span class="pl-c1">start</span>,c.end),<span class="pl-v">this</span>.duration<span class="pl-k">=</span>(c.end<span class="pl-k">-</span>c.<span class="pl-c1">start</span>)<span class="pl-k">/</span>b<span class="pl-k">*</span><span class="pl-c1">1E3</span>,<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.MorphAnimMesh: animation[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] undefined in .playAnimation()<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.duration<span class="pl-k">/</span><span class="pl-v">this</span>.<span class="pl-c1">length</span>;<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">+=</span><span class="pl-v">this</span>.direction<span class="pl-k">*</span>a;<span class="pl-k">if</span>(<span class="pl-v">this</span>.mirroredLoop){<span class="pl-k">if</span>(<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.duration<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span><span class="pl-c1">.time</span>)<span class="pl-v">this</span>.direction<span class="pl-k">*=-</span><span class="pl-c1">1</span>,<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.duration<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">=</span><span class="pl-v">this</span>.duration,<span class="pl-v">this</span>.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">0</span>),<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">1</span>)}<span class="pl-k">else</span> <span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">%=</span><span class="pl-v">this</span>.duration,<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">+=</span><span class="pl-v">this</span>.duration);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.startKeyframe<span class="pl-k">+</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">/</span>b),<span class="pl-c1">0</span>,<span class="pl-v">this</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);a<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargetInfluences;</td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">!==</span><span class="pl-v">this</span>.currentKeyframe<span class="pl-k">&amp;&amp;</span>(a[<span class="pl-v">this</span>.lastKeyframe]<span class="pl-k">=</span><span class="pl-c1">0</span>,a[<span class="pl-v">this</span>.currentKeyframe]<span class="pl-k">=</span><span class="pl-c1">1</span>,a[c]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>.lastKeyframe<span class="pl-k">=</span><span class="pl-v">this</span>.currentKeyframe,<span class="pl-v">this</span>.currentKeyframe<span class="pl-k">=</span>c);b<span class="pl-k">=</span><span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">%</span>b<span class="pl-k">/</span>b;<span class="pl-v">this</span>.directionBackwards<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>b);a[<span class="pl-v">this</span>.currentKeyframe]<span class="pl-k">=</span>b;a[<span class="pl-v">this</span>.lastKeyframe]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>b};<span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">interpolateTargets</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.morphTargetInfluences,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>d.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)d[e]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>a<span class="pl-k">&amp;&amp;</span>(d[a]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>c);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>b<span class="pl-k">&amp;&amp;</span>(d[b]<span class="pl-k">=</span>c)};</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.duration<span class="pl-k">=</span>a.duration;<span class="pl-v">this</span>.mirroredLoop<span class="pl-k">=</span>a.mirroredLoop;<span class="pl-v">this</span><span class="pl-c1">.time</span><span class="pl-k">=</span>a<span class="pl-c1">.time</span>;<span class="pl-v">this</span>.lastKeyframe<span class="pl-k">=</span>a.lastKeyframe;<span class="pl-v">this</span>.currentKeyframe<span class="pl-k">=</span>a.currentKeyframe;<span class="pl-v">this</span>.direction<span class="pl-k">=</span>a.direction;<span class="pl-v">this</span>.directionBackwards<span class="pl-k">=</span>a.directionBackwards;<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LOD</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LOD<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">Object</span>.defineProperties(<span class="pl-v">this</span>,{levels<span class="pl-k">:</span>{enumerable<span class="pl-k">:!</span><span class="pl-c1">0</span>,value<span class="pl-k">:</span>[]},objects<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.LOD: .objects has been renamed to .levels.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.levels}}})};<span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.LOD;</td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addLevel</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.levels,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;!</span>(b<span class="pl-k">&lt;</span>c[d].distance);d<span class="pl-k">++</span>);c.<span class="pl-c1">splice</span>(d,<span class="pl-c1">0</span>,{distance<span class="pl-k">:</span>b,object<span class="pl-k">:</span>a});<span class="pl-v">this</span>.<span class="pl-c1">add</span>(a)};<span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getObjectForDistance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.levels,c<span class="pl-k">=</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d<span class="pl-k">&amp;&amp;!</span>(a<span class="pl-k">&lt;</span>b[c].distance);c<span class="pl-k">++</span>);<span class="pl-k">return</span> b[c<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">object</span>};</td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a.setFromMatrixPosition(<span class="pl-v">this</span>.matrixWorld);<span class="pl-k">var</span> d<span class="pl-k">=</span>b.ray.origin.distanceTo(a);<span class="pl-v">this</span>.getObjectForDistance(d).raycast(b,c)}}();</td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.levels;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span>){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(<span class="pl-v">this</span>.matrixWorld);c<span class="pl-k">=</span>a.distanceTo(b);d[<span class="pl-c1">0</span>].<span class="pl-c1">object</span>.visible<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span>d.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)<span class="pl-k">if</span>(c<span class="pl-k">&gt;=</span>d[e].distance)d[e<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">object</span>.visible<span class="pl-k">=!</span><span class="pl-c1">1</span>,d[e].<span class="pl-c1">object</span>.visible<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">else</span> <span class="pl-k">break</span>;<span class="pl-k">for</span>(;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)d[e].<span class="pl-c1">object</span>.visible<span class="pl-k">=!</span><span class="pl-c1">1</span>}}}();</td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,<span class="pl-k">!</span><span class="pl-c1">1</span>);a<span class="pl-k">=</span>a.levels;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[b];<span class="pl-v">this</span>.addLevel(d.<span class="pl-c1">object</span>.clone(),d.distance)}<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE.LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);a.<span class="pl-c1">object</span>.levels<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.levels,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b[c];a.<span class="pl-c1">object</span>.levels.<span class="pl-c1">push</span>({object<span class="pl-k">:</span>e.<span class="pl-c1">object</span>.uuid,distance<span class="pl-k">:</span>e.distance})}<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Sprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]),b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>]),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]),d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;d.setIndex(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(a,<span class="pl-c1">1</span>));d.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>));d.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">2</span>));<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Sprite<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.geometry<span class="pl-k">=</span>d;<span class="pl-v">this</span>.material<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.SpriteMaterial</span>}}();<span class="pl-c1">THREE.Sprite</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Sprite;<span class="pl-c1">THREE.Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">raycast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a.setFromMatrixPosition(<span class="pl-v">this</span>.matrixWorld);<span class="pl-k">var</span> d<span class="pl-k">=</span>b.ray.distanceSqToPoint(a);d<span class="pl-k">&gt;</span><span class="pl-v">this</span>.scale.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.scale.<span class="pl-c1">y</span><span class="pl-k">||</span>c.<span class="pl-c1">push</span>({distance<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d),point<span class="pl-k">:</span><span class="pl-v">this</span>.position,face<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span><span class="pl-v">this</span>})}}();<span class="pl-c1">THREE.Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>(<span class="pl-v">this</span>.material)).copy(<span class="pl-v">this</span>)};</td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.toJSON.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">&amp;&amp;</span>(a.materials[<span class="pl-v">this</span>.material.uuid]<span class="pl-k">=</span><span class="pl-v">this</span>.material.toJSON());b.<span class="pl-c1">object</span>.material<span class="pl-k">=</span><span class="pl-v">this</span>.material.uuid;<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.Particle<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Sprite;<span class="pl-c1">THREE</span>.<span class="pl-en">LensFlare</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.lensFlares<span class="pl-k">=</span>[];<span class="pl-v">this</span>.positionScreen<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-v">this</span>.customUpdateCallback<span class="pl-k">=void</span> <span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">add</span>(a,b,c,d,e)};<span class="pl-c1">THREE.LensFlare</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.LensFlare;<span class="pl-c1">THREE.LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=-</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NormalBlending);c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(c,<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,c));<span class="pl-v">this</span>.lensFlares.<span class="pl-c1">push</span>({texture<span class="pl-k">:</span>a,size<span class="pl-k">:</span>b,distance<span class="pl-k">:</span>c,x<span class="pl-k">:</span><span class="pl-c1">0</span>,y<span class="pl-k">:</span><span class="pl-c1">0</span>,z<span class="pl-k">:</span><span class="pl-c1">0</span>,scale<span class="pl-k">:</span><span class="pl-c1">1</span>,rotation<span class="pl-k">:</span><span class="pl-c1">0</span>,opacity<span class="pl-k">:</span>g,color<span class="pl-k">:</span>e,blending<span class="pl-k">:</span>d})};</td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateLensFlares</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-v">this</span>.lensFlares.<span class="pl-c1">length</span>,c,d<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*-</span><span class="pl-v">this</span>.positionScreen.<span class="pl-c1">x</span>,e<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*-</span><span class="pl-v">this</span>.positionScreen.<span class="pl-c1">y</span>;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.lensFlares[a],c.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.positionScreen.<span class="pl-c1">x</span><span class="pl-k">+</span>d<span class="pl-k">*</span>c.distance,c.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.positionScreen.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span>c.distance,c.wantedRotation<span class="pl-k">=</span>c.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span>.<span class="pl-c1">25</span>,c.rotation<span class="pl-k">+=</span>.<span class="pl-c1">25</span><span class="pl-k">*</span>(c.wantedRotation<span class="pl-k">-</span>c.rotation)};</td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-v">this</span>.positionScreen.copy(a.positionScreen);<span class="pl-v">this</span>.customUpdateCallback<span class="pl-k">=</span>a.customUpdateCallback;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>a.lensFlares.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.lensFlares.<span class="pl-c1">push</span>(a.lensFlares[b]);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">Scene</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Scene<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.overrideMaterial<span class="pl-k">=</span><span class="pl-v">this</span>.fog<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.autoUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE.Scene</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Scene</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Scene;</td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Scene</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-c1">null</span><span class="pl-k">!==</span>a.fog<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.fog<span class="pl-k">=</span>a.fog.clone());<span class="pl-c1">null</span><span class="pl-k">!==</span>a.overrideMaterial<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.overrideMaterial<span class="pl-k">=</span>a.overrideMaterial.clone());<span class="pl-v">this</span>.autoUpdate<span class="pl-k">=</span>a.autoUpdate;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=</span>a.matrixAutoUpdate;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">Fog</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a);<span class="pl-v">this</span>.near<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.far<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1E3</span>};<span class="pl-c1">THREE.Fog</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Fog</span>(<span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex(),<span class="pl-v">this</span>.near,<span class="pl-v">this</span>.far)};</td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">FogExp2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a);<span class="pl-v">this</span>.density<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>};<span class="pl-c1">THREE.FogExp2</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.FogExp2</span>(<span class="pl-v">this</span>.<span class="pl-c1">color</span>.getHex(),<span class="pl-v">this</span>.density)};<span class="pl-c1">THREE</span>.ShaderChunk<span class="pl-k">=</span>{};<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ALPHAMAP<span class="pl-cce">\n\n\t</span>diffuseColor.a *= texture2D( alphaMap, vUv ).g;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ALPHAMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D alphaMap;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.alphatest_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef ALPHATEST<span class="pl-cce">\n\n\t</span>if ( diffuseColor.a &lt; ALPHATEST ) discard;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.aomap_fragment=&quot;#ifdef USE_AOMAP\n\n\ttotalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n#endif\n&quot;;THREE.ShaderChunk.aomap_pars_fragment=&quot;#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif&quot;;THREE.ShaderChunk.begin_vertex=&quot;\nvec3 transformed = vec3( position );\n&quot;;THREE.ShaderChunk.beginnormal_vertex=&quot;\nvec3 objectNormal = vec3( normal );\n&quot;;THREE.ShaderChunk.bumpmap_pars_fragment=&quot;#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.color_fragment=&quot;#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif&quot;;THREE.ShaderChunk.color_pars_fragment=&quot;#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n&quot;;THREE.ShaderChunk.color_pars_vertex=&quot;#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif&quot;;THREE.ShaderChunk.color_vertex=&quot;#ifdef USE_COLOR\n\n\tvColor.xyz = color.xyz;\n\n#endif&quot;;THREE.ShaderChunk.common=&quot;#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n\n}\n\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\n\tif ( decayExponent &gt; 0.0 ) {\n\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t}\n\n\treturn 1.0;\n\n}\n\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\n\n\t// Original approximation by Christophe Schlick &#39;94\n\t//;float fresnel = pow( 1.0 - dotLH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH &#39;13)\n\tfloat fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\n\n\t// geometry term is (n\u22c5l)(n\u22c5v) / 4(n\u22c5l)(n\u22c5v)\n\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\n\n\t// factor of 1/PI in distribution term omitted\n\n\treturn ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\t//float dotNL = saturate( dot( normal, lightDir ) );\n\t//float dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( lightDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * G * D;\n\n}\n\nvec3 inputToLinear( in vec3 a ) {\n\n\t#ifdef GAMMA_INPUT\n\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n\nvec3 linearToOutput( in vec3 a ) {\n\n\t#ifdef GAMMA_OUTPUT\n\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n&quot;;</td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.defaultnormal_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef FLIP_SIDED<span class="pl-cce">\n\n\t</span>objectNormal = -objectNormal;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n\n</span>vec3 transformedNormal = normalMatrix * objectNormal;<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.displacementmap_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_DISPLACEMENTMAP<span class="pl-cce">\n\n\t</span>transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.displacementmap_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_DISPLACEMENTMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D displacementMap;<span class="pl-cce">\n\t</span>uniform float displacementScale;<span class="pl-cce">\n\t</span>uniform float displacementBias;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.emissivemap_fragment=&quot;#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n\n\ttotalEmissiveLight *= emissiveColor.rgb;\n\n#endif\n&quot;;THREE.ShaderChunk.emissivemap_pars_fragment=&quot;#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n&quot;;THREE.ShaderChunk.envmap_fragment=&quot;#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ENVMAP<span class="pl-cce">\n\n\t</span>uniform float reflectivity;<span class="pl-cce">\n\t</span>#ifdef ENVMAP_TYPE_CUBE<span class="pl-cce">\n\t\t</span>uniform samplerCube envMap;<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>uniform sampler2D envMap;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\t</span>uniform float flipEnvMap;<span class="pl-cce">\n\n\t</span>#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )<span class="pl-cce">\n\n\t\t</span>uniform float refractionRatio;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>varying vec3 vReflect;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP ) &amp;&amp; ! defined( PHONG )<span class="pl-cce">\n\n\t</span>varying vec3 vReflect;<span class="pl-cce">\n\n\t</span>uniform float refractionRatio;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.envmap_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP ) &amp;&amp; ! defined( PHONG )<span class="pl-cce">\n\n\t</span>vec3 worldNormal = transformDirection( objectNormal, modelMatrix );<span class="pl-cce">\n\n\t</span>vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );<span class="pl-cce">\n\n\t</span>#ifdef ENVMAP_MODE_REFLECTION<span class="pl-cce">\n\n\t\t</span>vReflect = reflect( cameraToVertex, worldNormal );<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>vReflect = refract( cameraToVertex, worldNormal, refractionRatio );<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.fog_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_FOG<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>float depth = gl_FragDepthEXT / gl_FragCoord.w;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n\t</span>#ifdef FOG_EXP2<span class="pl-cce">\n\n\t\t</span>float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>float fogFactor = smoothstep( fogNear, fogFar, depth );<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\t\n\t</span>outgoingLight = mix( outgoingLight, fogColor, fogFactor );<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.fog_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_FOG<span class="pl-cce">\n\n\t</span>uniform vec3 fogColor;<span class="pl-cce">\n\n\t</span>#ifdef FOG_EXP2<span class="pl-cce">\n\n\t\t</span>uniform float fogDensity;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>uniform float fogNear;<span class="pl-cce">\n\t\t</span>uniform float fogFar;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.lightmap_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LIGHTMAP<span class="pl-cce">\n\n\t</span>totalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.lightmap_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LIGHTMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D lightMap;<span class="pl-cce">\n\t</span>uniform float lightMapIntensity;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lights_lambert_pars_vertex=&quot;uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS &gt; 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS &gt; 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lights_lambert_vertex=&quot;vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\nvec3 normal = normalize( transformedNormal );\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\t// attenuation\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect &gt; spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\t\t\t// attenuation\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tfloat hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n\nvLightFront += ambientLightColor;\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack += ambientLightColor;\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lights_phong_fragment=&quot;#ifndef FLAT_SHADED\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n\t#endif\n\n#else\n\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\nvec3 viewDir = normalize( vViewPosition );\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lightPosition = pointLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\t// attenuation\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\t// diffuse\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\t\t// specular\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect &gt; spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\t\t\t// attenuation\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\t\t\t// diffuse\n\n\t\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\t\t\t// specular\n\n\t\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS &gt; 0\n\n\tfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\t\t// diffuse\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * cosineTerm;\n\n\t\t// specular\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS &gt; 0\n\n\tfor( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\ttotalDiffuseLight += lightColor;\n\n\t\t// specular (sky term only)\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * max( dotProduct, 0.0 );\n\n\t}\n\n#endif\n\n#ifdef METAL\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;\n\n#else\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.lights_phong_pars_fragment=&quot;uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS &gt; 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS &gt; 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS &gt; 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.lights_phong_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_ENVMAP )<span class="pl-cce">\n\n\t</span>varying vec3 vWorldPosition;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.lights_phong_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_ENVMAP )<span class="pl-cce">\n\n\t</span>vWorldPosition = worldPosition.xyz;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.linear_to_gamma_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n\t</span>outgoingLight = linearToOutput( outgoingLight );<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined(USE_LOGDEPTHBUF) &amp;&amp; defined(USE_LOGDEPTHBUF_EXT)<span class="pl-cce">\n\n\t</span>gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LOGDEPTHBUF<span class="pl-cce">\n\n\t</span>uniform float logDepthBufFC;<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>varying float vFragDepth;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LOGDEPTHBUF<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>varying float vFragDepth;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n\t</span>uniform float logDepthBufFC;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LOGDEPTHBUF<span class="pl-cce">\n\n\t</span>gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;<span class="pl-cce">\n\n\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\n\t\t</span>vFragDepth = 1.0 + gl_Position.w;<span class="pl-cce">\n\n</span>#else<span class="pl-cce">\n\n\t\t</span>gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.map_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>vec4 texelColor = texture2D( map, vUv );<span class="pl-cce">\n\n\t</span>texelColor.xyz = inputToLinear( texelColor.xyz );<span class="pl-cce">\n\n\t</span>diffuseColor *= texelColor;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.map_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>uniform sampler2D map;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.map_particle_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>diffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.map_particle_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n\n\t</span>uniform vec4 offsetRepeat;<span class="pl-cce">\n\t</span>uniform sampler2D map;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.morphnormal_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHNORMALS<span class="pl-cce">\n\n\t</span>objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];<span class="pl-cce">\n\t</span>objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];<span class="pl-cce">\n\t</span>objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];<span class="pl-cce">\n\t</span>objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="LC446" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-cce">\n\n\t</span>#ifndef USE_MORPHNORMALS<span class="pl-cce">\n\n\t</span>uniform float morphTargetInfluences[ 8 ];<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t</span>uniform float morphTargetInfluences[ 4 ];<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-cce">\n\n\t</span>transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];<span class="pl-cce">\n\n\t</span>#ifndef USE_MORPHNORMALS<span class="pl-cce">\n\n\t</span>transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];<span class="pl-cce">\n\t</span>transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="LC447" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.normalmap_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_NORMALMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D normalMap;<span class="pl-cce">\n\t</span>uniform vec2 normalScale;<span class="pl-cce">\n\n\t</span>// Per-Pixel Tangent Space Normal Mapping<span class="pl-cce">\n\t</span>// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html<span class="pl-cce">\n\n\t</span>vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {<span class="pl-cce">\n\n\t\t</span>vec3 q0 = dFdx( eye_pos.xyz );<span class="pl-cce">\n\t\t</span>vec3 q1 = dFdy( eye_pos.xyz );<span class="pl-cce">\n\t\t</span>vec2 st0 = dFdx( vUv.st );<span class="pl-cce">\n\t\t</span>vec2 st1 = dFdy( vUv.st );<span class="pl-cce">\n\n\t\t</span>vec3 S = normalize( q0 * st1.t - q1 * st0.t );<span class="pl-cce">\n\t\t</span>vec3 T = normalize( -q0 * st1.s + q1 * st0.s );<span class="pl-cce">\n\t\t</span>vec3 N = normalize( surf_norm );<span class="pl-cce">\n\n\t\t</span>vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;<span class="pl-cce">\n\t\t</span>mapN.xy = normalScale * mapN.xy;<span class="pl-cce">\n\t\t</span>mat3 tsn = mat3( S, T, N );<span class="pl-cce">\n\t\t</span>return normalize( tsn * mapN );<span class="pl-cce">\n\n\t</span>}<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="LC448" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.project_vertex=&quot;#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n&quot;;THREE.ShaderChunk.shadowmap_fragment=&quot;#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something &amp;&amp; something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x &gt;= 0.0, shadowCoord.x &lt;= 1.0, shadowCoord.y &gt;= 0.0, shadowCoord.y &lt;= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z &lt;= 1.0 );\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y &lt;= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x &lt;= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn&#39;t seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth &lt; shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth &lt; shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\tif ( inFrustum ) outgoingLight *= frustumColors[ i ];\n\n\t\t#endif\n\n\t}\n\n\toutgoingLight = outgoingLight * shadowColor;\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="LC449" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SHADOWMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D shadowMap[ MAX_SHADOWS ];<span class="pl-cce">\n\t</span>uniform vec2 shadowMapSize[ MAX_SHADOWS ];<span class="pl-cce">\n\n\t</span>uniform float shadowDarkness[ MAX_SHADOWS ];<span class="pl-cce">\n\t</span>uniform float shadowBias[ MAX_SHADOWS ];<span class="pl-cce">\n\n\t</span>varying vec4 vShadowCoord[ MAX_SHADOWS ];<span class="pl-cce">\n\n\t</span>float unpackDepth( const in vec4 rgba_depth ) {<span class="pl-cce">\n\n\t\t</span>const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );<span class="pl-cce">\n\t\t</span>float depth = dot( rgba_depth, bit_shift );<span class="pl-cce">\n\t\t</span>return depth;<span class="pl-cce">\n\n\t</span>}<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="LC450" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SHADOWMAP<span class="pl-cce">\n\n\t</span>varying vec4 vShadowCoord[ MAX_SHADOWS ];<span class="pl-cce">\n\t</span>uniform mat4 shadowMatrix[ MAX_SHADOWS ];<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SHADOWMAP<span class="pl-cce">\n\n\t</span>for( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {<span class="pl-cce">\n\n\t\t</span>vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;<span class="pl-cce">\n\n\t</span>}<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.skinbase_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t</span>mat4 boneMatX = getBoneMatrix( skinIndex.x );<span class="pl-cce">\n\t</span>mat4 boneMatY = getBoneMatrix( skinIndex.y );<span class="pl-cce">\n\t</span>mat4 boneMatZ = getBoneMatrix( skinIndex.z );<span class="pl-cce">\n\t</span>mat4 boneMatW = getBoneMatrix( skinIndex.w );<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="LC451" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.skinning_pars_vertex=&quot;#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n&quot;;</td>
      </tr>
      <tr>
        <td id="L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="LC452" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.skinning_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t</span>vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );<span class="pl-cce">\n\n\t</span>vec4 skinned = vec4( 0.0 );<span class="pl-cce">\n\t</span>skinned += boneMatX * skinVertex * skinWeight.x;<span class="pl-cce">\n\t</span>skinned += boneMatY * skinVertex * skinWeight.y;<span class="pl-cce">\n\t</span>skinned += boneMatZ * skinVertex * skinWeight.z;<span class="pl-cce">\n\t</span>skinned += boneMatW * skinVertex * skinWeight.w;<span class="pl-cce">\n\t</span>skinned  = bindMatrixInverse * skinned;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.skinnormal_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t</span>mat4 skinMatrix = mat4( 0.0 );<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.x * boneMatX;<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.y * boneMatY;<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.z * boneMatZ;<span class="pl-cce">\n\t</span>skinMatrix += skinWeight.w * boneMatW;<span class="pl-cce">\n\t</span>skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;<span class="pl-cce">\n\n\t</span>objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="LC453" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.specularmap_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>float specularStrength;<span class="pl-cce">\n\n</span>#ifdef USE_SPECULARMAP<span class="pl-cce">\n\n\t</span>vec4 texelSpecular = texture2D( specularMap, vUv );<span class="pl-cce">\n\t</span>specularStrength = texelSpecular.r;<span class="pl-cce">\n\n</span>#else<span class="pl-cce">\n\n\t</span>specularStrength = 1.0;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.specularmap_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SPECULARMAP<span class="pl-cce">\n\n\t</span>uniform sampler2D specularMap;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )<span class="pl-cce">\n\n\t</span>varying vec2 vUv2;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="LC454" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )<span class="pl-cce">\n\n\t</span>attribute vec2 uv2;<span class="pl-cce">\n\t</span>varying vec2 vUv2;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.uv2_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )<span class="pl-cce">\n\n\t</span>vUv2 = uv2;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_fragment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )<span class="pl-cce">\n\n\t</span>varying vec2 vUv;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="LC455" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )<span class="pl-cce">\n\n\t</span>varying vec2 vUv;<span class="pl-cce">\n\t</span>uniform vec4 offsetRepeat;<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.ShaderChunk.uv_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )<span class="pl-cce">\n\n\t</span>vUv = uv * offsetRepeat.zw + offsetRepeat.xy;<span class="pl-cce">\n\n</span>#endif<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="LC456" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.worldpos_vertex<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )<span class="pl-cce">\n\n\t</span>#ifdef USE_SKINNING<span class="pl-cce">\n\n\t\t</span>vec4 worldPosition = modelMatrix * skinned;<span class="pl-cce">\n\n\t</span>#else<span class="pl-cce">\n\n\t\t</span>vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );<span class="pl-cce">\n\n\t</span>#endif<span class="pl-cce">\n\n</span>#endif<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="LC457" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.UniformsUtils<span class="pl-k">=</span>{<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>{},c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.clone(a[c]),e;<span class="pl-k">for</span>(e <span class="pl-k">in</span> d)b[e]<span class="pl-k">=</span>d[e]}<span class="pl-k">return</span> b},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{},c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a){b[c]<span class="pl-k">=</span>{};<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> a[c]){<span class="pl-k">var</span> e<span class="pl-k">=</span>a[c][d];e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Color<span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Vector2<span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Vector3<span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Vector4<span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Matrix3<span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Matrix4<span class="pl-k">||</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Texture<span class="pl-k">?</span>b[c][d]<span class="pl-k">=</span>e.clone()<span class="pl-k">:</span><span class="pl-c1">Array</span>.isArray(e)<span class="pl-k">?</span>b[c][d]<span class="pl-k">=</span>e.<span class="pl-c1">slice</span>()<span class="pl-k">:</span>b[c][d]<span class="pl-k">=</span>e}}<span class="pl-k">return</span> b}};</td>
      </tr>
      <tr>
        <td id="L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="LC458" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.UniformsLib<span class="pl-k">=</span>{common<span class="pl-k">:</span>{diffuse<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">15658734</span>)},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},map<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},offsetRepeat<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)},specularMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},alphaMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},envMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},flipEnvMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:-</span><span class="pl-c1">1</span>},reflectivity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},refractionRatio<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>.<span class="pl-c1">98</span>}},aomap<span class="pl-k">:</span>{aoMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},aoMapIntensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},lightmap<span class="pl-k">:</span>{lightMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},lightMapIntensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="LC459" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-c1">1</span>}},emissivemap<span class="pl-k">:</span>{emissiveMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>}},bumpmap<span class="pl-k">:</span>{bumpMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},bumpScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},normalmap<span class="pl-k">:</span>{normalMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},normalScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)}},displacementmap<span class="pl-k">:</span>{displacementMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},displacementScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},displacementBias<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>}},fog<span class="pl-k">:</span>{fogDensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>},fogNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},fogFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},fogColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)}},</td>
      </tr>
      <tr>
        <td id="L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="LC460" class="blob-code blob-code-inner js-file-line">lights<span class="pl-k">:</span>{ambientLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},directionalLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},directionalLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightSkyColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightGroundColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightPosition<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightDistance<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightDecay<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightPosition<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},</td>
      </tr>
      <tr>
        <td id="L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="LC461" class="blob-code blob-code-inner js-file-line">spotLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightDistance<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightAngleCos<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightExponent<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightDecay<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]}},points<span class="pl-k">:</span>{psColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">15658734</span>)},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},size<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},scale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},map<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},offsetRepeat<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)},fogDensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>},fogNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},fogFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},</td>
      </tr>
      <tr>
        <td id="L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="LC462" class="blob-code blob-code-inner js-file-line">fogColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)}},shadowmap<span class="pl-k">:</span>{shadowMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>tv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowMapSize<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2v<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowBias<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowDarkness<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowMatrix<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>m4v<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]}}};</td>
      </tr>
      <tr>
        <td id="L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="LC463" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderLib<span class="pl-k">=</span>{basic<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.UniformsUtils.merge([<span class="pl-c1">THREE</span>.UniformsLib.common,<span class="pl-c1">THREE</span>.UniformsLib.aomap,<span class="pl-c1">THREE</span>.UniformsLib.fog,<span class="pl-c1">THREE</span>.UniformsLib.shadowmap]),vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinning_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,</td>
      </tr>
      <tr>
        <td id="L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="LC464" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.uv_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.color_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinbase_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_ENVMAP<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.beginnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.defaultnormal_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.begin_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinning_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.project_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.worldpos_vertex,</td>
      </tr>
      <tr>
        <td id="L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="LC465" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.envmap_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.aomap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_fragment,</td>
      </tr>
      <tr>
        <td id="L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="LC466" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.specularmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-cce">\n\t</span>vec3 totalAmbientLight = vec3( 1.0 );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.color_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphatest_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.specularmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.aomap_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>outgoingLight = diffuseColor.rgb * totalAmbientLight;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="LC467" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.envmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.linear_to_gamma_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},lambert<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.UniformsUtils.merge([<span class="pl-c1">THREE</span>.UniformsLib.common,<span class="pl-c1">THREE</span>.UniformsLib.fog,<span class="pl-c1">THREE</span>.UniformsLib.lights,<span class="pl-c1">THREE</span>.UniformsLib.shadowmap,{emissive<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>)}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define LAMBERT<span class="pl-cce">\n</span>varying vec3 vLightFront;<span class="pl-cce">\n</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n\t</span>varying vec3 vLightBack;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="LC468" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.lights_lambert_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinning_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.uv_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.color_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.beginnormal_vertex,</td>
      </tr>
      <tr>
        <td id="L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="LC469" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.morphnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinbase_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.defaultnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.begin_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinning_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.project_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.worldpos_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.lights_lambert_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform vec3 emissive;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>varying vec3 vLightFront;<span class="pl-cce">\n</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n\t</span>varying vec3 vLightBack;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="LC470" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.specularmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="LC471" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.color_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphatest_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.specularmap_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n\t\t</span>if ( gl_FrontFacing )<span class="pl-cce">\n\t\t\t</span>outgoingLight += diffuseColor.rgb * vLightFront + emissive;<span class="pl-cce">\n\t\t</span>else<span class="pl-cce">\n\t\t\t</span>outgoingLight += diffuseColor.rgb * vLightBack + emissive;<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>outgoingLight += diffuseColor.rgb * vLightFront + emissive;<span class="pl-cce">\n\t</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_fragment,</td>
      </tr>
      <tr>
        <td id="L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="LC472" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.linear_to_gamma_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},phong<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.UniformsUtils.merge([<span class="pl-c1">THREE</span>.UniformsLib.common,<span class="pl-c1">THREE</span>.UniformsLib.aomap,<span class="pl-c1">THREE</span>.UniformsLib.lightmap,<span class="pl-c1">THREE</span>.UniformsLib.emissivemap,<span class="pl-c1">THREE</span>.UniformsLib.bumpmap,<span class="pl-c1">THREE</span>.UniformsLib.normalmap,<span class="pl-c1">THREE</span>.UniformsLib.displacementmap,<span class="pl-c1">THREE</span>.UniformsLib.fog,<span class="pl-c1">THREE</span>.UniformsLib.lights,<span class="pl-c1">THREE</span>.UniformsLib.shadowmap,{emissive<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="LC473" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>)},specular<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">1118481</span>)},shininess<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">30</span>}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define PHONG<span class="pl-cce">\n</span>varying vec3 vViewPosition;<span class="pl-cce">\n</span>#ifndef FLAT_SHADED<span class="pl-cce">\n\t</span>varying vec3 vNormal;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.displacementmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.lights_phong_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_pars_vertex,</td>
      </tr>
      <tr>
        <td id="L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="LC474" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.skinning_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.uv_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.color_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.beginnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinbase_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinnormal_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.defaultnormal_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifndef FLAT_SHADED<span class="pl-cce">\n\t</span>vNormal = normalize( transformedNormal );<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.begin_vertex,</td>
      </tr>
      <tr>
        <td id="L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="LC475" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.displacementmap_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinning_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.project_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>vViewPosition = - mvPosition.xyz;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.worldpos_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.lights_phong_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define PHONG<span class="pl-cce">\n</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform vec3 emissive;<span class="pl-cce">\n</span>uniform vec3 specular;<span class="pl-cce">\n</span>uniform float shininess;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="LC476" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.uv_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.uv2_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.aomap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.lightmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.emissivemap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.lights_phong_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.bumpmap_pars_fragment,</td>
      </tr>
      <tr>
        <td id="L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="LC477" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.normalmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.specularmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-cce">\n\t</span>vec3 totalAmbientLight = ambientLightColor;<span class="pl-cce">\n\t</span>vec3 totalEmissiveLight = emissive;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.color_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphamap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphatest_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.specularmap_fragment,</td>
      </tr>
      <tr>
        <td id="L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="LC478" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.lightmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.aomap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.emissivemap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.lights_phong_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.envmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.linear_to_gamma_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},points<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.UniformsUtils.merge([<span class="pl-c1">THREE</span>.UniformsLib.points,<span class="pl-c1">THREE</span>.UniformsLib.shadowmap]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float size;<span class="pl-cce">\n</span>uniform float scale;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="LC479" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.color_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n\t</span>#ifdef USE_SIZEATTENUATION<span class="pl-cce">\n\t\t</span>gl_PointSize = size * ( scale / length( mvPosition.xyz ) );<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>gl_PointSize = size;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.worldpos_vertex,</td>
      </tr>
      <tr>
        <td id="L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="LC480" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 psColor;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_particle_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( psColor, opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.map_particle_fragment,</td>
      </tr>
      <tr>
        <td id="L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="LC481" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.color_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.alphatest_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>outgoingLight = diffuseColor.rgb;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.shadowmap_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},dashed<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.UniformsUtils.merge([<span class="pl-c1">THREE</span>.UniformsLib.common,<span class="pl-c1">THREE</span>.UniformsLib.fog,{scale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},dashSize<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},totalSize<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2</span>}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float scale;<span class="pl-cce">\n</span>attribute float lineDistance;<span class="pl-cce">\n</span>varying float vLineDistance;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="LC482" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.color_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.color_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>vLineDistance = scale * lineDistance;<span class="pl-cce">\n\t</span>vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform float dashSize;<span class="pl-cce">\n</span>uniform float totalSize;<span class="pl-cce">\n</span>varying float vLineDistance;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,</td>
      </tr>
      <tr>
        <td id="L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="LC483" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.color_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.fog_pars_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>if ( mod( vLineDistance, totalSize ) &gt; dashSize ) {<span class="pl-cce">\n\t\t</span>discard;<span class="pl-cce">\n\t</span>}<span class="pl-cce">\n\t</span>vec3 outgoingLight = vec3( 0.0 );<span class="pl-cce">\n\t</span>vec4 diffuseColor = vec4( diffuse, opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-c1">THREE</span>.ShaderChunk.color_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>outgoingLight = diffuseColor.rgb;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.fog_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>gl_FragColor = vec4( outgoingLight, diffuseColor.a );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},</td>
      </tr>
      <tr>
        <td id="L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="LC484" class="blob-code blob-code-inner js-file-line">depth<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{mNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},mFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.begin_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.project_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float mNear;<span class="pl-cce">\n</span>uniform float mFar;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,</td>
      </tr>
      <tr>
        <td id="L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="LC485" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\t\t</span>float depth = gl_FragDepthEXT / gl_FragCoord.w;<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n\t</span>float color = 1.0 - smoothstep( mNear, mFar, depth );<span class="pl-cce">\n\t</span>gl_FragColor = vec4( vec3( color ), opacity );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},normal<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vNormal;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,</td>
      </tr>
      <tr>
        <td id="L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="LC486" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vNormal = normalize( normalMatrix * normal );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.begin_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.project_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float opacity;<span class="pl-cce">\n</span>varying vec3 vNormal;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},cube<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{tCube<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="LC487" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-c1">null</span>},tFlip<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:-</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vWorldPosition = transformDirection( position, modelMatrix );<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform samplerCube tCube;<span class="pl-cce">\n</span>uniform float tFlip;<span class="pl-cce">\n</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,</td>
      </tr>
      <tr>
        <td id="L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="LC488" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},equirect<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{tEquirect<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tFlip<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:-</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n\t</span>vWorldPosition = transformDirection( position, modelMatrix );<span class="pl-cce">\n\t</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="LC489" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform sampler2D tEquirect;<span class="pl-cce">\n</span>uniform float tFlip;<span class="pl-cce">\n</span>varying vec3 vWorldPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n</span>vec3 direction = normalize( vWorldPosition );<span class="pl-cce">\n</span>vec2 sampleUV;<span class="pl-cce">\n</span>sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );<span class="pl-cce">\n</span>sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;<span class="pl-cce">\n</span>gl_FragColor = texture2D( tEquirect, sampleUV );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,</td>
      </tr>
      <tr>
        <td id="L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="LC490" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},depthRGBA<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{},vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinning_pars_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.skinbase_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.begin_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.morphtarget_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.skinning_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.project_vertex,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_vertex,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.ShaderChunk.common,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_pars_fragment,</td>
      </tr>
      <tr>
        <td id="L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="LC491" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>vec4 pack_depth( const in float depth ) {<span class="pl-cce">\n\t</span>const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );<span class="pl-cce">\n\t</span>const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );<span class="pl-cce">\n\t</span>vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );<span class="pl-cce">\n\t</span>res -= res.xxyz * bit_mask;<span class="pl-cce">\n\t</span>return res;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.ShaderChunk.logdepthbuf_fragment,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_LOGDEPTHBUF_EXT<span class="pl-cce">\n\t\t</span>gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );<span class="pl-cce">\n\t</span>#else<span class="pl-cce">\n\t\t</span>gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );<span class="pl-cce">\n\t</span>#endif<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)}};</td>
      </tr>
      <tr>
        <td id="L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="LC492" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>Q<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">*=</span>d,b<span class="pl-k">*=</span>d,c<span class="pl-k">*=</span>d);s.clearColor(a,b,c,d)}<span class="pl-k">function</span> <span class="pl-en">c</span>(){M.init();s.viewport(Ja,Ka,ta,ua);b(A.r,A.g,A.b,ia)}<span class="pl-k">function</span> <span class="pl-en">d</span>(){Sa<span class="pl-k">=</span>ib<span class="pl-k">=</span><span class="pl-c1">null</span>;pa<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;Ta<span class="pl-k">=-</span><span class="pl-c1">1</span>;db<span class="pl-k">=!</span><span class="pl-c1">0</span>;M.<span class="pl-c1">reset</span>()}<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>){a.preventDefault();d();c();Y.<span class="pl-c1">clear</span>()}<span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a.<span class="pl-c1">target</span>;a.removeEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,g);a<span class="pl-k">:</span>{<span class="pl-k">var</span> b<span class="pl-k">=</span>Y.get(a);<span class="pl-k">if</span>(a.image<span class="pl-k">&amp;&amp;</span>b.__image__webglTextureCube)s.deleteTexture(b.__image__webglTextureCube);<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b.__webglInit)<span class="pl-k">break</span> a;s.deleteTexture(b.__webglTexture)}Y.delete(a)}La.textures<span class="pl-k">--</span>}</td>
      </tr>
      <tr>
        <td id="L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="LC493" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a.<span class="pl-c1">target</span>;a.removeEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,f);<span class="pl-k">var</span> b<span class="pl-k">=</span>Y.get(a);<span class="pl-k">if</span>(a<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.__webglTexture){s.deleteTexture(b.__webglTexture);<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.WebGLRenderTargetCube)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>)s.deleteFramebuffer(b.__webglFramebuffer[c]),s.deleteRenderbuffer(b.__webglRenderbuffer[c]);<span class="pl-k">else</span> s.deleteFramebuffer(b.__webglFramebuffer),s.deleteRenderbuffer(b.__webglRenderbuffer);Y.delete(a)}La.textures<span class="pl-k">--</span>}<span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a.<span class="pl-c1">target</span>;a.removeEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,h);k(a);Y.delete(a)}<span class="pl-k">function</span> <span class="pl-en">k</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="LC494" class="blob-code blob-code-inner js-file-line">Y.get(a).program;a.program<span class="pl-k">=void</span> <span class="pl-c1">0</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>Ua.releaseProgram(b)}<span class="pl-k">function</span> <span class="pl-en">l</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> b[<span class="pl-c1">0</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>]}<span class="pl-k">function</span> <span class="pl-en">n</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">!==</span>b.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">?</span>a.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">-</span>b.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">:</span>a.material.<span class="pl-c1">id</span><span class="pl-k">!==</span>b.material.<span class="pl-c1">id</span><span class="pl-k">?</span>a.material.<span class="pl-c1">id</span><span class="pl-k">-</span>b.material.<span class="pl-c1">id</span><span class="pl-k">:</span>a.<span class="pl-c1">z</span><span class="pl-k">!==</span>b.<span class="pl-c1">z</span><span class="pl-k">?</span>a.<span class="pl-c1">z</span><span class="pl-k">-</span>b.<span class="pl-c1">z</span><span class="pl-k">:</span>a.<span class="pl-c1">id</span><span class="pl-k">-</span>b.<span class="pl-c1">id</span>}<span class="pl-k">function</span> <span class="pl-en">p</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">!==</span>b.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">?</span>a.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">-</span>b.<span class="pl-c1">object</span>.renderOrder<span class="pl-k">:</span>a.<span class="pl-c1">z</span><span class="pl-k">!==</span>b.<span class="pl-c1">z</span><span class="pl-k">?</span>b.<span class="pl-c1">z</span><span class="pl-k">-</span>a.<span class="pl-c1">z</span><span class="pl-k">:</span>a.<span class="pl-c1">id</span><span class="pl-k">-</span>b.<span class="pl-c1">id</span>}<span class="pl-k">function</span> <span class="pl-en">m</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f;c.transparent<span class="pl-k">?</span>(d<span class="pl-k">=</span>va,f<span class="pl-k">=++</span>ma)<span class="pl-k">:</span>(d<span class="pl-k">=</span>fa,f<span class="pl-k">=++</span>V);</td>
      </tr>
      <tr>
        <td id="L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="LC495" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=</span>d[f];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>(f.<span class="pl-c1">id</span><span class="pl-k">=</span>a.<span class="pl-c1">id</span>,f.<span class="pl-c1">object</span><span class="pl-k">=</span>a,f.geometry<span class="pl-k">=</span>b,f.material<span class="pl-k">=</span>c,f.<span class="pl-c1">z</span><span class="pl-k">=</span>$.<span class="pl-c1">z</span>,f.group<span class="pl-k">=</span>e)<span class="pl-k">:</span>(f<span class="pl-k">=</span>{id<span class="pl-k">:</span>a.<span class="pl-c1">id</span>,object<span class="pl-k">:</span>a,geometry<span class="pl-k">:</span>b,material<span class="pl-k">:</span>c,z<span class="pl-k">:</span>$.<span class="pl-c1">z</span>,group<span class="pl-k">:</span>e},d.<span class="pl-c1">push</span>(f))}<span class="pl-k">function</span> <span class="pl-en">q</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a.visible){<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Light)Z.<span class="pl-c1">push</span>(a);<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Sprite)Ba.<span class="pl-c1">push</span>(a);<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.LensFlare)Va.<span class="pl-c1">push</span>(a);<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.ImmediateRenderObject){<span class="pl-k">var</span> b,c;a.material.transparent<span class="pl-k">?</span>(b<span class="pl-k">=</span>wa,c<span class="pl-k">=++</span>qa)<span class="pl-k">:</span>(b<span class="pl-k">=</span>ja,c<span class="pl-k">=++</span>Ca);c<span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span><span class="pl-k">?</span>b[c]<span class="pl-k">=</span>a<span class="pl-k">:</span>b.<span class="pl-c1">push</span>(a)}<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Mesh<span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Line<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="LC496" class="blob-code blob-code-inner js-file-line">a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Points)<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SkinnedMesh<span class="pl-k">&amp;&amp;</span>a.skeleton.update(),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a.frustumCulled<span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span>Wa.intersectsObject(a)){<span class="pl-k">var</span> d<span class="pl-k">=</span>a.material;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>d.visible)<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>la.sortObjects<span class="pl-k">&amp;&amp;</span>($.setFromMatrixPosition(a.matrixWorld),$.applyProjection(Da)),b<span class="pl-k">=</span>Ea.update(a),d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshFaceMaterial){c<span class="pl-k">=</span>b.groups;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>d.materials,d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>c[d],h<span class="pl-k">=</span>e[g.materialIndex];<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>h.visible<span class="pl-k">&amp;&amp;</span>m(a,b,h,$.<span class="pl-c1">z</span>,g)}}<span class="pl-k">else</span> m(a,b,d,$.<span class="pl-c1">z</span>)}a<span class="pl-k">=</span>a.children;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>)q(a[d])}}<span class="pl-k">function</span> <span class="pl-en">t</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="LC497" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>a[f],k<span class="pl-k">=</span>h.<span class="pl-c1">object</span>,l<span class="pl-k">=</span>h.geometry,m<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">?</span>h.material<span class="pl-k">:</span>e,h<span class="pl-k">=</span>h.group;k.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,k.matrixWorld);k.normalMatrix.getNormalMatrix(k.modelViewMatrix);la.renderBufferDirect(b,c,d,l,m,k,h)}}<span class="pl-k">function</span> <span class="pl-en">r</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span>e,g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>h;g<span class="pl-k">++</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span>a[g];k.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,k.matrixWorld);k.normalMatrix.getNormalMatrix(k.modelViewMatrix);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>k.material);u(f);<span class="pl-k">var</span> l<span class="pl-k">=</span>w(b,</td>
      </tr>
      <tr>
        <td id="L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="LC498" class="blob-code blob-code-inner js-file-line">c,d,f,k);pa<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;k.render(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){la.renderBufferImmediate(a,l,f)})}}<span class="pl-k">function</span> <span class="pl-en">u</span>(<span class="pl-smi">a</span>){a.side<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.DoubleSide<span class="pl-k">?</span>M.enable(s.CULL_FACE)<span class="pl-k">:</span>M.disable(s.CULL_FACE);M.setFlipSided(a.side<span class="pl-k">===</span><span class="pl-c1">THREE</span>.BackSide);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a.transparent<span class="pl-k">?</span>M.setBlending(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha)<span class="pl-k">:</span>M.setBlending(<span class="pl-c1">THREE</span>.NoBlending);M.setDepthFunc(a.depthFunc);M.setDepthTest(a.depthTest);M.setDepthWrite(a.depthWrite);M.setColorWrite(a.colorWrite);M.setPolygonOffset(a.polygonOffset,</td>
      </tr>
      <tr>
        <td id="L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="LC499" class="blob-code blob-code-inner js-file-line">a.polygonOffsetFactor,a.polygonOffsetUnits)}<span class="pl-k">function</span> <span class="pl-en">w</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){eb<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span>Y.get(d);<span class="pl-k">if</span>(d.needsUpdate<span class="pl-k">||!</span>f.program){a<span class="pl-k">:</span>{<span class="pl-k">var</span> l<span class="pl-k">=</span>Y.get(d),m<span class="pl-k">=</span>Ua.getParameters(d,b,c,e),n<span class="pl-k">=</span>Ua.getProgramCode(d,m),q<span class="pl-k">=</span>l.program,p<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>q)d.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,h);<span class="pl-k">else</span> <span class="pl-k">if</span>(q.<span class="pl-c1">code</span><span class="pl-k">!==</span>n)k(d);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>m.shaderID)<span class="pl-k">break</span> a;<span class="pl-k">else</span> p<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(p){<span class="pl-k">if</span>(m.shaderID){<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">THREE</span>.ShaderLib[m.shaderID];l.__webglShader<span class="pl-k">=</span>{name<span class="pl-k">:</span>d.<span class="pl-c1">type</span>,uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.UniformsUtils.clone(t.uniforms),vertexShader<span class="pl-k">:</span>t.vertexShader,fragmentShader<span class="pl-k">:</span>t.fragmentShader}}<span class="pl-k">else</span> l.__webglShader<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="LC500" class="blob-code blob-code-inner js-file-line">{name<span class="pl-k">:</span>d.<span class="pl-c1">type</span>,uniforms<span class="pl-k">:</span>d.uniforms,vertexShader<span class="pl-k">:</span>d.vertexShader,fragmentShader<span class="pl-k">:</span>d.fragmentShader};d.__webglShader<span class="pl-k">=</span>l.__webglShader;q<span class="pl-k">=</span>Ua.acquireProgram(d,m,n);l.program<span class="pl-k">=</span>q;d.program<span class="pl-k">=</span>q}<span class="pl-k">var</span> r<span class="pl-k">=</span>q.getAttributes();<span class="pl-k">if</span>(d.morphTargets)<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>d.numSupportedMorphTargets<span class="pl-k">=</span><span class="pl-c1">0</span>;w<span class="pl-k">&lt;</span>la.maxMorphTargets;w<span class="pl-k">++</span>)<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>r[<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w]<span class="pl-k">&amp;&amp;</span>d.numSupportedMorphTargets<span class="pl-k">++</span>;<span class="pl-k">if</span>(d.morphNormals)<span class="pl-k">for</span>(w<span class="pl-k">=</span>d.numSupportedMorphNormals<span class="pl-k">=</span><span class="pl-c1">0</span>;w<span class="pl-k">&lt;</span>la.maxMorphNormals;w<span class="pl-k">++</span>)<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>r[<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w]<span class="pl-k">&amp;&amp;</span>d.numSupportedMorphNormals<span class="pl-k">++</span>;l.uniformsList<span class="pl-k">=</span>[];<span class="pl-k">var</span> u<span class="pl-k">=</span>l.program.getUniforms(),</td>
      </tr>
      <tr>
        <td id="L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="LC501" class="blob-code blob-code-inner js-file-line">G;<span class="pl-k">for</span>(G <span class="pl-k">in</span> l.__webglShader.uniforms){<span class="pl-k">var</span> z<span class="pl-k">=</span>u[G];z<span class="pl-k">&amp;&amp;</span>l.uniformsList.<span class="pl-c1">push</span>([l.__webglShader.uniforms[G],z])}}d.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>}<span class="pl-k">var</span> D<span class="pl-k">=!</span><span class="pl-c1">1</span>,E<span class="pl-k">=!</span><span class="pl-c1">1</span>,K<span class="pl-k">=!</span><span class="pl-c1">1</span>,J<span class="pl-k">=</span>f.program,A<span class="pl-k">=</span>J.getUniforms(),y<span class="pl-k">=</span>f.__webglShader.uniforms;J.<span class="pl-c1">id</span><span class="pl-k">!==</span>ib<span class="pl-k">&amp;&amp;</span>(s.useProgram(J.program),ib<span class="pl-k">=</span>J.<span class="pl-c1">id</span>,K<span class="pl-k">=</span>E<span class="pl-k">=</span>D<span class="pl-k">=!</span><span class="pl-c1">0</span>);d.<span class="pl-c1">id</span><span class="pl-k">!==</span>Ta<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span>Ta<span class="pl-k">&amp;&amp;</span>(K<span class="pl-k">=!</span><span class="pl-c1">0</span>),Ta<span class="pl-k">=</span>d.<span class="pl-c1">id</span>,E<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-k">if</span>(D<span class="pl-k">||</span>a<span class="pl-k">!==</span>Sa)s.uniformMatrix4fv(A.projectionMatrix,<span class="pl-k">!</span><span class="pl-c1">1</span>,a.projectionMatrix.<span class="pl-c1">elements</span>),na.logarithmicDepthBuffer<span class="pl-k">&amp;&amp;</span>s.uniform1f(A.logDepthBufFC,<span class="pl-c1">2</span><span class="pl-k">/</span>(<span class="pl-c1">Math</span><span class="pl-c1">.log</span>(a.far<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">LN2</span>)),a<span class="pl-k">!==</span>Sa<span class="pl-k">&amp;&amp;</span>(Sa<span class="pl-k">=</span>a),(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.ShaderMaterial<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="LC502" class="blob-code blob-code-inner js-file-line">d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshPhongMaterial<span class="pl-k">||</span>d.envMap)<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.cameraPosition<span class="pl-k">&amp;&amp;</span>($.setFromMatrixPosition(a.matrixWorld),s.uniform3f(A.cameraPosition,$.<span class="pl-c1">x</span>,$.<span class="pl-c1">y</span>,$.<span class="pl-c1">z</span>)),(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshPhongMaterial<span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshLambertMaterial<span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshBasicMaterial<span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.ShaderMaterial<span class="pl-k">||</span>d.skinning)<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.viewMatrix<span class="pl-k">&amp;&amp;</span>s.uniformMatrix4fv(A.viewMatrix,<span class="pl-k">!</span><span class="pl-c1">1</span>,a.matrixWorldInverse.<span class="pl-c1">elements</span>);<span class="pl-k">if</span>(d.skinning)<span class="pl-k">if</span>(e.bindMatrix<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.bindMatrix<span class="pl-k">&amp;&amp;</span>s.uniformMatrix4fv(A.bindMatrix,<span class="pl-k">!</span><span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="LC503" class="blob-code blob-code-inner js-file-line">e.bindMatrix.<span class="pl-c1">elements</span>),e.bindMatrixInverse<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.bindMatrixInverse<span class="pl-k">&amp;&amp;</span>s.uniformMatrix4fv(A.bindMatrixInverse,<span class="pl-k">!</span><span class="pl-c1">1</span>,e.bindMatrixInverse.<span class="pl-c1">elements</span>),na.floatVertexTextures<span class="pl-k">&amp;&amp;</span>e.skeleton<span class="pl-k">&amp;&amp;</span>e.skeleton.useVertexTexture){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.boneTexture){<span class="pl-k">var</span> P<span class="pl-k">=</span>B();s.uniform1i(A.boneTexture,P);la.setTexture(e.skeleton.boneTexture,P)}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.boneTextureWidth<span class="pl-k">&amp;&amp;</span>s.uniform1i(A.boneTextureWidth,e.skeleton.boneTextureWidth);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.boneTextureHeight<span class="pl-k">&amp;&amp;</span>s.uniform1i(A.boneTextureHeight,e.skeleton.boneTextureHeight)}<span class="pl-k">else</span> e.skeleton<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="LC504" class="blob-code blob-code-inner js-file-line">e.skeleton.boneMatrices<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.boneGlobalMatrices<span class="pl-k">&amp;&amp;</span>s.uniformMatrix4fv(A.boneGlobalMatrices,<span class="pl-k">!</span><span class="pl-c1">1</span>,e.skeleton.boneMatrices);<span class="pl-k">if</span>(E){c<span class="pl-k">&amp;&amp;</span>d.fog<span class="pl-k">&amp;&amp;</span>(y.fogColor.<span class="pl-c1">value</span><span class="pl-k">=</span>c.<span class="pl-c1">color</span>,c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Fog<span class="pl-k">?</span>(y.fogNear.<span class="pl-c1">value</span><span class="pl-k">=</span>c.near,y.fogFar.<span class="pl-c1">value</span><span class="pl-k">=</span>c.far)<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.FogExp2<span class="pl-k">&amp;&amp;</span>(y.fogDensity.<span class="pl-c1">value</span><span class="pl-k">=</span>c.density));<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshPhongMaterial<span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshLambertMaterial<span class="pl-k">||</span>d.lights){<span class="pl-k">if</span>(db){<span class="pl-k">var</span> K<span class="pl-k">=!</span><span class="pl-c1">0</span>,F,L,V,Q<span class="pl-k">=</span><span class="pl-c1">0</span>,U<span class="pl-k">=</span><span class="pl-c1">0</span>,R<span class="pl-k">=</span><span class="pl-c1">0</span>,ja,X,va,ma,Z,aa<span class="pl-k">=</span>tb,qa<span class="pl-k">=</span>a.matrixWorldInverse,Ca<span class="pl-k">=</span>aa.directional.colors,Ba<span class="pl-k">=</span>aa.directional.positions,</td>
      </tr>
      <tr>
        <td id="L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="LC505" class="blob-code blob-code-inner js-file-line">wa<span class="pl-k">=</span>aa.point.colors,Ra<span class="pl-k">=</span>aa.point.positions,Va<span class="pl-k">=</span>aa.point.distances,ia<span class="pl-k">=</span>aa.point.decays,fa<span class="pl-k">=</span>aa.spot.colors,ga<span class="pl-k">=</span>aa.spot.positions,sa<span class="pl-k">=</span>aa.spot.distances,pa<span class="pl-k">=</span>aa.spot.directions,Ea<span class="pl-k">=</span>aa.spot.anglesCos,Ja<span class="pl-k">=</span>aa.spot.exponents,Ka<span class="pl-k">=</span>aa.spot.decays,ta<span class="pl-k">=</span>aa.hemi.skyColors,ua<span class="pl-k">=</span>aa.hemi.groundColors,Aa<span class="pl-k">=</span>aa.hemi.positions,Xa<span class="pl-k">=</span><span class="pl-c1">0</span>,Fa<span class="pl-k">=</span><span class="pl-c1">0</span>,ra<span class="pl-k">=</span><span class="pl-c1">0</span>,Ma<span class="pl-k">=</span><span class="pl-c1">0</span>,Da<span class="pl-k">=</span><span class="pl-c1">0</span>,jb<span class="pl-k">=</span><span class="pl-c1">0</span>,kb<span class="pl-k">=</span><span class="pl-c1">0</span>,fb<span class="pl-k">=</span><span class="pl-c1">0</span>,Ya<span class="pl-k">=</span><span class="pl-c1">0</span>,Za<span class="pl-k">=</span><span class="pl-c1">0</span>,xa<span class="pl-k">=</span><span class="pl-c1">0</span>,Na<span class="pl-k">=</span><span class="pl-c1">0</span>;F<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(L<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;F<span class="pl-k">&lt;</span>L;F<span class="pl-k">++</span>)V<span class="pl-k">=</span>b[F],V.onlyShadow<span class="pl-k">||</span>(ja<span class="pl-k">=</span>V.<span class="pl-c1">color</span>,ma<span class="pl-k">=</span>V.intensity,Z<span class="pl-k">=</span>V.distance,V <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.AmbientLight<span class="pl-k">?</span>V.visible<span class="pl-k">&amp;&amp;</span>(Q<span class="pl-k">+=</span>ja.r,U<span class="pl-k">+=</span>ja.g,R<span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="LC506" class="blob-code blob-code-inner js-file-line">ja.b)<span class="pl-k">:</span>V <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.DirectionalLight<span class="pl-k">?</span>(Da<span class="pl-k">+=</span><span class="pl-c1">1</span>,V.visible<span class="pl-k">&amp;&amp;</span>(ca.setFromMatrixPosition(V.matrixWorld),$.setFromMatrixPosition(V.<span class="pl-c1">target</span>.matrixWorld),ca.<span class="pl-c1">sub</span>($),ca.transformDirection(qa),Ya<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Xa,Ba[Ya<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">x</span>,Ba[Ya<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">y</span>,Ba[Ya<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">z</span>,x(Ca,Ya,ja,ma),Xa<span class="pl-k">+=</span><span class="pl-c1">1</span>))<span class="pl-k">:</span>V <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.PointLight<span class="pl-k">?</span>(jb<span class="pl-k">+=</span><span class="pl-c1">1</span>,V.visible<span class="pl-k">&amp;&amp;</span>(Za<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Fa,x(wa,Za,ja,ma),$.setFromMatrixPosition(V.matrixWorld),$.applyMatrix4(qa),Ra[Za<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>$.<span class="pl-c1">x</span>,Ra[Za<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>$.<span class="pl-c1">y</span>,Ra[Za<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>$.<span class="pl-c1">z</span>,Va[Fa]<span class="pl-k">=</span>Z,ia[Fa]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>V.distance<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>V.decay,Fa<span class="pl-k">+=</span><span class="pl-c1">1</span>))<span class="pl-k">:</span>V <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SpotLight<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="LC507" class="blob-code blob-code-inner js-file-line">(kb<span class="pl-k">+=</span><span class="pl-c1">1</span>,V.visible<span class="pl-k">&amp;&amp;</span>(xa<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ra,x(fa,xa,ja,ma),ca.setFromMatrixPosition(V.matrixWorld),$.copy(ca).applyMatrix4(qa),ga[xa<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>$.<span class="pl-c1">x</span>,ga[xa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>$.<span class="pl-c1">y</span>,ga[xa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>$.<span class="pl-c1">z</span>,sa[ra]<span class="pl-k">=</span>Z,$.setFromMatrixPosition(V.<span class="pl-c1">target</span>.matrixWorld),ca.<span class="pl-c1">sub</span>($),ca.transformDirection(qa),pa[xa<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">x</span>,pa[xa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">y</span>,pa[xa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">z</span>,Ea[ra]<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(V.angle),Ja[ra]<span class="pl-k">=</span>V.exponent,Ka[ra]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>V.distance<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>V.decay,ra<span class="pl-k">+=</span><span class="pl-c1">1</span>))<span class="pl-k">:</span>V <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.HemisphereLight<span class="pl-k">&amp;&amp;</span>(fb<span class="pl-k">+=</span><span class="pl-c1">1</span>,V.visible<span class="pl-k">&amp;&amp;</span>(ca.setFromMatrixPosition(V.matrixWorld),ca.transformDirection(qa),Na<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Ma,Aa[Na<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="LC508" class="blob-code blob-code-inner js-file-line">ca.<span class="pl-c1">x</span>,Aa[Na<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">y</span>,Aa[Na<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>ca.<span class="pl-c1">z</span>,X<span class="pl-k">=</span>V.<span class="pl-c1">color</span>,va<span class="pl-k">=</span>V.groundColor,x(ta,Na,X,ma),x(ua,Na,va,ma),Ma<span class="pl-k">+=</span><span class="pl-c1">1</span>)));F<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Xa;<span class="pl-k">for</span>(L<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(Ca.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>Da);F<span class="pl-k">&lt;</span>L;F<span class="pl-k">++</span>)Ca[F]<span class="pl-k">=</span><span class="pl-c1">0</span>;F<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Fa;<span class="pl-k">for</span>(L<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(wa.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>jb);F<span class="pl-k">&lt;</span>L;F<span class="pl-k">++</span>)wa[F]<span class="pl-k">=</span><span class="pl-c1">0</span>;F<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ra;<span class="pl-k">for</span>(L<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(fa.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>kb);F<span class="pl-k">&lt;</span>L;F<span class="pl-k">++</span>)fa[F]<span class="pl-k">=</span><span class="pl-c1">0</span>;F<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Ma;<span class="pl-k">for</span>(L<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(ta.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>fb);F<span class="pl-k">&lt;</span>L;F<span class="pl-k">++</span>)ta[F]<span class="pl-k">=</span><span class="pl-c1">0</span>;F<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Ma;<span class="pl-k">for</span>(L<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(ua.<span class="pl-c1">length</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>fb);F<span class="pl-k">&lt;</span>L;F<span class="pl-k">++</span>)ua[F]<span class="pl-k">=</span><span class="pl-c1">0</span>;aa.directional.<span class="pl-c1">length</span><span class="pl-k">=</span>Xa;aa.point.<span class="pl-c1">length</span><span class="pl-k">=</span>Fa;aa.spot.<span class="pl-c1">length</span><span class="pl-k">=</span>ra;aa.hemi.<span class="pl-c1">length</span><span class="pl-k">=</span>Ma;aa.ambient[<span class="pl-c1">0</span>]<span class="pl-k">=</span>Q;aa.ambient[<span class="pl-c1">1</span>]<span class="pl-k">=</span>U;aa.ambient[<span class="pl-c1">2</span>]<span class="pl-k">=</span>R;db<span class="pl-k">=!</span><span class="pl-c1">1</span>}<span class="pl-k">if</span>(K){<span class="pl-k">var</span> ea<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="LC509" class="blob-code blob-code-inner js-file-line">tb;y.ambientLightColor.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.ambient;y.directionalLightColor.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.directional.colors;y.directionalLightDirection.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.directional.positions;y.pointLightColor.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.point.colors;y.pointLightPosition.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.point.positions;y.pointLightDistance.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.point.distances;y.pointLightDecay.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.point.decays;y.spotLightColor.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.spot.colors;y.spotLightPosition.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.spot.positions;y.spotLightDistance.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.spot.distances;y.spotLightDirection.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.spot.directions;y.spotLightAngleCos.<span class="pl-c1">value</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="LC510" class="blob-code blob-code-inner js-file-line">ea.spot.anglesCos;y.spotLightExponent.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.spot.exponents;y.spotLightDecay.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.spot.decays;y.hemisphereLightSkyColor.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.hemi.skyColors;y.hemisphereLightGroundColor.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.hemi.groundColors;y.hemisphereLightDirection.<span class="pl-c1">value</span><span class="pl-k">=</span>ea.hemi.positions;v(y,<span class="pl-k">!</span><span class="pl-c1">0</span>)}<span class="pl-k">else</span> v(y,<span class="pl-k">!</span><span class="pl-c1">1</span>)}<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshBasicMaterial<span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshLambertMaterial<span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshPhongMaterial){y.opacity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.opacity;y.diffuse.<span class="pl-c1">value</span><span class="pl-k">=</span>d.<span class="pl-c1">color</span>;d.emissive<span class="pl-k">&amp;&amp;</span>(y.emissive.<span class="pl-c1">value</span><span class="pl-k">=</span>d.emissive);y.map.<span class="pl-c1">value</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="LC511" class="blob-code blob-code-inner js-file-line">d.map;y.specularMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.specularMap;y.alphaMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.alphaMap;d.aoMap<span class="pl-k">&amp;&amp;</span>(y.aoMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.aoMap,y.aoMapIntensity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.aoMapIntensity);<span class="pl-k">var</span> oa;d.map<span class="pl-k">?</span>oa<span class="pl-k">=</span>d.map<span class="pl-k">:</span>d.specularMap<span class="pl-k">?</span>oa<span class="pl-k">=</span>d.specularMap<span class="pl-k">:</span>d.displacementMap<span class="pl-k">?</span>oa<span class="pl-k">=</span>d.displacementMap<span class="pl-k">:</span>d.normalMap<span class="pl-k">?</span>oa<span class="pl-k">=</span>d.normalMap<span class="pl-k">:</span>d.bumpMap<span class="pl-k">?</span>oa<span class="pl-k">=</span>d.bumpMap<span class="pl-k">:</span>d.alphaMap<span class="pl-k">?</span>oa<span class="pl-k">=</span>d.alphaMap<span class="pl-k">:</span>d.emissiveMap<span class="pl-k">&amp;&amp;</span>(oa<span class="pl-k">=</span>d.emissiveMap);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>oa){<span class="pl-k">var</span> Wa<span class="pl-k">=</span>oa.offset,bb<span class="pl-k">=</span>oa.repeat;y.offsetRepeat.<span class="pl-c1">value</span>.set(Wa.<span class="pl-c1">x</span>,Wa.<span class="pl-c1">y</span>,bb.<span class="pl-c1">x</span>,bb.<span class="pl-c1">y</span>)}y.envMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.envMap;y.flipEnvMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.envMap <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.WebGLRenderTargetCube<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="LC512" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span><span class="pl-k">:-</span><span class="pl-c1">1</span>;y.reflectivity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.reflectivity;y.refractionRatio.<span class="pl-c1">value</span><span class="pl-k">=</span>d.refractionRatio}<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.LineBasicMaterial)y.diffuse.<span class="pl-c1">value</span><span class="pl-k">=</span>d.<span class="pl-c1">color</span>,y.opacity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.opacity;<span class="pl-k">else</span> <span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.LineDashedMaterial)y.diffuse.<span class="pl-c1">value</span><span class="pl-k">=</span>d.<span class="pl-c1">color</span>,y.opacity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.opacity,y.dashSize.<span class="pl-c1">value</span><span class="pl-k">=</span>d.dashSize,y.totalSize.<span class="pl-c1">value</span><span class="pl-k">=</span>d.dashSize<span class="pl-k">+</span>d.gapSize,y.scale.<span class="pl-c1">value</span><span class="pl-k">=</span>d.scale;<span class="pl-k">else</span> <span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.PointsMaterial){<span class="pl-k">if</span>(y.psColor.<span class="pl-c1">value</span><span class="pl-k">=</span>d.<span class="pl-c1">color</span>,y.opacity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.opacity,y.<span class="pl-c1">size</span>.<span class="pl-c1">value</span><span class="pl-k">=</span>d.<span class="pl-c1">size</span>,y.scale.<span class="pl-c1">value</span><span class="pl-k">=</span>C.<span class="pl-c1">height</span><span class="pl-k">/</span><span class="pl-c1">2</span>,y.map.<span class="pl-c1">value</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="LC513" class="blob-code blob-code-inner js-file-line">d.map,<span class="pl-c1">null</span><span class="pl-k">!==</span>d.map){<span class="pl-k">var</span> cb<span class="pl-k">=</span>d.map.offset,ub<span class="pl-k">=</span>d.map.repeat;y.offsetRepeat.<span class="pl-c1">value</span>.set(cb.<span class="pl-c1">x</span>,cb.<span class="pl-c1">y</span>,ub.<span class="pl-c1">x</span>,ub.<span class="pl-c1">y</span>)}}<span class="pl-k">else</span> d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshPhongMaterial<span class="pl-k">?</span>(y.specular.<span class="pl-c1">value</span><span class="pl-k">=</span>d.specular,y.shininess.<span class="pl-c1">value</span><span class="pl-k">=</span>d.shininess,d.lightMap<span class="pl-k">&amp;&amp;</span>(y.lightMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.lightMap,y.lightMapIntensity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.lightMapIntensity),d.emissiveMap<span class="pl-k">&amp;&amp;</span>(y.emissiveMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.emissiveMap),d.bumpMap<span class="pl-k">&amp;&amp;</span>(y.bumpMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.bumpMap,y.bumpScale.<span class="pl-c1">value</span><span class="pl-k">=</span>d.bumpScale),d.normalMap<span class="pl-k">&amp;&amp;</span>(y.normalMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.normalMap,y.normalScale.<span class="pl-c1">value</span>.copy(d.normalScale)),d.displacementMap<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="LC514" class="blob-code blob-code-inner js-file-line">(y.displacementMap.<span class="pl-c1">value</span><span class="pl-k">=</span>d.displacementMap,y.displacementScale.<span class="pl-c1">value</span><span class="pl-k">=</span>d.displacementScale,y.displacementBias.<span class="pl-c1">value</span><span class="pl-k">=</span>d.displacementBias))<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshDepthMaterial<span class="pl-k">?</span>(y.mNear.<span class="pl-c1">value</span><span class="pl-k">=</span>a.near,y.mFar.<span class="pl-c1">value</span><span class="pl-k">=</span>a.far,y.opacity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.opacity)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshNormalMaterial<span class="pl-k">&amp;&amp;</span>(y.opacity.<span class="pl-c1">value</span><span class="pl-k">=</span>d.opacity);<span class="pl-k">if</span>(e.receiveShadow<span class="pl-k">&amp;&amp;!</span>d._shadowPass<span class="pl-k">&amp;&amp;</span>y.shadowMatrix)<span class="pl-k">for</span>(<span class="pl-k">var</span> Oa<span class="pl-k">=</span><span class="pl-c1">0</span>,lb<span class="pl-k">=</span><span class="pl-c1">0</span>,pb<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;lb<span class="pl-k">&lt;</span>pb;lb<span class="pl-k">++</span>){<span class="pl-k">var</span> ya<span class="pl-k">=</span>b[lb];ya.castShadow<span class="pl-k">&amp;&amp;</span>(ya <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SpotLight<span class="pl-k">||</span>ya <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.DirectionalLight)<span class="pl-k">&amp;&amp;</span>(y.shadowMap.<span class="pl-c1">value</span>[Oa]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="LC515" class="blob-code blob-code-inner js-file-line">ya.shadowMap,y.shadowMapSize.<span class="pl-c1">value</span>[Oa]<span class="pl-k">=</span>ya.shadowMapSize,y.shadowMatrix.<span class="pl-c1">value</span>[Oa]<span class="pl-k">=</span>ya.shadowMatrix,y.shadowDarkness.<span class="pl-c1">value</span>[Oa]<span class="pl-k">=</span>ya.shadowDarkness,y.shadowBias.<span class="pl-c1">value</span>[Oa]<span class="pl-k">=</span>ya.shadowBias,Oa<span class="pl-k">++</span>)}<span class="pl-k">for</span>(<span class="pl-k">var</span> mb<span class="pl-k">=</span>f.uniformsList,ka,Ga,gb<span class="pl-k">=</span><span class="pl-c1">0</span>,qb<span class="pl-k">=</span>mb.<span class="pl-c1">length</span>;gb<span class="pl-k">&lt;</span>qb;gb<span class="pl-k">++</span>){<span class="pl-k">var</span> S<span class="pl-k">=</span>mb[gb][<span class="pl-c1">0</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>S.needsUpdate){<span class="pl-k">var</span> vb<span class="pl-k">=</span>S.<span class="pl-c1">type</span>,N<span class="pl-k">=</span>S.<span class="pl-c1">value</span>,W<span class="pl-k">=</span>mb[gb][<span class="pl-c1">1</span>];<span class="pl-k">switch</span>(vb){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1i<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1i(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1f<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1f(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>2f<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform2f(W,N[<span class="pl-c1">0</span>],N[<span class="pl-c1">1</span>]);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>3f<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform3f(W,N[<span class="pl-c1">0</span>],N[<span class="pl-c1">1</span>],N[<span class="pl-c1">2</span>]);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>4f<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform4f(W,</td>
      </tr>
      <tr>
        <td id="L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="LC516" class="blob-code blob-code-inner js-file-line">N[<span class="pl-c1">0</span>],N[<span class="pl-c1">1</span>],N[<span class="pl-c1">2</span>],N[<span class="pl-c1">3</span>]);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1iv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1iv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>3iv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform3iv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>1fv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1fv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>2fv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform2fv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>3fv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform3fv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>4fv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform4fv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Matrix3fv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniformMatrix3fv(W,<span class="pl-k">!</span><span class="pl-c1">1</span>,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Matrix4fv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniformMatrix4fv(W,<span class="pl-k">!</span><span class="pl-c1">1</span>,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1i(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1f(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform2f(W,N.<span class="pl-c1">x</span>,N.<span class="pl-c1">y</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform3f(W,N.<span class="pl-c1">x</span>,N.<span class="pl-c1">y</span>,N.<span class="pl-c1">z</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform4f(W,</td>
      </tr>
      <tr>
        <td id="L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="LC517" class="blob-code blob-code-inner js-file-line">N.<span class="pl-c1">x</span>,N.<span class="pl-c1">y</span>,N.<span class="pl-c1">z</span>,N.w);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform3f(W,N.r,N.g,N.b);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>iv1<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1iv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>iv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform3iv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform1fv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniform3fv(W,N);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v2v<span class="pl-pds">&quot;</span></span><span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>S._array<span class="pl-k">&amp;&amp;</span>(S._array<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>N.<span class="pl-c1">length</span>));<span class="pl-k">for</span>(<span class="pl-k">var</span> T<span class="pl-k">=</span><span class="pl-c1">0</span>,hb<span class="pl-k">=</span><span class="pl-c1">0</span>,ha<span class="pl-k">=</span>N.<span class="pl-c1">length</span>;T<span class="pl-k">&lt;</span>ha;T<span class="pl-k">++</span>,hb<span class="pl-k">+=</span><span class="pl-c1">2</span>)S._array[hb<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">x</span>,S._array[hb<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">y</span>;s.uniform2fv(W,S._array);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v3v<span class="pl-pds">&quot;</span></span><span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>S._array<span class="pl-k">&amp;&amp;</span>(S._array<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>N.<span class="pl-c1">length</span>));<span class="pl-k">for</span>(<span class="pl-k">var</span> $a<span class="pl-k">=</span>T<span class="pl-k">=</span><span class="pl-c1">0</span>,ha<span class="pl-k">=</span>N.<span class="pl-c1">length</span>;T<span class="pl-k">&lt;</span>ha;T<span class="pl-k">++</span>,$a<span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="LC518" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span>)S._array[$a<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">x</span>,S._array[$a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">y</span>,S._array[$a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">z</span>;s.uniform3fv(W,S._array);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v4v<span class="pl-pds">&quot;</span></span><span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>S._array<span class="pl-k">&amp;&amp;</span>(S._array<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">4</span><span class="pl-k">*</span>N.<span class="pl-c1">length</span>));<span class="pl-k">for</span>(<span class="pl-k">var</span> Pa<span class="pl-k">=</span>T<span class="pl-k">=</span><span class="pl-c1">0</span>,ha<span class="pl-k">=</span>N.<span class="pl-c1">length</span>;T<span class="pl-k">&lt;</span>ha;T<span class="pl-k">++</span>,Pa<span class="pl-k">+=</span><span class="pl-c1">4</span>)S._array[Pa<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">x</span>,S._array[Pa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">y</span>,S._array[Pa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>N[T].<span class="pl-c1">z</span>,S._array[Pa<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>N[T].w;s.uniform4fv(W,S._array);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m3<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniformMatrix3fv(W,<span class="pl-k">!</span><span class="pl-c1">1</span>,N.<span class="pl-c1">elements</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m3v<span class="pl-pds">&quot;</span></span><span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>S._array<span class="pl-k">&amp;&amp;</span>(S._array<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">9</span><span class="pl-k">*</span>N.<span class="pl-c1">length</span>));T<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ha<span class="pl-k">=</span>N.<span class="pl-c1">length</span>;T<span class="pl-k">&lt;</span>ha;T<span class="pl-k">++</span>)N[T].flattenToArrayOffset(S._array,</td>
      </tr>
      <tr>
        <td id="L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="LC519" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">9</span><span class="pl-k">*</span>T);s.uniformMatrix3fv(W,<span class="pl-k">!</span><span class="pl-c1">1</span>,S._array);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m4<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>s.uniformMatrix4fv(W,<span class="pl-k">!</span><span class="pl-c1">1</span>,N.<span class="pl-c1">elements</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m4v<span class="pl-pds">&quot;</span></span><span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>S._array<span class="pl-k">&amp;&amp;</span>(S._array<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span><span class="pl-k">*</span>N.<span class="pl-c1">length</span>));T<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ha<span class="pl-k">=</span>N.<span class="pl-c1">length</span>;T<span class="pl-k">&lt;</span>ha;T<span class="pl-k">++</span>)N[T].flattenToArrayOffset(S._array,<span class="pl-c1">16</span><span class="pl-k">*</span>T);s.uniformMatrix4fv(W,<span class="pl-k">!</span><span class="pl-c1">1</span>,S._array);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>ka<span class="pl-k">=</span>N;Ga<span class="pl-k">=</span>B();s.uniform1i(W,Ga);<span class="pl-k">if</span>(<span class="pl-k">!</span>ka)<span class="pl-k">continue</span>;<span class="pl-k">if</span>(ka <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.CubeTexture<span class="pl-k">||</span><span class="pl-c1">Array</span>.isArray(ka.image)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">6</span><span class="pl-k">===</span>ka.image.<span class="pl-c1">length</span>){<span class="pl-k">var</span> ba<span class="pl-k">=</span>ka,wb<span class="pl-k">=</span>Ga,Qa<span class="pl-k">=</span>Y.get(ba);<span class="pl-k">if</span>(<span class="pl-c1">6</span><span class="pl-k">===</span>ba.image.<span class="pl-c1">length</span>)<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>ba.<span class="pl-c1">version</span><span class="pl-k">&amp;&amp;</span>Qa.__version<span class="pl-k">!==</span>ba.<span class="pl-c1">version</span>){Qa.__image__webglTextureCube<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="LC520" class="blob-code blob-code-inner js-file-line">(ba.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,g),Qa.__image__webglTextureCube<span class="pl-k">=</span>s.createTexture(),La.textures<span class="pl-k">++</span>);M.activeTexture(s.TEXTURE0<span class="pl-k">+</span>wb);M.bindTexture(s.TEXTURE_CUBE_MAP,Qa.__image__webglTextureCube);s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,ba.flipY);<span class="pl-k">for</span>(<span class="pl-k">var</span> xb<span class="pl-k">=</span>ba <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.CompressedTexture,nb<span class="pl-k">=</span>ba.image[<span class="pl-c1">0</span>]<span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.DataTexture,Ha<span class="pl-k">=</span>[],da<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>da;da<span class="pl-k">++</span>)Ha[da]<span class="pl-k">=!</span>la.autoScaleCubemaps<span class="pl-k">||</span>xb<span class="pl-k">||</span>nb<span class="pl-k">?</span>nb<span class="pl-k">?</span>ba.image[da].image<span class="pl-k">:</span>ba.image[da]<span class="pl-k">:</span>I(ba.image[da],na.maxCubemapSize);<span class="pl-k">var</span> yb<span class="pl-k">=</span>Ha[<span class="pl-c1">0</span>],zb<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(yb.<span class="pl-c1">width</span>)<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="LC521" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(yb.<span class="pl-c1">height</span>),za<span class="pl-k">=</span>O(ba.format),ob<span class="pl-k">=</span>O(ba.<span class="pl-c1">type</span>);H(s.TEXTURE_CUBE_MAP,ba,zb);<span class="pl-k">for</span>(da<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>da;da<span class="pl-k">++</span>)<span class="pl-k">if</span>(xb)<span class="pl-k">for</span>(<span class="pl-k">var</span> Ia,Ab<span class="pl-k">=</span>Ha[da].mipmaps,ab<span class="pl-k">=</span><span class="pl-c1">0</span>,rb<span class="pl-k">=</span>Ab.<span class="pl-c1">length</span>;ab<span class="pl-k">&lt;</span>rb;ab<span class="pl-k">++</span>)Ia<span class="pl-k">=</span>Ab[ab],ba.format<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.RGBAFormat<span class="pl-k">&amp;&amp;</span>ba.format<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.RGBFormat<span class="pl-k">?-</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>M.getCompressedTextureFormats().<span class="pl-c1">indexOf</span>(za)<span class="pl-k">?</span>M.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X<span class="pl-k">+</span>da,ab,za,Ia.<span class="pl-c1">width</span>,Ia.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,Ia.<span class="pl-c1">data</span>)<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span>M.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="LC522" class="blob-code blob-code-inner js-file-line">da,ab,za,Ia.<span class="pl-c1">width</span>,Ia.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,za,ob,Ia.<span class="pl-c1">data</span>);<span class="pl-k">else</span> nb<span class="pl-k">?</span>M.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X<span class="pl-k">+</span>da,<span class="pl-c1">0</span>,za,Ha[da].<span class="pl-c1">width</span>,Ha[da].<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,za,ob,Ha[da].<span class="pl-c1">data</span>)<span class="pl-k">:</span>M.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X<span class="pl-k">+</span>da,<span class="pl-c1">0</span>,za,za,ob,Ha[da]);ba.generateMipmaps<span class="pl-k">&amp;&amp;</span>zb<span class="pl-k">&amp;&amp;</span>s.generateMipmap(s.TEXTURE_CUBE_MAP);Qa.__version<span class="pl-k">=</span>ba.<span class="pl-c1">version</span>;<span class="pl-k">if</span>(ba.onUpdate)ba.onUpdate(ba)}<span class="pl-k">else</span> M.activeTexture(s.TEXTURE0<span class="pl-k">+</span>wb),M.bindTexture(s.TEXTURE_CUBE_MAP,Qa.__image__webglTextureCube)}<span class="pl-k">else</span> <span class="pl-k">if</span>(ka <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.WebGLRenderTargetCube){<span class="pl-k">var</span> sb<span class="pl-k">=</span>ka;M.activeTexture(s.TEXTURE0<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="LC523" class="blob-code blob-code-inner js-file-line">Ga);M.bindTexture(s.TEXTURE_CUBE_MAP,Y.get(sb).__webglTexture)}<span class="pl-k">else</span> la.setTexture(ka,Ga);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>tv<span class="pl-pds">&quot;</span></span><span class="pl-k">:void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>S._array<span class="pl-k">&amp;&amp;</span>(S._array<span class="pl-k">=</span>[]);T<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ha<span class="pl-k">=</span>S.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;T<span class="pl-k">&lt;</span>ha;T<span class="pl-k">++</span>)S._array[T]<span class="pl-k">=</span>B();s.uniform1iv(W,S._array);T<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ha<span class="pl-k">=</span>S.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;T<span class="pl-k">&lt;</span>ha;T<span class="pl-k">++</span>)ka<span class="pl-k">=</span>S.<span class="pl-c1">value</span>[T],Ga<span class="pl-k">=</span>S._array[T],ka<span class="pl-k">&amp;&amp;</span>la.setTexture(ka,Ga);<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Unknown uniform type: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>vb)}}}}s.uniformMatrix4fv(A.modelViewMatrix,<span class="pl-k">!</span><span class="pl-c1">1</span>,e.modelViewMatrix.<span class="pl-c1">elements</span>);A.normalMatrix<span class="pl-k">&amp;&amp;</span>s.uniformMatrix3fv(A.normalMatrix,</td>
      </tr>
      <tr>
        <td id="L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="LC524" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>,e.normalMatrix.<span class="pl-c1">elements</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>A.modelMatrix<span class="pl-k">&amp;&amp;</span>s.uniformMatrix4fv(A.modelMatrix,<span class="pl-k">!</span><span class="pl-c1">1</span>,e.matrixWorld.<span class="pl-c1">elements</span>);<span class="pl-k">return</span> J}<span class="pl-k">function</span> <span class="pl-en">v</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){a.ambientLightColor.needsUpdate<span class="pl-k">=</span>b;a.directionalLightColor.needsUpdate<span class="pl-k">=</span>b;a.directionalLightDirection.needsUpdate<span class="pl-k">=</span>b;a.pointLightColor.needsUpdate<span class="pl-k">=</span>b;a.pointLightPosition.needsUpdate<span class="pl-k">=</span>b;a.pointLightDistance.needsUpdate<span class="pl-k">=</span>b;a.pointLightDecay.needsUpdate<span class="pl-k">=</span>b;a.spotLightColor.needsUpdate<span class="pl-k">=</span>b;a.spotLightPosition.needsUpdate<span class="pl-k">=</span>b;a.spotLightDistance.needsUpdate<span class="pl-k">=</span>b;a.spotLightDirection.needsUpdate<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="LC525" class="blob-code blob-code-inner js-file-line">b;a.spotLightAngleCos.needsUpdate<span class="pl-k">=</span>b;a.spotLightExponent.needsUpdate<span class="pl-k">=</span>b;a.spotLightDecay.needsUpdate<span class="pl-k">=</span>b;a.hemisphereLightSkyColor.needsUpdate<span class="pl-k">=</span>b;a.hemisphereLightGroundColor.needsUpdate<span class="pl-k">=</span>b;a.hemisphereLightDirection.needsUpdate<span class="pl-k">=</span>b}<span class="pl-k">function</span> <span class="pl-en">B</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>eb;a<span class="pl-k">&gt;=</span>na.maxTextures<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WebGLRenderer: trying to use <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> texture units while this GPU supports only <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>na.maxTextures);eb<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> a}<span class="pl-k">function</span> <span class="pl-en">x</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a[b<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>c.r<span class="pl-k">*</span>d;a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c.g<span class="pl-k">*</span>d;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c.b<span class="pl-k">*</span>d}<span class="pl-k">function</span> <span class="pl-en">H</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c<span class="pl-k">?</span>(s.texParameteri(a,s.TEXTURE_WRAP_S,</td>
      </tr>
      <tr>
        <td id="L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="LC526" class="blob-code blob-code-inner js-file-line">O(b.wrapS)),s.texParameteri(a,s.TEXTURE_WRAP_T,O(b.wrapT)),s.texParameteri(a,s.TEXTURE_MAG_FILTER,O(b.magFilter)),s.texParameteri(a,s.TEXTURE_MIN_FILTER,O(b.minFilter)))<span class="pl-k">:</span>(s.texParameteri(a,s.TEXTURE_WRAP_S,s.CLAMP_TO_EDGE),s.texParameteri(a,s.TEXTURE_WRAP_T,s.CLAMP_TO_EDGE),b.wrapS<span class="pl-k">===</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping<span class="pl-k">&amp;&amp;</span>b.wrapT<span class="pl-k">===</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping<span class="pl-k">||</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping. ( <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b.sourceFile<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="LC527" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span> )<span class="pl-pds">&quot;</span></span>),s.texParameteri(a,s.TEXTURE_MAG_FILTER,G(b.magFilter)),s.texParameteri(a,s.TEXTURE_MIN_FILTER,G(b.minFilter)),b.minFilter<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.NearestFilter<span class="pl-k">&amp;&amp;</span>b.minFilter<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.LinearFilter<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter. ( <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b.sourceFile<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> )<span class="pl-pds">&quot;</span></span>));<span class="pl-k">!</span>(c<span class="pl-k">=</span>X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>))<span class="pl-k">||</span>b.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.FloatType<span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">===</span>X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float_linear<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>b.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.HalfFloatType<span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="LC528" class="blob-code blob-code-inner js-file-line">X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float_linear<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||!</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span>b.anisotropy<span class="pl-k">||</span>Y.get(b).__currentAnisotropy)<span class="pl-k">||</span>(s.texParameterf(a,c.TEXTURE_MAX_ANISOTROPY_EXT,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b.anisotropy,la.getMaxAnisotropy())),Y.get(b).__currentAnisotropy<span class="pl-k">=</span>b.anisotropy)}<span class="pl-k">function</span> <span class="pl-en">I</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(a.<span class="pl-c1">width</span><span class="pl-k">&gt;</span>b<span class="pl-k">||</span>a.<span class="pl-c1">height</span><span class="pl-k">&gt;</span>b){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a.<span class="pl-c1">width</span>,a.<span class="pl-c1">height</span>),d<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);d.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">width</span><span class="pl-k">*</span>c);d.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a.<span class="pl-c1">height</span><span class="pl-k">*</span>c);d.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).drawImage(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a.<span class="pl-c1">width</span>,a.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,d.<span class="pl-c1">width</span>,d.<span class="pl-c1">height</span>);<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: image is too big (<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="LC529" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">width</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a.<span class="pl-c1">height</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>). Resized to <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>d.<span class="pl-c1">width</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>d.<span class="pl-c1">height</span>,a);<span class="pl-k">return</span> d}<span class="pl-k">return</span> a}<span class="pl-k">function</span> <span class="pl-en">z</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){s.bindFramebuffer(s.FRAMEBUFFER,a);s.framebufferTexture2D(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,c,Y.get(b).__webglTexture,<span class="pl-c1">0</span>)}<span class="pl-k">function</span> <span class="pl-en">D</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){s.bindRenderbuffer(s.RENDERBUFFER,a);b.depthBuffer<span class="pl-k">&amp;&amp;!</span>b.stencilBuffer<span class="pl-k">?</span>(s.renderbufferStorage(s.RENDERBUFFER,s.DEPTH_COMPONENT16,b.<span class="pl-c1">width</span>,b.<span class="pl-c1">height</span>),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.RENDERBUFFER,a))<span class="pl-k">:</span>b.depthBuffer<span class="pl-k">&amp;&amp;</span>b.stencilBuffer<span class="pl-k">?</span>(s.renderbufferStorage(s.RENDERBUFFER,</td>
      </tr>
      <tr>
        <td id="L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="LC530" class="blob-code blob-code-inner js-file-line">s.DEPTH_STENCIL,b.<span class="pl-c1">width</span>,b.<span class="pl-c1">height</span>),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.RENDERBUFFER,a))<span class="pl-k">:</span>s.renderbufferStorage(s.RENDERBUFFER,s.RGBA4,b.<span class="pl-c1">width</span>,b.<span class="pl-c1">height</span>)}<span class="pl-k">function</span> <span class="pl-en">G</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.NearestFilter<span class="pl-k">||</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.NearestMipMapNearestFilter<span class="pl-k">||</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.NearestMipMapLinearFilter<span class="pl-k">?</span>s.NEAREST<span class="pl-k">:</span>s.LINEAR}<span class="pl-k">function</span> <span class="pl-en">O</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RepeatWrapping)<span class="pl-k">return</span> s.REPEAT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping)<span class="pl-k">return</span> s.CLAMP_TO_EDGE;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.MirroredRepeatWrapping)<span class="pl-k">return</span> s.MIRRORED_REPEAT;</td>
      </tr>
      <tr>
        <td id="L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="LC531" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.NearestFilter)<span class="pl-k">return</span> s.NEAREST;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.NearestMipMapNearestFilter)<span class="pl-k">return</span> s.NEAREST_MIPMAP_NEAREST;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.NearestMipMapLinearFilter)<span class="pl-k">return</span> s.NEAREST_MIPMAP_LINEAR;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.LinearFilter)<span class="pl-k">return</span> s.LINEAR;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.LinearMipMapNearestFilter)<span class="pl-k">return</span> s.LINEAR_MIPMAP_NEAREST;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.LinearMipMapLinearFilter)<span class="pl-k">return</span> s.LINEAR_MIPMAP_LINEAR;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.UnsignedByteType)<span class="pl-k">return</span> s.UNSIGNED_BYTE;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.UnsignedShort4444Type)<span class="pl-k">return</span> s.UNSIGNED_SHORT_4_4_4_4;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.UnsignedShort5551Type)<span class="pl-k">return</span> s.UNSIGNED_SHORT_5_5_5_1;</td>
      </tr>
      <tr>
        <td id="L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="LC532" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.UnsignedShort565Type)<span class="pl-k">return</span> s.UNSIGNED_SHORT_5_6_5;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.ByteType)<span class="pl-k">return</span> s.BYTE;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.ShortType)<span class="pl-k">return</span> s.SHORT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.UnsignedShortType)<span class="pl-k">return</span> s.UNSIGNED_SHORT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.IntType)<span class="pl-k">return</span> s.INT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.UnsignedIntType)<span class="pl-k">return</span> s.UNSIGNED_INT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.FloatType)<span class="pl-k">return</span> s.FLOAT;b<span class="pl-k">=</span>X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.HalfFloatType)<span class="pl-k">return</span> b.HALF_FLOAT_OES;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AlphaFormat)<span class="pl-k">return</span> s.ALPHA;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGBFormat)<span class="pl-k">return</span> s.RGB;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGBAFormat)<span class="pl-k">return</span> s.RGBA;</td>
      </tr>
      <tr>
        <td id="L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="LC533" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.LuminanceFormat)<span class="pl-k">return</span> s.LUMINANCE;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.LuminanceAlphaFormat)<span class="pl-k">return</span> s.LUMINANCE_ALPHA;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AddEquation)<span class="pl-k">return</span> s.FUNC_ADD;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.SubtractEquation)<span class="pl-k">return</span> s.FUNC_SUBTRACT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.ReverseSubtractEquation)<span class="pl-k">return</span> s.FUNC_REVERSE_SUBTRACT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.ZeroFactor)<span class="pl-k">return</span> s.ZERO;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.OneFactor)<span class="pl-k">return</span> s.ONE;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.SrcColorFactor)<span class="pl-k">return</span> s.SRC_COLOR;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.OneMinusSrcColorFactor)<span class="pl-k">return</span> s.ONE_MINUS_SRC_COLOR;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.SrcAlphaFactor)<span class="pl-k">return</span> s.SRC_ALPHA;</td>
      </tr>
      <tr>
        <td id="L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="LC534" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.OneMinusSrcAlphaFactor)<span class="pl-k">return</span> s.ONE_MINUS_SRC_ALPHA;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.DstAlphaFactor)<span class="pl-k">return</span> s.DST_ALPHA;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.OneMinusDstAlphaFactor)<span class="pl-k">return</span> s.ONE_MINUS_DST_ALPHA;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.DstColorFactor)<span class="pl-k">return</span> s.DST_COLOR;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.OneMinusDstColorFactor)<span class="pl-k">return</span> s.ONE_MINUS_DST_COLOR;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.SrcAlphaSaturateFactor)<span class="pl-k">return</span> s.SRC_ALPHA_SATURATE;b<span class="pl-k">=</span>X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGB_S3TC_DXT1_Format)<span class="pl-k">return</span> b.COMPRESSED_RGB_S3TC_DXT1_EXT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGBA_S3TC_DXT1_Format)<span class="pl-k">return</span> b.COMPRESSED_RGBA_S3TC_DXT1_EXT;</td>
      </tr>
      <tr>
        <td id="L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="LC535" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGBA_S3TC_DXT3_Format)<span class="pl-k">return</span> b.COMPRESSED_RGBA_S3TC_DXT3_EXT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGBA_S3TC_DXT5_Format)<span class="pl-k">return</span> b.COMPRESSED_RGBA_S3TC_DXT5_EXT}b<span class="pl-k">=</span>X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGB_PVRTC_4BPPV1_Format)<span class="pl-k">return</span> b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGB_PVRTC_2BPPV1_Format)<span class="pl-k">return</span> b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGBA_PVRTC_4BPPV1_Format)<span class="pl-k">return</span> b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.RGBA_PVRTC_2BPPV1_Format)<span class="pl-k">return</span> b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="LC536" class="blob-code blob-code-inner js-file-line">X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_blend_minmax<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>b){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.MinEquation)<span class="pl-k">return</span> b.MIN_EXT;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.MaxEquation)<span class="pl-k">return</span> b.MAX_EXT}<span class="pl-k">return</span> <span class="pl-c1">0</span>}<span class="pl-en">console</span><span class="pl-c1">.log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.REVISION);a<span class="pl-k">=</span>a<span class="pl-k">||</span>{};<span class="pl-k">var</span> C<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.canvas<span class="pl-k">?</span>a.canvas<span class="pl-k">:</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),F<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.context<span class="pl-k">?</span>a.context<span class="pl-k">:</span><span class="pl-c1">null</span>,K<span class="pl-k">=</span>C.<span class="pl-c1">width</span>,L<span class="pl-k">=</span>C.<span class="pl-c1">height</span>,E<span class="pl-k">=</span><span class="pl-c1">1</span>,J<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.alpha<span class="pl-k">?</span>a.alpha<span class="pl-k">:!</span><span class="pl-c1">1</span>,y<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.depth<span class="pl-k">?</span>a.depth<span class="pl-k">:!</span><span class="pl-c1">0</span>,P<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.stencil<span class="pl-k">?</span>a.stencil<span class="pl-k">:!</span><span class="pl-c1">0</span>,U<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.antialias<span class="pl-k">?</span>a.antialias<span class="pl-k">:!</span><span class="pl-c1">1</span>,Q<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.premultipliedAlpha<span class="pl-k">?</span>a.premultipliedAlpha<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="LC537" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>,R<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.preserveDrawingBuffer<span class="pl-k">?</span>a.preserveDrawingBuffer<span class="pl-k">:!</span><span class="pl-c1">1</span>,A<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>),ia<span class="pl-k">=</span><span class="pl-c1">0</span>,Z<span class="pl-k">=</span>[],fa<span class="pl-k">=</span>[],V<span class="pl-k">=-</span><span class="pl-c1">1</span>,va<span class="pl-k">=</span>[],ma<span class="pl-k">=-</span><span class="pl-c1">1</span>,ja<span class="pl-k">=</span>[],Ca<span class="pl-k">=-</span><span class="pl-c1">1</span>,wa<span class="pl-k">=</span>[],qa<span class="pl-k">=-</span><span class="pl-c1">1</span>,Ra<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">8</span>),Ba<span class="pl-k">=</span>[],Va<span class="pl-k">=</span>[];<span class="pl-v">this</span>.domElement<span class="pl-k">=</span>C;<span class="pl-v">this</span>.context<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.sortObjects<span class="pl-k">=</span><span class="pl-v">this</span>.autoClearStencil<span class="pl-k">=</span><span class="pl-v">this</span>.autoClearDepth<span class="pl-k">=</span><span class="pl-v">this</span>.autoClearColor<span class="pl-k">=</span><span class="pl-v">this</span>.autoClear<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.gammaFactor<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-v">this</span>.gammaOutput<span class="pl-k">=</span><span class="pl-v">this</span>.gammaInput<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.maxMorphTargets<span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-v">this</span>.maxMorphNormals<span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-v">this</span>.autoScaleCubemaps<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> la<span class="pl-k">=</span><span class="pl-v">this</span>,ib<span class="pl-k">=</span><span class="pl-c1">null</span>,Aa<span class="pl-k">=</span><span class="pl-c1">null</span>,Ta<span class="pl-k">=-</span><span class="pl-c1">1</span>,pa<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,Sa<span class="pl-k">=</span><span class="pl-c1">null</span>,eb<span class="pl-k">=</span><span class="pl-c1">0</span>,Ja<span class="pl-k">=</span><span class="pl-c1">0</span>,Ka<span class="pl-k">=</span><span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="LC538" class="blob-code blob-code-inner js-file-line">ta<span class="pl-k">=</span>C.<span class="pl-c1">width</span>,ua<span class="pl-k">=</span>C.<span class="pl-c1">height</span>,bb<span class="pl-k">=</span><span class="pl-c1">0</span>,cb<span class="pl-k">=</span><span class="pl-c1">0</span>,Wa<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,Da<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,$<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,ca<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,db<span class="pl-k">=!</span><span class="pl-c1">0</span>,tb<span class="pl-k">=</span>{ambient<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],directional<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[]},point<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[],distances<span class="pl-k">:</span>[],decays<span class="pl-k">:</span>[]},spot<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[],distances<span class="pl-k">:</span>[],directions<span class="pl-k">:</span>[],anglesCos<span class="pl-k">:</span>[],exponents<span class="pl-k">:</span>[],decays<span class="pl-k">:</span>[]},hemi<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,skyColors<span class="pl-k">:</span>[],groundColors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[]}},La<span class="pl-k">=</span>{geometries<span class="pl-k">:</span><span class="pl-c1">0</span>,textures<span class="pl-k">:</span><span class="pl-c1">0</span>},sa<span class="pl-k">=</span>{calls<span class="pl-k">:</span><span class="pl-c1">0</span>,vertices<span class="pl-k">:</span><span class="pl-c1">0</span>,faces<span class="pl-k">:</span><span class="pl-c1">0</span>,points<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-v">this</span><span class="pl-c1">.info</span><span class="pl-k">=</span>{render<span class="pl-k">:</span>sa,</td>
      </tr>
      <tr>
        <td id="L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="LC539" class="blob-code blob-code-inner js-file-line">memory<span class="pl-k">:</span>La,programs<span class="pl-k">:</span><span class="pl-c1">null</span>};<span class="pl-k">var</span> s;<span class="pl-k">try</span>{J<span class="pl-k">=</span>{alpha<span class="pl-k">:</span>J,depth<span class="pl-k">:</span>y,stencil<span class="pl-k">:</span>P,antialias<span class="pl-k">:</span>U,premultipliedAlpha<span class="pl-k">:</span>Q,preserveDrawingBuffer<span class="pl-k">:</span>R};s<span class="pl-k">=</span>F<span class="pl-k">||</span>C.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>webgl<span class="pl-pds">&quot;</span></span>,J)<span class="pl-k">||</span>C.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>experimental-webgl<span class="pl-pds">&quot;</span></span>,J);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>s){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>C.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>webgl<span class="pl-pds">&quot;</span></span>))<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>Error creating WebGL context with your selected attributes.<span class="pl-pds">&quot;</span></span>;<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>Error creating WebGL context.<span class="pl-pds">&quot;</span></span>;}C.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>webglcontextlost<span class="pl-pds">&quot;</span></span>,e,<span class="pl-k">!</span><span class="pl-c1">1</span>)}<span class="pl-k">catch</span>(pb){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>pb)}<span class="pl-k">var</span> X<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLExtensions</span>(s);X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float<span class="pl-pds">&quot;</span></span>);X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float_linear<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="LC540" class="blob-code blob-code-inner js-file-line">X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float<span class="pl-pds">&quot;</span></span>);X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float_linear<span class="pl-pds">&quot;</span></span>);X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_standard_derivatives<span class="pl-pds">&quot;</span></span>);X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>);X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_element_index_uint<span class="pl-pds">&quot;</span></span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">THREE</span>.BufferGeometry.MaxIndex<span class="pl-k">=</span><span class="pl-c1">4294967296</span>);<span class="pl-k">var</span> na<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLCapabilities</span>(s,X,a),M<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLState</span>(s,X,O),Y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLProperties</span>,Ea<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLObjects</span>(s,Y,<span class="pl-v">this</span><span class="pl-c1">.info</span>),Ua<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLPrograms</span>(<span class="pl-v">this</span>,na);<span class="pl-v">this</span><span class="pl-c1">.info</span>.programs<span class="pl-k">=</span>Ua.programs;<span class="pl-k">var</span> qb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLBufferRenderer</span>(s,X,sa),rb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLIndexedBufferRenderer</span>(s,</td>
      </tr>
      <tr>
        <td id="L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="LC541" class="blob-code blob-code-inner js-file-line">X,sa);c();<span class="pl-v">this</span>.context<span class="pl-k">=</span>s;<span class="pl-v">this</span>.capabilities<span class="pl-k">=</span>na;<span class="pl-v">this</span>.extensions<span class="pl-k">=</span>X;<span class="pl-v">this</span>.state<span class="pl-k">=</span>M;<span class="pl-k">var</span> ga<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLShadowMap</span>(<span class="pl-v">this</span>,Z,Ea);<span class="pl-v">this</span>.shadowMap<span class="pl-k">=</span>ga;<span class="pl-k">var</span> sb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SpritePlugin</span>(<span class="pl-v">this</span>,Ba),Bb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LensFlarePlugin</span>(<span class="pl-v">this</span>,Va);<span class="pl-c1">this</span>.<span class="pl-en">getContext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> s};<span class="pl-c1">this</span>.<span class="pl-en">getContextAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> s.getContextAttributes()};<span class="pl-c1">this</span>.<span class="pl-en">forceContextLoss</span><span class="pl-k">=</span><span class="pl-k">function</span>(){X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_lose_context<span class="pl-pds">&quot;</span></span>).loseContext()};<span class="pl-c1">this</span>.<span class="pl-en">getMaxAnisotropy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">return</span> a;<span class="pl-k">var</span> b<span class="pl-k">=</span>X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="LC542" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> a<span class="pl-k">=</span><span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>s.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT)<span class="pl-k">:</span><span class="pl-c1">0</span>}}();<span class="pl-c1">this</span>.<span class="pl-en">getPrecision</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> na.precision};<span class="pl-c1">this</span>.<span class="pl-en">getPixelRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> E};<span class="pl-c1">this</span>.<span class="pl-en">setPixelRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(E<span class="pl-k">=</span>a)};<span class="pl-c1">this</span>.<span class="pl-en">getSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>{width<span class="pl-k">:</span>K,height<span class="pl-k">:</span>L}};<span class="pl-c1">this</span>.<span class="pl-en">setSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){K<span class="pl-k">=</span>a;L<span class="pl-k">=</span>b;C.<span class="pl-c1">width</span><span class="pl-k">=</span>a<span class="pl-k">*</span>E;C.<span class="pl-c1">height</span><span class="pl-k">=</span>b<span class="pl-k">*</span>E;<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(C.<span class="pl-c1">style</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>px<span class="pl-pds">&quot;</span></span>,C.<span class="pl-c1">style</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>px<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.setViewport(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b)};<span class="pl-c1">this</span>.<span class="pl-en">setViewport</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){Ja<span class="pl-k">=</span>a<span class="pl-k">*</span>E;Ka<span class="pl-k">=</span>b<span class="pl-k">*</span>E;ta<span class="pl-k">=</span>c<span class="pl-k">*</span>E;ua<span class="pl-k">=</span>d<span class="pl-k">*</span>E;s.viewport(Ja,Ka,ta,ua)};<span class="pl-v">this</span>.setScissor<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="LC543" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){s.scissor(a<span class="pl-k">*</span>E,b<span class="pl-k">*</span>E,c<span class="pl-k">*</span>E,d<span class="pl-k">*</span>E)};<span class="pl-c1">this</span>.<span class="pl-en">enableScissorTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){M.setScissorTest(a)};<span class="pl-c1">this</span>.<span class="pl-en">getClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> A};<span class="pl-c1">this</span>.<span class="pl-en">setClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){A.set(a);ia<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1</span>;b(A.r,A.g,A.b,ia)};<span class="pl-c1">this</span>.<span class="pl-en">getClearAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> ia};<span class="pl-c1">this</span>.<span class="pl-en">setClearAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){ia<span class="pl-k">=</span>a;b(A.r,A.g,A.b,ia)};<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">||</span>a)d|<span class="pl-k">=</span>s.COLOR_BUFFER_BIT;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span>b)d|<span class="pl-k">=</span>s.DEPTH_BUFFER_BIT;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">||</span>c)d|<span class="pl-k">=</span>s.STENCIL_BUFFER_BIT;s.<span class="pl-c1">clear</span>(d)};<span class="pl-c1">this</span>.<span class="pl-en">clearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){s.<span class="pl-c1">clear</span>(s.COLOR_BUFFER_BIT)};</td>
      </tr>
      <tr>
        <td id="L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="LC544" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">clearDepth</span><span class="pl-k">=</span><span class="pl-k">function</span>(){s.<span class="pl-c1">clear</span>(s.DEPTH_BUFFER_BIT)};<span class="pl-c1">this</span>.<span class="pl-en">clearStencil</span><span class="pl-k">=</span><span class="pl-k">function</span>(){s.<span class="pl-c1">clear</span>(s.STENCIL_BUFFER_BIT)};<span class="pl-c1">this</span>.<span class="pl-en">clearTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.setRenderTarget(a);<span class="pl-v">this</span>.<span class="pl-c1">clear</span>(b,c,d)};<span class="pl-v">this</span>.resetGLState<span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){C.removeEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>webglcontextlost<span class="pl-pds">&quot;</span></span>,e,<span class="pl-k">!</span><span class="pl-c1">1</span>)};<span class="pl-c1">this</span>.<span class="pl-en">renderBufferImmediate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){M.initAttributes();<span class="pl-k">var</span> d<span class="pl-k">=</span>Y.get(a);a.hasPositions<span class="pl-k">&amp;&amp;!</span>d.position<span class="pl-k">&amp;&amp;</span>(d.position<span class="pl-k">=</span>s.createBuffer());a.hasNormals<span class="pl-k">&amp;&amp;!</span>d.normal<span class="pl-k">&amp;&amp;</span>(d.normal<span class="pl-k">=</span>s.createBuffer());a.hasUvs<span class="pl-k">&amp;&amp;!</span>d.uv<span class="pl-k">&amp;&amp;</span>(d.uv<span class="pl-k">=</span>s.createBuffer());</td>
      </tr>
      <tr>
        <td id="L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="LC545" class="blob-code blob-code-inner js-file-line">a.hasColors<span class="pl-k">&amp;&amp;!</span>d.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span>(d.<span class="pl-c1">color</span><span class="pl-k">=</span>s.createBuffer());b<span class="pl-k">=</span>b.getAttributes();a.hasPositions<span class="pl-k">&amp;&amp;</span>(s.bindBuffer(s.ARRAY_BUFFER,d.position),s.bufferData(s.ARRAY_BUFFER,a.positionArray,s.DYNAMIC_DRAW),M.enableAttribute(b.position),s.vertexAttribPointer(b.position,<span class="pl-c1">3</span>,s.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-k">if</span>(a.hasNormals){s.bindBuffer(s.ARRAY_BUFFER,d.normal);<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span>c.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>c.shading<span class="pl-k">===</span><span class="pl-c1">THREE</span>.FlatShading)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>a.count;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">+=</span><span class="pl-c1">9</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a.normalArray,h<span class="pl-k">=</span>(g[e<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">6</span>])<span class="pl-k">/</span><span class="pl-c1">3</span>,k<span class="pl-k">=</span>(g[e<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">7</span>])<span class="pl-k">/</span><span class="pl-c1">3</span>,l<span class="pl-k">=</span>(g[e<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="LC546" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">+</span>g[e<span class="pl-k">+</span><span class="pl-c1">8</span>])<span class="pl-k">/</span><span class="pl-c1">3</span>;g[e<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>h;g[e<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>k;g[e<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>l;g[e<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>h;g[e<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>k;g[e<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>l;g[e<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>h;g[e<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>k;g[e<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>l}s.bufferData(s.ARRAY_BUFFER,a.normalArray,s.DYNAMIC_DRAW);M.enableAttribute(b.normal);s.vertexAttribPointer(b.normal,<span class="pl-c1">3</span>,s.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}a.hasUvs<span class="pl-k">&amp;&amp;</span>c.map<span class="pl-k">&amp;&amp;</span>(s.bindBuffer(s.ARRAY_BUFFER,d.uv),s.bufferData(s.ARRAY_BUFFER,a.uvArray,s.DYNAMIC_DRAW),M.enableAttribute(b.uv),s.vertexAttribPointer(b.uv,<span class="pl-c1">2</span>,s.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));a.hasColors<span class="pl-k">&amp;&amp;</span>c.vertexColors<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.NoColors<span class="pl-k">&amp;&amp;</span>(s.bindBuffer(s.ARRAY_BUFFER,d.<span class="pl-c1">color</span>),s.bufferData(s.ARRAY_BUFFER,</td>
      </tr>
      <tr>
        <td id="L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="LC547" class="blob-code blob-code-inner js-file-line">a.colorArray,s.DYNAMIC_DRAW),M.enableAttribute(b.<span class="pl-c1">color</span>),s.vertexAttribPointer(b.<span class="pl-c1">color</span>,<span class="pl-c1">3</span>,s.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));M.disableUnusedAttributes();s.drawArrays(s.TRIANGLES,<span class="pl-c1">0</span>,a.count);a.count<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">renderBufferDirect</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){u(e);<span class="pl-k">var</span> h<span class="pl-k">=</span>w(a,b,c,e,f),k<span class="pl-k">=!</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span>d.<span class="pl-c1">id</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>h.<span class="pl-c1">id</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>e.wireframe;a<span class="pl-k">!==</span>pa<span class="pl-k">&amp;&amp;</span>(pa<span class="pl-k">=</span>a,k<span class="pl-k">=!</span><span class="pl-c1">0</span>);a<span class="pl-k">=</span>f.morphTargetInfluences;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a){b<span class="pl-k">=</span>[];c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>k;c<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>a[c];b.<span class="pl-c1">push</span>([m,c])}b.<span class="pl-c1">sort</span>(l);<span class="pl-c1">8</span><span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(b.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">8</span>);<span class="pl-k">var</span> n<span class="pl-k">=</span>d.morphAttributes;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>k;c<span class="pl-k">++</span>)m<span class="pl-k">=</span>b[c],</td>
      </tr>
      <tr>
        <td id="L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="LC548" class="blob-code blob-code-inner js-file-line">Ra[c]<span class="pl-k">=</span>m[<span class="pl-c1">0</span>],<span class="pl-c1">0</span><span class="pl-k">!==</span>m[<span class="pl-c1">0</span>]<span class="pl-k">?</span>(a<span class="pl-k">=</span>m[<span class="pl-c1">1</span>],<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>e.morphTargets<span class="pl-k">&amp;&amp;</span>n.position<span class="pl-k">&amp;&amp;</span>d.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c,n.position[a]),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>e.morphNormals<span class="pl-k">&amp;&amp;</span>n.normal<span class="pl-k">&amp;&amp;</span>d.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c,n.normal[a]))<span class="pl-k">:</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>e.morphTargets<span class="pl-k">&amp;&amp;</span>d.removeAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>e.morphNormals<span class="pl-k">&amp;&amp;</span>d.removeAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c));a<span class="pl-k">=</span>h.getUniforms();<span class="pl-c1">null</span><span class="pl-k">!==</span>a.morphTargetInfluences<span class="pl-k">&amp;&amp;</span>s.uniform1fv(a.morphTargetInfluences,Ra);k<span class="pl-k">=!</span><span class="pl-c1">0</span>}a<span class="pl-k">=</span>d.<span class="pl-c1">index</span>;c<span class="pl-k">=</span>d.<span class="pl-c1">attributes</span>.position;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>e.wireframe<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>Ea.getWireframeAttribute(d));<span class="pl-c1">null</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>(b<span class="pl-k">=</span>rb,b.setIndex(a))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="LC549" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">=</span>qb;<span class="pl-k">if</span>(k){a<span class="pl-k">:</span>{<span class="pl-k">var</span> k<span class="pl-k">=void</span> <span class="pl-c1">0</span>,q;<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InstancedBufferGeometry<span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">=</span>X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">null</span><span class="pl-k">===</span>q)){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span> a}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>k<span class="pl-k">&amp;&amp;</span>(k<span class="pl-k">=</span><span class="pl-c1">0</span>);M.initAttributes();<span class="pl-k">var</span> m<span class="pl-k">=</span>d.<span class="pl-c1">attributes</span>,h<span class="pl-k">=</span>h.getAttributes(),n<span class="pl-k">=</span>e.defaultAttributeValues,p;<span class="pl-k">for</span>(p <span class="pl-k">in</span> h){<span class="pl-k">var</span> t<span class="pl-k">=</span>h[p];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>t){<span class="pl-k">var</span> r<span class="pl-k">=</span>m[p];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>r){M.enableAttribute(t);<span class="pl-k">var</span> v<span class="pl-k">=</span>r.itemSize,x<span class="pl-k">=</span>Ea.getAttributeBuffer(r);</td>
      </tr>
      <tr>
        <td id="L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="LC550" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(r <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute){<span class="pl-k">var</span> G<span class="pl-k">=</span>r.<span class="pl-c1">data</span>,B<span class="pl-k">=</span>G.stride,r<span class="pl-k">=</span>r.offset;s.bindBuffer(s.ARRAY_BUFFER,x);s.vertexAttribPointer(t,v,s.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,B<span class="pl-k">*</span>G.array.BYTES_PER_ELEMENT,(k<span class="pl-k">*</span>B<span class="pl-k">+</span>r)<span class="pl-k">*</span>G.array.BYTES_PER_ELEMENT);<span class="pl-k">if</span>(G <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InstancedInterleavedBuffer){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>q){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferAttribute but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span> a}q.vertexAttribDivisorANGLE(t,G.meshPerAttribute);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="LC551" class="blob-code blob-code-inner js-file-line">d.maxInstancedCount<span class="pl-k">&amp;&amp;</span>(d.maxInstancedCount<span class="pl-k">=</span>G.meshPerAttribute<span class="pl-k">*</span>G.count)}}<span class="pl-k">else</span> <span class="pl-k">if</span>(s.bindBuffer(s.ARRAY_BUFFER,x),s.vertexAttribPointer(t,v,s.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,k<span class="pl-k">*</span>v<span class="pl-k">*</span><span class="pl-c1">4</span>),r <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InstancedBufferAttribute){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>q){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferAttribute but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span> a}q.vertexAttribDivisorANGLE(t,r.meshPerAttribute);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d.maxInstancedCount<span class="pl-k">&amp;&amp;</span>(d.maxInstancedCount<span class="pl-k">=</span>r.meshPerAttribute<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="LC552" class="blob-code blob-code-inner js-file-line">r.count)}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>n<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span>n[p],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>v))<span class="pl-k">switch</span>(v.<span class="pl-c1">length</span>){<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span>s.vertexAttrib2fv(t,v);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span>s.vertexAttrib3fv(t,v);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">4</span><span class="pl-k">:</span>s.vertexAttrib4fv(t,v);<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>s.vertexAttrib1fv(t,v)}}}M.disableUnusedAttributes()}<span class="pl-c1">null</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,Ea.getAttributeBuffer(a))}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span>d.drawRange,g<span class="pl-k">=</span>{start<span class="pl-k">:</span>g.<span class="pl-c1">start</span>,count<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(g.count,<span class="pl-c1">null</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a.count<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute<span class="pl-k">?</span>c.<span class="pl-c1">data</span>.array.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">:</span>c.count)});f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Mesh<span class="pl-k">?</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="LC553" class="blob-code blob-code-inner js-file-line">e.wireframe<span class="pl-k">?</span>(M.setLineWidth(e.wireframeLinewidth<span class="pl-k">*</span>E),b.setMode(s.LINES))<span class="pl-k">:</span>b.setMode(s.TRIANGLES),d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InstancedBufferGeometry<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d.maxInstancedCount<span class="pl-k">?</span>b.renderInstances(d)<span class="pl-k">:</span>b.render(g.<span class="pl-c1">start</span>,g.count))<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Line<span class="pl-k">?</span>(d<span class="pl-k">=</span>e.linewidth,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">1</span>),M.setLineWidth(d<span class="pl-k">*</span>E),f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.LineSegments<span class="pl-k">?</span>b.setMode(s.LINES)<span class="pl-k">:</span>b.setMode(s.LINE_STRIP),b.render(g.<span class="pl-c1">start</span>,g.count))<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Points<span class="pl-k">&amp;&amp;</span>(b.setMode(s.POINTS),b.render(g.<span class="pl-c1">start</span>,g.count))};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="LC554" class="blob-code blob-code-inner js-file-line">b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Camera)<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> e<span class="pl-k">=</span>a.fog;pa<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;Ta<span class="pl-k">=-</span><span class="pl-c1">1</span>;Sa<span class="pl-k">=</span><span class="pl-c1">null</span>;db<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a.autoUpdate<span class="pl-k">&amp;&amp;</span>a.updateMatrixWorld();<span class="pl-c1">null</span><span class="pl-k">===</span>b.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span>b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);Da.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);Wa.setFromMatrix(Da);Z.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;qa<span class="pl-k">=</span>Ca<span class="pl-k">=</span>ma<span class="pl-k">=</span>V<span class="pl-k">=-</span><span class="pl-c1">1</span>;Ba.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;Va.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;q(a);fa.<span class="pl-c1">length</span><span class="pl-k">=</span>V<span class="pl-k">+</span><span class="pl-c1">1</span>;va.<span class="pl-c1">length</span><span class="pl-k">=</span>ma<span class="pl-k">+</span><span class="pl-c1">1</span>;ja.<span class="pl-c1">length</span><span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>;wa.<span class="pl-c1">length</span><span class="pl-k">=</span>qa<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>la.sortObjects<span class="pl-k">&amp;&amp;</span>(fa.<span class="pl-c1">sort</span>(n),</td>
      </tr>
      <tr>
        <td id="L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="LC555" class="blob-code blob-code-inner js-file-line">va.<span class="pl-c1">sort</span>(p));ga.render(a,b);sa.calls<span class="pl-k">=</span><span class="pl-c1">0</span>;sa.vertices<span class="pl-k">=</span><span class="pl-c1">0</span>;sa.faces<span class="pl-k">=</span><span class="pl-c1">0</span>;sa.points<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.setRenderTarget(c);(<span class="pl-v">this</span>.autoClear<span class="pl-k">||</span>d)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">clear</span>(<span class="pl-v">this</span>.autoClearColor,<span class="pl-v">this</span>.autoClearDepth,<span class="pl-v">this</span>.autoClearStencil);a.overrideMaterial<span class="pl-k">?</span>(d<span class="pl-k">=</span>a.overrideMaterial,t(fa,b,Z,e,d),t(va,b,Z,e,d),r(ja,b,Z,e,d),r(wa,b,Z,e,d))<span class="pl-k">:</span>(M.setBlending(<span class="pl-c1">THREE</span>.NoBlending),t(fa,b,Z,e),r(ja,b,Z,e),t(va,b,Z,e),r(wa,b,Z,e));sb.render(a,b);Bb.render(a,b,bb,cb);c<span class="pl-k">&amp;&amp;</span>c.generateMipmaps<span class="pl-k">&amp;&amp;</span>c.minFilter<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.NearestFilter<span class="pl-k">&amp;&amp;</span>c.minFilter<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.LinearFilter<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="LC556" class="blob-code blob-code-inner js-file-line">(c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.WebGLRenderTargetCube<span class="pl-k">?</span>(M.bindTexture(s.TEXTURE_CUBE_MAP,Y.get(c).__webglTexture),s.generateMipmap(s.TEXTURE_CUBE_MAP),M.bindTexture(s.TEXTURE_CUBE_MAP,<span class="pl-c1">null</span>))<span class="pl-k">:</span>(M.bindTexture(s.TEXTURE_2D,Y.get(c).__webglTexture),s.generateMipmap(s.TEXTURE_2D),M.bindTexture(s.TEXTURE_2D,<span class="pl-c1">null</span>)));M.setDepthTest(<span class="pl-k">!</span><span class="pl-c1">0</span>);M.setDepthWrite(<span class="pl-k">!</span><span class="pl-c1">0</span>);M.setColorWrite(<span class="pl-k">!</span><span class="pl-c1">0</span>)}};<span class="pl-c1">this</span>.<span class="pl-en">setFaceCulling</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.CullFaceNone<span class="pl-k">?</span>M.disable(s.CULL_FACE)<span class="pl-k">:</span>(b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.FrontFaceDirectionCW<span class="pl-k">?</span>s.frontFace(s.CW)<span class="pl-k">:</span>s.frontFace(s.CCW),</td>
      </tr>
      <tr>
        <td id="L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="LC557" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.CullFaceBack<span class="pl-k">?</span>s.cullFace(s.BACK)<span class="pl-k">:</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.CullFaceFront<span class="pl-k">?</span>s.cullFace(s.FRONT)<span class="pl-k">:</span>s.cullFace(s.FRONT_AND_BACK),M.enable(s.CULL_FACE))};<span class="pl-c1">this</span>.<span class="pl-en">setTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>Y.get(a);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.<span class="pl-c1">version</span><span class="pl-k">&amp;&amp;</span>c.__version<span class="pl-k">!==</span>a.<span class="pl-c1">version</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a.image;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d)<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture marked for update but image is undefined<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>d.<span class="pl-c1">complete</span>)<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Texture marked for update but image is incomplete<span class="pl-pds">&quot;</span></span>,a);<span class="pl-k">else</span>{<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c.__webglInit<span class="pl-k">&amp;&amp;</span>(c.__webglInit<span class="pl-k">=!</span><span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="LC558" class="blob-code blob-code-inner js-file-line">a.__webglInit<span class="pl-k">=!</span><span class="pl-c1">0</span>,a.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,g),c.__webglTexture<span class="pl-k">=</span>s.createTexture(),La.textures<span class="pl-k">++</span>);M.activeTexture(s.TEXTURE0<span class="pl-k">+</span>b);M.bindTexture(s.TEXTURE_2D,c.__webglTexture);s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,a.flipY);s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);s.pixelStorei(s.UNPACK_ALIGNMENT,a.unpackAlignment);a.image<span class="pl-k">=</span>I(a.image,na.maxTextureSize);<span class="pl-k">var</span> e<span class="pl-k">=</span>a.image,d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(e.<span class="pl-c1">width</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(e.<span class="pl-c1">height</span>),f<span class="pl-k">=</span>O(a.format),h<span class="pl-k">=</span>O(a.<span class="pl-c1">type</span>);H(s.TEXTURE_2D,a,</td>
      </tr>
      <tr>
        <td id="L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="LC559" class="blob-code blob-code-inner js-file-line">d);<span class="pl-k">var</span> k<span class="pl-k">=</span>a.mipmaps;<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.DataTexture)<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>k.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>d){<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>m;l<span class="pl-k">++</span>)e<span class="pl-k">=</span>k[l],M.texImage2D(s.TEXTURE_2D,l,f,e.<span class="pl-c1">width</span>,e.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,f,h,e.<span class="pl-c1">data</span>);a.generateMipmaps<span class="pl-k">=!</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> M.texImage2D(s.TEXTURE_2D,<span class="pl-c1">0</span>,f,e.<span class="pl-c1">width</span>,e.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,f,h,e.<span class="pl-c1">data</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.CompressedTexture)<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>m;l<span class="pl-k">++</span>)e<span class="pl-k">=</span>k[l],a.format<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.RGBAFormat<span class="pl-k">&amp;&amp;</span>a.format<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.RGBFormat<span class="pl-k">?-</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>M.getCompressedTextureFormats().<span class="pl-c1">indexOf</span>(f)<span class="pl-k">?</span>M.compressedTexImage2D(s.TEXTURE_2D,l,f,e.<span class="pl-c1">width</span>,e.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,e.<span class="pl-c1">data</span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="LC560" class="blob-code blob-code-inner js-file-line"><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span>M.texImage2D(s.TEXTURE_2D,l,f,e.<span class="pl-c1">width</span>,e.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,f,h,e.<span class="pl-c1">data</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>k.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>d){l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>m;l<span class="pl-k">++</span>)e<span class="pl-k">=</span>k[l],M.texImage2D(s.TEXTURE_2D,l,f,f,h,e);a.generateMipmaps<span class="pl-k">=!</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> M.texImage2D(s.TEXTURE_2D,<span class="pl-c1">0</span>,f,f,h,a.image);a.generateMipmaps<span class="pl-k">&amp;&amp;</span>d<span class="pl-k">&amp;&amp;</span>s.generateMipmap(s.TEXTURE_2D);c.__version<span class="pl-k">=</span>a.<span class="pl-c1">version</span>;<span class="pl-k">if</span>(a.onUpdate)a.onUpdate(a)}}<span class="pl-k">else</span> M.activeTexture(s.TEXTURE0<span class="pl-k">+</span>b),M.bindTexture(s.TEXTURE_2D,</td>
      </tr>
      <tr>
        <td id="L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="LC561" class="blob-code blob-code-inner js-file-line">c.__webglTexture)};<span class="pl-c1">this</span>.<span class="pl-en">setRenderTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.WebGLRenderTargetCube;<span class="pl-k">if</span>(a<span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>Y.get(a).__webglFramebuffer){<span class="pl-k">var</span> c<span class="pl-k">=</span>Y.get(a);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.depthBuffer<span class="pl-k">&amp;&amp;</span>(a.depthBuffer<span class="pl-k">=!</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a.stencilBuffer<span class="pl-k">&amp;&amp;</span>(a.stencilBuffer<span class="pl-k">=!</span><span class="pl-c1">0</span>);a.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,f);c.__webglTexture<span class="pl-k">=</span>s.createTexture();La.textures<span class="pl-k">++</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(a.<span class="pl-c1">width</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.isPowerOfTwo(a.<span class="pl-c1">height</span>),e<span class="pl-k">=</span>O(a.format),g<span class="pl-k">=</span>O(a.<span class="pl-c1">type</span>);<span class="pl-k">if</span>(b){c.__webglFramebuffer<span class="pl-k">=</span>[];c.__webglRenderbuffer<span class="pl-k">=</span>[];M.bindTexture(s.TEXTURE_CUBE_MAP,</td>
      </tr>
      <tr>
        <td id="L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="LC562" class="blob-code blob-code-inner js-file-line">c.__webglTexture);H(s.TEXTURE_CUBE_MAP,a,d);<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>h;h<span class="pl-k">++</span>)c.__webglFramebuffer[h]<span class="pl-k">=</span>s.createFramebuffer(),c.__webglRenderbuffer[h]<span class="pl-k">=</span>s.createRenderbuffer(),M.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X<span class="pl-k">+</span>h,<span class="pl-c1">0</span>,e,a.<span class="pl-c1">width</span>,a.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,e,g,<span class="pl-c1">null</span>),z(c.__webglFramebuffer[h],a,s.TEXTURE_CUBE_MAP_POSITIVE_X<span class="pl-k">+</span>h),D(c.__webglRenderbuffer[h],a);a.generateMipmaps<span class="pl-k">&amp;&amp;</span>d<span class="pl-k">&amp;&amp;</span>s.generateMipmap(s.TEXTURE_CUBE_MAP)}<span class="pl-k">else</span> c.__webglFramebuffer<span class="pl-k">=</span>s.createFramebuffer(),c.__webglRenderbuffer<span class="pl-k">=</span>a.shareDepthFrom<span class="pl-k">?</span>a.shareDepthFrom.__webglRenderbuffer<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="LC563" class="blob-code blob-code-inner js-file-line">s.createRenderbuffer(),M.bindTexture(s.TEXTURE_2D,c.__webglTexture),H(s.TEXTURE_2D,a,d),M.texImage2D(s.TEXTURE_2D,<span class="pl-c1">0</span>,e,a.<span class="pl-c1">width</span>,a.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,e,g,<span class="pl-c1">null</span>),z(c.__webglFramebuffer,a,s.TEXTURE_2D),a.shareDepthFrom<span class="pl-k">?</span>a.depthBuffer<span class="pl-k">&amp;&amp;!</span>a.stencilBuffer<span class="pl-k">?</span>s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.RENDERBUFFER,c.__webglRenderbuffer)<span class="pl-k">:</span>a.depthBuffer<span class="pl-k">&amp;&amp;</span>a.stencilBuffer<span class="pl-k">&amp;&amp;</span>s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.RENDERBUFFER,c.__webglRenderbuffer)<span class="pl-k">:</span>D(c.__webglRenderbuffer,a),a.generateMipmaps<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="LC564" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">&amp;&amp;</span>s.generateMipmap(s.TEXTURE_2D);b<span class="pl-k">?</span>M.bindTexture(s.TEXTURE_CUBE_MAP,<span class="pl-c1">null</span>)<span class="pl-k">:</span>M.bindTexture(s.TEXTURE_2D,<span class="pl-c1">null</span>);s.bindRenderbuffer(s.RENDERBUFFER,<span class="pl-c1">null</span>);s.bindFramebuffer(s.FRAMEBUFFER,<span class="pl-c1">null</span>)}a<span class="pl-k">?</span>(c<span class="pl-k">=</span>Y.get(a),b<span class="pl-k">=</span>b<span class="pl-k">?</span>c.__webglFramebuffer[a.activeCubeFace]<span class="pl-k">:</span>c.__webglFramebuffer,c<span class="pl-k">=</span>a.<span class="pl-c1">width</span>,a<span class="pl-k">=</span>a.<span class="pl-c1">height</span>,e<span class="pl-k">=</span>d<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span><span class="pl-c1">null</span>,c<span class="pl-k">=</span>ta,a<span class="pl-k">=</span>ua,d<span class="pl-k">=</span>Ja,e<span class="pl-k">=</span>Ka);b<span class="pl-k">!==</span>Aa<span class="pl-k">&amp;&amp;</span>(s.bindFramebuffer(s.FRAMEBUFFER,b),s.viewport(d,e,c,a),Aa<span class="pl-k">=</span>b);bb<span class="pl-k">=</span>c;cb<span class="pl-k">=</span>a};<span class="pl-c1">this</span>.<span class="pl-en">readRenderTargetPixels</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.WebGLRenderTarget))<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="LC565" class="blob-code blob-code-inner js-file-line"><span class="pl-k">else</span> <span class="pl-k">if</span>(Y.get(a).__webglFramebuffer)<span class="pl-k">if</span>(a.format<span class="pl-k">!==</span><span class="pl-c1">THREE</span>.RGBAFormat)<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA format. readPixels can read only RGBA format.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> g<span class="pl-k">=!</span><span class="pl-c1">1</span>;Y.get(a).__webglFramebuffer<span class="pl-k">!==</span>Aa<span class="pl-k">&amp;&amp;</span>(s.bindFramebuffer(s.FRAMEBUFFER,Y.get(a).__webglFramebuffer),g<span class="pl-k">=!</span><span class="pl-c1">0</span>);s.checkFramebufferStatus(s.FRAMEBUFFER)<span class="pl-k">===</span>s.FRAMEBUFFER_COMPLETE<span class="pl-k">?</span>s.readPixels(b,c,d,e,s.RGBA,s.UNSIGNED_BYTE,f)<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="LC566" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">&amp;&amp;</span>s.bindFramebuffer(s.FRAMEBUFFER,Aa)}};<span class="pl-c1">this</span>.<span class="pl-en">supportsFloatTextures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( &#39;OES_texture_float&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsHalfFloatTextures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( &#39;OES_texture_half_float&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_half_float<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsStandardDerivatives</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( &#39;OES_standard_derivatives&#39; ).<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="LC567" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_standard_derivatives<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsCompressedTextureS3TC</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( &#39;WEBGL_compressed_texture_s3tc&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsCompressedTexturePVRTC</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( &#39;WEBGL_compressed_texture_pvrtc&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>)};<span class="pl-v">this</span>.supportsBlendMinMax<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="LC568" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( &#39;EXT_blend_minmax&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_blend_minmax<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">supportsVertexTextures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> na.vertexTextures};<span class="pl-c1">this</span>.<span class="pl-en">supportsInstancedArrays</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( &#39;ANGLE_instanced_arrays&#39; ).<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> X.get(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">initMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .initMaterial() has been removed.<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="LC569" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">addPrePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .addPrePlugin() has been removed.<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">addPostPlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .addPostPlugin() has been removed.<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">this</span>.<span class="pl-en">updateShadowMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .updateShadowMap() has been removed.<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">Object</span>.defineProperties(<span class="pl-v">this</span>,{shadowMapEnabled<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> ga.enabled},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.<span class="pl-pds">&quot;</span></span>);ga.enabled<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="LC570" class="blob-code blob-code-inner js-file-line">a}},shadowMapType<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> ga.<span class="pl-c1">type</span>},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.<span class="pl-pds">&quot;</span></span>);ga.<span class="pl-c1">type</span><span class="pl-k">=</span>a}},shadowMapCullFace<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> ga.cullFace},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.<span class="pl-pds">&quot;</span></span>);ga.cullFace<span class="pl-k">=</span>a}},shadowMapDebug<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> ga.debug},<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.<span class="pl-pds">&quot;</span></span>);ga.debug<span class="pl-k">=</span>a}}})};</td>
      </tr>
      <tr>
        <td id="L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="LC571" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.uuid<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.generateUUID();<span class="pl-v">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b;c<span class="pl-k">=</span>c<span class="pl-k">||</span>{};<span class="pl-v">this</span>.wrapS<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.wrapS<span class="pl-k">?</span>c.wrapS<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping;<span class="pl-v">this</span>.wrapT<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.wrapT<span class="pl-k">?</span>c.wrapT<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ClampToEdgeWrapping;<span class="pl-v">this</span>.magFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.magFilter<span class="pl-k">?</span>c.magFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearFilter;<span class="pl-v">this</span>.minFilter<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.minFilter<span class="pl-k">?</span>c.minFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.LinearMipMapLinearFilter;<span class="pl-v">this</span>.anisotropy<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.anisotropy<span class="pl-k">?</span>c.anisotropy<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.offset<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.repeat<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="LC572" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>);<span class="pl-v">this</span>.format<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.format<span class="pl-k">?</span>c.format<span class="pl-k">:</span><span class="pl-c1">THREE</span>.RGBAFormat;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.<span class="pl-c1">type</span><span class="pl-k">?</span>c.<span class="pl-c1">type</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.UnsignedByteType;<span class="pl-v">this</span>.depthBuffer<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.depthBuffer<span class="pl-k">?</span>c.depthBuffer<span class="pl-k">:!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.stencilBuffer<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.stencilBuffer<span class="pl-k">?</span>c.stencilBuffer<span class="pl-k">:!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.generateMipmaps<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.shareDepthFrom<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.shareDepthFrom<span class="pl-k">?</span>c.shareDepthFrom<span class="pl-k">:</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="LC573" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.WebGLRenderTarget</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.WebGLRenderTarget,<span class="pl-en">setSize</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.<span class="pl-c1">width</span><span class="pl-k">!==</span>a<span class="pl-k">||</span><span class="pl-v">this</span>.<span class="pl-c1">height</span><span class="pl-k">!==</span>b)<span class="pl-v">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a,<span class="pl-v">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b,<span class="pl-v">this</span>.dispose()},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">this.constructor</span>).copy(<span class="pl-v">this</span>)},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a.<span class="pl-c1">width</span>;<span class="pl-v">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>a.<span class="pl-c1">height</span>;<span class="pl-v">this</span>.wrapS<span class="pl-k">=</span>a.wrapS;<span class="pl-v">this</span>.wrapT<span class="pl-k">=</span>a.wrapT;<span class="pl-v">this</span>.magFilter<span class="pl-k">=</span>a.magFilter;<span class="pl-v">this</span>.minFilter<span class="pl-k">=</span>a.minFilter;<span class="pl-v">this</span>.anisotropy<span class="pl-k">=</span>a.anisotropy;<span class="pl-v">this</span>.offset.copy(a.offset);<span class="pl-v">this</span>.repeat.copy(a.repeat);<span class="pl-v">this</span>.format<span class="pl-k">=</span>a.format;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>a.<span class="pl-c1">type</span>;<span class="pl-v">this</span>.depthBuffer<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="LC574" class="blob-code blob-code-inner js-file-line">a.depthBuffer;<span class="pl-v">this</span>.stencilBuffer<span class="pl-k">=</span>a.stencilBuffer;<span class="pl-v">this</span>.generateMipmaps<span class="pl-k">=</span>a.generateMipmaps;<span class="pl-v">this</span>.shareDepthFrom<span class="pl-k">=</span>a.shareDepthFrom;<span class="pl-k">return</span> <span class="pl-v">this</span>},<span class="pl-en">dispose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.dispatchEvent({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>})}};<span class="pl-c1">THREE</span>.EventDispatcher.<span class="pl-c1">prototype</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">THREE</span>.WebGLRenderTarget.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderTargetCube</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.WebGLRenderTarget.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b,c);<span class="pl-v">this</span>.activeCubeFace<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE.WebGLRenderTargetCube</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.WebGLRenderTarget.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="LC575" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.WebGLRenderTargetCube</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.WebGLRenderTargetCube;</td>
      </tr>
      <tr>
        <td id="L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="LC576" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLBufferRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d;<span class="pl-c1">this</span>.<span class="pl-en">setMode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){d<span class="pl-k">=</span>a};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">g</span>){a.drawArrays(d,b,g);c.calls<span class="pl-k">++</span>;c.vertices<span class="pl-k">+=</span>g;d<span class="pl-k">===</span>a.TRIANGLES<span class="pl-k">&amp;&amp;</span>(c.faces<span class="pl-k">+=</span>g<span class="pl-k">/</span><span class="pl-c1">3</span>)};<span class="pl-c1">this</span>.<span class="pl-en">renderInstances</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b.get(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>c)<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> f<span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>.position;f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute<span class="pl-k">?</span>c.drawArraysInstancedANGLE(d,</td>
      </tr>
      <tr>
        <td id="L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="LC577" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,f.<span class="pl-c1">data</span>.count,a.maxInstancedCount)<span class="pl-k">:</span>c.drawArraysInstancedANGLE(d,<span class="pl-c1">0</span>,f.count,a.maxInstancedCount)}}};</td>
      </tr>
      <tr>
        <td id="L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="LC578" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLIndexedBufferRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d,e,g;<span class="pl-c1">this</span>.<span class="pl-en">setMode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){d<span class="pl-k">=</span>a};<span class="pl-c1">this</span>.<span class="pl-en">setIndex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">c</span>){c.array <span class="pl-k">instanceof</span> Uint32Array<span class="pl-k">&amp;&amp;</span>b.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_element_index_uint<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span>(e<span class="pl-k">=</span>a.UNSIGNED_INT,g<span class="pl-k">=</span><span class="pl-c1">4</span>)<span class="pl-k">:</span>(e<span class="pl-k">=</span>a.UNSIGNED_SHORT,g<span class="pl-k">=</span><span class="pl-c1">2</span>)};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">h</span>){a.drawElements(d,h,e,b<span class="pl-k">*</span>g);c.calls<span class="pl-k">++</span>;c.vertices<span class="pl-k">+=</span>h;d<span class="pl-k">===</span>a.TRIANGLES<span class="pl-k">&amp;&amp;</span>(c.faces<span class="pl-k">+=</span>h<span class="pl-k">/</span><span class="pl-c1">3</span>)};<span class="pl-c1">this</span>.<span class="pl-en">renderInstances</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b.get(<span class="pl-s"><span class="pl-pds">&quot;</span>ANGLE_instanced_arrays<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">null</span><span class="pl-k">===</span>c<span class="pl-k">?</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="LC579" class="blob-code blob-code-inner js-file-line">c.drawElementsInstancedANGLE(d,a.<span class="pl-c1">index</span>.array.<span class="pl-c1">length</span>,e,<span class="pl-c1">0</span>,a.maxInstancedCount)}};</td>
      </tr>
      <tr>
        <td id="L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="LC580" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLExtensions</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b[c])<span class="pl-k">return</span> b[c];<span class="pl-k">var</span> d;<span class="pl-k">switch</span>(c){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>d<span class="pl-k">=</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>MOZ_EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>d<span class="pl-k">=</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>MOZ_WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="LC581" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>d<span class="pl-k">=</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span>a.getExtension(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>d<span class="pl-k">=</span>a.getExtension(c)}<span class="pl-c1">null</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> extension not supported.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> b[c]<span class="pl-k">=</span>d}};</td>
      </tr>
      <tr>
        <td id="L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="LC582" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLCapabilities</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>highp<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision)<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>highp<span class="pl-pds">&quot;</span></span>;b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>mediump<span class="pl-pds">&quot;</span></span>}<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>mediump<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>mediump<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>lowp<span class="pl-pds">&quot;</span></span>}<span class="pl-v">this</span>.getMaxPrecision<span class="pl-k">=</span>d;<span class="pl-v">this</span>.precision<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.precision<span class="pl-k">?</span>c.precision<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>highp<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="LC583" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.logarithmicDepthBuffer<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.logarithmicDepthBuffer<span class="pl-k">?</span>c.logarithmicDepthBuffer<span class="pl-k">:!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.maxTextures<span class="pl-k">=</span>a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);<span class="pl-v">this</span>.maxVertexTextures<span class="pl-k">=</span>a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);<span class="pl-v">this</span>.maxTextureSize<span class="pl-k">=</span>a.getParameter(a.MAX_TEXTURE_SIZE);<span class="pl-v">this</span>.maxCubemapSize<span class="pl-k">=</span>a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE);<span class="pl-v">this</span>.maxAttributes<span class="pl-k">=</span>a.getParameter(a.MAX_VERTEX_ATTRIBS);<span class="pl-v">this</span>.maxVertexUniforms<span class="pl-k">=</span>a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS);<span class="pl-v">this</span>.maxVaryings<span class="pl-k">=</span>a.getParameter(a.MAX_VARYING_VECTORS);</td>
      </tr>
      <tr>
        <td id="L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="LC584" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.maxFragmentUniforms<span class="pl-k">=</span>a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS);<span class="pl-v">this</span>.vertexTextures<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.maxVertexTextures;<span class="pl-v">this</span>.floatFragmentTextures<span class="pl-k">=!!</span>b.get(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.floatVertexTextures<span class="pl-k">=</span><span class="pl-v">this</span>.vertexTextures<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.floatFragmentTextures;c<span class="pl-k">=</span>d(<span class="pl-v">this</span>.precision);c<span class="pl-k">!==</span><span class="pl-v">this</span>.precision<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer:<span class="pl-pds">&quot;</span></span>,<span class="pl-v">this</span>.precision,<span class="pl-s"><span class="pl-pds">&quot;</span>not supported, using<span class="pl-pds">&quot;</span></span>,c,<span class="pl-s"><span class="pl-pds">&quot;</span>instead.<span class="pl-pds">&quot;</span></span>),<span class="pl-v">this</span>.precision<span class="pl-k">=</span>c);<span class="pl-v">this</span>.logarithmicDepthBuffer<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.logarithmicDepthBuffer<span class="pl-k">=!!</span>b.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>))};</td>
      </tr>
      <tr>
        <td id="L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="LC585" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLGeometries</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a.<span class="pl-c1">target</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span>g[a.<span class="pl-c1">id</span>].<span class="pl-c1">attributes</span>,k;<span class="pl-k">for</span>(k <span class="pl-k">in</span> h)e(h[k]);a.removeEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,d);<span class="pl-k">delete</span> g[a.<span class="pl-c1">id</span>];k<span class="pl-k">=</span>b.get(a);k.wireframe<span class="pl-k">&amp;&amp;</span>e(k.wireframe);c.memory.geometries<span class="pl-k">--</span>}<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">c</span>){<span class="pl-k">var</span> d;d<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute<span class="pl-k">?</span>b.get(c.<span class="pl-c1">data</span>).__webglBuffer<span class="pl-k">:</span>b.get(c).__webglBuffer;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>(a.deleteBuffer(d),c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute<span class="pl-k">?</span>b.delete(c.<span class="pl-c1">data</span>)<span class="pl-k">:</span>b.delete(c))}<span class="pl-k">var</span> g<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.geometry;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="LC586" class="blob-code blob-code-inner js-file-line">g[b.<span class="pl-c1">id</span>])<span class="pl-k">return</span> g[b.<span class="pl-c1">id</span>];b.addEventListener(<span class="pl-s"><span class="pl-pds">&quot;</span>dispose<span class="pl-pds">&quot;</span></span>,d);<span class="pl-k">var</span> e;b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry<span class="pl-k">?</span>e<span class="pl-k">=</span>b<span class="pl-k">:</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b._bufferGeometry<span class="pl-k">&amp;&amp;</span>(b._bufferGeometry<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>).setFromObject(a)),e<span class="pl-k">=</span>b._bufferGeometry);g[b.<span class="pl-c1">id</span>]<span class="pl-k">=</span>e;c.memory.geometries<span class="pl-k">++</span>;<span class="pl-k">return</span> e}};</td>
      </tr>
      <tr>
        <td id="L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="LC587" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLObjects</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute<span class="pl-k">?</span>c.<span class="pl-c1">data</span><span class="pl-k">:</span>c,g<span class="pl-k">=</span>b.get(e);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g.__webglBuffer<span class="pl-k">?</span>(g.__webglBuffer<span class="pl-k">=</span>a.createBuffer(),a.bindBuffer(d,g.__webglBuffer),a.bufferData(d,e.array,e.dynamic<span class="pl-k">?</span>a.DYNAMIC_DRAW<span class="pl-k">:</span>a.STATIC_DRAW),g.<span class="pl-c1">version</span><span class="pl-k">=</span>e.<span class="pl-c1">version</span>)<span class="pl-k">:</span>g.<span class="pl-c1">version</span><span class="pl-k">!==</span>e.<span class="pl-c1">version</span><span class="pl-k">&amp;&amp;</span>(a.bindBuffer(d,g.__webglBuffer),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>e.dynamic<span class="pl-k">||-</span><span class="pl-c1">1</span><span class="pl-k">===</span>e.updateRange.count<span class="pl-k">?</span>a.bufferSubData(d,<span class="pl-c1">0</span>,e.array)<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">===</span>e.updateRange.count<span class="pl-k">?</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="LC588" class="blob-code blob-code-inner js-file-line">(a.bufferSubData(d,e.updateRange.offset<span class="pl-k">*</span>e.array.BYTES_PER_ELEMENT,e.array.subarray(e.updateRange.offset,e.updateRange.offset<span class="pl-k">+</span>e.updateRange.count)),e.updateRange.count<span class="pl-k">=</span><span class="pl-c1">0</span>),g.<span class="pl-c1">version</span><span class="pl-k">=</span>e.<span class="pl-c1">version</span>)}<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(b<span class="pl-k">&gt;</span>c){<span class="pl-k">var</span> d<span class="pl-k">=</span>b;b<span class="pl-k">=</span>c;c<span class="pl-k">=</span>d}d<span class="pl-k">=</span>a[b];<span class="pl-k">return</span> <span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">?</span>(a[b]<span class="pl-k">=</span>[c],<span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:-</span><span class="pl-c1">1</span><span class="pl-k">===</span>d.<span class="pl-c1">indexOf</span>(c)<span class="pl-k">?</span>(d.<span class="pl-c1">push</span>(c),<span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:!</span><span class="pl-c1">1</span>}<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLGeometries</span>(a,b,c);<span class="pl-c1">this</span>.<span class="pl-en">getAttributeBuffer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.InterleavedBufferAttribute<span class="pl-k">?</span>b.get(a.<span class="pl-c1">data</span>).__webglBuffer<span class="pl-k">:</span>b.get(a).__webglBuffer};<span class="pl-v">this</span>.getWireframeAttribute<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="LC589" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>b.get(c);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g.wireframe)<span class="pl-k">return</span> g.wireframe;<span class="pl-k">var</span> k<span class="pl-k">=</span>[],l<span class="pl-k">=</span>c.<span class="pl-c1">index</span>,n<span class="pl-k">=</span>c.<span class="pl-c1">attributes</span>;c<span class="pl-k">=</span>n.position;<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>l)<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span>{},l<span class="pl-k">=</span>l.array,p<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span>l.<span class="pl-c1">length</span>;p<span class="pl-k">&lt;</span>m;p<span class="pl-k">+=</span><span class="pl-c1">3</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>l[p<span class="pl-k">+</span><span class="pl-c1">0</span>],t<span class="pl-k">=</span>l[p<span class="pl-k">+</span><span class="pl-c1">1</span>],r<span class="pl-k">=</span>l[p<span class="pl-k">+</span><span class="pl-c1">2</span>];e(n,q,t)<span class="pl-k">&amp;&amp;</span>k.<span class="pl-c1">push</span>(q,t);e(n,t,r)<span class="pl-k">&amp;&amp;</span>k.<span class="pl-c1">push</span>(t,r);e(n,r,q)<span class="pl-k">&amp;&amp;</span>k.<span class="pl-c1">push</span>(r,q)}<span class="pl-k">else</span> <span class="pl-k">for</span>(l<span class="pl-k">=</span>n.position.array,p<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span>l.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">1</span>;p<span class="pl-k">&lt;</span>m;p<span class="pl-k">+=</span><span class="pl-c1">3</span>)q<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">1</span>,r<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">2</span>,k.<span class="pl-c1">push</span>(q,t,t,r,r,q);k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> (<span class="pl-c1">65535</span><span class="pl-k">&lt;</span>c.count<span class="pl-k">?</span>Uint32Array<span class="pl-k">:</span>Uint16Array)(k),<span class="pl-c1">1</span>);d(k,a.ELEMENT_ARRAY_BUFFER);<span class="pl-k">return</span> g.wireframe<span class="pl-k">=</span>k};<span class="pl-v">this</span>.update<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="LC590" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>g.get(b);b.geometry <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry<span class="pl-k">&amp;&amp;</span>c.updateFromObject(b);b<span class="pl-k">=</span>c.<span class="pl-c1">index</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>c.<span class="pl-c1">attributes</span>;<span class="pl-c1">null</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>d(b,a.ELEMENT_ARRAY_BUFFER);<span class="pl-k">for</span>(<span class="pl-k">var</span> l <span class="pl-k">in</span> e)d(e[l],a.ARRAY_BUFFER);b<span class="pl-k">=</span>c.morphAttributes;<span class="pl-k">for</span>(l <span class="pl-k">in</span> b)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>b[l],n<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>p;n<span class="pl-k">++</span>)d(e[n],a.ARRAY_BUFFER);<span class="pl-k">return</span> c}};</td>
      </tr>
      <tr>
        <td id="L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="LC591" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLProgram</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c;<span class="pl-k">for</span>(c <span class="pl-k">in</span> a){<span class="pl-k">var</span> f<span class="pl-k">=</span>a[c];<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>b.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f)}<span class="pl-k">return</span> b.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)}<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span>a}<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>d.context,k<span class="pl-k">=</span>g.defines,l<span class="pl-k">=</span>g.__webglShader.vertexShader,n<span class="pl-k">=</span>g.__webglShader.fragmentShader,p<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SHADOWMAP_TYPE_BASIC<span class="pl-pds">&quot;</span></span>;f.shadowMapType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.PCFShadowMap<span class="pl-k">?</span>p<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SHADOWMAP_TYPE_PCF<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>f.shadowMapType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.PCFSoftShadowMap<span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SHADOWMAP_TYPE_PCF_SOFT<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_TYPE_CUBE<span class="pl-pds">&quot;</span></span>,q<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_MODE_REFLECTION<span class="pl-pds">&quot;</span></span>,t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_BLENDING_MULTIPLY<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="LC592" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(f.envMap){<span class="pl-k">switch</span>(g.envMap.mapping){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.CubeReflectionMapping<span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-c1">THREE</span>.CubeRefractionMapping<span class="pl-k">:</span>m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_TYPE_CUBE<span class="pl-pds">&quot;</span></span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.EquirectangularReflectionMapping<span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-c1">THREE</span>.EquirectangularRefractionMapping<span class="pl-k">:</span>m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_TYPE_EQUIREC<span class="pl-pds">&quot;</span></span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.SphericalReflectionMapping<span class="pl-k">:</span>m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_TYPE_SPHERE<span class="pl-pds">&quot;</span></span>}<span class="pl-k">switch</span>(g.envMap.mapping){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.CubeRefractionMapping<span class="pl-k">:</span><span class="pl-k">case</span> <span class="pl-c1">THREE</span>.EquirectangularRefractionMapping<span class="pl-k">:</span>q<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_MODE_REFRACTION<span class="pl-pds">&quot;</span></span>}<span class="pl-k">switch</span>(g.combine){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.MultiplyOperation<span class="pl-k">:</span>t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_BLENDING_MULTIPLY<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="LC593" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.MixOperation<span class="pl-k">:</span>t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_BLENDING_MIX<span class="pl-pds">&quot;</span></span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.AddOperation<span class="pl-k">:</span>t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ENVMAP_BLENDING_ADD<span class="pl-pds">&quot;</span></span>}}<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>d.gammaFactor<span class="pl-k">?</span>d.gammaFactor<span class="pl-k">:</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span>a(k),w<span class="pl-k">=</span>h.createProgram();g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.RawShaderMaterial<span class="pl-k">?</span>d<span class="pl-k">=</span>k<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>(k<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.precision<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.precision<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> int;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADER_NAME <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>g.__webglShader.<span class="pl-c1">name</span>,u,f.supportsVertexTextures<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define VERTEX_TEXTURES<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,d.gammaInput<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_INPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,d.gammaOutput<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_OUTPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_FACTOR <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>r,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_DIR_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="LC594" class="blob-code blob-code-inner js-file-line">f.maxDirLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_POINT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxPointLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SPOT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxSpotLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_HEMI_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxHemiLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SHADOWS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxShadows,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_BONES <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxBones,f.map<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.envMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ENVMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.envMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>q<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.lightMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LIGHTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.aoMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_AOMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.emissiveMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_EMISSIVEMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.bumpMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_BUMPMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.normalMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_NORMALMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.displacementMap<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="LC595" class="blob-code blob-code-inner js-file-line">f.supportsVertexTextures<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_DISPLACEMENTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.specularMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SPECULARMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.alphaMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ALPHAMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.vertexColors<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_COLOR<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.flatShading<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLAT_SHADED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.skinning<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SKINNING<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.useVertexTexture<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define BONE_TEXTURE<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.morphTargets<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MORPHTARGETS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.morphNormals<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">1</span><span class="pl-k">===</span>f.flatShading<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MORPHNORMALS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.doubleSided<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define DOUBLE_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.flipSided<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLIP_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.shadowMapEnabled<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="LC596" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SHADOWMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.shadowMapEnabled<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>p<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.shadowMapDebug<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADOWMAP_DEBUG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.sizeAttenuation<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SIZEATTENUATION<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.logarithmicDepthBuffer<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.logarithmicDepthBuffer<span class="pl-k">&amp;&amp;</span>d.extensions.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF_EXT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 modelMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 modelViewMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 projectionMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 viewMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat3 normalMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 cameraPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>attribute vec3 position;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="LC597" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>attribute vec3 normal;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>attribute vec2 uv;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_COLOR<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 color;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget0;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget1;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget2;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec3 morphTarget3;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#ifdef USE_MORPHNORMALS<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal0;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal1;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal2;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphNormal3;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#else<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget4;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget5;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="LC598" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget6;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t\t</span>attribute vec3 morphTarget7;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec4 skinIndex;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\t</span>attribute vec4 skinWeight;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>].filter(b).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),d<span class="pl-k">=</span>[f.bumpMap<span class="pl-k">||</span>f.normalMap<span class="pl-k">||</span>f.flatShading<span class="pl-k">||</span>g.derivatives<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#extension GL_OES_standard_derivatives : enable<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.logarithmicDepthBuffer<span class="pl-k">&amp;&amp;</span>d.extensions.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#extension GL_EXT_frag_depth : enable<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.precision<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.precision<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> int;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADER_NAME <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="LC599" class="blob-code blob-code-inner js-file-line">g.__webglShader.<span class="pl-c1">name</span>,u,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_DIR_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxDirLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_POINT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxPointLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SPOT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxSpotLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_HEMI_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxHemiLights,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SHADOWS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.maxShadows,f.alphaTest<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define ALPHATEST <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>f.alphaTest<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,d.gammaInput<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_INPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,d.gammaOutput<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_OUTPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_FACTOR <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>r,f.useFog<span class="pl-k">&amp;&amp;</span>f.fog<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_FOG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.useFog<span class="pl-k">&amp;&amp;</span>f.fogExp<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FOG_EXP2<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.map<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.envMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ENVMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="LC600" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.envMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>m<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.envMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>q<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.envMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>t<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.lightMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LIGHTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.aoMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_AOMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.emissiveMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_EMISSIVEMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.bumpMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_BUMPMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.normalMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_NORMALMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.specularMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SPECULARMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.alphaMap<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ALPHAMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.vertexColors<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_COLOR<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.flatShading<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLAT_SHADED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.metal<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define METAL<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.doubleSided<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define DOUBLE_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.flipSided<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLIP_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="LC601" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.shadowMapEnabled<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SHADOWMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.shadowMapEnabled<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>p<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.shadowMapDebug<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADOWMAP_DEBUG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.logarithmicDepthBuffer<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,f.logarithmicDepthBuffer<span class="pl-k">&amp;&amp;</span>d.extensions.get(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_frag_depth<span class="pl-pds">&quot;</span></span>)<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LOGDEPTHBUF_EXT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 viewMatrix;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 cameraPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>].filter(b).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>));n<span class="pl-k">=</span>d<span class="pl-k">+</span>n;l<span class="pl-k">=</span><span class="pl-c1">THREE</span>.WebGLShader(h,h.VERTEX_SHADER,k<span class="pl-k">+</span>l);n<span class="pl-k">=</span><span class="pl-c1">THREE</span>.WebGLShader(h,h.FRAGMENT_SHADER,n);h.attachShader(w,l);h.attachShader(w,n);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="LC602" class="blob-code blob-code-inner js-file-line">g.index0AttributeName<span class="pl-k">?</span>h.bindAttribLocation(w,<span class="pl-c1">0</span>,g.index0AttributeName)<span class="pl-k">:!</span><span class="pl-c1">0</span><span class="pl-k">===</span>f.morphTargets<span class="pl-k">&amp;&amp;</span>h.bindAttribLocation(w,<span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);h.linkProgram(w);f<span class="pl-k">=</span>h.getProgramInfoLog(w);p<span class="pl-k">=</span>h.getShaderInfoLog(l);m<span class="pl-k">=</span>h.getShaderInfoLog(n);t<span class="pl-k">=</span>q<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>h.getProgramParameter(w,h.LINK_STATUS))q<span class="pl-k">=!</span><span class="pl-c1">1</span>,<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: shader error: <span class="pl-pds">&quot;</span></span>,h.getError(),<span class="pl-s"><span class="pl-pds">&quot;</span>gl.VALIDATE_STATUS<span class="pl-pds">&quot;</span></span>,h.getProgramParameter(w,h.VALIDATE_STATUS),<span class="pl-s"><span class="pl-pds">&quot;</span>gl.getProgramInfoLog<span class="pl-pds">&quot;</span></span>,f,p,m);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span>f)<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: gl.getProgramInfoLog()<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="LC603" class="blob-code blob-code-inner js-file-line">f);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>p<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>m)t<span class="pl-k">=!</span><span class="pl-c1">1</span>;t<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.diagnostics<span class="pl-k">=</span>{runnable<span class="pl-k">:</span>q,material<span class="pl-k">:</span>g,programLog<span class="pl-k">:</span>f,vertexShader<span class="pl-k">:</span>{log<span class="pl-k">:</span>p,prefix<span class="pl-k">:</span>k},fragmentShader<span class="pl-k">:</span>{log<span class="pl-k">:</span>m,prefix<span class="pl-k">:</span>d}});h.deleteShader(l);h.deleteShader(n);<span class="pl-k">var</span> v;<span class="pl-c1">this</span>.<span class="pl-en">getUniforms</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>v){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>{},b<span class="pl-k">=</span>h.getProgramParameter(w,h.ACTIVE_UNIFORMS),c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>h.getActiveUniform(w,c).<span class="pl-c1">name</span>,e<span class="pl-k">=</span>h.getUniformLocation(w,d),f<span class="pl-k">=</span>d.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>[0]<span class="pl-pds">&quot;</span></span>);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>f<span class="pl-k">&amp;&amp;</span>f<span class="pl-k">===</span>d.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">&amp;&amp;</span>(a[d.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>,f)]<span class="pl-k">=</span>e);a[d]<span class="pl-k">=</span>e}v<span class="pl-k">=</span>a}<span class="pl-k">return</span> v};<span class="pl-k">var</span> B;<span class="pl-c1">this</span>.<span class="pl-en">getAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="LC604" class="blob-code blob-code-inner js-file-line">B){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>{},b<span class="pl-k">=</span>h.getProgramParameter(w,h.ACTIVE_ATTRIBUTES),c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>h.getActiveAttrib(w,c).<span class="pl-c1">name</span>;a[d]<span class="pl-k">=</span>h.getAttribLocation(w,d)}B<span class="pl-k">=</span>a}<span class="pl-k">return</span> B};<span class="pl-c1">this</span>.<span class="pl-en">destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){h.deleteProgram(w);<span class="pl-v">this</span>.program<span class="pl-k">=void</span> <span class="pl-c1">0</span>};<span class="pl-c1">Object</span>.defineProperties(<span class="pl-v">this</span>,{uniforms<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: .uniforms is now .getUniforms().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.getUniforms()}},attributes<span class="pl-k">:</span>{<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLProgram: .attributes is now .getAttributes().<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.getAttributes()}}});</td>
      </tr>
      <tr>
        <td id="L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="LC605" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span>c<span class="pl-k">++</span>;<span class="pl-v">this</span>.<span class="pl-c1">code</span><span class="pl-k">=</span>e;<span class="pl-v">this</span>.usedTimes<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.program<span class="pl-k">=</span>w;<span class="pl-v">this</span>.vertexShader<span class="pl-k">=</span>l;<span class="pl-v">this</span>.fragmentShader<span class="pl-k">=</span>n;<span class="pl-k">return</span> <span class="pl-v">this</span>}}();</td>
      </tr>
      <tr>
        <td id="L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="LC606" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLPrograms</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>{MeshDepthMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>depth<span class="pl-pds">&quot;</span></span>,MeshNormalMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,MeshBasicMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span>,MeshLambertMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>lambert<span class="pl-pds">&quot;</span></span>,MeshPhongMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>phong<span class="pl-pds">&quot;</span></span>,LineBasicMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span>,LineDashedMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>dashed<span class="pl-pds">&quot;</span></span>,PointsMaterial<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>points<span class="pl-pds">&quot;</span></span>},e<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>precision supportsVertexTextures map envMap envMapMode lightMap aoMap emissiveMap bumpMap normalMap specularMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals maxDirLights maxPointLights maxSpotLights maxHemiLights maxShadows shadowMapEnabled shadowMapType shadowMapDebug alphaTest metal doubleSided flipSided<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.getParameters<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="LC607" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">e</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> l,n,p,m,q<span class="pl-k">=</span>d[c.<span class="pl-c1">type</span>],t<span class="pl-k">=</span>m<span class="pl-k">=</span>p<span class="pl-k">=</span>n<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>,r<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>r;t<span class="pl-k">++</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span>e[t];u.onlyShadow<span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">===</span>u.visible<span class="pl-k">||</span>(u <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.DirectionalLight<span class="pl-k">&amp;&amp;</span>l<span class="pl-k">++</span>,u <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.PointLight<span class="pl-k">&amp;&amp;</span>n<span class="pl-k">++</span>,u <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SpotLight<span class="pl-k">&amp;&amp;</span>p<span class="pl-k">++</span>,u <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.HemisphereLight<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">++</span>)}r<span class="pl-k">=</span>t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(u<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;r<span class="pl-k">&lt;</span>u;r<span class="pl-k">++</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>e[r];w.castShadow<span class="pl-k">&amp;&amp;</span>(w <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SpotLight<span class="pl-k">&amp;&amp;</span>t<span class="pl-k">++</span>,w <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.DirectionalLight<span class="pl-k">&amp;&amp;</span>t<span class="pl-k">++</span>)}e<span class="pl-k">=</span>t;b.floatVertexTextures<span class="pl-k">&amp;&amp;</span>k<span class="pl-k">&amp;&amp;</span>k.skeleton<span class="pl-k">&amp;&amp;</span>k.skeleton.useVertexTexture<span class="pl-k">?</span>t<span class="pl-k">=</span><span class="pl-c1">1024</span><span class="pl-k">:</span>(t<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>((b.maxVertexUniforms<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="LC608" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">20</span>)<span class="pl-k">/</span><span class="pl-c1">4</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>k <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SkinnedMesh<span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(k.skeleton.bones.<span class="pl-c1">length</span>,t),t<span class="pl-k">&lt;</span>k.skeleton.bones.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WebGLRenderer: too many bones - <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>k.skeleton.bones.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>, this GPU supports just <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>t<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> (try OpenGL instead of ANGLE)<span class="pl-pds">&quot;</span></span>)));r<span class="pl-k">=</span>a.getPrecision();<span class="pl-c1">null</span><span class="pl-k">!==</span>c.precision<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span>b.getMaxPrecision(c.precision),r<span class="pl-k">!==</span>c.precision<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.initMaterial:<span class="pl-pds">&quot;</span></span>,c.precision,<span class="pl-s"><span class="pl-pds">&quot;</span>not supported, using<span class="pl-pds">&quot;</span></span>,r,<span class="pl-s"><span class="pl-pds">&quot;</span>instead.<span class="pl-pds">&quot;</span></span>));<span class="pl-k">return</span>{shaderID<span class="pl-k">:</span>q,precision<span class="pl-k">:</span>r,supportsVertexTextures<span class="pl-k">:</span>b.vertexTextures,</td>
      </tr>
      <tr>
        <td id="L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="LC609" class="blob-code blob-code-inner js-file-line">map<span class="pl-k">:!!</span>c.map,envMap<span class="pl-k">:!!</span>c.envMap,envMapMode<span class="pl-k">:</span>c.envMap<span class="pl-k">&amp;&amp;</span>c.envMap.mapping,lightMap<span class="pl-k">:!!</span>c.lightMap,aoMap<span class="pl-k">:!!</span>c.aoMap,emissiveMap<span class="pl-k">:!!</span>c.emissiveMap,bumpMap<span class="pl-k">:!!</span>c.bumpMap,normalMap<span class="pl-k">:!!</span>c.normalMap,displacementMap<span class="pl-k">:!!</span>c.displacementMap,specularMap<span class="pl-k">:!!</span>c.specularMap,alphaMap<span class="pl-k">:!!</span>c.alphaMap,combine<span class="pl-k">:</span>c.combine,vertexColors<span class="pl-k">:</span>c.vertexColors,fog<span class="pl-k">:</span>h,useFog<span class="pl-k">:</span>c.fog,fogExp<span class="pl-k">:</span>h <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.FogExp2,flatShading<span class="pl-k">:</span>c.shading<span class="pl-k">===</span><span class="pl-c1">THREE</span>.FlatShading,sizeAttenuation<span class="pl-k">:</span>c.sizeAttenuation,logarithmicDepthBuffer<span class="pl-k">:</span>a.logarithmicDepthBuffer,skinning<span class="pl-k">:</span>c.skinning,</td>
      </tr>
      <tr>
        <td id="L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="LC610" class="blob-code blob-code-inner js-file-line">maxBones<span class="pl-k">:</span>t,useVertexTexture<span class="pl-k">:</span>b.floatVertexTextures<span class="pl-k">&amp;&amp;</span>k<span class="pl-k">&amp;&amp;</span>k.skeleton<span class="pl-k">&amp;&amp;</span>k.skeleton.useVertexTexture,morphTargets<span class="pl-k">:</span>c.morphTargets,morphNormals<span class="pl-k">:</span>c.morphNormals,maxMorphTargets<span class="pl-k">:</span>a.maxMorphTargets,maxMorphNormals<span class="pl-k">:</span>a.maxMorphNormals,maxDirLights<span class="pl-k">:</span>l,maxPointLights<span class="pl-k">:</span>n,maxSpotLights<span class="pl-k">:</span>p,maxHemiLights<span class="pl-k">:</span>m,maxShadows<span class="pl-k">:</span>e,shadowMapEnabled<span class="pl-k">:</span>a.shadowMap.enabled<span class="pl-k">&amp;&amp;</span>k.receiveShadow<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>e,shadowMapType<span class="pl-k">:</span>a.shadowMap.<span class="pl-c1">type</span>,shadowMapDebug<span class="pl-k">:</span>a.shadowMap.debug,alphaTest<span class="pl-k">:</span>c.alphaTest,metal<span class="pl-k">:</span>c.metal,doubleSided<span class="pl-k">:</span>c.side<span class="pl-k">===</span><span class="pl-c1">THREE</span>.DoubleSide,flipSided<span class="pl-k">:</span>c.side<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="LC611" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.BackSide}};<span class="pl-c1">this</span>.<span class="pl-en">getProgramCode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[];b.shaderID<span class="pl-k">?</span>c.<span class="pl-c1">push</span>(b.shaderID)<span class="pl-k">:</span>(c.<span class="pl-c1">push</span>(a.fragmentShader),c.<span class="pl-c1">push</span>(a.vertexShader));<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.defines)<span class="pl-k">for</span>(<span class="pl-k">var</span> d <span class="pl-k">in</span> a.defines)c.<span class="pl-c1">push</span>(d),c.<span class="pl-c1">push</span>(a.defines[d]);<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>e[d];c.<span class="pl-c1">push</span>(l);c.<span class="pl-c1">push</span>(b[l])}<span class="pl-k">return</span> c.<span class="pl-c1">join</span>()};<span class="pl-c1">this</span>.<span class="pl-en">acquireProgram</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> k,l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span>c[l];<span class="pl-k">if</span>(p.<span class="pl-c1">code</span><span class="pl-k">===</span>e){k<span class="pl-k">=</span>p;<span class="pl-k">++</span>k.usedTimes;<span class="pl-k">break</span>}}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>k<span class="pl-k">&amp;&amp;</span>(k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLProgram</span>(a,e,b,d),c.<span class="pl-c1">push</span>(k));<span class="pl-k">return</span> k};<span class="pl-c1">this</span>.<span class="pl-en">releaseProgram</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="LC612" class="blob-code blob-code-inner js-file-line"><span class="pl-k">--</span>a.usedTimes){<span class="pl-k">var</span> b<span class="pl-k">=</span>c.<span class="pl-c1">indexOf</span>(a);c[b]<span class="pl-k">=</span>c[c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];c.<span class="pl-c1">pop</span>();a.destroy()}};<span class="pl-v">this</span>.programs<span class="pl-k">=</span>c};<span class="pl-c1">THREE</span>.<span class="pl-en">WebGLProperties</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b.uuid;<span class="pl-k">var</span> c<span class="pl-k">=</span>a[b];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>{},a[b]<span class="pl-k">=</span>c);<span class="pl-k">return</span> c};<span class="pl-c1">this</span>.<span class="pl-en">delete</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">delete</span> a[b.uuid]};<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){a<span class="pl-k">=</span>{}}};</td>
      </tr>
      <tr>
        <td id="L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="LC613" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLShader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-en">a</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)a[c]<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a[c];<span class="pl-k">return</span> a.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)};<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b.createShader(c);b.shaderSource(e,d);b.compileShader(e);<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b.getShaderParameter(e,b.COMPILE_STATUS)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLShader: Shader couldn&#39;t compile.<span class="pl-pds">&quot;</span></span>);<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span>b.getShaderInfoLog(e)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLShader: gl.getShaderInfoLog()<span class="pl-pds">&quot;</span></span>,c<span class="pl-k">===</span>b.VERTEX_SHADER<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertex<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fragment<span class="pl-pds">&quot;</span></span>,b.getShaderInfoLog(e),a(d));<span class="pl-k">return</span> e}}();</td>
      </tr>
      <tr>
        <td id="L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="LC614" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLShadowMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.geometry,c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.morphTargets<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>c.morphTargets.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>b.morphTargets,d<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SkinnedMesh<span class="pl-k">&amp;&amp;</span>b.skinning,c<span class="pl-k">=</span>a.customDepthMaterial<span class="pl-k">?</span>a.customDepthMaterial<span class="pl-k">:</span>d<span class="pl-k">?</span>c<span class="pl-k">?</span>u<span class="pl-k">:</span>r<span class="pl-k">:</span>c<span class="pl-k">?</span>t<span class="pl-k">:</span>q;c.visible<span class="pl-k">=</span>b.visible;c.wireframe<span class="pl-k">=</span>b.wireframe;c.wireframeLinewidth<span class="pl-k">=</span>b.wireframeLinewidth;<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a.visible){(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Mesh<span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Line<span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Points)<span class="pl-k">&amp;&amp;</span>a.castShadow<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>a.frustumCulled<span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span>h.intersectsObject(a))<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="LC615" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a.material.visible<span class="pl-k">&amp;&amp;</span>(a.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld),n.<span class="pl-c1">push</span>(a));<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.children,d<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>f;d<span class="pl-k">++</span>)e(c[d],b)}}<span class="pl-k">var</span> g<span class="pl-k">=</span>a.context,f<span class="pl-k">=</span>a.state,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,n<span class="pl-k">=</span>[],p<span class="pl-k">=</span><span class="pl-c1">THREE</span>.ShaderLib.depthRGBA,m<span class="pl-k">=</span><span class="pl-c1">THREE</span>.UniformsUtils.clone(p.uniforms),q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({uniforms<span class="pl-k">:</span>m,vertexShader<span class="pl-k">:</span>p.vertexShader,fragmentShader<span class="pl-k">:</span>p.fragmentShader}),t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({uniforms<span class="pl-k">:</span>m,</td>
      </tr>
      <tr>
        <td id="L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="LC616" class="blob-code blob-code-inner js-file-line">vertexShader<span class="pl-k">:</span>p.vertexShader,fragmentShader<span class="pl-k">:</span>p.fragmentShader,morphTargets<span class="pl-k">:!</span><span class="pl-c1">0</span>}),r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({uniforms<span class="pl-k">:</span>m,vertexShader<span class="pl-k">:</span>p.vertexShader,fragmentShader<span class="pl-k">:</span>p.fragmentShader,skinning<span class="pl-k">:!</span><span class="pl-c1">0</span>}),u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({uniforms<span class="pl-k">:</span>m,vertexShader<span class="pl-k">:</span>p.vertexShader,fragmentShader<span class="pl-k">:</span>p.fragmentShader,morphTargets<span class="pl-k">:!</span><span class="pl-c1">0</span>,skinning<span class="pl-k">:!</span><span class="pl-c1">0</span>});q._shadowPass<span class="pl-k">=!</span><span class="pl-c1">0</span>;t._shadowPass<span class="pl-k">=!</span><span class="pl-c1">0</span>;r._shadowPass<span class="pl-k">=!</span><span class="pl-c1">0</span>;u._shadowPass<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-v">this</span>.enabled<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.autoUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PCFShadowMap;<span class="pl-v">this</span>.cullFace<span class="pl-k">=</span><span class="pl-c1">THREE</span>.CullFaceFront;</td>
      </tr>
      <tr>
        <td id="L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="LC617" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">m</span>,<span class="pl-smi">q</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>w.enabled<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>w.autoUpdate<span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>w.needsUpdate)){g.clearColor(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);f.disable(g.BLEND);f.enable(g.CULL_FACE);g.frontFace(g.CCW);w.cullFace<span class="pl-k">===</span><span class="pl-c1">THREE</span>.CullFaceFront<span class="pl-k">?</span>g.cullFace(g.FRONT)<span class="pl-k">:</span>g.cullFace(g.BACK);f.setDepthTest(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;p<span class="pl-k">&lt;</span>t;p<span class="pl-k">++</span>){<span class="pl-k">var</span> r<span class="pl-k">=</span>b[p];<span class="pl-k">if</span>(r.castShadow){<span class="pl-k">if</span>(<span class="pl-k">!</span>r.shadowMap){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-c1">THREE</span>.LinearFilter;w.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.PCFSoftShadowMap<span class="pl-k">&amp;&amp;</span>(u<span class="pl-k">=</span><span class="pl-c1">THREE</span>.NearestFilter);r.shadowMap<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLRenderTarget</span>(r.shadowMapWidth,r.shadowMapHeight,{minFilter<span class="pl-k">:</span>u,</td>
      </tr>
      <tr>
        <td id="L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="LC618" class="blob-code blob-code-inner js-file-line">magFilter<span class="pl-k">:</span>u,format<span class="pl-k">:</span><span class="pl-c1">THREE</span>.RGBAFormat});r.shadowMapSize<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(r.shadowMapWidth,r.shadowMapHeight);r.shadowMatrix<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>}<span class="pl-k">if</span>(<span class="pl-k">!</span>r.shadowCamera){<span class="pl-k">if</span>(r <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SpotLight)r.shadowCamera<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(r.shadowCameraFov,r.shadowMapWidth<span class="pl-k">/</span>r.shadowMapHeight,r.shadowCameraNear,r.shadowCameraFar);<span class="pl-k">else</span> <span class="pl-k">if</span>(r <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.DirectionalLight)r.shadowCamera<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OrthographicCamera</span>(r.shadowCameraLeft,r.shadowCameraRight,r.shadowCameraTop,r.shadowCameraBottom,r.shadowCameraNear,</td>
      </tr>
      <tr>
        <td id="L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="LC619" class="blob-code blob-code-inner js-file-line">r.shadowCameraFar);<span class="pl-k">else</span>{<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ShadowMapPlugin: Unsupported light type for shadow<span class="pl-pds">&quot;</span></span>,r);<span class="pl-k">continue</span>}m.<span class="pl-c1">add</span>(r.shadowCamera);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>m.autoUpdate<span class="pl-k">&amp;&amp;</span>m.updateMatrixWorld()}r.shadowCameraVisible<span class="pl-k">&amp;&amp;!</span>r.cameraHelper<span class="pl-k">&amp;&amp;</span>(r.cameraHelper<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CameraHelper</span>(r.shadowCamera),m.<span class="pl-c1">add</span>(r.cameraHelper));<span class="pl-k">var</span> D<span class="pl-k">=</span>r.shadowMap,G<span class="pl-k">=</span>r.shadowMatrix,u<span class="pl-k">=</span>r.shadowCamera;u.position.setFromMatrixPosition(r.matrixWorld);l.setFromMatrixPosition(r.<span class="pl-c1">target</span>.matrixWorld);u.lookAt(l);u.updateMatrixWorld();u.matrixWorldInverse.getInverse(u.matrixWorld);</td>
      </tr>
      <tr>
        <td id="L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="LC620" class="blob-code blob-code-inner js-file-line">r.cameraHelper<span class="pl-k">&amp;&amp;</span>(r.cameraHelper.visible<span class="pl-k">=</span>r.shadowCameraVisible);r.shadowCameraVisible<span class="pl-k">&amp;&amp;</span>r.cameraHelper.update();G.set(.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);G.multiply(u.projectionMatrix);G.multiply(u.matrixWorldInverse);k.multiplyMatrices(u.projectionMatrix,u.matrixWorldInverse);h.setFromMatrix(k);a.setRenderTarget(D);a.<span class="pl-c1">clear</span>();n.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;e(m,u);r<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;r<span class="pl-k">&lt;</span>D;r<span class="pl-k">++</span>){<span class="pl-k">var</span> G<span class="pl-k">=</span>n[r],O<span class="pl-k">=</span>c.update(G),C<span class="pl-k">=</span>G.material;<span class="pl-k">if</span>(C <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.MeshFaceMaterial)<span class="pl-k">for</span>(<span class="pl-k">var</span> F<span class="pl-k">=</span>O.groups,C<span class="pl-k">=</span>C.materials,K<span class="pl-k">=</span><span class="pl-c1">0</span>,L<span class="pl-k">=</span>F.<span class="pl-c1">length</span>;K<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="LC621" class="blob-code blob-code-inner js-file-line">L;K<span class="pl-k">++</span>){<span class="pl-k">var</span> E<span class="pl-k">=</span>F[K],J<span class="pl-k">=</span>C[E.materialIndex];<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>J.visible<span class="pl-k">&amp;&amp;</span>a.renderBufferDirect(u,b,<span class="pl-c1">null</span>,O,d(G,J),G,E)}<span class="pl-k">else</span> a.renderBufferDirect(u,b,<span class="pl-c1">null</span>,O,d(G,C),G)}}}p<span class="pl-k">=</span>a.getClearColor();t<span class="pl-k">=</span>a.getClearAlpha();a.setClearColor(p,t);f.enable(g.BLEND);w.cullFace<span class="pl-k">===</span><span class="pl-c1">THREE</span>.CullFaceFront<span class="pl-k">&amp;&amp;</span>g.cullFace(g.BACK);a.resetGLState();w.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>}}};</td>
      </tr>
      <tr>
        <td id="L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="LC622" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLState</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">16</span>),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">16</span>),f<span class="pl-k">=</span>{},h<span class="pl-k">=</span><span class="pl-c1">null</span>,k<span class="pl-k">=</span><span class="pl-c1">null</span>,l<span class="pl-k">=</span><span class="pl-c1">null</span>,n<span class="pl-k">=</span><span class="pl-c1">null</span>,p<span class="pl-k">=</span><span class="pl-c1">null</span>,m<span class="pl-k">=</span><span class="pl-c1">null</span>,q<span class="pl-k">=</span><span class="pl-c1">null</span>,t<span class="pl-k">=</span><span class="pl-c1">null</span>,r<span class="pl-k">=</span><span class="pl-c1">null</span>,u<span class="pl-k">=</span><span class="pl-c1">null</span>,w<span class="pl-k">=</span><span class="pl-c1">null</span>,v<span class="pl-k">=</span><span class="pl-c1">null</span>,B<span class="pl-k">=</span><span class="pl-c1">null</span>,x<span class="pl-k">=</span><span class="pl-c1">null</span>,H<span class="pl-k">=</span><span class="pl-c1">null</span>,I<span class="pl-k">=</span>a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),z<span class="pl-k">=void</span> <span class="pl-c1">0</span>,D<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(){a.clearColor(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);a.clearDepth(<span class="pl-c1">1</span>);a.clearStencil(<span class="pl-c1">0</span>);<span class="pl-v">this</span>.enable(a.DEPTH_TEST);a.depthFunc(a.LEQUAL);a.frontFace(a.CCW);a.cullFace(a.BACK);<span class="pl-v">this</span>.enable(a.CULL_FACE);<span class="pl-v">this</span>.enable(a.BLEND);a.blendEquation(a.FUNC_ADD);a.blendFunc(a.SRC_ALPHA,</td>
      </tr>
      <tr>
        <td id="L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="LC623" class="blob-code blob-code-inner js-file-line">a.ONE_MINUS_SRC_ALPHA)};<span class="pl-c1">this</span>.<span class="pl-en">initAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)e[a]<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">enableAttribute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){e[b]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">===</span>g[b]<span class="pl-k">&amp;&amp;</span>(a.enableVertexAttribArray(b),g[b]<span class="pl-k">=</span><span class="pl-c1">1</span>)};<span class="pl-c1">this</span>.<span class="pl-en">disableUnusedAttributes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>g.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)g[b]<span class="pl-k">!==</span>e[b]<span class="pl-k">&amp;&amp;</span>(a.disableVertexAttribArray(b),g[b]<span class="pl-k">=</span><span class="pl-c1">0</span>)};<span class="pl-c1">this</span>.<span class="pl-en">enable</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">!==</span>f[b]<span class="pl-k">&amp;&amp;</span>(a.enable(b),f[b]<span class="pl-k">=!</span><span class="pl-c1">0</span>)};<span class="pl-c1">this</span>.<span class="pl-en">disable</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>f[b]<span class="pl-k">&amp;&amp;</span>(a.disable(b),f[b]<span class="pl-k">=!</span><span class="pl-c1">1</span>)};<span class="pl-c1">this</span>.<span class="pl-en">getCompressedTextureFormats</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span>h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>[],b.get(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_pvrtc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="LC624" class="blob-code blob-code-inner js-file-line">b.get(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)))<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.getParameter(a.COMPRESSED_TEXTURE_FORMATS),d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)h.<span class="pl-c1">push</span>(c[d]);<span class="pl-k">return</span> h};<span class="pl-c1">this</span>.<span class="pl-en">setBlending</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">r</span>){b<span class="pl-k">!==</span>k<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.NoBlending<span class="pl-k">?</span><span class="pl-v">this</span>.disable(a.BLEND)<span class="pl-k">:</span>b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AdditiveBlending<span class="pl-k">?</span>(<span class="pl-v">this</span>.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE))<span class="pl-k">:</span>b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.SubtractiveBlending<span class="pl-k">?</span>(<span class="pl-v">this</span>.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR))<span class="pl-k">:</span>b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.MultiplyBlending<span class="pl-k">?</span>(<span class="pl-v">this</span>.enable(a.BLEND),</td>
      </tr>
      <tr>
        <td id="L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="LC625" class="blob-code blob-code-inner js-file-line">a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.SRC_COLOR))<span class="pl-k">:</span>b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.CustomBlending<span class="pl-k">?</span><span class="pl-v">this</span>.enable(a.BLEND)<span class="pl-k">:</span>(<span class="pl-v">this</span>.enable(a.BLEND),a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)),k<span class="pl-k">=</span>b);<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">THREE</span>.CustomBlending){g<span class="pl-k">=</span>g<span class="pl-k">||</span>d;h<span class="pl-k">=</span>h<span class="pl-k">||</span>e;r<span class="pl-k">=</span>r<span class="pl-k">||</span>f;<span class="pl-k">if</span>(d<span class="pl-k">!==</span>l<span class="pl-k">||</span>g<span class="pl-k">!==</span>m)a.blendEquationSeparate(c(d),c(g)),l<span class="pl-k">=</span>d,m<span class="pl-k">=</span>g;<span class="pl-k">if</span>(e<span class="pl-k">!==</span>n<span class="pl-k">||</span>f<span class="pl-k">!==</span>p<span class="pl-k">||</span>h<span class="pl-k">!==</span>q<span class="pl-k">||</span>r<span class="pl-k">!==</span>t)a.blendFuncSeparate(c(e),c(f),c(h),c(r)),n<span class="pl-k">=</span>e,p<span class="pl-k">=</span>f,q<span class="pl-k">=</span>h,t<span class="pl-k">=</span>r}<span class="pl-k">else</span> t<span class="pl-k">=</span>q<span class="pl-k">=</span>m<span class="pl-k">=</span>p<span class="pl-k">=</span>n<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-v">this</span>.setDepthFunc<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="LC626" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(r<span class="pl-k">!==</span>b){<span class="pl-k">if</span>(b)<span class="pl-k">switch</span>(b){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.NeverDepth<span class="pl-k">:</span>a.depthFunc(a.NEVER);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.AlwaysDepth<span class="pl-k">:</span>a.depthFunc(a.ALWAYS);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.LessDepth<span class="pl-k">:</span>a.depthFunc(a.LESS);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.LessEqualDepth<span class="pl-k">:</span>a.depthFunc(a.LEQUAL);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.EqualDepth<span class="pl-k">:</span>a.depthFunc(a.EQUAL);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.GreaterEqualDepth<span class="pl-k">:</span>a.depthFunc(a.GEQUAL);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.GreaterDepth<span class="pl-k">:</span>a.depthFunc(a.GREATER);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.NotEqualDepth<span class="pl-k">:</span>a.depthFunc(a.NOTEQUAL);<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>a.depthFunc(a.LEQUAL)}<span class="pl-k">else</span> a.depthFunc(a.LEQUAL);</td>
      </tr>
      <tr>
        <td id="L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="LC627" class="blob-code blob-code-inner js-file-line">r<span class="pl-k">=</span>b}};<span class="pl-c1">this</span>.<span class="pl-en">setDepthTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">?</span><span class="pl-v">this</span>.enable(a.DEPTH_TEST)<span class="pl-k">:</span><span class="pl-v">this</span>.disable(a.DEPTH_TEST)};<span class="pl-c1">this</span>.<span class="pl-en">setDepthWrite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){u<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(a.depthMask(b),u<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">setColorWrite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){w<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(a.colorMask(b,b,b,b),w<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">setFlipSided</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){v<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">?</span>a.frontFace(a.CW)<span class="pl-k">:</span>a.frontFace(a.CCW),v<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">setLineWidth</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">!==</span>B<span class="pl-k">&amp;&amp;</span>(a.lineWidth(b),B<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">setPolygonOffset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){b<span class="pl-k">?</span><span class="pl-v">this</span>.enable(a.POLYGON_OFFSET_FILL)<span class="pl-k">:</span><span class="pl-v">this</span>.disable(a.POLYGON_OFFSET_FILL);<span class="pl-k">!</span>b<span class="pl-k">||</span>x<span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>H<span class="pl-k">===</span>d<span class="pl-k">||</span>(a.polygonOffset(c,</td>
      </tr>
      <tr>
        <td id="L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="LC628" class="blob-code blob-code-inner js-file-line">d),x<span class="pl-k">=</span>c,H<span class="pl-k">=</span>d)};<span class="pl-c1">this</span>.<span class="pl-en">setScissorTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">?</span><span class="pl-v">this</span>.enable(a.SCISSOR_TEST)<span class="pl-k">:</span><span class="pl-v">this</span>.disable(a.SCISSOR_TEST)};<span class="pl-c1">this</span>.<span class="pl-en">activeTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span>a.TEXTURE0<span class="pl-k">+</span>I<span class="pl-k">-</span><span class="pl-c1">1</span>);z<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(a.activeTexture(b),z<span class="pl-k">=</span>b)};<span class="pl-c1">this</span>.<span class="pl-en">bindTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>z<span class="pl-k">&amp;&amp;</span>d.activeTexture();<span class="pl-k">var</span> e<span class="pl-k">=</span>D[z];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span>{type<span class="pl-k">:void</span> <span class="pl-c1">0</span>,texture<span class="pl-k">:void</span> <span class="pl-c1">0</span>},D[z]<span class="pl-k">=</span>e);<span class="pl-k">if</span>(e.<span class="pl-c1">type</span><span class="pl-k">!==</span>b<span class="pl-k">||</span>e.texture<span class="pl-k">!==</span>c)a.bindTexture(b,c),e.<span class="pl-c1">type</span><span class="pl-k">=</span>b,e.texture<span class="pl-k">=</span>c};<span class="pl-c1">this</span>.<span class="pl-en">compressedTexImage2D</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">try</span>{a.compressedTexImage2D.<span class="pl-c1">apply</span>(a,arguments)}<span class="pl-k">catch</span>(b){<span class="pl-en">console</span><span class="pl-c1">.error</span>(b)}};</td>
      </tr>
      <tr>
        <td id="L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="LC629" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">texImage2D</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">try</span>{a.texImage2D.<span class="pl-c1">apply</span>(a,arguments)}<span class="pl-k">catch</span>(b){<span class="pl-en">console</span><span class="pl-c1">.error</span>(b)}};<span class="pl-c1">this</span>.<span class="pl-en">reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>g.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">1</span><span class="pl-k">===</span>g[b]<span class="pl-k">&amp;&amp;</span>(a.disableVertexAttribArray(b),g[b]<span class="pl-k">=</span><span class="pl-c1">0</span>);f<span class="pl-k">=</span>{};v<span class="pl-k">=</span>w<span class="pl-k">=</span>u<span class="pl-k">=</span>k<span class="pl-k">=</span>h<span class="pl-k">=</span><span class="pl-c1">null</span>}};</td>
      </tr>
      <tr>
        <td id="L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="LC630" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LensFlarePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e,g,f,h,k,l,n,p,m<span class="pl-k">=</span>a.context,q<span class="pl-k">=</span>a.state,t,r,u,w,v,B;<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">x</span>,<span class="pl-smi">H</span>,<span class="pl-smi">I</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>b.<span class="pl-c1">length</span>){x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> D<span class="pl-k">=</span>z<span class="pl-k">/</span>I,G<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>I,O<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>z,C<span class="pl-k">=</span><span class="pl-c1">16</span><span class="pl-k">/</span>z,F<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(C<span class="pl-k">*</span>D,C),K<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),L<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>u){<span class="pl-k">var</span> C<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]),E<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]);t<span class="pl-k">=</span>m.createBuffer();r<span class="pl-k">=</span>m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,t);m.bufferData(m.ARRAY_BUFFER,C,m.STATIC_DRAW);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,</td>
      </tr>
      <tr>
        <td id="L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="LC631" class="blob-code blob-code-inner js-file-line">r);m.bufferData(m.ELEMENT_ARRAY_BUFFER,E,m.STATIC_DRAW);v<span class="pl-k">=</span>m.createTexture();B<span class="pl-k">=</span>m.createTexture();q.bindTexture(m.TEXTURE_2D,v);m.texImage2D(m.TEXTURE_2D,<span class="pl-c1">0</span>,m.RGB,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>,m.RGB,m.UNSIGNED_BYTE,<span class="pl-c1">null</span>);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST);q.bindTexture(m.TEXTURE_2D,B);m.texImage2D(m.TEXTURE_2D,<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="LC632" class="blob-code blob-code-inner js-file-line">m.RGBA,16,16,0,m.RGBA,m.UNSIGNED_BYTE,null);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST);var C=(w=0&lt;m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS))?{vertexShader:&quot;uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;,</td>
      </tr>
      <tr>
        <td id="L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="LC633" class="blob-code blob-code-inner js-file-line">fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform lowp int renderType;<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform vec3 color;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>varying float vVisibility;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>if( renderType == 0 ) {<span class="pl-cce">\n</span>gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );<span class="pl-cce">\n</span>} else if( renderType == 1 ) {<span class="pl-cce">\n</span>gl_FragColor = texture2D( map, vUV );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>vec4 texture = texture2D( map, vUV );<span class="pl-cce">\n</span>texture.a *= opacity * vVisibility;<span class="pl-cce">\n</span>gl_FragColor = texture;<span class="pl-cce">\n</span>gl_FragColor.rgb *= color;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>}<span class="pl-k">:</span>{vertexShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform lowp int renderType;<span class="pl-cce">\n</span>uniform vec3 screenPosition;<span class="pl-cce">\n</span>uniform vec2 scale;<span class="pl-cce">\n</span>uniform float rotation;<span class="pl-cce">\n</span>attribute vec2 position;<span class="pl-cce">\n</span>attribute vec2 uv;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vUV = uv;<span class="pl-cce">\n</span>vec2 pos = position;<span class="pl-cce">\n</span>if( renderType == 2 ) {<span class="pl-cce">\n</span>pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;<span class="pl-cce">\n</span>pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="LC634" class="blob-code blob-code-inner js-file-line">fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>precision mediump float;<span class="pl-cce">\n</span>uniform lowp int renderType;<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>uniform sampler2D occlusionMap;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform vec3 color;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>if( renderType == 0 ) {<span class="pl-cce">\n</span>gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );<span class="pl-cce">\n</span>} else if( renderType == 1 ) {<span class="pl-cce">\n</span>gl_FragColor = texture2D( map, vUV );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;<span class="pl-cce">\n</span>visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;<span class="pl-cce">\n</span>visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;<span class="pl-cce">\n</span>visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;<span class="pl-cce">\n</span>visibility = ( 1.0 - visibility / 4.0 );<span class="pl-cce">\n</span>vec4 texture = texture2D( map, vUV );<span class="pl-cce">\n</span>texture.a *= opacity * visibility;<span class="pl-cce">\n</span>gl_FragColor = texture;<span class="pl-cce">\n</span>gl_FragColor.rgb *= color;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="LC635" class="blob-code blob-code-inner js-file-line">E<span class="pl-k">=</span>m.createProgram(),J<span class="pl-k">=</span>m.createShader(m.FRAGMENT_SHADER),y<span class="pl-k">=</span>m.createShader(m.VERTEX_SHADER),P<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a.getPrecision()<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;m.shaderSource(J,P<span class="pl-k">+</span>C.fragmentShader);m.shaderSource(y,P<span class="pl-k">+</span>C.vertexShader);m.compileShader(J);m.compileShader(y);m.attachShader(E,J);m.attachShader(E,y);m.linkProgram(E);u<span class="pl-k">=</span>E;n<span class="pl-k">=</span>m.getAttribLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);p<span class="pl-k">=</span>m.getAttribLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>);c<span class="pl-k">=</span>m.getUniformLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>renderType<span class="pl-pds">&quot;</span></span>);d<span class="pl-k">=</span>m.getUniformLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>);e<span class="pl-k">=</span>m.getUniformLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>occlusionMap<span class="pl-pds">&quot;</span></span>);g<span class="pl-k">=</span>m.getUniformLocation(u,</td>
      </tr>
      <tr>
        <td id="L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="LC636" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>opacity<span class="pl-pds">&quot;</span></span>);f<span class="pl-k">=</span>m.getUniformLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>);h<span class="pl-k">=</span>m.getUniformLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>scale<span class="pl-pds">&quot;</span></span>);k<span class="pl-k">=</span>m.getUniformLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>rotation<span class="pl-pds">&quot;</span></span>);l<span class="pl-k">=</span>m.getUniformLocation(u,<span class="pl-s"><span class="pl-pds">&quot;</span>screenPosition<span class="pl-pds">&quot;</span></span>)}m.useProgram(u);q.initAttributes();q.enableAttribute(n);q.enableAttribute(p);q.disableUnusedAttributes();m.uniform1i(e,<span class="pl-c1">0</span>);m.uniform1i(d,<span class="pl-c1">1</span>);m.bindBuffer(m.ARRAY_BUFFER,t);m.vertexAttribPointer(n,<span class="pl-c1">2</span>,m.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);m.vertexAttribPointer(p,<span class="pl-c1">2</span>,m.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,r);q.disable(m.CULL_FACE);m.depthMask(<span class="pl-k">!</span><span class="pl-c1">1</span>);E<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(J<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="LC637" class="blob-code blob-code-inner js-file-line">b.<span class="pl-c1">length</span>;E<span class="pl-k">&lt;</span>J;E<span class="pl-k">++</span>)<span class="pl-k">if</span>(C<span class="pl-k">=</span><span class="pl-c1">16</span><span class="pl-k">/</span>z,F.set(C<span class="pl-k">*</span>D,C),y<span class="pl-k">=</span>b[E],x.set(y.matrixWorld.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>],y.matrixWorld.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>],y.matrixWorld.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]),x.applyMatrix4(H.matrixWorldInverse),x.applyProjection(H.projectionMatrix),K.copy(x),L.<span class="pl-c1">x</span><span class="pl-k">=</span>K.<span class="pl-c1">x</span><span class="pl-k">*</span>G<span class="pl-k">+</span>G,L.<span class="pl-c1">y</span><span class="pl-k">=</span>K.<span class="pl-c1">y</span><span class="pl-k">*</span>O<span class="pl-k">+</span>O,w<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>L.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>L.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>I<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>L.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>L.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>z){q.activeTexture(m.TEXTURE0);q.bindTexture(m.TEXTURE_2D,<span class="pl-c1">null</span>);q.activeTexture(m.TEXTURE1);q.bindTexture(m.TEXTURE_2D,v);m.copyTexImage2D(m.TEXTURE_2D,<span class="pl-c1">0</span>,m.RGB,L.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">8</span>,L.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);m.uniform1i(c,<span class="pl-c1">0</span>);m.uniform2f(h,F.<span class="pl-c1">x</span>,F.<span class="pl-c1">y</span>);m.uniform3f(l,</td>
      </tr>
      <tr>
        <td id="L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="LC638" class="blob-code blob-code-inner js-file-line">K.<span class="pl-c1">x</span>,K.<span class="pl-c1">y</span>,K.<span class="pl-c1">z</span>);q.disable(m.BLEND);q.enable(m.DEPTH_TEST);m.drawElements(m.TRIANGLES,<span class="pl-c1">6</span>,m.UNSIGNED_SHORT,<span class="pl-c1">0</span>);q.activeTexture(m.TEXTURE0);q.bindTexture(m.TEXTURE_2D,B);m.copyTexImage2D(m.TEXTURE_2D,<span class="pl-c1">0</span>,m.RGBA,L.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">8</span>,L.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);m.uniform1i(c,<span class="pl-c1">1</span>);q.disable(m.DEPTH_TEST);q.activeTexture(m.TEXTURE1);q.bindTexture(m.TEXTURE_2D,v);m.drawElements(m.TRIANGLES,<span class="pl-c1">6</span>,m.UNSIGNED_SHORT,<span class="pl-c1">0</span>);y.positionScreen.copy(K);y.customUpdateCallback<span class="pl-k">?</span>y.customUpdateCallback(y)<span class="pl-k">:</span>y.updateLensFlares();m.uniform1i(c,<span class="pl-c1">2</span>);q.enable(m.BLEND);<span class="pl-k">for</span>(<span class="pl-k">var</span> P<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="LC639" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,U<span class="pl-k">=</span>y.lensFlares.<span class="pl-c1">length</span>;P<span class="pl-k">&lt;</span>U;P<span class="pl-k">++</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span>y.lensFlares[P];.<span class="pl-c1">001</span><span class="pl-k">&lt;</span>Q.opacity<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">001</span><span class="pl-k">&lt;</span>Q.scale<span class="pl-k">&amp;&amp;</span>(K.<span class="pl-c1">x</span><span class="pl-k">=</span>Q.<span class="pl-c1">x</span>,K.<span class="pl-c1">y</span><span class="pl-k">=</span>Q.<span class="pl-c1">y</span>,K.<span class="pl-c1">z</span><span class="pl-k">=</span>Q.<span class="pl-c1">z</span>,C<span class="pl-k">=</span>Q.<span class="pl-c1">size</span><span class="pl-k">*</span>Q.scale<span class="pl-k">/</span>z,F.<span class="pl-c1">x</span><span class="pl-k">=</span>C<span class="pl-k">*</span>D,F.<span class="pl-c1">y</span><span class="pl-k">=</span>C,m.uniform3f(l,K.<span class="pl-c1">x</span>,K.<span class="pl-c1">y</span>,K.<span class="pl-c1">z</span>),m.uniform2f(h,F.<span class="pl-c1">x</span>,F.<span class="pl-c1">y</span>),m.uniform1f(k,Q.rotation),m.uniform1f(g,Q.opacity),m.uniform3f(f,Q.<span class="pl-c1">color</span>.r,Q.<span class="pl-c1">color</span>.g,Q.<span class="pl-c1">color</span>.b),q.setBlending(Q.blending,Q.blendEquation,Q.blendSrc,Q.blendDst),a.setTexture(Q.texture,<span class="pl-c1">1</span>),m.drawElements(m.TRIANGLES,<span class="pl-c1">6</span>,m.UNSIGNED_SHORT,<span class="pl-c1">0</span>))}}q.enable(m.CULL_FACE);q.enable(m.DEPTH_TEST);m.depthMask(<span class="pl-k">!</span><span class="pl-c1">0</span>);a.resetGLState()}}};</td>
      </tr>
      <tr>
        <td id="L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="LC640" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpritePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e,g,f,h,k,l,n,p,m,q,t,r,u,w,v;<span class="pl-k">function</span> <span class="pl-en">B</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a.<span class="pl-c1">z</span><span class="pl-k">!==</span>b.<span class="pl-c1">z</span><span class="pl-k">?</span>b.<span class="pl-c1">z</span><span class="pl-k">-</span>a.<span class="pl-c1">z</span><span class="pl-k">:</span>b.<span class="pl-c1">id</span><span class="pl-k">-</span>a.<span class="pl-c1">id</span>}<span class="pl-k">var</span> x<span class="pl-k">=</span>a.context,H<span class="pl-k">=</span>a.state,I,z,D,G,O<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,C<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>,F<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">K</span>,<span class="pl-smi">L</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>b.<span class="pl-c1">length</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>D){<span class="pl-k">var</span> E<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]),J<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]);I<span class="pl-k">=</span>x.createBuffer();z<span class="pl-k">=</span>x.createBuffer();x.bindBuffer(x.ARRAY_BUFFER,I);x.bufferData(x.ARRAY_BUFFER,E,x.STATIC_DRAW);x.bindBuffer(x.ELEMENT_ARRAY_BUFFER,</td>
      </tr>
      <tr>
        <td id="L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="LC641" class="blob-code blob-code-inner js-file-line">z);x.bufferData(x.ELEMENT_ARRAY_BUFFER,J,x.STATIC_DRAW);<span class="pl-k">var</span> E<span class="pl-k">=</span>x.createProgram(),J<span class="pl-k">=</span>x.createShader(x.VERTEX_SHADER),y<span class="pl-k">=</span>x.createShader(x.FRAGMENT_SHADER);x.shaderSource(J,[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a.getPrecision()<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 modelViewMatrix;<span class="pl-cce">\n</span>uniform mat4 projectionMatrix;<span class="pl-cce">\n</span>uniform float rotation;<span class="pl-cce">\n</span>uniform vec2 scale;<span class="pl-cce">\n</span>uniform vec2 uvOffset;<span class="pl-cce">\n</span>uniform vec2 uvScale;<span class="pl-cce">\n</span>attribute vec2 position;<span class="pl-cce">\n</span>attribute vec2 uv;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vUV = uvOffset + uv * uvScale;<span class="pl-cce">\n</span>vec2 alignedPosition = position * scale;<span class="pl-cce">\n</span>vec2 rotatedPosition;<span class="pl-cce">\n</span>rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;<span class="pl-cce">\n</span>rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;<span class="pl-cce">\n</span>vec4 finalPosition;<span class="pl-cce">\n</span>finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );<span class="pl-cce">\n</span>finalPosition.xy += rotatedPosition;<span class="pl-cce">\n</span>finalPosition = projectionMatrix * finalPosition;<span class="pl-cce">\n</span>gl_Position = finalPosition;<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="LC642" class="blob-code blob-code-inner js-file-line">x.shaderSource(y,[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a.getPrecision()<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 color;<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform int fogType;<span class="pl-cce">\n</span>uniform vec3 fogColor;<span class="pl-cce">\n</span>uniform float fogDensity;<span class="pl-cce">\n</span>uniform float fogNear;<span class="pl-cce">\n</span>uniform float fogFar;<span class="pl-cce">\n</span>uniform float alphaTest;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec4 texture = texture2D( map, vUV );<span class="pl-cce">\n</span>if ( texture.a &lt; alphaTest ) discard;<span class="pl-cce">\n</span>gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );<span class="pl-cce">\n</span>if ( fogType &gt; 0 ) {<span class="pl-cce">\n</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n</span>float fogFactor = 0.0;<span class="pl-cce">\n</span>if ( fogType == 1 ) {<span class="pl-cce">\n</span>fogFactor = smoothstep( fogNear, fogFar, depth );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>const float LOG2 = 1.442695;<span class="pl-cce">\n</span>fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );<span class="pl-cce">\n</span>fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="LC643" class="blob-code blob-code-inner js-file-line">x.compileShader(J);x.compileShader(y);x.attachShader(E,J);x.attachShader(E,y);x.linkProgram(E);D<span class="pl-k">=</span>E;w<span class="pl-k">=</span>x.getAttribLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);v<span class="pl-k">=</span>x.getAttribLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>);c<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>uvOffset<span class="pl-pds">&quot;</span></span>);d<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>uvScale<span class="pl-pds">&quot;</span></span>);e<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>rotation<span class="pl-pds">&quot;</span></span>);g<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>scale<span class="pl-pds">&quot;</span></span>);f<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>);h<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>);k<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>opacity<span class="pl-pds">&quot;</span></span>);l<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>modelViewMatrix<span class="pl-pds">&quot;</span></span>);n<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>projectionMatrix<span class="pl-pds">&quot;</span></span>);p<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="LC644" class="blob-code blob-code-inner js-file-line">x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>fogType<span class="pl-pds">&quot;</span></span>);m<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>fogDensity<span class="pl-pds">&quot;</span></span>);q<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>fogNear<span class="pl-pds">&quot;</span></span>);t<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>fogFar<span class="pl-pds">&quot;</span></span>);r<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>fogColor<span class="pl-pds">&quot;</span></span>);u<span class="pl-k">=</span>x.getUniformLocation(D,<span class="pl-s"><span class="pl-pds">&quot;</span>alphaTest<span class="pl-pds">&quot;</span></span>);E<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);E.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-c1">8</span>;E.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-c1">8</span>;J<span class="pl-k">=</span>E.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);J.fillStyle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>white<span class="pl-pds">&quot;</span></span>;J.fillRect(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">8</span>,<span class="pl-c1">8</span>);G<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(E);G.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>}x.useProgram(D);H.initAttributes();H.enableAttribute(w);H.enableAttribute(v);H.disableUnusedAttributes();H.disable(x.CULL_FACE);</td>
      </tr>
      <tr>
        <td id="L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="LC645" class="blob-code blob-code-inner js-file-line">H.enable(x.BLEND);x.bindBuffer(x.ARRAY_BUFFER,I);x.vertexAttribPointer(w,<span class="pl-c1">2</span>,x.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);x.vertexAttribPointer(v,<span class="pl-c1">2</span>,x.FLOAT,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>);x.bindBuffer(x.ELEMENT_ARRAY_BUFFER,z);x.uniformMatrix4fv(n,<span class="pl-k">!</span><span class="pl-c1">1</span>,L.projectionMatrix.<span class="pl-c1">elements</span>);H.activeTexture(x.TEXTURE0);x.uniform1i(h,<span class="pl-c1">0</span>);J<span class="pl-k">=</span>E<span class="pl-k">=</span><span class="pl-c1">0</span>;(y<span class="pl-k">=</span>K.fog)<span class="pl-k">?</span>(x.uniform3f(r,y.<span class="pl-c1">color</span>.r,y.<span class="pl-c1">color</span>.g,y.<span class="pl-c1">color</span>.b),y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Fog<span class="pl-k">?</span>(x.uniform1f(q,y.near),x.uniform1f(t,y.far),x.uniform1i(p,<span class="pl-c1">1</span>),J<span class="pl-k">=</span>E<span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.FogExp2<span class="pl-k">&amp;&amp;</span>(x.uniform1f(m,y.density),x.uniform1i(p,<span class="pl-c1">2</span>),J<span class="pl-k">=</span>E<span class="pl-k">=</span><span class="pl-c1">2</span>))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="LC646" class="blob-code blob-code-inner js-file-line">(x.uniform1i(p,<span class="pl-c1">0</span>),J<span class="pl-k">=</span>E<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> y<span class="pl-k">=</span><span class="pl-c1">0</span>,P<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span>P;y<span class="pl-k">++</span>){<span class="pl-k">var</span> U<span class="pl-k">=</span>b[y];U.modelViewMatrix.multiplyMatrices(L.matrixWorldInverse,U.matrixWorld);U.<span class="pl-c1">z</span><span class="pl-k">=-</span>U.modelViewMatrix.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]}b.<span class="pl-c1">sort</span>(B);<span class="pl-k">for</span>(<span class="pl-k">var</span> Q<span class="pl-k">=</span>[],y<span class="pl-k">=</span><span class="pl-c1">0</span>,P<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span>P;y<span class="pl-k">++</span>){<span class="pl-k">var</span> U<span class="pl-k">=</span>b[y],R<span class="pl-k">=</span>U.material;x.uniform1f(u,R.alphaTest);x.uniformMatrix4fv(l,<span class="pl-k">!</span><span class="pl-c1">1</span>,U.modelViewMatrix.<span class="pl-c1">elements</span>);U.matrixWorld.decompose(O,C,F);Q[<span class="pl-c1">0</span>]<span class="pl-k">=</span>F.<span class="pl-c1">x</span>;Q[<span class="pl-c1">1</span>]<span class="pl-k">=</span>F.<span class="pl-c1">y</span>;U<span class="pl-k">=</span><span class="pl-c1">0</span>;K.fog<span class="pl-k">&amp;&amp;</span>R.fog<span class="pl-k">&amp;&amp;</span>(U<span class="pl-k">=</span>J);E<span class="pl-k">!==</span>U<span class="pl-k">&amp;&amp;</span>(x.uniform1i(p,U),E<span class="pl-k">=</span>U);<span class="pl-c1">null</span><span class="pl-k">!==</span>R.map<span class="pl-k">?</span>(x.uniform2f(c,R.map.offset.<span class="pl-c1">x</span>,R.map.offset.<span class="pl-c1">y</span>),x.uniform2f(d,</td>
      </tr>
      <tr>
        <td id="L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="LC647" class="blob-code blob-code-inner js-file-line">R.map.repeat.<span class="pl-c1">x</span>,R.map.repeat.<span class="pl-c1">y</span>))<span class="pl-k">:</span>(x.uniform2f(c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),x.uniform2f(d,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>));x.uniform1f(k,R.opacity);x.uniform3f(f,R.<span class="pl-c1">color</span>.r,R.<span class="pl-c1">color</span>.g,R.<span class="pl-c1">color</span>.b);x.uniform1f(e,R.rotation);x.uniform2fv(g,Q);H.setBlending(R.blending,R.blendEquation,R.blendSrc,R.blendDst);H.setDepthTest(R.depthTest);H.setDepthWrite(R.depthWrite);R.map<span class="pl-k">&amp;&amp;</span>R.map.image<span class="pl-k">&amp;&amp;</span>R.map.image.<span class="pl-c1">width</span><span class="pl-k">?</span>a.setTexture(R.map,<span class="pl-c1">0</span>)<span class="pl-k">:</span>a.setTexture(G,<span class="pl-c1">0</span>);x.drawElements(x.TRIANGLES,<span class="pl-c1">6</span>,x.UNSIGNED_SHORT,<span class="pl-c1">0</span>)}H.enable(x.CULL_FACE);a.resetGLState()}}};</td>
      </tr>
      <tr>
        <td id="L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="LC648" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.GeometryUtils<span class="pl-k">=</span>{<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> d;b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Mesh<span class="pl-k">&amp;&amp;</span>(b.matrixAutoUpdate<span class="pl-k">&amp;&amp;</span>b.updateMatrix(),d<span class="pl-k">=</span>b.matrix,b<span class="pl-k">=</span>b.geometry);a.merge(b,d,c)},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> a.center()}};</td>
      </tr>
      <tr>
        <td id="L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="LC649" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ImageUtils<span class="pl-k">=</span>{crossOrigin<span class="pl-k">:void</span> <span class="pl-c1">0</span>,<span class="pl-en">loadTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>;e.crossOrigin<span class="pl-k">=</span><span class="pl-v">this</span>.crossOrigin;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span>,b);e.<span class="pl-c1">load</span>(a,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){g.image<span class="pl-k">=</span>a;g.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;c<span class="pl-k">&amp;&amp;</span>c(g)},<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){d<span class="pl-k">&amp;&amp;</span>d(a)});g.sourceFile<span class="pl-k">=</span>a;<span class="pl-k">return</span> g},<span class="pl-en">loadTextureCube</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>;e.crossOrigin<span class="pl-k">=</span><span class="pl-v">this</span>.crossOrigin;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CubeTexture</span>([],b),f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){e.<span class="pl-c1">load</span>(a[b],<span class="pl-k">function</span>(<span class="pl-smi">a</span>){g.<span class="pl-c1">images</span>[b]<span class="pl-k">=</span>a;f<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-c1">6</span><span class="pl-k">===</span>f<span class="pl-k">&amp;&amp;</span>(g.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>,c<span class="pl-k">&amp;&amp;</span>c(g))},<span class="pl-k">void</span> <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="LC650" class="blob-code blob-code-inner js-file-line">d)};<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;h<span class="pl-k">&lt;</span>k;<span class="pl-k">++</span>h)b(h);<span class="pl-k">return</span> g},<span class="pl-en">loadCompressedTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">loadCompressedTextureCube</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">getNormalMap</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> <span class="pl-en">c</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>a[<span class="pl-c1">2</span>]);<span class="pl-k">return</span>[a[<span class="pl-c1">0</span>]<span class="pl-k">/</span>b,a[<span class="pl-c1">1</span>]<span class="pl-k">/</span>b,a[<span class="pl-c1">2</span>]<span class="pl-k">/</span>b]};b|<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span>a.<span class="pl-c1">width</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">height</span>,g<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="LC651" class="blob-code blob-code-inner js-file-line">g.<span class="pl-c1">width</span><span class="pl-k">=</span>d;g.<span class="pl-c1">height</span><span class="pl-k">=</span>e;<span class="pl-k">var</span> f<span class="pl-k">=</span>g.getContext(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);f.drawImage(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>f.getImageData(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,d,e).<span class="pl-c1">data</span>,k<span class="pl-k">=</span>f.createImageData(d,e),l<span class="pl-k">=</span>k.<span class="pl-c1">data</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>d;n<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span>e;p<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>p<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>p<span class="pl-k">-</span><span class="pl-c1">1</span>,q<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>e<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span>e<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>p<span class="pl-k">+</span><span class="pl-c1">1</span>,t<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>n<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>,r<span class="pl-k">=</span>n<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>d<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span>d<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span>[],w<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(p<span class="pl-k">*</span>d<span class="pl-k">+</span>n)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b];u.<span class="pl-c1">push</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(p<span class="pl-k">*</span>d<span class="pl-k">+</span>t)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);u.<span class="pl-c1">push</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(m<span class="pl-k">*</span>d<span class="pl-k">+</span>t)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);u.<span class="pl-c1">push</span>([<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(m<span class="pl-k">*</span>d<span class="pl-k">+</span>n)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);u.<span class="pl-c1">push</span>([<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(m<span class="pl-k">*</span>d<span class="pl-k">+</span>r)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);u.<span class="pl-c1">push</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(p<span class="pl-k">*</span>d<span class="pl-k">+</span>r)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);u.<span class="pl-c1">push</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(q<span class="pl-k">*</span>d<span class="pl-k">+</span>r)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);u.<span class="pl-c1">push</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(q<span class="pl-k">*</span>d<span class="pl-k">+</span>n)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="LC652" class="blob-code blob-code-inner js-file-line">b]);u.<span class="pl-c1">push</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(q<span class="pl-k">*</span>d<span class="pl-k">+</span>t)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);m<span class="pl-k">=</span>[];t<span class="pl-k">=</span>u.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>t;q<span class="pl-k">++</span>){<span class="pl-k">var</span> r<span class="pl-k">=</span>u[q],v<span class="pl-k">=</span>u[(q<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>t],r<span class="pl-k">=</span>[r[<span class="pl-c1">0</span>]<span class="pl-k">-</span>w[<span class="pl-c1">0</span>],r[<span class="pl-c1">1</span>]<span class="pl-k">-</span>w[<span class="pl-c1">1</span>],r[<span class="pl-c1">2</span>]<span class="pl-k">-</span>w[<span class="pl-c1">2</span>]],v<span class="pl-k">=</span>[v[<span class="pl-c1">0</span>]<span class="pl-k">-</span>w[<span class="pl-c1">0</span>],v[<span class="pl-c1">1</span>]<span class="pl-k">-</span>w[<span class="pl-c1">1</span>],v[<span class="pl-c1">2</span>]<span class="pl-k">-</span>w[<span class="pl-c1">2</span>]];m.<span class="pl-c1">push</span>(c([r[<span class="pl-c1">1</span>]<span class="pl-k">*</span>v[<span class="pl-c1">2</span>]<span class="pl-k">-</span>r[<span class="pl-c1">2</span>]<span class="pl-k">*</span>v[<span class="pl-c1">1</span>],r[<span class="pl-c1">2</span>]<span class="pl-k">*</span>v[<span class="pl-c1">0</span>]<span class="pl-k">-</span>r[<span class="pl-c1">0</span>]<span class="pl-k">*</span>v[<span class="pl-c1">2</span>],r[<span class="pl-c1">0</span>]<span class="pl-k">*</span>v[<span class="pl-c1">1</span>]<span class="pl-k">-</span>r[<span class="pl-c1">1</span>]<span class="pl-k">*</span>v[<span class="pl-c1">0</span>]]))}u<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>m.<span class="pl-c1">length</span>;q<span class="pl-k">++</span>)u[<span class="pl-c1">0</span>]<span class="pl-k">+=</span>m[q][<span class="pl-c1">0</span>],u[<span class="pl-c1">1</span>]<span class="pl-k">+=</span>m[q][<span class="pl-c1">1</span>],u[<span class="pl-c1">2</span>]<span class="pl-k">+=</span>m[q][<span class="pl-c1">2</span>];u[<span class="pl-c1">0</span>]<span class="pl-k">/=</span>m.<span class="pl-c1">length</span>;u[<span class="pl-c1">1</span>]<span class="pl-k">/=</span>m.<span class="pl-c1">length</span>;u[<span class="pl-c1">2</span>]<span class="pl-k">/=</span>m.<span class="pl-c1">length</span>;w<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>(p<span class="pl-k">*</span>d<span class="pl-k">+</span>n);l[w]<span class="pl-k">=</span>(u[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">255</span>|<span class="pl-c1">0</span>;l[w<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>(u[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">255</span>|<span class="pl-c1">0</span>;l[w<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span>u[<span class="pl-c1">2</span>]|<span class="pl-c1">0</span>;l[w<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">255</span>}f.putImageData(k,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> g},<span class="pl-en">generateDataTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="LC653" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a<span class="pl-k">*</span>b,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>d),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>c.r),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>c.g);c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>c.b);<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>d;h<span class="pl-k">++</span>)e[<span class="pl-c1">3</span><span class="pl-k">*</span>h]<span class="pl-k">=</span>g,e[<span class="pl-c1">3</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>f,e[<span class="pl-c1">3</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>(e,a,b,<span class="pl-c1">THREE</span>.RGBFormat);a.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> a}};</td>
      </tr>
      <tr>
        <td id="L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="LC654" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.SceneUtils<span class="pl-k">=</span>{<span class="pl-en">createMultiMaterialObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Group</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)c.<span class="pl-c1">add</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(a,b[d]));<span class="pl-k">return</span> c},<span class="pl-en">detach</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a.applyMatrix(b.matrixWorld);b.remove(a);c.<span class="pl-c1">add</span>(a)},<span class="pl-en">attach</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.<span class="pl-c1">add</span>(a)}};</td>
      </tr>
      <tr>
        <td id="L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="LC655" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.FontUtils<span class="pl-k">=</span>{faces<span class="pl-k">:</span>{},face<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>helvetiker<span class="pl-pds">&quot;</span></span>,weight<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,style<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,size<span class="pl-k">:</span><span class="pl-c1">150</span>,divisions<span class="pl-k">:</span><span class="pl-c1">10</span>,<span class="pl-en">getFace</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">try</span>{<span class="pl-k">return</span> <span class="pl-v">this</span>.faces[<span class="pl-v">this</span>.<span class="pl-c1">face</span>.<span class="pl-c1">toLowerCase</span>()][<span class="pl-v">this</span>.weight][<span class="pl-v">this</span>.<span class="pl-c1">style</span>]}<span class="pl-k">catch</span>(a){<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>The font <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">face</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> with <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.weight<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> weight and <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">style</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> style is missing.<span class="pl-pds">&quot;</span></span>;}},<span class="pl-en">loadFace</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.familyName.<span class="pl-c1">toLowerCase</span>();<span class="pl-v">this</span>.faces[b]<span class="pl-k">=</span><span class="pl-v">this</span>.faces[b]<span class="pl-k">||</span>{};<span class="pl-v">this</span>.faces[b][a.cssFontWeight]<span class="pl-k">=</span><span class="pl-v">this</span>.faces[b][a.cssFontWeight]<span class="pl-k">||</span>{};<span class="pl-v">this</span>.faces[b][a.cssFontWeight][a.cssFontStyle]<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>.faces[b][a.cssFontWeight][a.cssFontStyle]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="LC656" class="blob-code blob-code-inner js-file-line">a},<span class="pl-en">drawText</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.getFace(),c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">size</span><span class="pl-k">/</span>b.resolution,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">String</span>(a).<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>),g<span class="pl-k">=</span>e.<span class="pl-c1">length</span>,f<span class="pl-k">=</span>[];<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>g;a<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>,h<span class="pl-k">=</span><span class="pl-v">this</span>.extractGlyphPoints(e[a],b,c,d,h),d<span class="pl-k">=</span>d<span class="pl-k">+</span>h.offset;f.<span class="pl-c1">push</span>(h.path)}<span class="pl-k">return</span>{paths<span class="pl-k">:</span>f,offset<span class="pl-k">:</span>d<span class="pl-k">/</span><span class="pl-c1">2</span>}},<span class="pl-en">extractGlyphPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>[],f,h,k,l,n,p,m,q,t,r,u,w<span class="pl-k">=</span>b.glyphs[a]<span class="pl-k">||</span>b.glyphs[<span class="pl-s"><span class="pl-pds">&quot;</span>?<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(w){<span class="pl-k">if</span>(w.o)<span class="pl-k">for</span>(b<span class="pl-k">=</span>w._cachedOutline<span class="pl-k">||</span>(w._cachedOutline<span class="pl-k">=</span>w.o.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>)),l<span class="pl-k">=</span>b.<span class="pl-c1">length</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>l;)<span class="pl-k">switch</span>(k<span class="pl-k">=</span>b[a<span class="pl-k">++</span>],k){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>k<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;n<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;e.<span class="pl-c1">moveTo</span>(k,n);</td>
      </tr>
      <tr>
        <td id="L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="LC657" class="blob-code blob-code-inner js-file-line"><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>l<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>k<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;n<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;e.lineTo(k,n);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>q<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>k<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;n<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;q<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;t<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;e.quadraticCurveTo(q,t,k,n);<span class="pl-k">if</span>(f<span class="pl-k">=</span>g[g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])<span class="pl-k">for</span>(p<span class="pl-k">=</span>f.<span class="pl-c1">x</span>,m<span class="pl-k">=</span>f.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span><span class="pl-v">this</span>.divisions;f<span class="pl-k">&lt;=</span>h;f<span class="pl-k">++</span>){<span class="pl-k">var</span> v<span class="pl-k">=</span>f<span class="pl-k">/</span>h;<span class="pl-c1">THREE</span>.Shape.Utils.b2(v,p,q,k);<span class="pl-c1">THREE</span>.Shape.Utils.b2(v,m,t,n)}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">if</span>(k<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d,n<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c,q<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d,t<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c,r<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d,u<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c,e.bezierCurveTo(q,t,r,u,k,n),f<span class="pl-k">=</span>g[g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])<span class="pl-k">for</span>(p<span class="pl-k">=</span>f.<span class="pl-c1">x</span>,m<span class="pl-k">=</span>f.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span><span class="pl-v">this</span>.divisions;f<span class="pl-k">&lt;=</span>h;f<span class="pl-k">++</span>)v<span class="pl-k">=</span>f<span class="pl-k">/</span>h,<span class="pl-c1">THREE</span>.Shape.Utils.b3(v,p,q,r,k),<span class="pl-c1">THREE</span>.Shape.Utils.b3(v,</td>
      </tr>
      <tr>
        <td id="L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="LC658" class="blob-code blob-code-inner js-file-line">m,t,u,n)}<span class="pl-k">return</span>{offset<span class="pl-k">:</span>w.ha<span class="pl-k">*</span>c,path<span class="pl-k">:</span>e}}}};</td>
      </tr>
      <tr>
        <td id="L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="LC659" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.FontUtils</span>.<span class="pl-en">generateShapes</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span>{};<span class="pl-k">var</span> c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.curveSegments<span class="pl-k">?</span>b.curveSegments<span class="pl-k">:</span><span class="pl-c1">4</span>,d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.font<span class="pl-k">?</span>b.font<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>helvetiker<span class="pl-pds">&quot;</span></span>,e<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.weight<span class="pl-k">?</span>b.weight<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,g<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.<span class="pl-c1">style</span><span class="pl-k">?</span>b.<span class="pl-c1">style</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.FontUtils.<span class="pl-c1">size</span><span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.<span class="pl-c1">size</span><span class="pl-k">?</span>b.<span class="pl-c1">size</span><span class="pl-k">:</span><span class="pl-c1">100</span>;<span class="pl-c1">THREE</span>.FontUtils.divisions<span class="pl-k">=</span>c;<span class="pl-c1">THREE</span>.FontUtils.<span class="pl-c1">face</span><span class="pl-k">=</span>d;<span class="pl-c1">THREE</span>.FontUtils.weight<span class="pl-k">=</span>e;<span class="pl-c1">THREE</span>.FontUtils.<span class="pl-c1">style</span><span class="pl-k">=</span>g;c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.FontUtils.drawText(a).paths;d<span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span>c.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.push.<span class="pl-c1">apply</span>(d,c[e].toShapes());<span class="pl-k">return</span> d};</td>
      </tr>
      <tr>
        <td id="L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="LC660" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> <span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>a.<span class="pl-c1">length</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>b<span class="pl-k">-</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>b;g<span class="pl-k">=</span>f<span class="pl-k">++</span>)e<span class="pl-k">+=</span>a[g].<span class="pl-c1">x</span><span class="pl-k">*</span>a[f].<span class="pl-c1">y</span><span class="pl-k">-</span>a[f].<span class="pl-c1">x</span><span class="pl-k">*</span>a[g].<span class="pl-c1">y</span>;<span class="pl-k">return</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>e};<span class="pl-c1">a</span>.<span class="pl-en">Triangulate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">&gt;</span>e)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span>[],f<span class="pl-k">=</span>[],h<span class="pl-k">=</span>[],k,l,n;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>b(a))<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>e;l<span class="pl-k">++</span>)f[l]<span class="pl-k">=</span>l;<span class="pl-k">else</span> <span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>e;l<span class="pl-k">++</span>)f[l]<span class="pl-k">=</span>e<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">-</span>l;<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e;<span class="pl-k">for</span>(l<span class="pl-k">=</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">2</span><span class="pl-k">&lt;</span>e;){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;=</span>p<span class="pl-k">--</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.FontUtils: Warning, unable to triangulate polygon! in Triangulate.process()<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>}k<span class="pl-k">=</span>l;e<span class="pl-k">&lt;=</span>k<span class="pl-k">&amp;&amp;</span>(k<span class="pl-k">=</span><span class="pl-c1">0</span>);l<span class="pl-k">=</span>k<span class="pl-k">+</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>l<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>);n<span class="pl-k">=</span>l<span class="pl-k">+</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>n<span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> m;a<span class="pl-k">:</span>{<span class="pl-k">var</span> q<span class="pl-k">=</span>m<span class="pl-k">=void</span> <span class="pl-c1">0</span>,t<span class="pl-k">=void</span> <span class="pl-c1">0</span>,r<span class="pl-k">=void</span> <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="LC661" class="blob-code blob-code-inner js-file-line">u<span class="pl-k">=void</span> <span class="pl-c1">0</span>,w<span class="pl-k">=void</span> <span class="pl-c1">0</span>,v<span class="pl-k">=void</span> <span class="pl-c1">0</span>,B<span class="pl-k">=void</span> <span class="pl-c1">0</span>,x<span class="pl-k">=void</span> <span class="pl-c1">0</span>,q<span class="pl-k">=</span>a[f[k]].<span class="pl-c1">x</span>,t<span class="pl-k">=</span>a[f[k]].<span class="pl-c1">y</span>,r<span class="pl-k">=</span>a[f[l]].<span class="pl-c1">x</span>,u<span class="pl-k">=</span>a[f[l]].<span class="pl-c1">y</span>,w<span class="pl-k">=</span>a[f[n]].<span class="pl-c1">x</span>,v<span class="pl-k">=</span>a[f[n]].<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-c1">1E-10</span><span class="pl-k">&gt;</span>(r<span class="pl-k">-</span>q)<span class="pl-k">*</span>(v<span class="pl-k">-</span>t)<span class="pl-k">-</span>(u<span class="pl-k">-</span>t)<span class="pl-k">*</span>(w<span class="pl-k">-</span>q))m<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> H<span class="pl-k">=void</span> <span class="pl-c1">0</span>,I<span class="pl-k">=void</span> <span class="pl-c1">0</span>,z<span class="pl-k">=void</span> <span class="pl-c1">0</span>,D<span class="pl-k">=void</span> <span class="pl-c1">0</span>,G<span class="pl-k">=void</span> <span class="pl-c1">0</span>,O<span class="pl-k">=void</span> <span class="pl-c1">0</span>,C<span class="pl-k">=void</span> <span class="pl-c1">0</span>,F<span class="pl-k">=void</span> <span class="pl-c1">0</span>,K<span class="pl-k">=void</span> <span class="pl-c1">0</span>,L<span class="pl-k">=void</span> <span class="pl-c1">0</span>,K<span class="pl-k">=</span>F<span class="pl-k">=</span>C<span class="pl-k">=</span>x<span class="pl-k">=</span>B<span class="pl-k">=void</span> <span class="pl-c1">0</span>,H<span class="pl-k">=</span>w<span class="pl-k">-</span>r,I<span class="pl-k">=</span>v<span class="pl-k">-</span>u,z<span class="pl-k">=</span>q<span class="pl-k">-</span>w,D<span class="pl-k">=</span>t<span class="pl-k">-</span>v,G<span class="pl-k">=</span>r<span class="pl-k">-</span>q,O<span class="pl-k">=</span>u<span class="pl-k">-</span>t;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>e;m<span class="pl-k">++</span>)<span class="pl-k">if</span>(B<span class="pl-k">=</span>a[f[m]].<span class="pl-c1">x</span>,x<span class="pl-k">=</span>a[f[m]].<span class="pl-c1">y</span>,<span class="pl-k">!</span>(B<span class="pl-k">===</span>q<span class="pl-k">&amp;&amp;</span>x<span class="pl-k">===</span>t<span class="pl-k">||</span>B<span class="pl-k">===</span>r<span class="pl-k">&amp;&amp;</span>x<span class="pl-k">===</span>u<span class="pl-k">||</span>B<span class="pl-k">===</span>w<span class="pl-k">&amp;&amp;</span>x<span class="pl-k">===</span>v)<span class="pl-k">&amp;&amp;</span>(C<span class="pl-k">=</span>B<span class="pl-k">-</span>q,F<span class="pl-k">=</span>x<span class="pl-k">-</span>t,K<span class="pl-k">=</span>B<span class="pl-k">-</span>r,L<span class="pl-k">=</span>x<span class="pl-k">-</span>u,B<span class="pl-k">-=</span>w,x<span class="pl-k">-=</span>v,K<span class="pl-k">=</span>H<span class="pl-k">*</span>L<span class="pl-k">-</span>I<span class="pl-k">*</span>K,C<span class="pl-k">=</span>G<span class="pl-k">*</span>F<span class="pl-k">-</span>O<span class="pl-k">*</span>C,F<span class="pl-k">=</span>z<span class="pl-k">*</span>x<span class="pl-k">-</span>D<span class="pl-k">*</span>B,<span class="pl-k">-</span><span class="pl-c1">1E-10</span><span class="pl-k">&lt;=</span>K<span class="pl-k">&amp;&amp;-</span><span class="pl-c1">1E-10</span><span class="pl-k">&lt;=</span>F<span class="pl-k">&amp;&amp;-</span><span class="pl-c1">1E-10</span><span class="pl-k">&lt;=</span>C)){m<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-k">break</span> a}m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="LC662" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>}}<span class="pl-k">if</span>(m){g.<span class="pl-c1">push</span>([a[f[k]],a[f[l]],a[f[n]]]);h.<span class="pl-c1">push</span>([f[k],f[l],f[n]]);k<span class="pl-k">=</span>l;<span class="pl-k">for</span>(n<span class="pl-k">=</span>l<span class="pl-k">+</span><span class="pl-c1">1</span>;n<span class="pl-k">&lt;</span>e;k<span class="pl-k">++</span>,n<span class="pl-k">++</span>)f[k]<span class="pl-k">=</span>f[n];e<span class="pl-k">--</span>;p<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e}}<span class="pl-k">return</span> d<span class="pl-k">?</span>h<span class="pl-k">:</span>g};a.Triangulate.area<span class="pl-k">=</span>b;<span class="pl-k">return</span> a})(<span class="pl-c1">THREE</span>.FontUtils);<span class="pl-c1">THREE</span>.typeface_js<span class="pl-k">=</span>{faces<span class="pl-k">:</span><span class="pl-c1">THREE</span>.FontUtils.faces,loadFace<span class="pl-k">:</span><span class="pl-c1">THREE</span>.FontUtils.loadFace};<span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!==typeof</span> self<span class="pl-k">&amp;&amp;</span>(self._typeface_js<span class="pl-k">=</span><span class="pl-c1">THREE</span>.typeface_js);</td>
      </tr>
      <tr>
        <td id="L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="LC663" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Audio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Audio<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.context<span class="pl-k">=</span>a.context;<span class="pl-v">this</span>.<span class="pl-c1">source</span><span class="pl-k">=</span><span class="pl-v">this</span>.context.createBufferSource();<span class="pl-v">this</span>.<span class="pl-c1">source</span>.onended<span class="pl-k">=</span><span class="pl-v">this</span>.onEnded.bind(<span class="pl-v">this</span>);<span class="pl-v">this</span>.gain<span class="pl-k">=</span><span class="pl-v">this</span>.context.createGain();<span class="pl-v">this</span>.gain.connect(<span class="pl-v">this</span>.context.destination);<span class="pl-v">this</span>.panner<span class="pl-k">=</span><span class="pl-v">this</span>.context.createPanner();<span class="pl-v">this</span>.panner.connect(<span class="pl-v">this</span>.gain);<span class="pl-v">this</span>.autoplay<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.startTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.playbackRate<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="LC664" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Audio;<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">load</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;c.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a,<span class="pl-k">!</span><span class="pl-c1">0</span>);c.responseType<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">c</span>.<span class="pl-en">onload</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){b.context.decodeAudioData(<span class="pl-v">this</span>.response,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){b.<span class="pl-c1">source</span>.buffer<span class="pl-k">=</span>a;b.autoplay<span class="pl-k">&amp;&amp;</span>b.play()})};c.<span class="pl-c1">send</span>();<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="LC665" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">play</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.isPlaying)<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Audio: Audio is already playing.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.context.createBufferSource();a.buffer<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">source</span>.buffer;a.loop<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">source</span>.loop;a.onended<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">source</span>.onended;a.<span class="pl-c1">start</span>(<span class="pl-c1">0</span>,<span class="pl-v">this</span>.startTime);a.playbackRate.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-v">this</span>.playbackRate;<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">source</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.connect()}};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pause</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">source</span>.<span class="pl-c1">stop</span>();<span class="pl-v">this</span>.startTime<span class="pl-k">=</span><span class="pl-v">this</span>.context.currentTime};</td>
      </tr>
      <tr>
        <td id="L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="LC666" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">source</span>.<span class="pl-c1">stop</span>();<span class="pl-v">this</span>.startTime<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">connect</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.filter<span class="pl-k">?</span>(<span class="pl-v">this</span>.<span class="pl-c1">source</span>.connect(<span class="pl-v">this</span>.filter),<span class="pl-v">this</span>.filter.connect(<span class="pl-v">this</span>.panner))<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">source</span>.connect(<span class="pl-v">this</span>.panner)};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">disconnect</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.filter<span class="pl-k">?</span>(<span class="pl-v">this</span>.<span class="pl-c1">source</span>.disconnect(<span class="pl-v">this</span>.filter),<span class="pl-v">this</span>.filter.disconnect(<span class="pl-v">this</span>.panner))<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">source</span>.disconnect(<span class="pl-v">this</span>.panner)};</td>
      </tr>
      <tr>
        <td id="L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="LC667" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.isPlaying<span class="pl-k">?</span>(<span class="pl-v">this</span>.disconnect(),<span class="pl-v">this</span>.filter<span class="pl-k">=</span>a,<span class="pl-v">this</span>.connect())<span class="pl-k">:</span><span class="pl-v">this</span>.filter<span class="pl-k">=</span>a};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.filter};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setPlaybackRate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.playbackRate<span class="pl-k">=</span>a;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.isPlaying<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.<span class="pl-c1">source</span>.playbackRate.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-v">this</span>.playbackRate)};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPlaybackRate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.playbackRate};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">onEnded</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="LC668" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLoop</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">source</span>.loop<span class="pl-k">=</span>a};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLoop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">source</span>.loop};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setRefDistance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.panner.refDistance<span class="pl-k">=</span>a};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getRefDistance</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.panner.refDistance};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setRolloffFactor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.panner.rolloffFactor<span class="pl-k">=</span>a};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getRolloffFactor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.panner.rolloffFactor};</td>
      </tr>
      <tr>
        <td id="L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="LC669" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setVolume</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.gain.gain.<span class="pl-c1">value</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getVolume</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.gain.gain.<span class="pl-c1">value</span>};<span class="pl-c1">THREE.Audio</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.updateMatrixWorld.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,b);a.setFromMatrixPosition(<span class="pl-v">this</span>.matrixWorld);<span class="pl-v">this</span>.panner.setPosition(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>)}}();<span class="pl-c1">THREE</span>.<span class="pl-en">AudioListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>AudioListener<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.context<span class="pl-k">=new</span> (<span class="pl-c1">window</span>.AudioContext<span class="pl-k">||</span><span class="pl-c1">window</span>.webkitAudioContext)};</td>
      </tr>
      <tr>
        <td id="L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="LC670" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.AudioListener</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.AudioListener</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.AudioListener;</td>
      </tr>
      <tr>
        <td id="L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="LC671" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.AudioListener</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>.updateMatrixWorld.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,e);e<span class="pl-k">=</span><span class="pl-v">this</span>.context.listener;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.up;<span class="pl-v">this</span>.matrixWorld.decompose(a,b,c);d.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>).applyQuaternion(b);e.setPosition(a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);e.setOrientation(d.<span class="pl-c1">x</span>,d.<span class="pl-c1">y</span>,d.<span class="pl-c1">z</span>,g.<span class="pl-c1">x</span>,g.<span class="pl-c1">y</span>,g.<span class="pl-c1">z</span>)}}();<span class="pl-c1">THREE</span>.<span class="pl-en">Curve</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="LC672" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Curve: Warning, getPoint() not implemented!<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.getUtoTmapping(a);<span class="pl-k">return</span> <span class="pl-v">this</span>.getPoint(a)};<span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>);<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;=</span>a;b<span class="pl-k">++</span>)c.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.getPoint(b<span class="pl-k">/</span>a));<span class="pl-k">return</span> c};<span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>);<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;=</span>a;b<span class="pl-k">++</span>)c.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.getPointAt(b<span class="pl-k">/</span>a));<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="LC673" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.getLengths();<span class="pl-k">return</span> a[a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]};<span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLengths</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.__arcLengthDivisions<span class="pl-k">?</span><span class="pl-v">this</span>.__arcLengthDivisions<span class="pl-k">:</span><span class="pl-c1">200</span>);<span class="pl-k">if</span>(<span class="pl-v">this</span>.cacheArcLengths<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.cacheArcLengths.<span class="pl-c1">length</span><span class="pl-k">===</span>a<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;!</span><span class="pl-v">this</span>.needsUpdate)<span class="pl-k">return</span> <span class="pl-v">this</span>.cacheArcLengths;<span class="pl-v">this</span>.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c,d<span class="pl-k">=</span><span class="pl-v">this</span>.getPoint(<span class="pl-c1">0</span>),e,g<span class="pl-k">=</span><span class="pl-c1">0</span>;b.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>);<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>a;e<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.getPoint(e<span class="pl-k">/</span>a),g<span class="pl-k">+=</span>c.distanceTo(d),b.<span class="pl-c1">push</span>(g),d<span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-v">this</span>.cacheArcLengths<span class="pl-k">=</span>b};</td>
      </tr>
      <tr>
        <td id="L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="LC674" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateArcLengths</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.getLengths()};<span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getUtoTmapping</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.getLengths(),d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>c.<span class="pl-c1">length</span>,g;g<span class="pl-k">=</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span>a<span class="pl-k">*</span>c[e<span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>,k;f<span class="pl-k">&lt;=</span>h;)<span class="pl-k">if</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(f<span class="pl-k">+</span>(h<span class="pl-k">-</span>f)<span class="pl-k">/</span><span class="pl-c1">2</span>),k<span class="pl-k">=</span>c[d]<span class="pl-k">-</span>g,<span class="pl-c1">0</span><span class="pl-k">&gt;</span>k)f<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>k)h<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{h<span class="pl-k">=</span>d;<span class="pl-k">break</span>}d<span class="pl-k">=</span>h;<span class="pl-k">if</span>(c[d]<span class="pl-k">===</span>g)<span class="pl-k">return</span> d<span class="pl-k">/</span>(e<span class="pl-k">-</span><span class="pl-c1">1</span>);f<span class="pl-k">=</span>c[d];<span class="pl-k">return</span> c<span class="pl-k">=</span>(d<span class="pl-k">+</span>(g<span class="pl-k">-</span>f)<span class="pl-k">/</span>(c[d<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">-</span>f))<span class="pl-k">/</span>(e<span class="pl-k">-</span><span class="pl-c1">1</span>)};<span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">1E-4</span>;a<span class="pl-k">+=</span><span class="pl-c1">1E-4</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>);b<span class="pl-k">=</span><span class="pl-v">this</span>.getPoint(b);<span class="pl-k">return</span> <span class="pl-v">this</span>.getPoint(a).clone().<span class="pl-c1">sub</span>(b).normalize()};</td>
      </tr>
      <tr>
        <td id="L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="LC675" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangentAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.getUtoTmapping(a);<span class="pl-k">return</span> <span class="pl-v">this</span>.getTangent(a)};</td>
      </tr>
      <tr>
        <td id="L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="LC676" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.Curve.Utils<span class="pl-k">=</span>{<span class="pl-en">tangentQuadraticBezier</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(c<span class="pl-k">-</span>b)<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">*</span>(d<span class="pl-k">-</span>c)},<span class="pl-en">tangentCubicBezier</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>d<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>e},<span class="pl-en">tangentSpline</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">+</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>a)<span class="pl-k">+</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a)},<span class="pl-en">interpolate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a);d<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span>b);<span class="pl-k">var</span> g<span class="pl-k">=</span>e<span class="pl-k">*</span>e;<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>e<span class="pl-k">*</span>g<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b}};</td>
      </tr>
      <tr>
        <td id="L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="LC677" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Curve</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Curve.<span class="pl-c1">prototype</span>);<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span>a;<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">CurvePath</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.curves<span class="pl-k">=</span>[];<span class="pl-v">this</span>.bends<span class="pl-k">=</span>[];<span class="pl-v">this</span>.autoClose<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Curve.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CurvePath;<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.curves.<span class="pl-c1">push</span>(a)};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">checkConnection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="LC678" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">closePath</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.curves[<span class="pl-c1">0</span>].getPoint(<span class="pl-c1">0</span>),b<span class="pl-k">=</span><span class="pl-v">this</span>.curves[<span class="pl-v">this</span>.curves.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].getPoint(<span class="pl-c1">1</span>);a.equals(b)<span class="pl-k">||</span><span class="pl-v">this</span>.curves.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.LineCurve</span>(b,a))};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.getLength(),c<span class="pl-k">=</span><span class="pl-v">this</span>.getCurveLengths();<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;){<span class="pl-k">if</span>(c[a]<span class="pl-k">&gt;=</span>b)<span class="pl-k">return</span> b<span class="pl-k">=</span>c[a]<span class="pl-k">-</span>b,a<span class="pl-k">=</span><span class="pl-v">this</span>.curves[a],b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>b<span class="pl-k">/</span>a.getLength(),a.getPointAt(b);a<span class="pl-k">++</span>}<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.getCurveLengths();<span class="pl-k">return</span> a[a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]};</td>
      </tr>
      <tr>
        <td id="L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="LC679" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getCurveLengths</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-v">this</span>.cacheLengths<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.cacheLengths.<span class="pl-c1">length</span><span class="pl-k">===</span><span class="pl-v">this</span>.curves.<span class="pl-c1">length</span>)<span class="pl-k">return</span> <span class="pl-v">this</span>.cacheLengths;<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>,c,d<span class="pl-k">=</span><span class="pl-v">this</span>.curves.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)b<span class="pl-k">+=</span><span class="pl-v">this</span>.curves[c].getLength(),a.<span class="pl-c1">push</span>(b);<span class="pl-k">return</span> <span class="pl-v">this</span>.cacheLengths<span class="pl-k">=</span>a};</td>
      </tr>
      <tr>
        <td id="L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="LC680" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getBoundingBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.getPoints(),b,c,d,e,g,f;b<span class="pl-k">=</span>c<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">NEGATIVE_INFINITY</span>;e<span class="pl-k">=</span>g<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>;<span class="pl-k">var</span> h,k,l,n,p<span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Vector3;n<span class="pl-k">=</span>p<span class="pl-k">?</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span><span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>l;k<span class="pl-k">++</span>)h<span class="pl-k">=</span>a[k],h.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>b<span class="pl-k">?</span>b<span class="pl-k">=</span>h.<span class="pl-c1">x</span><span class="pl-k">:</span>h.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span>h.<span class="pl-c1">x</span>),h.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>c<span class="pl-k">?</span>c<span class="pl-k">=</span>h.<span class="pl-c1">y</span><span class="pl-k">:</span>h.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span>h.<span class="pl-c1">y</span>),p<span class="pl-k">&amp;&amp;</span>(h.<span class="pl-c1">z</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span>d<span class="pl-k">=</span>h.<span class="pl-c1">z</span><span class="pl-k">:</span>h.<span class="pl-c1">z</span><span class="pl-k">&lt;</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>h.<span class="pl-c1">z</span>)),n.<span class="pl-c1">add</span>(h);a<span class="pl-k">=</span>{minX<span class="pl-k">:</span>e,minY<span class="pl-k">:</span>g,maxX<span class="pl-k">:</span>b,maxY<span class="pl-k">:</span>c};p<span class="pl-k">&amp;&amp;</span>(a.maxZ<span class="pl-k">=</span>d,a.minZ<span class="pl-k">=</span>f);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="LC681" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createPointsGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.getPoints(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.createGeometry(a)};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createSpacedPointsGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.getSpacedPoints(a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.createGeometry(a)};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)b.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a[c].<span class="pl-c1">x</span>,a[c].<span class="pl-c1">y</span>,a[c].<span class="pl-c1">z</span><span class="pl-k">||</span><span class="pl-c1">0</span>));<span class="pl-k">return</span> b};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addWrapPath</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.bends.<span class="pl-c1">push</span>(a)};</td>
      </tr>
      <tr>
        <td id="L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="LC682" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTransformedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.getPoints(a),d,e;b<span class="pl-k">||</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.bends);d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.getWrapPoints(c,b[d]);<span class="pl-k">return</span> c};<span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTransformedSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.getSpacedPoints(a),d,e;b<span class="pl-k">||</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.bends);d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.getWrapPoints(c,b[d]);<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="LC683" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getWrapPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.getBoundingBox(),d,e,g,f,h,k;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span>a[d],f<span class="pl-k">=</span>g.<span class="pl-c1">x</span>,h<span class="pl-k">=</span>g.<span class="pl-c1">y</span>,k<span class="pl-k">=</span>f<span class="pl-k">/</span>c.maxX,k<span class="pl-k">=</span>b.getUtoTmapping(k,f),f<span class="pl-k">=</span>b.getPoint(k),k<span class="pl-k">=</span>b.getTangent(k),k.set(<span class="pl-k">-</span>k.<span class="pl-c1">y</span>,k.<span class="pl-c1">x</span>).multiplyScalar(h),g.<span class="pl-c1">x</span><span class="pl-k">=</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>k.<span class="pl-c1">x</span>,g.<span class="pl-c1">y</span><span class="pl-k">=</span>f.<span class="pl-c1">y</span><span class="pl-k">+</span>k.<span class="pl-c1">y</span>;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">Path</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.CurvePath.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.actions<span class="pl-k">=</span>[];a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.fromPoints(a)};<span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.CurvePath.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Path;</td>
      </tr>
      <tr>
        <td id="L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="LC684" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.PathActions<span class="pl-k">=</span>{MOVE_TO<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>moveTo<span class="pl-pds">&quot;</span></span>,LINE_TO<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>lineTo<span class="pl-pds">&quot;</span></span>,QUADRATIC_CURVE_TO<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>quadraticCurveTo<span class="pl-pds">&quot;</span></span>,BEZIER_CURVE_TO<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>bezierCurveTo<span class="pl-pds">&quot;</span></span>,CSPLINE_THRU<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>splineThru<span class="pl-pds">&quot;</span></span>,ARC<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>arc<span class="pl-pds">&quot;</span></span>,ELLIPSE<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ellipse<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">fromPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.<span class="pl-c1">moveTo</span>(a[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>,a[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.lineTo(a[b].<span class="pl-c1">x</span>,a[b].<span class="pl-c1">y</span>)};<span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">moveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(arguments);<span class="pl-v">this</span>.actions.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.PathActions.MOVE_TO,args<span class="pl-k">:</span>c})};</td>
      </tr>
      <tr>
        <td id="L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="LC685" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lineTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(arguments),d<span class="pl-k">=</span><span class="pl-v">this</span>.actions[<span class="pl-v">this</span>.actions.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].args,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(d[d.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],d[d.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b));<span class="pl-v">this</span>.curves.<span class="pl-c1">push</span>(d);<span class="pl-v">this</span>.actions.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.PathActions.LINE_TO,args<span class="pl-k">:</span>c})};</td>
      </tr>
      <tr>
        <td id="L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="LC686" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">quadraticCurveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(arguments),g<span class="pl-k">=</span><span class="pl-v">this</span>.actions[<span class="pl-v">this</span>.actions.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].args,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.QuadraticBezierCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g[g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],g[g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,d));<span class="pl-v">this</span>.curves.<span class="pl-c1">push</span>(g);<span class="pl-v">this</span>.actions.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.PathActions.QUADRATIC_CURVE_TO,args<span class="pl-k">:</span>e})};</td>
      </tr>
      <tr>
        <td id="L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="LC687" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bezierCurveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(arguments),h<span class="pl-k">=</span><span class="pl-v">this</span>.actions[<span class="pl-v">this</span>.actions.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].args,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CubicBezierCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(h[h.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],h[h.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,d),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(e,g));<span class="pl-v">this</span>.curves.<span class="pl-c1">push</span>(h);<span class="pl-v">this</span>.actions.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.PathActions.BEZIER_CURVE_TO,args<span class="pl-k">:</span>f})};</td>
      </tr>
      <tr>
        <td id="L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="LC688" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">splineThru</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.slice.<span class="pl-c1">call</span>(arguments),c<span class="pl-k">=</span><span class="pl-v">this</span>.actions[<span class="pl-v">this</span>.actions.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].args,c<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c[c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],c[c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])];<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.push.<span class="pl-c1">apply</span>(c,a);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SplineCurve</span>(c);<span class="pl-v">this</span>.curves.<span class="pl-c1">push</span>(c);<span class="pl-v">this</span>.actions.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.PathActions.CSPLINE_THRU,args<span class="pl-k">:</span>b})};<span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">arc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.actions[<span class="pl-v">this</span>.actions.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].args;<span class="pl-v">this</span>.absarc(a<span class="pl-k">+</span>f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],b<span class="pl-k">+</span>f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],c,d,e,g)};</td>
      </tr>
      <tr>
        <td id="L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="LC689" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">absarc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-v">this</span>.absellipse(a,b,c,c,d,e,g)};<span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ellipse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>.actions[<span class="pl-v">this</span>.actions.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].args;<span class="pl-v">this</span>.absellipse(a<span class="pl-k">+</span>k[k.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],b<span class="pl-k">+</span>k[k.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],c,d,e,g,f,h)};<span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">absellipse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span>[a,b,c,d,e,g,f,h<span class="pl-k">||</span><span class="pl-c1">0</span>];a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.EllipseCurve</span>(a,b,c,d,e,g,f,h);<span class="pl-v">this</span>.curves.<span class="pl-c1">push</span>(a);a<span class="pl-k">=</span>a.getPoint(<span class="pl-c1">1</span>);k.<span class="pl-c1">push</span>(a.<span class="pl-c1">x</span>);k.<span class="pl-c1">push</span>(a.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.actions.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.PathActions.ELLIPSE,args<span class="pl-k">:</span>k})};</td>
      </tr>
      <tr>
        <td id="L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="LC690" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">40</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>a;d<span class="pl-k">++</span>)c.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.getPoint(d<span class="pl-k">/</span>a));<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="LC691" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.useSpacedPoints)<span class="pl-k">return</span> <span class="pl-v">this</span>.getSpacedPoints(a,b);a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">12</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d,e,g,f,h,k,l,n,p,m,q,t,r;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-v">this</span>.actions.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-k">switch</span>(g<span class="pl-k">=</span><span class="pl-v">this</span>.actions[d],f<span class="pl-k">=</span>g.<span class="pl-c1">action</span>,g<span class="pl-k">=</span>g.args,f){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.PathActions.MOVE_TO<span class="pl-k">:</span>c.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g[<span class="pl-c1">0</span>],g[<span class="pl-c1">1</span>]));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.PathActions.LINE_TO<span class="pl-k">:</span>c.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g[<span class="pl-c1">0</span>],g[<span class="pl-c1">1</span>]));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.PathActions.QUADRATIC_CURVE_TO<span class="pl-k">:</span>h<span class="pl-k">=</span>g[<span class="pl-c1">2</span>];k<span class="pl-k">=</span>g[<span class="pl-c1">3</span>];p<span class="pl-k">=</span>g[<span class="pl-c1">0</span>];m<span class="pl-k">=</span>g[<span class="pl-c1">1</span>];<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span><span class="pl-k">?</span>(f<span class="pl-k">=</span>c[c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],q<span class="pl-k">=</span>f.<span class="pl-c1">x</span>,t<span class="pl-k">=</span>f.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(f<span class="pl-k">=</span><span class="pl-v">this</span>.actions[d<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="LC692" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>].args,q<span class="pl-k">=</span>f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],t<span class="pl-k">=</span>f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]);<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">&lt;=</span>a;g<span class="pl-k">++</span>)r<span class="pl-k">=</span>g<span class="pl-k">/</span>a,f<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b2(r,q,p,h),r<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b2(r,t,m,k),c.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f,r));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.PathActions.BEZIER_CURVE_TO<span class="pl-k">:</span>h<span class="pl-k">=</span>g[<span class="pl-c1">4</span>];k<span class="pl-k">=</span>g[<span class="pl-c1">5</span>];p<span class="pl-k">=</span>g[<span class="pl-c1">0</span>];m<span class="pl-k">=</span>g[<span class="pl-c1">1</span>];l<span class="pl-k">=</span>g[<span class="pl-c1">2</span>];n<span class="pl-k">=</span>g[<span class="pl-c1">3</span>];<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span><span class="pl-k">?</span>(f<span class="pl-k">=</span>c[c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],q<span class="pl-k">=</span>f.<span class="pl-c1">x</span>,t<span class="pl-k">=</span>f.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(f<span class="pl-k">=</span><span class="pl-v">this</span>.actions[d<span class="pl-k">-</span><span class="pl-c1">1</span>].args,q<span class="pl-k">=</span>f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],t<span class="pl-k">=</span>f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]);<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">&lt;=</span>a;g<span class="pl-k">++</span>)r<span class="pl-k">=</span>g<span class="pl-k">/</span>a,f<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b3(r,q,p,l,h),r<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b3(r,t,m,n,k),c.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f,r));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.PathActions.CSPLINE_THRU<span class="pl-k">:</span>f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="LC693" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.actions[d<span class="pl-k">-</span><span class="pl-c1">1</span>].args;r<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],f[f.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])];f<span class="pl-k">=</span>a<span class="pl-k">*</span>g[<span class="pl-c1">0</span>].<span class="pl-c1">length</span>;r<span class="pl-k">=</span>r.<span class="pl-c1">concat</span>(g[<span class="pl-c1">0</span>]);r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SplineCurve</span>(r);<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">&lt;=</span>f;g<span class="pl-k">++</span>)c.<span class="pl-c1">push</span>(r.getPointAt(g<span class="pl-k">/</span>f));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.PathActions.ARC<span class="pl-k">:</span>h<span class="pl-k">=</span>g[<span class="pl-c1">0</span>];k<span class="pl-k">=</span>g[<span class="pl-c1">1</span>];m<span class="pl-k">=</span>g[<span class="pl-c1">2</span>];l<span class="pl-k">=</span>g[<span class="pl-c1">3</span>];f<span class="pl-k">=</span>g[<span class="pl-c1">4</span>];p<span class="pl-k">=!!</span>g[<span class="pl-c1">5</span>];q<span class="pl-k">=</span>f<span class="pl-k">-</span>l;t<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>a;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">&lt;=</span>t;g<span class="pl-k">++</span>)r<span class="pl-k">=</span>g<span class="pl-k">/</span>t,p<span class="pl-k">||</span>(r<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>r),r<span class="pl-k">=</span>l<span class="pl-k">+</span>r<span class="pl-k">*</span>q,f<span class="pl-k">=</span>h<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(r),r<span class="pl-k">=</span>k<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(r),c.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f,r));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.PathActions.ELLIPSE<span class="pl-k">:</span>h<span class="pl-k">=</span>g[<span class="pl-c1">0</span>];k<span class="pl-k">=</span>g[<span class="pl-c1">1</span>];m<span class="pl-k">=</span>g[<span class="pl-c1">2</span>];n<span class="pl-k">=</span>g[<span class="pl-c1">3</span>];l<span class="pl-k">=</span>g[<span class="pl-c1">4</span>];f<span class="pl-k">=</span>g[<span class="pl-c1">5</span>];p<span class="pl-k">=!!</span>g[<span class="pl-c1">6</span>];<span class="pl-k">var</span> u<span class="pl-k">=</span>g[<span class="pl-c1">7</span>];q<span class="pl-k">=</span>f<span class="pl-k">-</span>l;t<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>a;<span class="pl-k">var</span> w,v;<span class="pl-c1">0</span><span class="pl-k">!==</span>u<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="LC694" class="blob-code blob-code-inner js-file-line">(w<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(u),v<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(u));<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">1</span>;g<span class="pl-k">&lt;=</span>t;g<span class="pl-k">++</span>){r<span class="pl-k">=</span>g<span class="pl-k">/</span>t;p<span class="pl-k">||</span>(r<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>r);r<span class="pl-k">=</span>l<span class="pl-k">+</span>r<span class="pl-k">*</span>q;f<span class="pl-k">=</span>h<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(r);r<span class="pl-k">=</span>k<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(r);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>u){<span class="pl-k">var</span> B<span class="pl-k">=</span>f;f<span class="pl-k">=</span>(B<span class="pl-k">-</span>h)<span class="pl-k">*</span>w<span class="pl-k">-</span>(r<span class="pl-k">-</span>k)<span class="pl-k">*</span>v<span class="pl-k">+</span>h;r<span class="pl-k">=</span>(B<span class="pl-k">-</span>h)<span class="pl-k">*</span>v<span class="pl-k">+</span>(r<span class="pl-k">-</span>k)<span class="pl-k">*</span>w<span class="pl-k">+</span>k}c.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f,r))}}d<span class="pl-k">=</span>c[c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-c1">1E-10</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d.<span class="pl-c1">x</span><span class="pl-k">-</span>c[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1E-10</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d.<span class="pl-c1">y</span><span class="pl-k">-</span>c[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>)<span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">splice</span>(c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);b<span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">push</span>(c[<span class="pl-c1">0</span>]);<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="LC695" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toShapes</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>a[c],f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>;f.actions<span class="pl-k">=</span>e.actions;f.curves<span class="pl-k">=</span>e.curves;b.<span class="pl-c1">push</span>(f)}<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>b.<span class="pl-c1">length</span>,d<span class="pl-k">=!</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;e<span class="pl-k">=</span>f<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>b[e],h<span class="pl-k">=</span>b[f],k<span class="pl-k">=</span>h.<span class="pl-c1">x</span><span class="pl-k">-</span>g.<span class="pl-c1">x</span>,l<span class="pl-k">=</span>h.<span class="pl-c1">y</span><span class="pl-k">-</span>g.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-c1">1E-10</span><span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(l)){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>l<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span>b[f],k<span class="pl-k">=-</span>k,h<span class="pl-k">=</span>b[e],l<span class="pl-k">=-</span>l),<span class="pl-k">!</span>(a.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>g.<span class="pl-c1">y</span><span class="pl-k">||</span>a.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>h.<span class="pl-c1">y</span>))<span class="pl-k">if</span>(a.<span class="pl-c1">y</span><span class="pl-k">===</span>g.<span class="pl-c1">y</span>){<span class="pl-k">if</span>(a.<span class="pl-c1">x</span><span class="pl-k">===</span>g.<span class="pl-c1">x</span>)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">else</span>{e<span class="pl-k">=</span>l<span class="pl-k">*</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span>g.<span class="pl-c1">x</span>)<span class="pl-k">-</span>k<span class="pl-k">*</span>(a.<span class="pl-c1">y</span><span class="pl-k">-</span>g.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>e)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">||</span>(d<span class="pl-k">=!</span>d)}}<span class="pl-k">else</span> <span class="pl-k">if</span>(a.<span class="pl-c1">y</span><span class="pl-k">===</span>g.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(h.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>a.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>g.<span class="pl-c1">x</span><span class="pl-k">||</span>g.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="LC696" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>h.<span class="pl-c1">x</span>))<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">return</span> d}<span class="pl-k">var</span> <span class="pl-en">e</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e,f<span class="pl-k">=</span>[],g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>;b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d<span class="pl-k">=</span>a[b],e<span class="pl-k">=</span>d.args,d<span class="pl-k">=</span>d.<span class="pl-c1">action</span>,d<span class="pl-k">===</span><span class="pl-c1">THREE</span>.PathActions.MOVE_TO<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">!==</span>g.actions.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f.<span class="pl-c1">push</span>(g),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>),g[d].<span class="pl-c1">apply</span>(g,e);<span class="pl-c1">0</span><span class="pl-k">!==</span>g.actions.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>f.<span class="pl-c1">push</span>(g);<span class="pl-k">return</span> f}(<span class="pl-v">this</span>.actions);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>e.<span class="pl-c1">length</span>)<span class="pl-k">return</span>[];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b)<span class="pl-k">return</span> c(e);<span class="pl-k">var</span> g,f,h,k<span class="pl-k">=</span>[];<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span>e.<span class="pl-c1">length</span>)<span class="pl-k">return</span> f<span class="pl-k">=</span>e[<span class="pl-c1">0</span>],h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>,h.actions<span class="pl-k">=</span>f.actions,h.curves<span class="pl-k">=</span>f.curves,k.<span class="pl-c1">push</span>(h),k;<span class="pl-k">var</span> l<span class="pl-k">=!</span><span class="pl-c1">THREE</span>.Shape.Utils.isClockWise(e[<span class="pl-c1">0</span>].getPoints()),</td>
      </tr>
      <tr>
        <td id="L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="LC697" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=</span>a<span class="pl-k">?!</span>l<span class="pl-k">:</span>l;h<span class="pl-k">=</span>[];<span class="pl-k">var</span> n<span class="pl-k">=</span>[],p<span class="pl-k">=</span>[],m<span class="pl-k">=</span><span class="pl-c1">0</span>,q;n[m]<span class="pl-k">=void</span> <span class="pl-c1">0</span>;p[m]<span class="pl-k">=</span>[];<span class="pl-k">var</span> t,r;t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(r<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>r;t<span class="pl-k">++</span>)f<span class="pl-k">=</span>e[t],q<span class="pl-k">=</span>f.getPoints(),g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.isClockWise(q),(g<span class="pl-k">=</span>a<span class="pl-k">?!</span>g<span class="pl-k">:</span>g)<span class="pl-k">?</span>(<span class="pl-k">!</span>l<span class="pl-k">&amp;&amp;</span>n[m]<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">++</span>,n[m]<span class="pl-k">=</span>{s<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>,p<span class="pl-k">:</span>q},n[m].s.actions<span class="pl-k">=</span>f.actions,n[m].s.curves<span class="pl-k">=</span>f.curves,l<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">++</span>,p[m]<span class="pl-k">=</span>[])<span class="pl-k">:</span>p[m].<span class="pl-c1">push</span>({h<span class="pl-k">:</span>f,p<span class="pl-k">:</span>q[<span class="pl-c1">0</span>]});<span class="pl-k">if</span>(<span class="pl-k">!</span>n[<span class="pl-c1">0</span>])<span class="pl-k">return</span> c(e);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span>n.<span class="pl-c1">length</span>){t<span class="pl-k">=!</span><span class="pl-c1">1</span>;r<span class="pl-k">=</span>[];f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>e;f<span class="pl-k">++</span>)h[f]<span class="pl-k">=</span>[];f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>e;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(g<span class="pl-k">=</span>p[f],l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>g.<span class="pl-c1">length</span>;l<span class="pl-k">++</span>){m<span class="pl-k">=</span>g[l];q<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span>n.<span class="pl-c1">length</span>;u<span class="pl-k">++</span>)d(m.p,n[u].p)<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">!==</span>u<span class="pl-k">&amp;&amp;</span>r.<span class="pl-c1">push</span>({froms<span class="pl-k">:</span>f,</td>
      </tr>
      <tr>
        <td id="L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="LC698" class="blob-code blob-code-inner js-file-line">tos<span class="pl-k">:</span>u,hole<span class="pl-k">:</span>l}),q<span class="pl-k">?</span>(q<span class="pl-k">=!</span><span class="pl-c1">1</span>,h[u].<span class="pl-c1">push</span>(m))<span class="pl-k">:</span>t<span class="pl-k">=!</span><span class="pl-c1">0</span>);q<span class="pl-k">&amp;&amp;</span>h[f].<span class="pl-c1">push</span>(m)}<span class="pl-c1">0</span><span class="pl-k">&lt;</span>r.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">||</span>(p<span class="pl-k">=</span>h))}t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(r<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>r;t<span class="pl-k">++</span>)<span class="pl-k">for</span>(h<span class="pl-k">=</span>n[t].s,k.<span class="pl-c1">push</span>(h),f<span class="pl-k">=</span>p[t],e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>f.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)h.holes.<span class="pl-c1">push</span>(f[e].h);<span class="pl-k">return</span> k};<span class="pl-c1">THREE</span>.<span class="pl-en">Shape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.Path.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.holes<span class="pl-k">=</span>[]};<span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Path.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape;<span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extrude</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.ExtrudeGeometry</span>(<span class="pl-v">this</span>,a)};</td>
      </tr>
      <tr>
        <td id="L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="LC699" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">makeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.ShapeGeometry</span>(<span class="pl-v">this</span>,a)};<span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointsHoles</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c<span class="pl-k">=</span><span class="pl-v">this</span>.holes.<span class="pl-c1">length</span>,d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b]<span class="pl-k">=</span><span class="pl-v">this</span>.holes[b].getTransformedPoints(a,<span class="pl-v">this</span>.bends);<span class="pl-k">return</span> d};<span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getSpacedPointsHoles</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c<span class="pl-k">=</span><span class="pl-v">this</span>.holes.<span class="pl-c1">length</span>,d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b]<span class="pl-k">=</span><span class="pl-v">this</span>.holes[b].getTransformedSpacedPoints(a,<span class="pl-v">this</span>.bends);<span class="pl-k">return</span> d};</td>
      </tr>
      <tr>
        <td id="L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="LC700" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractAllPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>{shape<span class="pl-k">:</span><span class="pl-v">this</span>.getTransformedPoints(a),holes<span class="pl-k">:</span><span class="pl-v">this</span>.getPointsHoles(a)}};<span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.useSpacedPoints<span class="pl-k">?</span><span class="pl-v">this</span>.extractAllSpacedPoints(a)<span class="pl-k">:</span><span class="pl-v">this</span>.extractAllPoints(a)};<span class="pl-c1">THREE.Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractAllSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>{shape<span class="pl-k">:</span><span class="pl-v">this</span>.getTransformedSpacedPoints(a),holes<span class="pl-k">:</span><span class="pl-v">this</span>.getSpacedPointsHoles(a)}};</td>
      </tr>
      <tr>
        <td id="L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="LC701" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.Shape.Utils<span class="pl-k">=</span>{<span class="pl-en">triangulateShape</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a.<span class="pl-c1">x</span><span class="pl-k">!==</span>b.<span class="pl-c1">x</span><span class="pl-k">?</span>a.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>b.<span class="pl-c1">x</span><span class="pl-k">?</span>a.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>c.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>b.<span class="pl-c1">x</span><span class="pl-k">:</span>b.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>c.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>a.<span class="pl-c1">x</span><span class="pl-k">:</span>a.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>b.<span class="pl-c1">y</span><span class="pl-k">?</span>a.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span>c.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span>b.<span class="pl-c1">y</span><span class="pl-k">:</span>b.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span>c.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>c.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span>a.<span class="pl-c1">y</span>}<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>b.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>,h<span class="pl-k">=</span>b.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>,k<span class="pl-k">=</span>e.<span class="pl-c1">x</span><span class="pl-k">-</span>d.<span class="pl-c1">x</span>,l<span class="pl-k">=</span>e.<span class="pl-c1">y</span><span class="pl-k">-</span>d.<span class="pl-c1">y</span>,n<span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">-</span>d.<span class="pl-c1">x</span>,p<span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>d.<span class="pl-c1">y</span>,z<span class="pl-k">=</span>h<span class="pl-k">*</span>k<span class="pl-k">-</span>g<span class="pl-k">*</span>l,D<span class="pl-k">=</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span>g<span class="pl-k">*</span>p;<span class="pl-k">if</span>(<span class="pl-c1">1E-10</span><span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(z)){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>z){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>D<span class="pl-k">||</span>D<span class="pl-k">&gt;</span>z)<span class="pl-k">return</span>[];k<span class="pl-k">=</span>l<span class="pl-k">*</span>n<span class="pl-k">-</span>k<span class="pl-k">*</span>p;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>k<span class="pl-k">||</span>k<span class="pl-k">&gt;</span>z)<span class="pl-k">return</span>[]}<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>D<span class="pl-k">||</span>D<span class="pl-k">&lt;</span>z)<span class="pl-k">return</span>[];k<span class="pl-k">=</span>l<span class="pl-k">*</span>n<span class="pl-k">-</span>k<span class="pl-k">*</span>p;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>k<span class="pl-k">||</span>k<span class="pl-k">&lt;</span>z)<span class="pl-k">return</span>[]}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>k)<span class="pl-k">return</span><span class="pl-k">!</span>f<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">!==</span>D<span class="pl-k">&amp;&amp;</span>D<span class="pl-k">!==</span>z<span class="pl-k">?</span>[a]<span class="pl-k">:</span>[];<span class="pl-k">if</span>(k<span class="pl-k">===</span>z)<span class="pl-k">return</span><span class="pl-k">!</span>f<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">!==</span>D<span class="pl-k">&amp;&amp;</span>D<span class="pl-k">!==</span>z<span class="pl-k">?</span>[b]<span class="pl-k">:</span>[];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="LC702" class="blob-code blob-code-inner js-file-line">D)<span class="pl-k">return</span>[d];<span class="pl-k">if</span>(D<span class="pl-k">===</span>z)<span class="pl-k">return</span>[e];f<span class="pl-k">=</span>k<span class="pl-k">/</span>z;<span class="pl-k">return</span>[{x<span class="pl-k">:</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>f<span class="pl-k">*</span>g,y<span class="pl-k">:</span>a.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>h}]}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>D<span class="pl-k">||</span>l<span class="pl-k">*</span>n<span class="pl-k">!==</span>k<span class="pl-k">*</span>p)<span class="pl-k">return</span>[];h<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>h;k<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>k<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>l;<span class="pl-k">if</span>(h<span class="pl-k">&amp;&amp;</span>k)<span class="pl-k">return</span> a.<span class="pl-c1">x</span><span class="pl-k">!==</span>d.<span class="pl-c1">x</span><span class="pl-k">||</span>a.<span class="pl-c1">y</span><span class="pl-k">!==</span>d.<span class="pl-c1">y</span><span class="pl-k">?</span>[]<span class="pl-k">:</span>[a];<span class="pl-k">if</span>(h)<span class="pl-k">return</span> c(d,e,a)<span class="pl-k">?</span>[a]<span class="pl-k">:</span>[];<span class="pl-k">if</span>(k)<span class="pl-k">return</span> c(a,b,d)<span class="pl-k">?</span>[d]<span class="pl-k">:</span>[];<span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>(a.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>b.<span class="pl-c1">x</span><span class="pl-k">?</span>(g<span class="pl-k">=</span>a,k<span class="pl-k">=</span>a.<span class="pl-c1">x</span>,h<span class="pl-k">=</span>b,a<span class="pl-k">=</span>b.<span class="pl-c1">x</span>)<span class="pl-k">:</span>(g<span class="pl-k">=</span>b,k<span class="pl-k">=</span>b.<span class="pl-c1">x</span>,h<span class="pl-k">=</span>a,a<span class="pl-k">=</span>a.<span class="pl-c1">x</span>),d.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>e.<span class="pl-c1">x</span><span class="pl-k">?</span>(b<span class="pl-k">=</span>d,z<span class="pl-k">=</span>d.<span class="pl-c1">x</span>,l<span class="pl-k">=</span>e,d<span class="pl-k">=</span>e.<span class="pl-c1">x</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span>e,z<span class="pl-k">=</span>e.<span class="pl-c1">x</span>,l<span class="pl-k">=</span>d,d<span class="pl-k">=</span>d.<span class="pl-c1">x</span>))<span class="pl-k">:</span>(a.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>b.<span class="pl-c1">y</span><span class="pl-k">?</span>(g<span class="pl-k">=</span>a,k<span class="pl-k">=</span>a.<span class="pl-c1">y</span>,h<span class="pl-k">=</span>b,a<span class="pl-k">=</span>b.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(g<span class="pl-k">=</span>b,k<span class="pl-k">=</span>b.<span class="pl-c1">y</span>,h<span class="pl-k">=</span>a,a<span class="pl-k">=</span>a.<span class="pl-c1">y</span>),d.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>e.<span class="pl-c1">y</span><span class="pl-k">?</span>(b<span class="pl-k">=</span>d,z<span class="pl-k">=</span>d.<span class="pl-c1">y</span>,l<span class="pl-k">=</span>e,d<span class="pl-k">=</span>e.<span class="pl-c1">y</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span>e,z<span class="pl-k">=</span>e.<span class="pl-c1">y</span>,l<span class="pl-k">=</span>d,d<span class="pl-k">=</span>d.<span class="pl-c1">y</span>));<span class="pl-k">return</span> k<span class="pl-k">&lt;=</span>z<span class="pl-k">?</span>a<span class="pl-k">&lt;</span>z<span class="pl-k">?</span>[]<span class="pl-k">:</span>a<span class="pl-k">===</span>z<span class="pl-k">?</span>f<span class="pl-k">?</span>[]<span class="pl-k">:</span>[b]<span class="pl-k">:</span>a<span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>[b,h]<span class="pl-k">:</span>[b,l]<span class="pl-k">:</span>k<span class="pl-k">&gt;</span>d<span class="pl-k">?</span>[]<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="LC703" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">===</span>d<span class="pl-k">?</span>f<span class="pl-k">?</span>[]<span class="pl-k">:</span>[g]<span class="pl-k">:</span>a<span class="pl-k">&lt;=</span>d<span class="pl-k">?</span>[g,h]<span class="pl-k">:</span>[g,l]}<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>,f<span class="pl-k">=</span>b.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>;b<span class="pl-k">=</span>c.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>c.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>;d<span class="pl-k">=</span>d.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>e<span class="pl-k">*</span>c<span class="pl-k">-</span>f<span class="pl-k">*</span>b;e<span class="pl-k">=</span>e<span class="pl-k">*</span>d<span class="pl-k">-</span>f<span class="pl-k">*</span>g;<span class="pl-k">return</span> <span class="pl-c1">1E-10</span><span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a)<span class="pl-k">?</span>(b<span class="pl-k">=</span>g<span class="pl-k">*</span>c<span class="pl-k">-</span>d<span class="pl-k">*</span>b,<span class="pl-c1">0</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>e<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b)<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>e}<span class="pl-k">var</span> g,f,h,k,l,n<span class="pl-k">=</span>{};h<span class="pl-k">=</span>a.<span class="pl-c1">concat</span>();g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.push.<span class="pl-c1">apply</span>(h,b[g]);g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span>h.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)l<span class="pl-k">=</span>h[g].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>h[g].<span class="pl-c1">y</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>n[l]<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Shape: Duplicate point<span class="pl-pds">&quot;</span></span>,l),n[l]<span class="pl-k">=</span>g;<span class="pl-en">g</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>h.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>d);<span class="pl-k">var</span> g<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>;g<span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="LC704" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>);d<span class="pl-k">=</span>e(h[a],h[f],h[g],k[b]);<span class="pl-k">if</span>(<span class="pl-k">!</span>d)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span>k.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span>b<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>d);g<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>;g<span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">return</span>(d<span class="pl-k">=</span>e(k[b],k[f],k[g],h[a]))<span class="pl-k">?!</span><span class="pl-c1">0</span><span class="pl-k">:!</span><span class="pl-c1">1</span>}<span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,e;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>h.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(e<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>,e<span class="pl-k">%=</span>h.<span class="pl-c1">length</span>,e<span class="pl-k">=</span>d(a,b,h[c],h[e],<span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-c1">0</span><span class="pl-k">&lt;</span>e.<span class="pl-c1">length</span>)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> e,f,h,k;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>l.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span>b[l[e]],h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>f.<span class="pl-c1">length</span>;h<span class="pl-k">++</span>)<span class="pl-k">if</span>(k<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>,k<span class="pl-k">%=</span>f.<span class="pl-c1">length</span>,k<span class="pl-k">=</span>d(a,c,f[h],f[k],<span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-c1">0</span><span class="pl-k">&lt;</span>k.<span class="pl-c1">length</span>)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">var</span> h<span class="pl-k">=</span>a.<span class="pl-c1">concat</span>(),k,l<span class="pl-k">=</span>[],n,p,I,z,D,G<span class="pl-k">=</span>[],O,C,F,K<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;K<span class="pl-k">&lt;</span>n;K<span class="pl-k">++</span>)l.<span class="pl-c1">push</span>(K);O<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> L<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="LC705" class="blob-code blob-code-inner js-file-line">l.<span class="pl-c1">length</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>l.<span class="pl-c1">length</span>;){L<span class="pl-k">--</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>L){<span class="pl-en">console</span><span class="pl-c1">.log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Infinite Loop! Holes left:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>l.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>, Probably Hole outside Shape!<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>}<span class="pl-k">for</span>(p<span class="pl-k">=</span>O;p<span class="pl-k">&lt;</span>h.<span class="pl-c1">length</span>;p<span class="pl-k">++</span>){I<span class="pl-k">=</span>h[p];n<span class="pl-k">=-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(K<span class="pl-k">=</span><span class="pl-c1">0</span>;K<span class="pl-k">&lt;</span>l.<span class="pl-c1">length</span>;K<span class="pl-k">++</span>)<span class="pl-k">if</span>(z<span class="pl-k">=</span>l[K],D<span class="pl-k">=</span>I.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>I.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>z,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>G[D]){k<span class="pl-k">=</span>b[z];<span class="pl-k">for</span>(C<span class="pl-k">=</span><span class="pl-c1">0</span>;C<span class="pl-k">&lt;</span>k.<span class="pl-c1">length</span>;C<span class="pl-k">++</span>)<span class="pl-k">if</span>(z<span class="pl-k">=</span>k[C],c(p,C)<span class="pl-k">&amp;&amp;!</span>f(I,z)<span class="pl-k">&amp;&amp;!</span>g(I,z)){n<span class="pl-k">=</span>C;l.<span class="pl-c1">splice</span>(K,<span class="pl-c1">1</span>);O<span class="pl-k">=</span>h.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,p<span class="pl-k">+</span><span class="pl-c1">1</span>);z<span class="pl-k">=</span>h.<span class="pl-c1">slice</span>(p);C<span class="pl-k">=</span>k.<span class="pl-c1">slice</span>(n);F<span class="pl-k">=</span>k.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,n<span class="pl-k">+</span><span class="pl-c1">1</span>);h<span class="pl-k">=</span>O.<span class="pl-c1">concat</span>(C).<span class="pl-c1">concat</span>(F).<span class="pl-c1">concat</span>(z);O<span class="pl-k">=</span>p;<span class="pl-k">break</span>}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>n)<span class="pl-k">break</span>;G[D]<span class="pl-k">=!</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>n)<span class="pl-k">break</span>}}<span class="pl-k">return</span> h}(a,b);<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">THREE</span>.FontUtils.Triangulate(g,</td>
      </tr>
      <tr>
        <td id="L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="LC706" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>);g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span>p.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)<span class="pl-k">for</span>(k<span class="pl-k">=</span>p[g],h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>h;h<span class="pl-k">++</span>)l<span class="pl-k">=</span>k[h].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>k[h].<span class="pl-c1">y</span>,l<span class="pl-k">=</span>n[l],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">&amp;&amp;</span>(k[h]<span class="pl-k">=</span>l);<span class="pl-k">return</span> p.<span class="pl-c1">concat</span>()},<span class="pl-en">isClockWise</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">THREE</span>.FontUtils.Triangulate.area(a)},<span class="pl-en">b2p0</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> c<span class="pl-k">*</span>c<span class="pl-k">*</span>b},<span class="pl-en">b2p1</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b2p2</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b2</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.b2p0(a,b)<span class="pl-k">+</span><span class="pl-v">this</span>.b2p1(a,c)<span class="pl-k">+</span><span class="pl-v">this</span>.b2p2(a,d)},<span class="pl-en">b3p0</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> c<span class="pl-k">*</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>b},<span class="pl-en">b3p1</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> <span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b3p2</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">3</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="LC707" class="blob-code blob-code-inner js-file-line">a)<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b3p3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.b3p0(a,b)<span class="pl-k">+</span><span class="pl-v">this</span>.b3p1(a,c)<span class="pl-k">+</span><span class="pl-v">this</span>.b3p2(a,d)<span class="pl-k">+</span><span class="pl-v">this</span>.b3p3(a,e)}};<span class="pl-c1">THREE</span>.<span class="pl-en">LineCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.v1<span class="pl-k">=</span>a;<span class="pl-v">this</span>.v2<span class="pl-k">=</span>b};<span class="pl-c1">THREE.LineCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Curve.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.LineCurve;<span class="pl-c1">THREE.LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.v2.clone().<span class="pl-c1">sub</span>(<span class="pl-v">this</span>.v1);b.multiplyScalar(a).<span class="pl-c1">add</span>(<span class="pl-v">this</span>.v1);<span class="pl-k">return</span> b};<span class="pl-c1">THREE.LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.getPoint(a)};</td>
      </tr>
      <tr>
        <td id="L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="LC708" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.v2.clone().<span class="pl-c1">sub</span>(<span class="pl-v">this</span>.v1).normalize()};<span class="pl-c1">THREE</span>.<span class="pl-en">QuadraticBezierCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.v0<span class="pl-k">=</span>a;<span class="pl-v">this</span>.v1<span class="pl-k">=</span>b;<span class="pl-v">this</span>.v2<span class="pl-k">=</span>c};<span class="pl-c1">THREE.QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Curve.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.QuadraticBezierCurve;</td>
      </tr>
      <tr>
        <td id="L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="LC709" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;b.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b2(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">x</span>);b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b2(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">y</span>);<span class="pl-k">return</span> b};<span class="pl-c1">THREE.QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;b.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.tangentQuadraticBezier(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">x</span>);b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.tangentQuadraticBezier(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">y</span>);<span class="pl-k">return</span> b.normalize()};</td>
      </tr>
      <tr>
        <td id="L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="LC710" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubicBezierCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.v0<span class="pl-k">=</span>a;<span class="pl-v">this</span>.v1<span class="pl-k">=</span>b;<span class="pl-v">this</span>.v2<span class="pl-k">=</span>c;<span class="pl-v">this</span>.v3<span class="pl-k">=</span>d};<span class="pl-c1">THREE.CubicBezierCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Curve.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CubicBezierCurve;<span class="pl-c1">THREE.CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b3(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v3.<span class="pl-c1">x</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b3(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v3.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b,a)};</td>
      </tr>
      <tr>
        <td id="L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="LC711" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.tangentCubicBezier(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v3.<span class="pl-c1">x</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.tangentCubicBezier(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v3.<span class="pl-c1">y</span>);b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b,a);b.normalize();<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-en">SplineCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.points<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">==</span>a<span class="pl-k">?</span>[]<span class="pl-k">:</span>a};<span class="pl-c1">THREE.SplineCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Curve.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SplineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SplineCurve;</td>
      </tr>
      <tr>
        <td id="L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="LC712" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SplineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.points;a<span class="pl-k">*=</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>c;<span class="pl-k">var</span> d<span class="pl-k">=</span>b[<span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>],e<span class="pl-k">=</span>b[c],g<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>],b<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>],c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;c.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">x</span>,e.<span class="pl-c1">x</span>,g.<span class="pl-c1">x</span>,b.<span class="pl-c1">x</span>,a);c.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">y</span>,e.<span class="pl-c1">y</span>,g.<span class="pl-c1">y</span>,b.<span class="pl-c1">y</span>,a);<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="LC713" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">EllipseCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-v">this</span>.aX<span class="pl-k">=</span>a;<span class="pl-v">this</span>.aY<span class="pl-k">=</span>b;<span class="pl-v">this</span>.xRadius<span class="pl-k">=</span>c;<span class="pl-v">this</span>.yRadius<span class="pl-k">=</span>d;<span class="pl-v">this</span>.aStartAngle<span class="pl-k">=</span>e;<span class="pl-v">this</span>.aEndAngle<span class="pl-k">=</span>g;<span class="pl-v">this</span>.aClockwise<span class="pl-k">=</span>f;<span class="pl-v">this</span>.aRotation<span class="pl-k">=</span>h<span class="pl-k">||</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE.EllipseCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Curve.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.EllipseCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.EllipseCurve;</td>
      </tr>
      <tr>
        <td id="L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="LC714" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.EllipseCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.aEndAngle<span class="pl-k">-</span><span class="pl-v">this</span>.aStartAngle;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">+=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>);b<span class="pl-k">&gt;</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">-=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>);b<span class="pl-k">=!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.aClockwise<span class="pl-k">?</span><span class="pl-v">this</span>.aEndAngle<span class="pl-k">+</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">-</span>b)<span class="pl-k">:</span><span class="pl-v">this</span>.aStartAngle<span class="pl-k">+</span>a<span class="pl-k">*</span>b;a<span class="pl-k">=</span><span class="pl-v">this</span>.aX<span class="pl-k">+</span><span class="pl-v">this</span>.xRadius<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.aY<span class="pl-k">+</span><span class="pl-v">this</span>.yRadius<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.aRotation){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-v">this</span>.aRotation),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-v">this</span>.aRotation),e<span class="pl-k">=</span>a;a<span class="pl-k">=</span>(e<span class="pl-k">-</span><span class="pl-v">this</span>.aX)<span class="pl-k">*</span>b<span class="pl-k">-</span>(c<span class="pl-k">-</span><span class="pl-v">this</span>.aY)<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-v">this</span>.aX;c<span class="pl-k">=</span>(e<span class="pl-k">-</span><span class="pl-v">this</span>.aX)<span class="pl-k">*</span>d<span class="pl-k">+</span>(c<span class="pl-k">-</span><span class="pl-v">this</span>.aY)<span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-v">this</span>.aY}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,c)};</td>
      </tr>
      <tr>
        <td id="L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="LC715" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ArcCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.EllipseCurve.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b,c,c,d,e,g)};<span class="pl-c1">THREE.ArcCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.EllipseCurve.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.ArcCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.ArcCurve;<span class="pl-c1">THREE</span>.LineCurve3<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.create(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.v1<span class="pl-k">=</span>a;<span class="pl-v">this</span>.v2<span class="pl-k">=</span>b},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;b.subVectors(<span class="pl-v">this</span>.v2,<span class="pl-v">this</span>.v1);b.multiplyScalar(a);b.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.v1);<span class="pl-k">return</span> b});</td>
      </tr>
      <tr>
        <td id="L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="LC716" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.QuadraticBezierCurve3<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.create(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.v0<span class="pl-k">=</span>a;<span class="pl-v">this</span>.v1<span class="pl-k">=</span>b;<span class="pl-v">this</span>.v2<span class="pl-k">=</span>c},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;b.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b2(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">x</span>);b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b2(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">y</span>);b.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b2(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">z</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">z</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">z</span>);<span class="pl-k">return</span> b});</td>
      </tr>
      <tr>
        <td id="L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="LC717" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.CubicBezierCurve3<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.create(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.v0<span class="pl-k">=</span>a;<span class="pl-v">this</span>.v1<span class="pl-k">=</span>b;<span class="pl-v">this</span>.v2<span class="pl-k">=</span>c;<span class="pl-v">this</span>.v3<span class="pl-k">=</span>d},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;b.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b3(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.v3.<span class="pl-c1">x</span>);b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b3(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.v3.<span class="pl-c1">y</span>);b.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.b3(a,<span class="pl-v">this</span>.v0.<span class="pl-c1">z</span>,<span class="pl-v">this</span>.v1.<span class="pl-c1">z</span>,<span class="pl-v">this</span>.v2.<span class="pl-c1">z</span>,<span class="pl-v">this</span>.v3.<span class="pl-c1">z</span>);<span class="pl-k">return</span> b});</td>
      </tr>
      <tr>
        <td id="L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="LC718" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.SplineCurve3<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.create(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3<span class="pl-pds">&quot;</span></span>);<span class="pl-v">this</span>.points<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">==</span>a<span class="pl-k">?</span>[]<span class="pl-k">:</span>a},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.points;a<span class="pl-k">*=</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>c;<span class="pl-k">var</span> d<span class="pl-k">=</span>b[<span class="pl-c1">0</span><span class="pl-k">==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">-</span><span class="pl-c1">1</span>],e<span class="pl-k">=</span>b[c],g<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>],b<span class="pl-k">=</span>b[c<span class="pl-k">&gt;</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>],c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;c.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">x</span>,e.<span class="pl-c1">x</span>,g.<span class="pl-c1">x</span>,b.<span class="pl-c1">x</span>,a);c.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">y</span>,e.<span class="pl-c1">y</span>,g.<span class="pl-c1">y</span>,b.<span class="pl-c1">y</span>,a);c.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">z</span>,e.<span class="pl-c1">z</span>,g.<span class="pl-c1">z</span>,</td>
      </tr>
      <tr>
        <td id="L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="LC719" class="blob-code blob-code-inner js-file-line">b.<span class="pl-c1">z</span>,a);<span class="pl-k">return</span> c});</td>
      </tr>
      <tr>
        <td id="L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="LC720" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CatmullRomCurve3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(){}<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>;<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.c0<span class="pl-k">=</span>a;<span class="pl-v">this</span>.c1<span class="pl-k">=</span>c;<span class="pl-v">this</span>.c2<span class="pl-k">=-</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>c<span class="pl-k">-</span>d;<span class="pl-v">this</span>.c3<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">+</span>c<span class="pl-k">+</span>d};<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">initNonuniformCatmullRom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">n</span>,<span class="pl-smi">p</span>){a<span class="pl-k">=</span>((b<span class="pl-k">-</span>a)<span class="pl-k">/</span>e<span class="pl-k">-</span>(c<span class="pl-k">-</span>a)<span class="pl-k">/</span>(e<span class="pl-k">+</span>n)<span class="pl-k">+</span>(c<span class="pl-k">-</span>b)<span class="pl-k">/</span>n)<span class="pl-k">*</span>n;d<span class="pl-k">=</span>((c<span class="pl-k">-</span>b)<span class="pl-k">/</span>n<span class="pl-k">-</span>(d<span class="pl-k">-</span>b)<span class="pl-k">/</span>(n<span class="pl-k">+</span>p)<span class="pl-k">+</span>(d<span class="pl-k">-</span>c)<span class="pl-k">/</span>p)<span class="pl-k">*</span>n;<span class="pl-v">this</span>.init(b,c,a,d)};<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">initCatmullRom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-v">this</span>.init(b,c,e<span class="pl-k">*</span>(c<span class="pl-k">-</span>a),e<span class="pl-k">*</span>(d<span class="pl-k">-</span>b))};<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">calc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">*</span>a;<span class="pl-k">return</span> <span class="pl-v">this</span>.c0<span class="pl-k">+</span><span class="pl-v">this</span>.c1<span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-v">this</span>.c2<span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-v">this</span>.c3<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="LC721" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">*</span>a};<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.Curve.create(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.points<span class="pl-k">=</span>a<span class="pl-k">||</span>[]},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.points,h,k;k<span class="pl-k">=</span>f.<span class="pl-c1">length</span>;<span class="pl-c1">2</span><span class="pl-k">&gt;</span>k<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span><span class="pl-c1">.log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>duh, you need at least 2 points<span class="pl-pds">&quot;</span></span>);a<span class="pl-k">*=</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>;h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>h;<span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>h<span class="pl-k">===</span>k<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>k<span class="pl-k">-</span><span class="pl-c1">2</span>,a<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">var</span> l,n,p;<span class="pl-c1">0</span><span class="pl-k">===</span>h<span class="pl-k">?</span>(b.subVectors(f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>]).<span class="pl-c1">add</span>(f[<span class="pl-c1">0</span>]),l<span class="pl-k">=</span>b)<span class="pl-k">:</span>l<span class="pl-k">=</span>f[h<span class="pl-k">-</span><span class="pl-c1">1</span>];n<span class="pl-k">=</span>f[h];p<span class="pl-k">=</span>f[h<span class="pl-k">+</span><span class="pl-c1">1</span>];h<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">&lt;</span>k<span class="pl-k">?</span>f<span class="pl-k">=</span>f[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">:</span>(b.subVectors(f[k<span class="pl-k">-</span><span class="pl-c1">1</span>],f[k<span class="pl-k">-</span><span class="pl-c1">2</span>]).<span class="pl-c1">add</span>(f[k<span class="pl-k">-</span><span class="pl-c1">2</span>]),f<span class="pl-k">=</span>b);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>centripetal<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>chordal<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">type</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>chordal<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>.<span class="pl-c1">5</span><span class="pl-k">:</span>.<span class="pl-c1">25</span>;k<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(l.distanceToSquared(n),m);</td>
      </tr>
      <tr>
        <td id="L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="LC722" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(n.distanceToSquared(p),m);m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(p.distanceToSquared(f),m);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>k<span class="pl-k">&amp;&amp;</span>(k<span class="pl-k">=</span>h);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>m<span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span>h);c.initNonuniformCatmullRom(l.<span class="pl-c1">x</span>,n.<span class="pl-c1">x</span>,p.<span class="pl-c1">x</span>,f.<span class="pl-c1">x</span>,k,h,m);d.initNonuniformCatmullRom(l.<span class="pl-c1">y</span>,n.<span class="pl-c1">y</span>,p.<span class="pl-c1">y</span>,f.<span class="pl-c1">y</span>,k,h,m);e.initNonuniformCatmullRom(l.<span class="pl-c1">z</span>,n.<span class="pl-c1">z</span>,p.<span class="pl-c1">z</span>,f.<span class="pl-c1">z</span>,k,h,m)}<span class="pl-k">else</span><span class="pl-s"><span class="pl-pds">&quot;</span>catmullrom<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(k<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.tension<span class="pl-k">?</span><span class="pl-v">this</span>.tension<span class="pl-k">:</span>.<span class="pl-c1">5</span>,c.initCatmullRom(l.<span class="pl-c1">x</span>,n.<span class="pl-c1">x</span>,p.<span class="pl-c1">x</span>,f.<span class="pl-c1">x</span>,k),d.initCatmullRom(l.<span class="pl-c1">y</span>,n.<span class="pl-c1">y</span>,p.<span class="pl-c1">y</span>,f.<span class="pl-c1">y</span>,k),e.initCatmullRom(l.<span class="pl-c1">z</span>,n.<span class="pl-c1">z</span>,p.<span class="pl-c1">z</span>,f.<span class="pl-c1">z</span>,k));<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(c.calc(a),d.calc(a),e.calc(a))})}();</td>
      </tr>
      <tr>
        <td id="L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="LC723" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ClosedSplineCurve3<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.create(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.points<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">==</span>a<span class="pl-k">?</span>[]<span class="pl-k">:</span>a},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.points;a<span class="pl-k">*=</span>b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">-=</span>c;<span class="pl-k">var</span> c<span class="pl-k">=</span>c<span class="pl-k">+</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c)<span class="pl-k">/</span>b.<span class="pl-c1">length</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>b.<span class="pl-c1">length</span>),d<span class="pl-k">=</span>b[(c<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>b.<span class="pl-c1">length</span>],e<span class="pl-k">=</span>b[c<span class="pl-k">%</span>b.<span class="pl-c1">length</span>],g<span class="pl-k">=</span>b[(c<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>b.<span class="pl-c1">length</span>],b<span class="pl-k">=</span>b[(c<span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">%</span>b.<span class="pl-c1">length</span>],c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;c.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">x</span>,e.<span class="pl-c1">x</span>,g.<span class="pl-c1">x</span>,b.<span class="pl-c1">x</span>,a);c.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">y</span>,e.<span class="pl-c1">y</span>,g.<span class="pl-c1">y</span>,b.<span class="pl-c1">y</span>,a);c.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.Curve.Utils.interpolate(d.<span class="pl-c1">z</span>,e.<span class="pl-c1">z</span>,g.<span class="pl-c1">z</span>,b.<span class="pl-c1">z</span>,a);<span class="pl-k">return</span> c});</td>
      </tr>
      <tr>
        <td id="L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="LC724" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.AnimationHandler<span class="pl-k">=</span>{LINEAR<span class="pl-k">:</span><span class="pl-c1">0</span>,CATMULLROM<span class="pl-k">:</span><span class="pl-c1">1</span>,CATMULLROM_FORWARD<span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.AnimationHandler.add() has been deprecated.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.AnimationHandler.get() has been deprecated.<span class="pl-pds">&quot;</span></span>)},<span class="pl-en">remove</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.AnimationHandler.remove() has been deprecated.<span class="pl-pds">&quot;</span></span>)},animations<span class="pl-k">:</span>[],<span class="pl-en">init</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a.initialized)<span class="pl-k">return</span> a;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>a.hierarchy.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.hierarchy[b].keys.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>a.hierarchy[b].keys[c]<span class="pl-c1">.time</span><span class="pl-k">&amp;&amp;</span>(a.hierarchy[b].keys[c]<span class="pl-c1">.time</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L725" class="blob-num js-line-number" data-line-number="725"></td>
        <td id="LC725" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.hierarchy[b].keys[c].rot<span class="pl-k">&amp;&amp;!</span>(a.hierarchy[b].keys[c].rot <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Quaternion)){<span class="pl-k">var</span> d<span class="pl-k">=</span>a.hierarchy[b].keys[c].rot;a.hierarchy[b].keys[c].rot<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>).fromArray(d)}<span class="pl-k">if</span>(a.hierarchy[b].keys.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a.hierarchy[b].keys[<span class="pl-c1">0</span>].morphTargets){d<span class="pl-k">=</span>{};<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.hierarchy[b].keys.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>a.hierarchy[b].keys[c].morphTargets.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a.hierarchy[b].keys[c].morphTargets[e];d[g]<span class="pl-k">=-</span><span class="pl-c1">1</span>}a.hierarchy[b].usedMorphTargets<span class="pl-k">=</span>d;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.hierarchy[b].keys.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L726" class="blob-num js-line-number" data-line-number="726"></td>
        <td id="LC726" class="blob-code blob-code-inner js-file-line">{};<span class="pl-k">for</span>(g <span class="pl-k">in</span> d){<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>a.hierarchy[b].keys[c].morphTargets.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>)<span class="pl-k">if</span>(a.hierarchy[b].keys[c].morphTargets[e]<span class="pl-k">===</span>g){f[g]<span class="pl-k">=</span>a.hierarchy[b].keys[c].morphTargetsInfluences[e];<span class="pl-k">break</span>}e<span class="pl-k">===</span>a.hierarchy[b].keys[c].morphTargets.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f[g]<span class="pl-k">=</span><span class="pl-c1">0</span>)}a.hierarchy[b].keys[c].morphTargetsInfluences<span class="pl-k">=</span>f}}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;</span>a.hierarchy[b].keys.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)a.hierarchy[b].keys[c]<span class="pl-c1">.time</span><span class="pl-k">===</span>a.hierarchy[b].keys[c<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-c1">.time</span><span class="pl-k">&amp;&amp;</span>(a.hierarchy[b].keys.<span class="pl-c1">splice</span>(c,<span class="pl-c1">1</span>),c<span class="pl-k">--</span>);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.hierarchy[b].keys.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)a.hierarchy[b].keys[c].<span class="pl-c1">index</span><span class="pl-k">=</span>c}a.initialized<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L727" class="blob-num js-line-number" data-line-number="727"></td>
        <td id="LC727" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> a},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> <span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){c.<span class="pl-c1">push</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>a.children.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)b(a.children[d],c)},c<span class="pl-k">=</span>[];<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.SkinnedMesh)<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>a.skeleton.bones.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)c.<span class="pl-c1">push</span>(a.skeleton.bones[d]);<span class="pl-k">else</span> b(a,c);<span class="pl-k">return</span> c},<span class="pl-en">play</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-v">this</span>.animations.<span class="pl-c1">indexOf</span>(a)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.animations.<span class="pl-c1">push</span>(a)},<span class="pl-en">stop</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-v">this</span>.animations.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.animations.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>)},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.animations.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.animations[b].resetBlendWeights();</td>
      </tr>
      <tr>
        <td id="L728" class="blob-num js-line-number" data-line-number="728"></td>
        <td id="LC728" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.animations.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.animations[b].update(a)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Animation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.root<span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">data</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.AnimationHandler.init(b);<span class="pl-v">this</span>.hierarchy<span class="pl-k">=</span><span class="pl-c1">THREE</span>.AnimationHandler.<span class="pl-c1">parse</span>(a);<span class="pl-v">this</span>.currentTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.timeScale<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.loop<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.weight<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.interpolationType<span class="pl-k">=</span><span class="pl-c1">THREE</span>.AnimationHandler.LINEAR};</td>
      </tr>
      <tr>
        <td id="L729" class="blob-num js-line-number" data-line-number="729"></td>
        <td id="LC729" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.Animation</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.Animation,keyTypes<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>rot<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>scl<span class="pl-pds">&quot;</span></span>],<span class="pl-en">play</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.currentTime<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.weight<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">reset</span>();<span class="pl-c1">THREE</span>.AnimationHandler.play(<span class="pl-v">this</span>)},<span class="pl-en">stop</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.AnimationHandler.<span class="pl-c1">stop</span>(<span class="pl-v">this</span>)},<span class="pl-en">reset</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy[a];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c.animationCache<span class="pl-k">&amp;&amp;</span>(c.animationCache<span class="pl-k">=</span>{animations<span class="pl-k">:</span>{},blending<span class="pl-k">:</span>{positionWeight<span class="pl-k">:</span><span class="pl-c1">0</span>,quaternionWeight<span class="pl-k">:</span><span class="pl-c1">0</span>,scaleWeight<span class="pl-k">:</span><span class="pl-c1">0</span>}});</td>
      </tr>
      <tr>
        <td id="L730" class="blob-num js-line-number" data-line-number="730"></td>
        <td id="LC730" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">name</span>,e<span class="pl-k">=</span>c.animationCache.animations,g<span class="pl-k">=</span>e[d];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span>{prevKey<span class="pl-k">:</span>{pos<span class="pl-k">:</span><span class="pl-c1">0</span>,rot<span class="pl-k">:</span><span class="pl-c1">0</span>,scl<span class="pl-k">:</span><span class="pl-c1">0</span>},nextKey<span class="pl-k">:</span>{pos<span class="pl-k">:</span><span class="pl-c1">0</span>,rot<span class="pl-k">:</span><span class="pl-c1">0</span>,scl<span class="pl-k">:</span><span class="pl-c1">0</span>},originalMatrix<span class="pl-k">:</span>c.matrix},e[d]<span class="pl-k">=</span>g);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>c;c<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.keyTypes[c],e<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a].keys[<span class="pl-c1">0</span>],f<span class="pl-k">=</span><span class="pl-v">this</span>.getNextKeyWith(d,a,<span class="pl-c1">1</span>);f<span class="pl-c1">.time</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.currentTime<span class="pl-k">&amp;&amp;</span>f.<span class="pl-c1">index</span><span class="pl-k">&gt;</span>e.<span class="pl-c1">index</span>;)e<span class="pl-k">=</span>f,f<span class="pl-k">=</span><span class="pl-v">this</span>.getNextKeyWith(d,a,f.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>);g.prevKey[d]<span class="pl-k">=</span>e;g.nextKey[d]<span class="pl-k">=</span>f}}},<span class="pl-en">resetBlendWeights</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy[a].animationCache;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L731" class="blob-num js-line-number" data-line-number="731"></td>
        <td id="LC731" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>c.blending,c.positionWeight<span class="pl-k">=</span><span class="pl-c1">0</span>,c.quaternionWeight<span class="pl-k">=</span><span class="pl-c1">0</span>,c.scaleWeight<span class="pl-k">=</span><span class="pl-c1">0</span>)}},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>,<span class="pl-en">e</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>[],e,p,m,q,t,r;e<span class="pl-k">=</span>(a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>b;p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(e);e<span class="pl-k">-=</span>p;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>p<span class="pl-k">?</span>p<span class="pl-k">:</span>p<span class="pl-k">-</span><span class="pl-c1">1</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>p;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>p<span class="pl-k">&gt;</span>a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span>p<span class="pl-k">:</span>p<span class="pl-k">+</span><span class="pl-c1">1</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>p<span class="pl-k">&gt;</span>a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span>p<span class="pl-k">:</span>p<span class="pl-k">+</span><span class="pl-c1">2</span>;p<span class="pl-k">=</span>a[c[<span class="pl-c1">0</span>]];q<span class="pl-k">=</span>a[c[<span class="pl-c1">1</span>]];t<span class="pl-k">=</span>a[c[<span class="pl-c1">2</span>]];r<span class="pl-k">=</span>a[c[<span class="pl-c1">3</span>]];c<span class="pl-k">=</span>e<span class="pl-k">*</span>e;m<span class="pl-k">=</span>e<span class="pl-k">*</span>c;d[<span class="pl-c1">0</span>]<span class="pl-k">=</span>g(p[<span class="pl-c1">0</span>],q[<span class="pl-c1">0</span>],t[<span class="pl-c1">0</span>],r[<span class="pl-c1">0</span>],e,c,m);d[<span class="pl-c1">1</span>]<span class="pl-k">=</span>g(p[<span class="pl-c1">1</span>],q[<span class="pl-c1">1</span>],t[<span class="pl-c1">1</span>],r[<span class="pl-c1">1</span>],e,c,m);d[<span class="pl-c1">2</span>]<span class="pl-k">=</span>g(p[<span class="pl-c1">2</span>],q[<span class="pl-c1">2</span>],t[<span class="pl-c1">2</span>],r[<span class="pl-c1">2</span>],e,c,m);<span class="pl-k">return</span> d},<span class="pl-en">g</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,</td>
      </tr>
      <tr>
        <td id="L732" class="blob-num js-line-number" data-line-number="732"></td>
        <td id="LC732" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">m</span>){a<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a);d<span class="pl-k">=</span>.<span class="pl-c1">5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span>b);<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>m<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b};<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">f</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-v">this</span>.isPlaying<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">+=</span>f<span class="pl-k">*</span><span class="pl-v">this</span>.timeScale,<span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.weight)){f<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">&gt;</span>f<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.currentTime)<span class="pl-v">this</span>.loop<span class="pl-k">?</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">%=</span>f,<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.currentTime<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">+=</span>f),<span class="pl-v">this</span>.<span class="pl-c1">reset</span>())<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">stop</span>();f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy[f],l<span class="pl-k">=</span>k.animationCache.animations[<span class="pl-v">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">name</span>],n<span class="pl-k">=</span>k.animationCache.blending,p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-v">this</span>.keyTypes[p],</td>
      </tr>
      <tr>
        <td id="L733" class="blob-num js-line-number" data-line-number="733"></td>
        <td id="LC733" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span>l.prevKey[m],t<span class="pl-k">=</span>l.nextKey[m];<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.timeScale<span class="pl-k">&amp;&amp;</span>t<span class="pl-c1">.time</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.currentTime<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-v">this</span>.timeScale<span class="pl-k">&amp;&amp;</span>q<span class="pl-c1">.time</span><span class="pl-k">&gt;=</span><span class="pl-v">this</span>.currentTime){q<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[f].keys[<span class="pl-c1">0</span>];<span class="pl-k">for</span>(t<span class="pl-k">=</span><span class="pl-v">this</span>.getNextKeyWith(m,f,<span class="pl-c1">1</span>);t<span class="pl-c1">.time</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.currentTime<span class="pl-k">&amp;&amp;</span>t.<span class="pl-c1">index</span><span class="pl-k">&gt;</span>q.<span class="pl-c1">index</span>;)q<span class="pl-k">=</span>t,t<span class="pl-k">=</span><span class="pl-v">this</span>.getNextKeyWith(m,f,t.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>);l.prevKey[m]<span class="pl-k">=</span>q;l.nextKey[m]<span class="pl-k">=</span>t}<span class="pl-k">var</span> r<span class="pl-k">=</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">-</span>q<span class="pl-c1">.time</span>)<span class="pl-k">/</span>(t<span class="pl-c1">.time</span><span class="pl-k">-</span>q<span class="pl-c1">.time</span>),u<span class="pl-k">=</span>q[m],w<span class="pl-k">=</span>t[m];<span class="pl-c1">0</span><span class="pl-k">&gt;</span>r<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span>r<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>m)<span class="pl-k">if</span>(<span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.LINEAR)c.<span class="pl-c1">x</span><span class="pl-k">=</span>u[<span class="pl-c1">0</span>]<span class="pl-k">+</span>(w[<span class="pl-c1">0</span>]<span class="pl-k">-</span>u[<span class="pl-c1">0</span>])<span class="pl-k">*</span>r,c.<span class="pl-c1">y</span><span class="pl-k">=</span>u[<span class="pl-c1">1</span>]<span class="pl-k">+</span>(w[<span class="pl-c1">1</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])<span class="pl-k">*</span>r,</td>
      </tr>
      <tr>
        <td id="L734" class="blob-num js-line-number" data-line-number="734"></td>
        <td id="LC734" class="blob-code blob-code-inner js-file-line">c.<span class="pl-c1">z</span><span class="pl-k">=</span>u[<span class="pl-c1">2</span>]<span class="pl-k">+</span>(w[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">2</span>])<span class="pl-k">*</span>r,q<span class="pl-k">=</span><span class="pl-v">this</span>.weight<span class="pl-k">/</span>(<span class="pl-v">this</span>.weight<span class="pl-k">+</span>n.positionWeight),k.position.lerp(c,q),n.positionWeight<span class="pl-k">+=</span><span class="pl-v">this</span>.weight;<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.CATMULLROM<span class="pl-k">||</span><span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.CATMULLROM_FORWARD)a[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.getPrevKeyWith(<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,f,q.<span class="pl-c1">index</span><span class="pl-k">-</span><span class="pl-c1">1</span>).pos,a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>u,a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>w,a[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.getNextKeyWith(<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,f,t.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>).pos,r<span class="pl-k">=</span>.<span class="pl-c1">33</span><span class="pl-k">*</span>r<span class="pl-k">+</span>.<span class="pl-c1">33</span>,t<span class="pl-k">=</span>e(a,r),q<span class="pl-k">=</span><span class="pl-v">this</span>.weight<span class="pl-k">/</span>(<span class="pl-v">this</span>.weight<span class="pl-k">+</span>n.positionWeight),n.positionWeight<span class="pl-k">+=</span><span class="pl-v">this</span>.weight,m<span class="pl-k">=</span>k.position,m.<span class="pl-c1">x</span><span class="pl-k">+=</span>(t[<span class="pl-c1">0</span>]<span class="pl-k">-</span>m.<span class="pl-c1">x</span>)<span class="pl-k">*</span>q,m.<span class="pl-c1">y</span><span class="pl-k">+=</span>(t[<span class="pl-c1">1</span>]<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L735" class="blob-num js-line-number" data-line-number="735"></td>
        <td id="LC735" class="blob-code blob-code-inner js-file-line">m.<span class="pl-c1">y</span>)<span class="pl-k">*</span>q,m.<span class="pl-c1">z</span><span class="pl-k">+=</span>(t[<span class="pl-c1">2</span>]<span class="pl-k">-</span>m.<span class="pl-c1">z</span>)<span class="pl-k">*</span>q,<span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.CATMULLROM_FORWARD<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span>e(a,<span class="pl-c1">1.01</span><span class="pl-k">*</span>r),b.set(r[<span class="pl-c1">0</span>],r[<span class="pl-c1">1</span>],r[<span class="pl-c1">2</span>]),b.<span class="pl-c1">sub</span>(m),b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>,b.normalize(),r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(b.<span class="pl-c1">x</span>,b.<span class="pl-c1">z</span>),k.rotation.set(<span class="pl-c1">0</span>,r,<span class="pl-c1">0</span>))}<span class="pl-k">else</span><span class="pl-s"><span class="pl-pds">&quot;</span>rot<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>m<span class="pl-k">?</span>(<span class="pl-c1">THREE</span>.Quaternion.slerp(u,w,d,r),<span class="pl-c1">0</span><span class="pl-k">===</span>n.quaternionWeight<span class="pl-k">?</span>(k.quaternion.copy(d),n.quaternionWeight<span class="pl-k">=</span><span class="pl-v">this</span>.weight)<span class="pl-k">:</span>(q<span class="pl-k">=</span><span class="pl-v">this</span>.weight<span class="pl-k">/</span>(<span class="pl-v">this</span>.weight<span class="pl-k">+</span>n.quaternionWeight),<span class="pl-c1">THREE</span>.Quaternion.slerp(k.quaternion,d,k.quaternion,q),n.quaternionWeight<span class="pl-k">+=</span><span class="pl-v">this</span>.weight))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>scl<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>m<span class="pl-k">&amp;&amp;</span>(c.<span class="pl-c1">x</span><span class="pl-k">=</span>u[<span class="pl-c1">0</span>]<span class="pl-k">+</span>(w[<span class="pl-c1">0</span>]<span class="pl-k">-</span>u[<span class="pl-c1">0</span>])<span class="pl-k">*</span>r,c.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L736" class="blob-num js-line-number" data-line-number="736"></td>
        <td id="LC736" class="blob-code blob-code-inner js-file-line">u[<span class="pl-c1">1</span>]<span class="pl-k">+</span>(w[<span class="pl-c1">1</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])<span class="pl-k">*</span>r,c.<span class="pl-c1">z</span><span class="pl-k">=</span>u[<span class="pl-c1">2</span>]<span class="pl-k">+</span>(w[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">2</span>])<span class="pl-k">*</span>r,q<span class="pl-k">=</span><span class="pl-v">this</span>.weight<span class="pl-k">/</span>(<span class="pl-v">this</span>.weight<span class="pl-k">+</span>n.scaleWeight),k.scale.lerp(c,q),n.scaleWeight<span class="pl-k">+=</span><span class="pl-v">this</span>.weight)}<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}}(),<span class="pl-en">getNextKeyWith</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[b].keys;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.CATMULLROM<span class="pl-k">||</span><span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.CATMULLROM_FORWARD<span class="pl-k">?</span>c<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span>c<span class="pl-k">:</span>d.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">%</span>d.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d[c][a])<span class="pl-k">return</span> d[c];<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[b].keys[<span class="pl-c1">0</span>]},<span class="pl-en">getPrevKeyWith</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L737" class="blob-num js-line-number" data-line-number="737"></td>
        <td id="LC737" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[b].keys;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.CATMULLROM<span class="pl-k">||</span><span class="pl-v">this</span>.interpolationType<span class="pl-k">===</span><span class="pl-c1">THREE</span>.AnimationHandler.CATMULLROM_FORWARD<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">+</span>d.<span class="pl-c1">length</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c;c<span class="pl-k">--</span>)<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d[c][a])<span class="pl-k">return</span> d[c];<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[b].keys[d.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]}};</td>
      </tr>
      <tr>
        <td id="L738" class="blob-num js-line-number" data-line-number="738"></td>
        <td id="LC738" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">KeyFrameAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.root<span class="pl-k">=</span>a.node;<span class="pl-v">this</span>.<span class="pl-c1">data</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.AnimationHandler.init(a);<span class="pl-v">this</span>.hierarchy<span class="pl-k">=</span><span class="pl-c1">THREE</span>.AnimationHandler.<span class="pl-c1">parse</span>(<span class="pl-v">this</span>.root);<span class="pl-v">this</span>.currentTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.timeScale<span class="pl-k">=</span>.<span class="pl-c1">001</span>;<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.loop<span class="pl-k">=</span><span class="pl-v">this</span>.isPaused<span class="pl-k">=!</span><span class="pl-c1">0</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a].sids,d<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy[a];<span class="pl-k">if</span>(<span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a].keys.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>c){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>c[e],f<span class="pl-k">=</span><span class="pl-v">this</span>.getNextKeyWith(g,a,<span class="pl-c1">0</span>);f<span class="pl-k">&amp;&amp;</span>f.<span class="pl-c1">apply</span>(g)}d.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a].node.updateMatrix();</td>
      </tr>
      <tr>
        <td id="L739" class="blob-num js-line-number" data-line-number="739"></td>
        <td id="LC739" class="blob-code blob-code-inner js-file-line">d.matrixWorldNeedsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>}}};</td>
      </tr>
      <tr>
        <td id="L740" class="blob-num js-line-number" data-line-number="740"></td>
        <td id="LC740" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.KeyFrameAnimation</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.KeyFrameAnimation,<span class="pl-en">play</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.currentTime<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-v">this</span>.isPlaying){<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy.<span class="pl-c1">length</span>,c,d;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy[a],d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>d.animationCache<span class="pl-k">&amp;&amp;</span>(d.animationCache<span class="pl-k">=</span>{},d.animationCache.prevKey<span class="pl-k">=</span><span class="pl-c1">null</span>,d.animationCache.nextKey<span class="pl-k">=</span><span class="pl-c1">null</span>,d.animationCache.originalMatrix<span class="pl-k">=</span>c.matrix),c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a].keys,c.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(d.animationCache.prevKey<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],d.animationCache.nextKey<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L741" class="blob-num js-line-number" data-line-number="741"></td>
        <td id="LC741" class="blob-code blob-code-inner js-file-line">c[<span class="pl-c1">1</span>],<span class="pl-v">this</span>.startTime<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(c[<span class="pl-c1">0</span>]<span class="pl-c1">.time</span>,<span class="pl-v">this</span>.startTime),<span class="pl-v">this</span>.endTime<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(c[c.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-c1">.time</span>,<span class="pl-v">this</span>.endTime));<span class="pl-v">this</span>.update(<span class="pl-c1">0</span>)}<span class="pl-v">this</span>.isPaused<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.AnimationHandler.play(<span class="pl-v">this</span>)},<span class="pl-en">stop</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.isPaused<span class="pl-k">=</span><span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.AnimationHandler.<span class="pl-c1">stop</span>(<span class="pl-v">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy[a],c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c.animationCache){<span class="pl-k">var</span> d<span class="pl-k">=</span>c.animationCache.originalMatrix;d.copy(b.matrix);b.matrix<span class="pl-k">=</span>d;<span class="pl-k">delete</span> c.animationCache}}},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L742" class="blob-num js-line-number" data-line-number="742"></td>
        <td id="LC742" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.isPlaying){<span class="pl-v">this</span>.currentTime<span class="pl-k">+=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.timeScale;a<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">length</span>;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.loop<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.currentTime<span class="pl-k">&gt;</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">%=</span>a);<span class="pl-v">this</span>.currentTime<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-v">this</span>.currentTime,a);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.hierarchy[a],d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a],e<span class="pl-k">=</span>d.keys,d<span class="pl-k">=</span>d.animationCache;<span class="pl-k">if</span>(e.<span class="pl-c1">length</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>d.prevKey,f<span class="pl-k">=</span>d.nextKey;<span class="pl-k">if</span>(f<span class="pl-c1">.time</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.currentTime){<span class="pl-k">for</span>(;f<span class="pl-c1">.time</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.currentTime<span class="pl-k">&amp;&amp;</span>f.<span class="pl-c1">index</span><span class="pl-k">&gt;</span>g.<span class="pl-c1">index</span>;)g<span class="pl-k">=</span>f,f<span class="pl-k">=</span>e[g.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>];d.prevKey<span class="pl-k">=</span>g;d.nextKey<span class="pl-k">=</span>f}f<span class="pl-c1">.time</span><span class="pl-k">&gt;=</span><span class="pl-v">this</span>.currentTime<span class="pl-k">?</span>g.interpolate(f,<span class="pl-v">this</span>.currentTime)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L743" class="blob-num js-line-number" data-line-number="743"></td>
        <td id="LC743" class="blob-code blob-code-inner js-file-line">g.interpolate(f,f<span class="pl-c1">.time</span>);<span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[a].node.updateMatrix();c.matrixWorldNeedsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>}}}},<span class="pl-en">getNextKeyWith</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[b].keys;<span class="pl-k">for</span>(c<span class="pl-k">%=</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(b[c].hasTarget(a))<span class="pl-k">return</span> b[c];<span class="pl-k">return</span> b[<span class="pl-c1">0</span>]},<span class="pl-en">getPrevKeyWith</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">data</span>.hierarchy[b].keys;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">+</span>b.<span class="pl-c1">length</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c;c<span class="pl-k">--</span>)<span class="pl-k">if</span>(b[c].hasTarget(a))<span class="pl-k">return</span> b[c];<span class="pl-k">return</span> b[b.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]}};</td>
      </tr>
      <tr>
        <td id="L744" class="blob-num js-line-number" data-line-number="744"></td>
        <td id="LC744" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MorphAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.mesh<span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">frames</span><span class="pl-k">=</span>a.morphTargetInfluences.<span class="pl-c1">length</span>;<span class="pl-v">this</span>.currentTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.duration<span class="pl-k">=</span><span class="pl-c1">1E3</span>;<span class="pl-v">this</span>.loop<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.currentFrame<span class="pl-k">=</span><span class="pl-v">this</span>.lastFrame<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L745" class="blob-num js-line-number" data-line-number="745"></td>
        <td id="LC745" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphAnimation</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{constructor<span class="pl-k">:</span><span class="pl-c1">THREE</span>.MorphAnimation,<span class="pl-en">play</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">0</span>},<span class="pl-en">pause</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.isPlaying<span class="pl-k">=!</span><span class="pl-c1">1</span>},<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-v">this</span>.isPlaying){<span class="pl-v">this</span>.currentTime<span class="pl-k">+=</span>a;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-v">this</span>.loop<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.currentTime<span class="pl-k">&gt;</span><span class="pl-v">this</span>.duration<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">%=</span><span class="pl-v">this</span>.duration);<span class="pl-v">this</span>.currentTime<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-v">this</span>.currentTime,<span class="pl-v">this</span>.duration);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.duration<span class="pl-k">/</span><span class="pl-v">this</span>.<span class="pl-c1">frames</span>;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-v">this</span>.currentTime<span class="pl-k">/</span>b);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.mesh.morphTargetInfluences;a<span class="pl-k">!==</span><span class="pl-v">this</span>.currentFrame<span class="pl-k">&amp;&amp;</span>(c[<span class="pl-v">this</span>.lastFrame]<span class="pl-k">=</span><span class="pl-c1">0</span>,c[<span class="pl-v">this</span>.currentFrame]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L746" class="blob-num js-line-number" data-line-number="746"></td>
        <td id="LC746" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>,c[a]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>.lastFrame<span class="pl-k">=</span><span class="pl-v">this</span>.currentFrame,<span class="pl-v">this</span>.currentFrame<span class="pl-k">=</span>a);b<span class="pl-k">=</span><span class="pl-v">this</span>.currentTime<span class="pl-k">%</span>b<span class="pl-k">/</span>b;c[a]<span class="pl-k">=</span>b;c[<span class="pl-v">this</span>.lastFrame]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>b}}};</td>
      </tr>
      <tr>
        <td id="L747" class="blob-num js-line-number" data-line-number="747"></td>
        <td id="LC747" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BoxGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> u,w<span class="pl-k">=</span>h.widthSegments,v<span class="pl-k">=</span>h.heightSegments,B<span class="pl-k">=</span>e<span class="pl-k">/</span><span class="pl-c1">2</span>,x<span class="pl-k">=</span>f<span class="pl-k">/</span><span class="pl-c1">2</span>,H<span class="pl-k">=</span>h.vertices.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b)u<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b)u<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,v<span class="pl-k">=</span>h.depthSegments;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b)u<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,w<span class="pl-k">=</span>h.depthSegments;<span class="pl-k">var</span> I<span class="pl-k">=</span>w<span class="pl-k">+</span><span class="pl-c1">1</span>,z<span class="pl-k">=</span>v<span class="pl-k">+</span><span class="pl-c1">1</span>,D<span class="pl-k">=</span>e<span class="pl-k">/</span>w,G<span class="pl-k">=</span>f<span class="pl-k">/</span>v,O<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;O[u]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>z;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>I;f<span class="pl-k">++</span>){<span class="pl-k">var</span> C<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;C[a]<span class="pl-k">=</span>(f<span class="pl-k">*</span>D<span class="pl-k">-</span>B)<span class="pl-k">*</span>c;C[b]<span class="pl-k">=</span>(e<span class="pl-k">*</span>G<span class="pl-k">-</span>x)<span class="pl-k">*</span>d;C[u]<span class="pl-k">=</span>g;h.vertices.<span class="pl-c1">push</span>(C)}<span class="pl-k">for</span>(e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L748" class="blob-num js-line-number" data-line-number="748"></td>
        <td id="LC748" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>v;e<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>w;f<span class="pl-k">++</span>)x<span class="pl-k">=</span>f<span class="pl-k">+</span>I<span class="pl-k">*</span>e,a<span class="pl-k">=</span>f<span class="pl-k">+</span>I<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>),b<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>I<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>),c<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>I<span class="pl-k">*</span>e,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f<span class="pl-k">/</span>w,<span class="pl-c1">1</span><span class="pl-k">-</span>e<span class="pl-k">/</span>v),g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f<span class="pl-k">/</span>w,<span class="pl-c1">1</span><span class="pl-k">-</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>v),u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>w,<span class="pl-c1">1</span><span class="pl-k">-</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>v),B<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>w,<span class="pl-c1">1</span><span class="pl-k">-</span>e<span class="pl-k">/</span>v),x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(x<span class="pl-k">+</span>H,a<span class="pl-k">+</span>H,c<span class="pl-k">+</span>H),x.normal.copy(O),x.vertexNormals.<span class="pl-c1">push</span>(O.clone(),O.clone(),O.clone()),x.materialIndex<span class="pl-k">=</span>r,h.faces.<span class="pl-c1">push</span>(x),h.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([d,g,B]),x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a<span class="pl-k">+</span>H,b<span class="pl-k">+</span>H,c<span class="pl-k">+</span>H),x.normal.copy(O),x.vertexNormals.<span class="pl-c1">push</span>(O.clone(),O.clone(),O.clone()),x.materialIndex<span class="pl-k">=</span>r,h.faces.<span class="pl-c1">push</span>(x),</td>
      </tr>
      <tr>
        <td id="L749" class="blob-num js-line-number" data-line-number="749"></td>
        <td id="LC749" class="blob-code blob-code-inner js-file-line">h.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([g.clone(),u,B.clone()])}<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>BoxGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{width<span class="pl-k">:</span>a,height<span class="pl-k">:</span>b,depth<span class="pl-k">:</span>c,widthSegments<span class="pl-k">:</span>d,heightSegments<span class="pl-k">:</span>e,depthSegments<span class="pl-k">:</span>g};<span class="pl-v">this</span>.widthSegments<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.heightSegments<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.depthSegments<span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>;d<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>;e<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>;g<span class="pl-k">=</span>c<span class="pl-k">/</span><span class="pl-c1">2</span>;f(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,b,d,<span class="pl-c1">0</span>);f(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,b,<span class="pl-k">-</span>d,<span class="pl-c1">1</span>);f(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,a,c,e,<span class="pl-c1">2</span>);f(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,c,<span class="pl-k">-</span>e,<span class="pl-c1">3</span>);f(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b,g,<span class="pl-c1">4</span>);f(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b,<span class="pl-k">-</span>g,<span class="pl-c1">5</span>);<span class="pl-v">this</span>.mergeVertices()};<span class="pl-c1">THREE.BoxGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L750" class="blob-num js-line-number" data-line-number="750"></td>
        <td id="LC750" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.BoxGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.BoxGeometry;<span class="pl-c1">THREE.BoxGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.BoxGeometry</span>(<span class="pl-v">this</span>.parameters.<span class="pl-c1">width</span>,<span class="pl-v">this</span>.parameters.<span class="pl-c1">height</span>,<span class="pl-v">this</span>.parameters.depth,<span class="pl-v">this</span>.parameters.widthSegments,<span class="pl-v">this</span>.parameters.heightSegments,<span class="pl-v">this</span>.parameters.depthSegments)};<span class="pl-c1">THREE</span>.CubeGeometry<span class="pl-k">=</span><span class="pl-c1">THREE</span>.BoxGeometry;</td>
      </tr>
      <tr>
        <td id="L751" class="blob-num js-line-number" data-line-number="751"></td>
        <td id="LC751" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CircleGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CircleGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,thetaStart<span class="pl-k">:</span>c,thetaLength<span class="pl-k">:</span>d};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">50</span>;b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,b)<span class="pl-k">:</span><span class="pl-c1">8</span>;c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">var</span> e,g<span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(.<span class="pl-c1">5</span>,.<span class="pl-c1">5</span>);<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(e);g.<span class="pl-c1">push</span>(f);<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;=</span>b;e<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span>c<span class="pl-k">+</span>e<span class="pl-k">/</span>b<span class="pl-k">*</span>d;h.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(k);h.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(k);<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(h);g.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((h.<span class="pl-c1">x</span><span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,(h.<span class="pl-c1">y</span><span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>))}c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L752" class="blob-num js-line-number" data-line-number="752"></td>
        <td id="LC752" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>b;e<span class="pl-k">++</span>)<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(e,e<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,[c.clone(),c.clone(),c.clone()])),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([g[e].clone(),g[e<span class="pl-k">+</span><span class="pl-c1">1</span>].clone(),f.clone()]);<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,a)};<span class="pl-c1">THREE.CircleGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CircleGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CircleGeometry;</td>
      </tr>
      <tr>
        <td id="L753" class="blob-num js-line-number" data-line-number="753"></td>
        <td id="LC753" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CircleGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.CircleGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.segments,<span class="pl-v">this</span>.parameters.thetaStart,<span class="pl-v">this</span>.parameters.thetaLength)};</td>
      </tr>
      <tr>
        <td id="L754" class="blob-num js-line-number" data-line-number="754"></td>
        <td id="LC754" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CircleBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CircleBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,thetaStart<span class="pl-k">:</span>c,thetaLength<span class="pl-k">:</span>d};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">50</span>;b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,b)<span class="pl-k">:</span><span class="pl-c1">8</span>;c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>e),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>e),e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>e);f[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>.<span class="pl-c1">5</span>;e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>.<span class="pl-c1">5</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-c1">3</span>,l<span class="pl-k">=</span><span class="pl-c1">2</span>;h<span class="pl-k">&lt;=</span>b;h<span class="pl-k">++</span>,k<span class="pl-k">+=</span><span class="pl-c1">3</span>,l<span class="pl-k">+=</span><span class="pl-c1">2</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span>c<span class="pl-k">+</span>h<span class="pl-k">/</span>b<span class="pl-k">*</span>d;g[k]<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(n);g[k<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(n);f[k<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;e[l]<span class="pl-k">=</span>(g[k]<span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;e[l<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>(g[k<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>}c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L755" class="blob-num js-line-number" data-line-number="755"></td>
        <td id="LC755" class="blob-code blob-code-inner js-file-line">[];<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">1</span>;k<span class="pl-k">&lt;=</span>b;k<span class="pl-k">++</span>)c.<span class="pl-c1">push</span>(k),c.<span class="pl-c1">push</span>(k<span class="pl-k">+</span><span class="pl-c1">1</span>),c.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>);<span class="pl-v">this</span>.setIndex(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(c),<span class="pl-c1">1</span>));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(g,<span class="pl-c1">3</span>));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(f,<span class="pl-c1">3</span>));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(e,<span class="pl-c1">2</span>));<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,a)};<span class="pl-c1">THREE.CircleBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CircleBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CircleBufferGeometry;</td>
      </tr>
      <tr>
        <td id="L756" class="blob-num js-line-number" data-line-number="756"></td>
        <td id="LC756" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CircleBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CircleBufferGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.segments,<span class="pl-v">this</span>.parameters.thetaStart,<span class="pl-v">this</span>.parameters.thetaLength);a.copy(<span class="pl-v">this</span>);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L757" class="blob-num js-line-number" data-line-number="757"></td>
        <td id="LC757" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CylinderGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>CylinderGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radiusTop<span class="pl-k">:</span>a,radiusBottom<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c,radialSegments<span class="pl-k">:</span>d,heightSegments<span class="pl-k">:</span>e,openEnded<span class="pl-k">:</span>g,thetaStart<span class="pl-k">:</span>f,thetaLength<span class="pl-k">:</span>h};a<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">20</span>;b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">20</span>;c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">100</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">1</span>;g<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:!</span><span class="pl-c1">1</span>;f<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">0</span>;h<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">?</span>h<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">var</span> k<span class="pl-k">=</span>c<span class="pl-k">/</span><span class="pl-c1">2</span>,l,n,p<span class="pl-k">=</span>[],m<span class="pl-k">=</span>[];<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;=</span>e;n<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>[],t<span class="pl-k">=</span>[],r<span class="pl-k">=</span>n<span class="pl-k">/</span>e,u<span class="pl-k">=</span>r<span class="pl-k">*</span>(b<span class="pl-k">-</span>a)<span class="pl-k">+</span>a;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;=</span>d;l<span class="pl-k">++</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>l<span class="pl-k">/</span>d,v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;v.<span class="pl-c1">x</span><span class="pl-k">=</span>u<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(w<span class="pl-k">*</span>h<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L758" class="blob-num js-line-number" data-line-number="758"></td>
        <td id="LC758" class="blob-code blob-code-inner js-file-line">f);v.<span class="pl-c1">y</span><span class="pl-k">=-</span>r<span class="pl-k">*</span>c<span class="pl-k">+</span>k;v.<span class="pl-c1">z</span><span class="pl-k">=</span>u<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(w<span class="pl-k">*</span>h<span class="pl-k">+</span>f);<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(v);q.<span class="pl-c1">push</span>(<span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);t.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(w,<span class="pl-c1">1</span><span class="pl-k">-</span>r))}p.<span class="pl-c1">push</span>(q);m.<span class="pl-c1">push</span>(t)}c<span class="pl-k">=</span>(b<span class="pl-k">-</span>a)<span class="pl-k">/</span>c;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>d;l<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>(f<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[p[<span class="pl-c1">0</span>][l]].clone(),h<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[p[<span class="pl-c1">0</span>][l<span class="pl-k">+</span><span class="pl-c1">1</span>]].clone())<span class="pl-k">:</span>(f<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[p[<span class="pl-c1">1</span>][l]].clone(),h<span class="pl-k">=</span><span class="pl-v">this</span>.vertices[p[<span class="pl-c1">1</span>][l<span class="pl-k">+</span><span class="pl-c1">1</span>]].clone()),f.setY(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>f.<span class="pl-c1">z</span><span class="pl-k">*</span>f.<span class="pl-c1">z</span>)<span class="pl-k">*</span>c).normalize(),h.setY(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h.<span class="pl-c1">x</span><span class="pl-k">*</span>h.<span class="pl-c1">x</span><span class="pl-k">+</span>h.<span class="pl-c1">z</span><span class="pl-k">*</span>h.<span class="pl-c1">z</span>)<span class="pl-k">*</span>c).normalize(),n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>e;n<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>p[n][l],t<span class="pl-k">=</span>p[n<span class="pl-k">+</span><span class="pl-c1">1</span>][l],r<span class="pl-k">=</span>p[n<span class="pl-k">+</span><span class="pl-c1">1</span>][l<span class="pl-k">+</span><span class="pl-c1">1</span>],u<span class="pl-k">=</span>p[n][l<span class="pl-k">+</span><span class="pl-c1">1</span>],w<span class="pl-k">=</span>f.clone(),v<span class="pl-k">=</span>f.clone(),</td>
      </tr>
      <tr>
        <td id="L759" class="blob-num js-line-number" data-line-number="759"></td>
        <td id="LC759" class="blob-code blob-code-inner js-file-line">B<span class="pl-k">=</span>h.clone(),x<span class="pl-k">=</span>h.clone(),H<span class="pl-k">=</span>m[n][l].clone(),I<span class="pl-k">=</span>m[n<span class="pl-k">+</span><span class="pl-c1">1</span>][l].clone(),z<span class="pl-k">=</span>m[n<span class="pl-k">+</span><span class="pl-c1">1</span>][l<span class="pl-k">+</span><span class="pl-c1">1</span>].clone(),D<span class="pl-k">=</span>m[n][l<span class="pl-k">+</span><span class="pl-c1">1</span>].clone();<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(q,t,u,[w,v,x]));<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([H,I,D]);<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(t,r,u,[v.clone(),B,x.clone()]));<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([I.clone(),z,D.clone()])}<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a)<span class="pl-k">for</span>(<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,k,<span class="pl-c1">0</span>)),l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>d;l<span class="pl-k">++</span>)q<span class="pl-k">=</span>p[<span class="pl-c1">0</span>][l],t<span class="pl-k">=</span>p[<span class="pl-c1">0</span>][l<span class="pl-k">+</span><span class="pl-c1">1</span>],r<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),B<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L760" class="blob-num js-line-number" data-line-number="760"></td>
        <td id="LC760" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),H<span class="pl-k">=</span>m[<span class="pl-c1">0</span>][l].clone(),I<span class="pl-k">=</span>m[<span class="pl-c1">0</span>][l<span class="pl-k">+</span><span class="pl-c1">1</span>].clone(),z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(I.<span class="pl-c1">x</span>,<span class="pl-c1">0</span>),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(q,t,r,[w,v,B],<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">1</span>)),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([H,I,z]);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>b)<span class="pl-k">for</span>(<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>k,<span class="pl-c1">0</span>)),l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>d;l<span class="pl-k">++</span>)q<span class="pl-k">=</span>p[e][l<span class="pl-k">+</span><span class="pl-c1">1</span>],t<span class="pl-k">=</span>p[e][l],r<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),B<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),H<span class="pl-k">=</span>m[e][l<span class="pl-k">+</span><span class="pl-c1">1</span>].clone(),I<span class="pl-k">=</span>m[e][l].clone(),z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(I.<span class="pl-c1">x</span>,<span class="pl-c1">1</span>),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(q,t,r,[w,v,B],<span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">2</span>)),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([H,</td>
      </tr>
      <tr>
        <td id="L761" class="blob-num js-line-number" data-line-number="761"></td>
        <td id="LC761" class="blob-code blob-code-inner js-file-line">I,z]);<span class="pl-v">this</span>.computeFaceNormals()};<span class="pl-c1">THREE.CylinderGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.CylinderGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CylinderGeometry;<span class="pl-c1">THREE.CylinderGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-v">this</span>.parameters.radiusTop,<span class="pl-v">this</span>.parameters.radiusBottom,<span class="pl-v">this</span>.parameters.<span class="pl-c1">height</span>,<span class="pl-v">this</span>.parameters.radialSegments,<span class="pl-v">this</span>.parameters.heightSegments,<span class="pl-v">this</span>.parameters.openEnded,<span class="pl-v">this</span>.parameters.thetaStart,<span class="pl-v">this</span>.parameters.thetaLength)};</td>
      </tr>
      <tr>
        <td id="L762" class="blob-num js-line-number" data-line-number="762"></td>
        <td id="LC762" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">EdgesGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.degToRad(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>)),d<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],e<span class="pl-k">=</span>{},<span class="pl-en">g</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">-</span>b},f<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>],h;a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry<span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,h.fromBufferGeometry(a))<span class="pl-k">:</span>h<span class="pl-k">=</span>a.clone();h.mergeVertices();h.computeFaceNormals();<span class="pl-k">var</span> k<span class="pl-k">=</span>h.vertices;h<span class="pl-k">=</span>h.faces;<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>h.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span>h[l],m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>m;m<span class="pl-k">++</span>){d[<span class="pl-c1">0</span>]<span class="pl-k">=</span>p[f[m]];d[<span class="pl-c1">1</span>]<span class="pl-k">=</span>p[f[(m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>]];d.<span class="pl-c1">sort</span>(g);<span class="pl-k">var</span> q<span class="pl-k">=</span>d.<span class="pl-c1">toString</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e[q]<span class="pl-k">?</span>e[q]<span class="pl-k">=</span>{vert1<span class="pl-k">:</span>d[<span class="pl-c1">0</span>],vert2<span class="pl-k">:</span>d[<span class="pl-c1">1</span>],face1<span class="pl-k">:</span>l,</td>
      </tr>
      <tr>
        <td id="L763" class="blob-num js-line-number" data-line-number="763"></td>
        <td id="LC763" class="blob-code blob-code-inner js-file-line">face2<span class="pl-k">:void</span> <span class="pl-c1">0</span>}<span class="pl-k">:</span>e[q].face2<span class="pl-k">=</span>l}d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(q <span class="pl-k">in</span> e)<span class="pl-k">if</span>(g<span class="pl-k">=</span>e[q],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g.face2<span class="pl-k">||</span>h[g.face1].normal.dot(h[g.face2].normal)<span class="pl-k">&lt;=</span>c)f<span class="pl-k">=</span>k[g.vert1],d.<span class="pl-c1">push</span>(f.<span class="pl-c1">x</span>),d.<span class="pl-c1">push</span>(f.<span class="pl-c1">y</span>),d.<span class="pl-c1">push</span>(f.<span class="pl-c1">z</span>),f<span class="pl-k">=</span>k[g.vert2],d.<span class="pl-c1">push</span>(f.<span class="pl-c1">x</span>),d.<span class="pl-c1">push</span>(f.<span class="pl-c1">y</span>),d.<span class="pl-c1">push</span>(f.<span class="pl-c1">z</span>);<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(d),<span class="pl-c1">3</span>))};<span class="pl-c1">THREE.EdgesGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.EdgesGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.EdgesGeometry;</td>
      </tr>
      <tr>
        <td id="L764" class="blob-num js-line-number" data-line-number="764"></td>
        <td id="LC764" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ExtrudeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">!==typeof</span> a<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>),<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ExtrudeGeometry<span class="pl-pds">&quot;</span></span>,a<span class="pl-k">=</span><span class="pl-c1">Array</span>.isArray(a)<span class="pl-k">?</span>a<span class="pl-k">:</span>[a],<span class="pl-v">this</span>.addShapeList(a,b),<span class="pl-v">this</span>.computeFaceNormals())};<span class="pl-c1">THREE.ExtrudeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.ExtrudeGeometry;<span class="pl-c1">THREE.ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShapeList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.<span class="pl-c1">length</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c;d<span class="pl-k">++</span>)<span class="pl-v">this</span>.addShape(a[d],b)};</td>
      </tr>
      <tr>
        <td id="L765" class="blob-num js-line-number" data-line-number="765"></td>
        <td id="LC765" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">||</span><span class="pl-en">console</span><span class="pl-c1">.error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.ExtrudeGeometry: vec does not exist<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> b.clone().multiplyScalar(c).<span class="pl-c1">add</span>(a)}<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">x</span><span class="pl-k">-</span>b.<span class="pl-c1">x</span>,e<span class="pl-k">=</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>b.<span class="pl-c1">y</span>,f<span class="pl-k">=</span>c.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>,g<span class="pl-k">=</span>c.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>,h<span class="pl-k">=</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>e;<span class="pl-k">if</span>(<span class="pl-c1">1E-10</span><span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d<span class="pl-k">*</span>g<span class="pl-k">-</span>e<span class="pl-k">*</span>f)){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h),l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f<span class="pl-k">*</span>f<span class="pl-k">+</span>g<span class="pl-k">*</span>g),h<span class="pl-k">=</span>b.<span class="pl-c1">x</span><span class="pl-k">-</span>e<span class="pl-k">/</span>k;b<span class="pl-k">=</span>b.<span class="pl-c1">y</span><span class="pl-k">+</span>d<span class="pl-k">/</span>k;f<span class="pl-k">=</span>((c.<span class="pl-c1">x</span><span class="pl-k">-</span>g<span class="pl-k">/</span>l<span class="pl-k">-</span>h)<span class="pl-k">*</span>g<span class="pl-k">-</span>(c.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">/</span>l<span class="pl-k">-</span>b)<span class="pl-k">*</span>f)<span class="pl-k">/</span>(d<span class="pl-k">*</span>g<span class="pl-k">-</span>e<span class="pl-k">*</span>f);c<span class="pl-k">=</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>f<span class="pl-k">-</span>a.<span class="pl-c1">x</span>;a<span class="pl-k">=</span>b<span class="pl-k">+</span>e<span class="pl-k">*</span>f<span class="pl-k">-</span>a.<span class="pl-c1">y</span>;d<span class="pl-k">=</span>c<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>a;<span class="pl-k">if</span>(<span class="pl-c1">2</span><span class="pl-k">&gt;=</span>d)<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,a);d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d<span class="pl-k">/</span><span class="pl-c1">2</span>)}<span class="pl-k">else</span> a<span class="pl-k">=!</span><span class="pl-c1">1</span>,<span class="pl-c1">1E-10</span><span class="pl-k">&lt;</span>d<span class="pl-k">?</span><span class="pl-c1">1E-10</span><span class="pl-k">&lt;</span>f<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L766" class="blob-num js-line-number" data-line-number="766"></td>
        <td id="LC766" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:-</span><span class="pl-c1">1E-10</span><span class="pl-k">&gt;</span>d<span class="pl-k">?-</span><span class="pl-c1">1E-10</span><span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=!</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-c1">Math</span>.sign(e)<span class="pl-k">===</span><span class="pl-c1">Math</span>.sign(g)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=!</span><span class="pl-c1">0</span>),a<span class="pl-k">?</span>(c<span class="pl-k">=-</span>e,a<span class="pl-k">=</span>d,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h))<span class="pl-k">:</span>(c<span class="pl-k">=</span>d,a<span class="pl-k">=</span>e,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h<span class="pl-k">/</span><span class="pl-c1">2</span>));<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c<span class="pl-k">/</span>d,a<span class="pl-k">/</span>d)}<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d;<span class="pl-k">for</span>(A<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=--</span>A;){c<span class="pl-k">=</span>A;d<span class="pl-k">=</span>A<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span>a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>q<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>U<span class="pl-k">*</span>e,h<span class="pl-k">=</span>U<span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>),k<span class="pl-k">=</span>b<span class="pl-k">+</span>c<span class="pl-k">+</span>g,g<span class="pl-k">=</span>b<span class="pl-k">+</span>d<span class="pl-k">+</span>g,l<span class="pl-k">=</span>b<span class="pl-k">+</span>d<span class="pl-k">+</span>h,h<span class="pl-k">=</span>b<span class="pl-k">+</span>c<span class="pl-k">+</span>h,k<span class="pl-k">=</span>k<span class="pl-k">+</span>O,g<span class="pl-k">=</span>g<span class="pl-k">+</span>O,l<span class="pl-k">=</span>l<span class="pl-k">+</span>O,h<span class="pl-k">=</span>h<span class="pl-k">+</span>O;G.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(k,g,h));G.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(g,l,h));k<span class="pl-k">=</span>w.generateSideWallUV(G,k,g,l,h);G.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([k[<span class="pl-c1">0</span>],k[<span class="pl-c1">1</span>],k[<span class="pl-c1">3</span>]]);G.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([k[<span class="pl-c1">1</span>],</td>
      </tr>
      <tr>
        <td id="L767" class="blob-num js-line-number" data-line-number="767"></td>
        <td id="LC767" class="blob-code blob-code-inner js-file-line">k[<span class="pl-c1">2</span>],k[<span class="pl-c1">3</span>]])}}}<span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){G.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a,b,c))}<span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){a<span class="pl-k">+=</span>O;b<span class="pl-k">+=</span>O;c<span class="pl-k">+=</span>O;G.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,c));a<span class="pl-k">=</span>w.generateTopUV(G,a,b,c);G.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>(a)}<span class="pl-k">var</span> h<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.amount<span class="pl-k">?</span>b.amount<span class="pl-k">:</span><span class="pl-c1">100</span>,k<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.bevelThickness<span class="pl-k">?</span>b.bevelThickness<span class="pl-k">:</span><span class="pl-c1">6</span>,l<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.bevelSize<span class="pl-k">?</span>b.bevelSize<span class="pl-k">:</span>k<span class="pl-k">-</span><span class="pl-c1">2</span>,n<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.bevelSegments<span class="pl-k">?</span>b.bevelSegments<span class="pl-k">:</span><span class="pl-c1">3</span>,p<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.bevelEnabled<span class="pl-k">?</span>b.bevelEnabled<span class="pl-k">:!</span><span class="pl-c1">0</span>,m<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.curveSegments<span class="pl-k">?</span>b.curveSegments<span class="pl-k">:</span><span class="pl-c1">12</span>,q<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.steps<span class="pl-k">?</span>b.steps<span class="pl-k">:</span><span class="pl-c1">1</span>,t<span class="pl-k">=</span>b.extrudePath,</td>
      </tr>
      <tr>
        <td id="L768" class="blob-num js-line-number" data-line-number="768"></td>
        <td id="LC768" class="blob-code blob-code-inner js-file-line">r,u<span class="pl-k">=!</span><span class="pl-c1">1</span>,w<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.UVGenerator<span class="pl-k">?</span>b.UVGenerator<span class="pl-k">:</span><span class="pl-c1">THREE</span>.ExtrudeGeometry.WorldUVGenerator,v,B,x,H;t<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span>t.getSpacedPoints(q),u<span class="pl-k">=!</span><span class="pl-c1">0</span>,p<span class="pl-k">=!</span><span class="pl-c1">1</span>,v<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.<span class="pl-c1">frames</span><span class="pl-k">?</span>b.<span class="pl-c1">frames</span><span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.TubeGeometry</span>.FrenetFrames(t,q,<span class="pl-k">!</span><span class="pl-c1">1</span>),B<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,H<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);p<span class="pl-k">||</span>(l<span class="pl-k">=</span>k<span class="pl-k">=</span>n<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> I,z,D,G<span class="pl-k">=</span><span class="pl-v">this</span>,O<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>,t<span class="pl-k">=</span>a.extractPoints(m),m<span class="pl-k">=</span>t.<span class="pl-c1">shape</span>,C<span class="pl-k">=</span>t.holes;<span class="pl-k">if</span>(t<span class="pl-k">=!</span><span class="pl-c1">THREE</span>.Shape.Utils.isClockWise(m)){m<span class="pl-k">=</span>m.<span class="pl-c1">reverse</span>();z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span>C.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span>D;z<span class="pl-k">++</span>)I<span class="pl-k">=</span>C[z],<span class="pl-c1">THREE</span>.Shape.Utils.isClockWise(I)<span class="pl-k">&amp;&amp;</span>(C[z]<span class="pl-k">=</span>I.<span class="pl-c1">reverse</span>());t<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L769" class="blob-num js-line-number" data-line-number="769"></td>
        <td id="LC769" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">var</span> F<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.triangulateShape(m,C),K<span class="pl-k">=</span>m;z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span>C.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span>D;z<span class="pl-k">++</span>)I<span class="pl-k">=</span>C[z],m<span class="pl-k">=</span>m.<span class="pl-c1">concat</span>(I);<span class="pl-k">var</span> L,E,J,y,P,U<span class="pl-k">=</span>m.<span class="pl-c1">length</span>,Q,R<span class="pl-k">=</span>F.<span class="pl-c1">length</span>,t<span class="pl-k">=</span>[],A<span class="pl-k">=</span><span class="pl-c1">0</span>;J<span class="pl-k">=</span>K.<span class="pl-c1">length</span>;L<span class="pl-k">=</span>J<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(E<span class="pl-k">=</span>A<span class="pl-k">+</span><span class="pl-c1">1</span>;A<span class="pl-k">&lt;</span>J;A<span class="pl-k">++</span>,L<span class="pl-k">++</span>,E<span class="pl-k">++</span>)L<span class="pl-k">===</span>J<span class="pl-k">&amp;&amp;</span>(L<span class="pl-k">=</span><span class="pl-c1">0</span>),E<span class="pl-k">===</span>J<span class="pl-k">&amp;&amp;</span>(E<span class="pl-k">=</span><span class="pl-c1">0</span>),t[A]<span class="pl-k">=</span>d(K[A],K[L],K[E]);<span class="pl-k">var</span> ia<span class="pl-k">=</span>[],Z,fa<span class="pl-k">=</span>t.<span class="pl-c1">concat</span>();z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span>C.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span>D;z<span class="pl-k">++</span>){I<span class="pl-k">=</span>C[z];Z<span class="pl-k">=</span>[];A<span class="pl-k">=</span><span class="pl-c1">0</span>;J<span class="pl-k">=</span>I.<span class="pl-c1">length</span>;L<span class="pl-k">=</span>J<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(E<span class="pl-k">=</span>A<span class="pl-k">+</span><span class="pl-c1">1</span>;A<span class="pl-k">&lt;</span>J;A<span class="pl-k">++</span>,L<span class="pl-k">++</span>,E<span class="pl-k">++</span>)L<span class="pl-k">===</span>J<span class="pl-k">&amp;&amp;</span>(L<span class="pl-k">=</span><span class="pl-c1">0</span>),E<span class="pl-k">===</span>J<span class="pl-k">&amp;&amp;</span>(E<span class="pl-k">=</span><span class="pl-c1">0</span>),Z[A]<span class="pl-k">=</span>d(I[A],I[L],I[E]);ia.<span class="pl-c1">push</span>(Z);fa<span class="pl-k">=</span>fa.<span class="pl-c1">concat</span>(Z)}<span class="pl-k">for</span>(L<span class="pl-k">=</span><span class="pl-c1">0</span>;L<span class="pl-k">&lt;</span>n;L<span class="pl-k">++</span>){J<span class="pl-k">=</span>L<span class="pl-k">/</span>n;y<span class="pl-k">=</span>k<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>J);E<span class="pl-k">=</span>l<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(J<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);A<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(J<span class="pl-k">=</span>K.<span class="pl-c1">length</span>;A<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L770" class="blob-num js-line-number" data-line-number="770"></td>
        <td id="LC770" class="blob-code blob-code-inner js-file-line">J;A<span class="pl-k">++</span>)P<span class="pl-k">=</span>c(K[A],t[A],E),g(P.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span>,<span class="pl-k">-</span>y);z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span>C.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span>D;z<span class="pl-k">++</span>)<span class="pl-k">for</span>(I<span class="pl-k">=</span>C[z],Z<span class="pl-k">=</span>ia[z],A<span class="pl-k">=</span><span class="pl-c1">0</span>,J<span class="pl-k">=</span>I.<span class="pl-c1">length</span>;A<span class="pl-k">&lt;</span>J;A<span class="pl-k">++</span>)P<span class="pl-k">=</span>c(I[A],Z[A],E),g(P.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span>,<span class="pl-k">-</span>y)}E<span class="pl-k">=</span>l;<span class="pl-k">for</span>(A<span class="pl-k">=</span><span class="pl-c1">0</span>;A<span class="pl-k">&lt;</span>U;A<span class="pl-k">++</span>)P<span class="pl-k">=</span>p<span class="pl-k">?</span>c(m[A],fa[A],E)<span class="pl-k">:</span>m[A],u<span class="pl-k">?</span>(x.copy(v.normals[<span class="pl-c1">0</span>]).multiplyScalar(P.<span class="pl-c1">x</span>),B.copy(v.binormals[<span class="pl-c1">0</span>]).multiplyScalar(P.<span class="pl-c1">y</span>),H.copy(r[<span class="pl-c1">0</span>]).<span class="pl-c1">add</span>(x).<span class="pl-c1">add</span>(B),g(H.<span class="pl-c1">x</span>,H.<span class="pl-c1">y</span>,H.<span class="pl-c1">z</span>))<span class="pl-k">:</span>g(P.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>);<span class="pl-k">for</span>(J<span class="pl-k">=</span><span class="pl-c1">1</span>;J<span class="pl-k">&lt;=</span>q;J<span class="pl-k">++</span>)<span class="pl-k">for</span>(A<span class="pl-k">=</span><span class="pl-c1">0</span>;A<span class="pl-k">&lt;</span>U;A<span class="pl-k">++</span>)P<span class="pl-k">=</span>p<span class="pl-k">?</span>c(m[A],fa[A],E)<span class="pl-k">:</span>m[A],u<span class="pl-k">?</span>(x.copy(v.normals[J]).multiplyScalar(P.<span class="pl-c1">x</span>),B.copy(v.binormals[J]).multiplyScalar(P.<span class="pl-c1">y</span>),H.copy(r[J]).<span class="pl-c1">add</span>(x).<span class="pl-c1">add</span>(B),g(H.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L771" class="blob-num js-line-number" data-line-number="771"></td>
        <td id="LC771" class="blob-code blob-code-inner js-file-line">H.<span class="pl-c1">y</span>,H.<span class="pl-c1">z</span>))<span class="pl-k">:</span>g(P.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span>,h<span class="pl-k">/</span>q<span class="pl-k">*</span>J);<span class="pl-k">for</span>(L<span class="pl-k">=</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>L;L<span class="pl-k">--</span>){J<span class="pl-k">=</span>L<span class="pl-k">/</span>n;y<span class="pl-k">=</span>k<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>J);E<span class="pl-k">=</span>l<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(J<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);A<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(J<span class="pl-k">=</span>K.<span class="pl-c1">length</span>;A<span class="pl-k">&lt;</span>J;A<span class="pl-k">++</span>)P<span class="pl-k">=</span>c(K[A],t[A],E),g(P.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span>,h<span class="pl-k">+</span>y);z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span>C.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span>D;z<span class="pl-k">++</span>)<span class="pl-k">for</span>(I<span class="pl-k">=</span>C[z],Z<span class="pl-k">=</span>ia[z],A<span class="pl-k">=</span><span class="pl-c1">0</span>,J<span class="pl-k">=</span>I.<span class="pl-c1">length</span>;A<span class="pl-k">&lt;</span>J;A<span class="pl-k">++</span>)P<span class="pl-k">=</span>c(I[A],Z[A],E),u<span class="pl-k">?</span>g(P.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span><span class="pl-k">+</span>r[q<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">y</span>,r[q<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">x</span><span class="pl-k">+</span>y)<span class="pl-k">:</span>g(P.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span>,h<span class="pl-k">+</span>y)}(<span class="pl-k">function</span>(){<span class="pl-k">if</span>(p){<span class="pl-k">var</span> a;a<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">*</span>U;<span class="pl-k">for</span>(A<span class="pl-k">=</span><span class="pl-c1">0</span>;A<span class="pl-k">&lt;</span>R;A<span class="pl-k">++</span>)Q<span class="pl-k">=</span>F[A],f(Q[<span class="pl-c1">2</span>]<span class="pl-k">+</span>a,Q[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a,Q[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a);a<span class="pl-k">=</span>q<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>n;a<span class="pl-k">*=</span>U;<span class="pl-k">for</span>(A<span class="pl-k">=</span><span class="pl-c1">0</span>;A<span class="pl-k">&lt;</span>R;A<span class="pl-k">++</span>)Q<span class="pl-k">=</span>F[A],f(Q[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a,Q[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a,Q[<span class="pl-c1">2</span>]<span class="pl-k">+</span>a)}<span class="pl-k">else</span>{<span class="pl-k">for</span>(A<span class="pl-k">=</span><span class="pl-c1">0</span>;A<span class="pl-k">&lt;</span>R;A<span class="pl-k">++</span>)Q<span class="pl-k">=</span>F[A],f(Q[<span class="pl-c1">2</span>],Q[<span class="pl-c1">1</span>],Q[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(A<span class="pl-k">=</span><span class="pl-c1">0</span>;A<span class="pl-k">&lt;</span>R;A<span class="pl-k">++</span>)Q<span class="pl-k">=</span>F[A],f(Q[<span class="pl-c1">0</span>]<span class="pl-k">+</span>U<span class="pl-k">*</span>q,Q[<span class="pl-c1">1</span>]<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L772" class="blob-num js-line-number" data-line-number="772"></td>
        <td id="LC772" class="blob-code blob-code-inner js-file-line">U<span class="pl-k">*</span>q,Q[<span class="pl-c1">2</span>]<span class="pl-k">+</span>U<span class="pl-k">*</span>q)}})();(<span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;e(K,a);a<span class="pl-k">+=</span>K.<span class="pl-c1">length</span>;z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span>C.<span class="pl-c1">length</span>;z<span class="pl-k">&lt;</span>D;z<span class="pl-k">++</span>)I<span class="pl-k">=</span>C[z],e(I,a),a<span class="pl-k">+=</span>I.<span class="pl-c1">length</span>})()};</td>
      </tr>
      <tr>
        <td id="L773" class="blob-num js-line-number" data-line-number="773"></td>
        <td id="LC773" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.ExtrudeGeometry.WorldUVGenerator<span class="pl-k">=</span>{<span class="pl-en">generateTopUV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">=</span>a.vertices;b<span class="pl-k">=</span>a[b];c<span class="pl-k">=</span>a[c];d<span class="pl-k">=</span>a[d];<span class="pl-k">return</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b.<span class="pl-c1">x</span>,b.<span class="pl-c1">y</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c.<span class="pl-c1">x</span>,c.<span class="pl-c1">y</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(d.<span class="pl-c1">x</span>,d.<span class="pl-c1">y</span>)]},<span class="pl-en">generateSideWallUV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){a<span class="pl-k">=</span>a.vertices;b<span class="pl-k">=</span>a[b];c<span class="pl-k">=</span>a[c];d<span class="pl-k">=</span>a[d];e<span class="pl-k">=</span>a[e];<span class="pl-k">return</span>.<span class="pl-c1">01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b.<span class="pl-c1">y</span><span class="pl-k">-</span>c.<span class="pl-c1">y</span>)<span class="pl-k">?</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>b.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>c.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(d.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>d.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(e.<span class="pl-c1">x</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>e.<span class="pl-c1">z</span>)]<span class="pl-k">:</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b.<span class="pl-c1">y</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>b.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c.<span class="pl-c1">y</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>c.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(d.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L774" class="blob-num js-line-number" data-line-number="774"></td>
        <td id="LC774" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span><span class="pl-k">-</span>d.<span class="pl-c1">z</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(e.<span class="pl-c1">y</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>e.<span class="pl-c1">z</span>)]}};<span class="pl-c1">THREE</span>.<span class="pl-en">ShapeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ShapeGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">Array</span>.isArray(a)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[a]);<span class="pl-v">this</span>.addShapeList(a,b);<span class="pl-v">this</span>.computeFaceNormals()};<span class="pl-c1">THREE.ShapeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.ShapeGeometry;<span class="pl-c1">THREE.ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShapeList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-v">this</span>.addShape(a[c],b);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L775" class="blob-num js-line-number" data-line-number="775"></td>
        <td id="LC775" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span>{});<span class="pl-k">var</span> c<span class="pl-k">=</span>b.material,d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b.UVGenerator<span class="pl-k">?</span><span class="pl-c1">THREE</span>.ExtrudeGeometry.WorldUVGenerator<span class="pl-k">:</span>b.UVGenerator,e,g,f,h<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>;e<span class="pl-k">=</span>a.extractPoints(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.curveSegments<span class="pl-k">?</span>b.curveSegments<span class="pl-k">:</span><span class="pl-c1">12</span>);<span class="pl-k">var</span> k<span class="pl-k">=</span>e.<span class="pl-c1">shape</span>,l<span class="pl-k">=</span>e.holes;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">THREE</span>.Shape.Utils.isClockWise(k))<span class="pl-k">for</span>(k<span class="pl-k">=</span>k.<span class="pl-c1">reverse</span>(),e<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>l.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)f<span class="pl-k">=</span>l[e],<span class="pl-c1">THREE</span>.Shape.Utils.isClockWise(f)<span class="pl-k">&amp;&amp;</span>(l[e]<span class="pl-k">=</span>f.<span class="pl-c1">reverse</span>());<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">THREE</span>.Shape.Utils.triangulateShape(k,l);e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span>l.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)f<span class="pl-k">=</span>l[e],</td>
      </tr>
      <tr>
        <td id="L776" class="blob-num js-line-number" data-line-number="776"></td>
        <td id="LC776" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=</span>k.<span class="pl-c1">concat</span>(f);l<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;g<span class="pl-k">=</span>n.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>l;e<span class="pl-k">++</span>)f<span class="pl-k">=</span>k[e],<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(f.<span class="pl-c1">x</span>,f.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>));<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>g;e<span class="pl-k">++</span>)l<span class="pl-k">=</span>n[e],k<span class="pl-k">=</span>l[<span class="pl-c1">0</span>]<span class="pl-k">+</span>h,f<span class="pl-k">=</span>l[<span class="pl-c1">1</span>]<span class="pl-k">+</span>h,l<span class="pl-k">=</span>l[<span class="pl-c1">2</span>]<span class="pl-k">+</span>h,<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(k,f,l,<span class="pl-c1">null</span>,<span class="pl-c1">null</span>,c)),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>(d.generateTopUV(<span class="pl-v">this</span>,k,f,l))};</td>
      </tr>
      <tr>
        <td id="L777" class="blob-num js-line-number" data-line-number="777"></td>
        <td id="LC777" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LatheGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>LatheGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{points<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,phiStart<span class="pl-k">:</span>c,phiLength<span class="pl-k">:</span>d};b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">12</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>),g<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>b,f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>b;f<span class="pl-k">&lt;=</span>h;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span>c<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>d,l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(k),n<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(k),k<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>p;k<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>a[k],q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;q.<span class="pl-c1">x</span><span class="pl-k">=</span>l<span class="pl-k">*</span>m.<span class="pl-c1">x</span><span class="pl-k">-</span>n<span class="pl-k">*</span>m.<span class="pl-c1">y</span>;q.<span class="pl-c1">y</span><span class="pl-k">=</span>n<span class="pl-k">*</span>m.<span class="pl-c1">x</span><span class="pl-k">+</span>l<span class="pl-k">*</span>m.<span class="pl-c1">y</span>;q.<span class="pl-c1">z</span><span class="pl-k">=</span>m.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(q)}c<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span>b;f<span class="pl-k">&lt;</span>h;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">0</span>,p<span class="pl-k">=</span>a.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;k<span class="pl-k">&lt;</span>p;k<span class="pl-k">++</span>){b<span class="pl-k">=</span>n<span class="pl-k">=</span>k<span class="pl-k">+</span>c<span class="pl-k">*</span>f;d<span class="pl-k">=</span>n<span class="pl-k">+</span>c;<span class="pl-k">var</span> l<span class="pl-k">=</span>n<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>c,n<span class="pl-k">=</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>,m<span class="pl-k">=</span>f<span class="pl-k">*</span>g,q<span class="pl-k">=</span>k<span class="pl-k">*</span>e,t<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L778" class="blob-num js-line-number" data-line-number="778"></td>
        <td id="LC778" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">+</span>g,r<span class="pl-k">=</span>q<span class="pl-k">+</span>e;<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(b,d,n));<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(m,q),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(t,q),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(m,r)]);<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(d,l,n));<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(t,q),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(t,r),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(m,r)])}<span class="pl-v">this</span>.mergeVertices();<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-v">this</span>.computeVertexNormals()};<span class="pl-c1">THREE.LatheGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.LatheGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.LatheGeometry;</td>
      </tr>
      <tr>
        <td id="L779" class="blob-num js-line-number" data-line-number="779"></td>
        <td id="LC779" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PlaneGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PlaneGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{width<span class="pl-k">:</span>a,height<span class="pl-k">:</span>b,widthSegments<span class="pl-k">:</span>c,heightSegments<span class="pl-k">:</span>d};<span class="pl-v">this</span>.fromBufferGeometry(<span class="pl-k">new</span> <span class="pl-en">THREE.PlaneBufferGeometry</span>(a,b,c,d))};<span class="pl-c1">THREE.PlaneGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.PlaneGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PlaneGeometry;</td>
      </tr>
      <tr>
        <td id="L780" class="blob-num js-line-number" data-line-number="780"></td>
        <td id="LC780" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PlaneGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.PlaneGeometry</span>(<span class="pl-v">this</span>.parameters.<span class="pl-c1">width</span>,<span class="pl-v">this</span>.parameters.<span class="pl-c1">height</span>,<span class="pl-v">this</span>.parameters.widthSegments,<span class="pl-v">this</span>.parameters.heightSegments)};</td>
      </tr>
      <tr>
        <td id="L781" class="blob-num js-line-number" data-line-number="781"></td>
        <td id="LC781" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PlaneBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PlaneBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{width<span class="pl-k">:</span>a,height<span class="pl-k">:</span>b,widthSegments<span class="pl-k">:</span>c,heightSegments<span class="pl-k">:</span>d};<span class="pl-k">var</span> e<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>;c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(c)<span class="pl-k">||</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(d)<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>,k<span class="pl-k">=</span>a<span class="pl-k">/</span>c,l<span class="pl-k">=</span>b<span class="pl-k">/</span>d;b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(f<span class="pl-k">*</span>h<span class="pl-k">*</span><span class="pl-c1">3</span>);a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(f<span class="pl-k">*</span>h<span class="pl-k">*</span><span class="pl-c1">3</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(f<span class="pl-k">*</span>h<span class="pl-k">*</span><span class="pl-c1">2</span>),p<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>h;q<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span>q<span class="pl-k">*</span>l<span class="pl-k">-</span>g,r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>f;r<span class="pl-k">++</span>)b[p]<span class="pl-k">=</span>r<span class="pl-k">*</span>k<span class="pl-k">-</span>e,b[p<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=-</span>t,a[p<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>,n[m]<span class="pl-k">=</span>r<span class="pl-k">/</span>c,n[m<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>q<span class="pl-k">/</span>d,p<span class="pl-k">+=</span><span class="pl-c1">3</span>,m<span class="pl-k">+=</span><span class="pl-c1">2</span>;p<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">=new</span> (<span class="pl-c1">65535</span><span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">?</span>Uint32Array<span class="pl-k">:</span>Uint16Array)(c<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L782" class="blob-num js-line-number" data-line-number="782"></td>
        <td id="LC782" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">*</span><span class="pl-c1">6</span>);<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>d;q<span class="pl-k">++</span>)<span class="pl-k">for</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>c;r<span class="pl-k">++</span>)g<span class="pl-k">=</span>r<span class="pl-k">+</span>f<span class="pl-k">*</span>(q<span class="pl-k">+</span><span class="pl-c1">1</span>),h<span class="pl-k">=</span>r<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>f<span class="pl-k">*</span>(q<span class="pl-k">+</span><span class="pl-c1">1</span>),k<span class="pl-k">=</span>r<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>f<span class="pl-k">*</span>q,e[p]<span class="pl-k">=</span>r<span class="pl-k">+</span>f<span class="pl-k">*</span>q,e[p<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>g,e[p<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>k,e[p<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>g,e[p<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>h,e[p<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>k,p<span class="pl-k">+=</span><span class="pl-c1">6</span>;<span class="pl-v">this</span>.setIndex(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(e,<span class="pl-c1">1</span>));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(a,<span class="pl-c1">3</span>));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(n,<span class="pl-c1">2</span>))};<span class="pl-c1">THREE.PlaneBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.PlaneBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PlaneBufferGeometry;</td>
      </tr>
      <tr>
        <td id="L783" class="blob-num js-line-number" data-line-number="783"></td>
        <td id="LC783" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PlaneBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PlaneBufferGeometry</span>(<span class="pl-v">this</span>.parameters.<span class="pl-c1">width</span>,<span class="pl-v">this</span>.parameters.<span class="pl-c1">height</span>,<span class="pl-v">this</span>.parameters.widthSegments,<span class="pl-v">this</span>.parameters.heightSegments);a.copy(<span class="pl-v">this</span>);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L784" class="blob-num js-line-number" data-line-number="784"></td>
        <td id="LC784" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">RingGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>RingGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{innerRadius<span class="pl-k">:</span>a,outerRadius<span class="pl-k">:</span>b,thetaSegments<span class="pl-k">:</span>c,phiSegments<span class="pl-k">:</span>d,thetaStart<span class="pl-k">:</span>e,thetaLength<span class="pl-k">:</span>g};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">50</span>;e<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">0</span>;g<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,c)<span class="pl-k">:</span><span class="pl-c1">8</span>;d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">1</span>,d)<span class="pl-k">:</span><span class="pl-c1">8</span>;<span class="pl-k">var</span> f,h<span class="pl-k">=</span>[],k<span class="pl-k">=</span>a,l<span class="pl-k">=</span>(b<span class="pl-k">-</span>a)<span class="pl-k">/</span>d;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>;a<span class="pl-k">++</span>){<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>;f<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span>e<span class="pl-k">+</span>f<span class="pl-k">/</span>c<span class="pl-k">*</span>g;n.<span class="pl-c1">x</span><span class="pl-k">=</span>k<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p);n.<span class="pl-c1">y</span><span class="pl-k">=</span>k<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p);<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(n);h.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((n.<span class="pl-c1">x</span><span class="pl-k">/</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,</td>
      </tr>
      <tr>
        <td id="L785" class="blob-num js-line-number" data-line-number="785"></td>
        <td id="LC785" class="blob-code blob-code-inner js-file-line">(n.<span class="pl-c1">y</span><span class="pl-k">/</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>))}k<span class="pl-k">+=</span>l}b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>d;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(e<span class="pl-k">=</span>a<span class="pl-k">*</span>(c<span class="pl-k">+</span><span class="pl-c1">1</span>),f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>)g<span class="pl-k">=</span>p<span class="pl-k">=</span>f<span class="pl-k">+</span>e,l<span class="pl-k">=</span>p<span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>,n<span class="pl-k">=</span>p<span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>,<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(g,l,n,[b.clone(),b.clone(),b.clone()])),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([h[g].clone(),h[l].clone(),h[n].clone()]),g<span class="pl-k">=</span>p,l<span class="pl-k">=</span>p<span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-c1">2</span>,n<span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(g,l,n,[b.clone(),b.clone(),b.clone()])),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([h[g].clone(),h[l].clone(),h[n].clone()]);<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k)};</td>
      </tr>
      <tr>
        <td id="L786" class="blob-num js-line-number" data-line-number="786"></td>
        <td id="LC786" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.RingGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.RingGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.RingGeometry;<span class="pl-c1">THREE.RingGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.RingGeometry</span>(<span class="pl-v">this</span>.parameters.innerRadius,<span class="pl-v">this</span>.parameters.outerRadius,<span class="pl-v">this</span>.parameters.thetaSegments,<span class="pl-v">this</span>.parameters.phiSegments,<span class="pl-v">this</span>.parameters.thetaStart,<span class="pl-v">this</span>.parameters.thetaLength)};</td>
      </tr>
      <tr>
        <td id="L787" class="blob-num js-line-number" data-line-number="787"></td>
        <td id="LC787" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SphereGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SphereGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,widthSegments<span class="pl-k">:</span>b,heightSegments<span class="pl-k">:</span>c,phiStart<span class="pl-k">:</span>d,phiLength<span class="pl-k">:</span>e,thetaStart<span class="pl-k">:</span>g,thetaLength<span class="pl-k">:</span>f};<span class="pl-v">this</span>.fromBufferGeometry(<span class="pl-k">new</span> <span class="pl-en">THREE.SphereBufferGeometry</span>(a,b,c,d,e,g,f))};<span class="pl-c1">THREE.SphereGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SphereGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SphereGeometry;</td>
      </tr>
      <tr>
        <td id="L788" class="blob-num js-line-number" data-line-number="788"></td>
        <td id="LC788" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SphereGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.widthSegments,<span class="pl-v">this</span>.parameters.heightSegments,<span class="pl-v">this</span>.parameters.phiStart,<span class="pl-v">this</span>.parameters.phiLength,<span class="pl-v">this</span>.parameters.thetaStart,<span class="pl-v">this</span>.parameters.thetaLength)};</td>
      </tr>
      <tr>
        <td id="L789" class="blob-num js-line-number" data-line-number="789"></td>
        <td id="LC789" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SphereBufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SphereBufferGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,widthSegments<span class="pl-k">:</span>b,heightSegments<span class="pl-k">:</span>c,phiStart<span class="pl-k">:</span>d,phiLength<span class="pl-k">:</span>e,thetaStart<span class="pl-k">:</span>g,thetaLength<span class="pl-k">:</span>f};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">50</span>;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b)<span class="pl-k">||</span><span class="pl-c1">8</span>);c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">2</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(c)<span class="pl-k">||</span><span class="pl-c1">6</span>);d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">0</span>;e<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;g<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">0</span>;f<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>g<span class="pl-k">+</span>f,k<span class="pl-k">=</span>(b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(c<span class="pl-k">+</span><span class="pl-c1">1</span>),l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>k),<span class="pl-c1">3</span>),n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L790" class="blob-num js-line-number" data-line-number="790"></td>
        <td id="LC790" class="blob-code blob-code-inner js-file-line">k),<span class="pl-c1">3</span>),k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>k),<span class="pl-c1">2</span>),p<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span>[],q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;=</span>c;t<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> r<span class="pl-k">=</span>[],u<span class="pl-k">=</span>t<span class="pl-k">/</span>c,w<span class="pl-k">=</span><span class="pl-c1">0</span>;w<span class="pl-k">&lt;=</span>b;w<span class="pl-k">++</span>){<span class="pl-k">var</span> v<span class="pl-k">=</span>w<span class="pl-k">/</span>b,B<span class="pl-k">=-</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(d<span class="pl-k">+</span>v<span class="pl-k">*</span>e)<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(g<span class="pl-k">+</span>u<span class="pl-k">*</span>f),x<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(g<span class="pl-k">+</span>u<span class="pl-k">*</span>f),H<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(d<span class="pl-k">+</span>v<span class="pl-k">*</span>e)<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(g<span class="pl-k">+</span>u<span class="pl-k">*</span>f);q.set(B,x,H).normalize();l.setXYZ(p,B,x,H);n.setXYZ(p,q.<span class="pl-c1">x</span>,q.<span class="pl-c1">y</span>,q.<span class="pl-c1">z</span>);k.setXY(p,v,<span class="pl-c1">1</span><span class="pl-k">-</span>u);r.<span class="pl-c1">push</span>(p);p<span class="pl-k">++</span>}m.<span class="pl-c1">push</span>(r)}d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;</span>c;t<span class="pl-k">++</span>)<span class="pl-k">for</span>(w<span class="pl-k">=</span><span class="pl-c1">0</span>;w<span class="pl-k">&lt;</span>b;w<span class="pl-k">++</span>)e<span class="pl-k">=</span>m[t][w<span class="pl-k">+</span><span class="pl-c1">1</span>],f<span class="pl-k">=</span>m[t][w],p<span class="pl-k">=</span>m[t<span class="pl-k">+</span><span class="pl-c1">1</span>][w],q<span class="pl-k">=</span>m[t<span class="pl-k">+</span><span class="pl-c1">1</span>][w<span class="pl-k">+</span><span class="pl-c1">1</span>],(<span class="pl-c1">0</span><span class="pl-k">!==</span>t<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>g)<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">push</span>(e,f,q),(t<span class="pl-k">!==</span>c<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">||</span>h<span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>)<span class="pl-k">&amp;&amp;</span>d.<span class="pl-c1">push</span>(f,p,q);<span class="pl-v">this</span>.setIndex(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(<span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(d),</td>
      </tr>
      <tr>
        <td id="L791" class="blob-num js-line-number" data-line-number="791"></td>
        <td id="LC791" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>));<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,l);<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,n);<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>,k);<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,a)};<span class="pl-c1">THREE.SphereBufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SphereBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SphereBufferGeometry;</td>
      </tr>
      <tr>
        <td id="L792" class="blob-num js-line-number" data-line-number="792"></td>
        <td id="LC792" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SphereBufferGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereBufferGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.widthSegments,<span class="pl-v">this</span>.parameters.heightSegments,<span class="pl-v">this</span>.parameters.phiStart,<span class="pl-v">this</span>.parameters.phiLength,<span class="pl-v">this</span>.parameters.thetaStart,<span class="pl-v">this</span>.parameters.thetaLength);a.copy(<span class="pl-v">this</span>);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L793" class="blob-num js-line-number" data-line-number="793"></td>
        <td id="LC793" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TextGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b<span class="pl-k">=</span>b<span class="pl-k">||</span>{};<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.FontUtils.generateShapes(a,b);b.amount<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b.<span class="pl-c1">height</span><span class="pl-k">?</span>b.<span class="pl-c1">height</span><span class="pl-k">:</span><span class="pl-c1">50</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b.bevelThickness<span class="pl-k">&amp;&amp;</span>(b.bevelThickness<span class="pl-k">=</span><span class="pl-c1">10</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b.bevelSize<span class="pl-k">&amp;&amp;</span>(b.bevelSize<span class="pl-k">=</span><span class="pl-c1">8</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b.bevelEnabled<span class="pl-k">&amp;&amp;</span>(b.bevelEnabled<span class="pl-k">=!</span><span class="pl-c1">1</span>);<span class="pl-c1">THREE</span>.ExtrudeGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,c,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TextGeometry<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE.TextGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.ExtrudeGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.TextGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.TextGeometry;</td>
      </tr>
      <tr>
        <td id="L794" class="blob-num js-line-number" data-line-number="794"></td>
        <td id="LC794" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TorusGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TorusGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,tube<span class="pl-k">:</span>b,radialSegments<span class="pl-k">:</span>c,tubularSegments<span class="pl-k">:</span>d,arc<span class="pl-k">:</span>e};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">100</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">40</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">8</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">6</span>;e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,f<span class="pl-k">=</span>[],h<span class="pl-k">=</span>[],k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;=</span>c;k<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;=</span>d;l<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span>l<span class="pl-k">/</span>d<span class="pl-k">*</span>e,p<span class="pl-k">=</span>k<span class="pl-k">/</span>c<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>;g.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(n);g.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(n);<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;m.<span class="pl-c1">x</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p))<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(n);m.<span class="pl-c1">y</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p))<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(n);m.<span class="pl-c1">z</span><span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p);<span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(m);f.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(l<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L795" class="blob-num js-line-number" data-line-number="795"></td>
        <td id="LC795" class="blob-code blob-code-inner js-file-line">d,k<span class="pl-k">/</span>c));h.<span class="pl-c1">push</span>(m.clone().<span class="pl-c1">sub</span>(g).normalize())}<span class="pl-k">for</span>(k<span class="pl-k">=</span><span class="pl-c1">1</span>;k<span class="pl-k">&lt;=</span>c;k<span class="pl-k">++</span>)<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;=</span>d;l<span class="pl-k">++</span>)a<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>k<span class="pl-k">+</span>l<span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(k<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>l<span class="pl-k">-</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(k<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>l,g<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>k<span class="pl-k">+</span>l,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,g,[h[a].clone(),h[b].clone(),h[g].clone()]),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(n),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([f[a].clone(),f[b].clone(),f[g].clone()]),n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(b,e,g,[h[b].clone(),h[e].clone(),h[g].clone()]),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(n),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([f[b].clone(),f[e].clone(),f[g].clone()]);<span class="pl-v">this</span>.computeFaceNormals()};</td>
      </tr>
      <tr>
        <td id="L796" class="blob-num js-line-number" data-line-number="796"></td>
        <td id="LC796" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.TorusGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.TorusGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.TorusGeometry;<span class="pl-c1">THREE.TorusGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.TorusGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.tube,<span class="pl-v">this</span>.parameters.radialSegments,<span class="pl-v">this</span>.parameters.tubularSegments,<span class="pl-v">this</span>.parameters.arc)};</td>
      </tr>
      <tr>
        <td id="L797" class="blob-num js-line-number" data-line-number="797"></td>
        <td id="LC797" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TorusKnotGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>){<span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);a<span class="pl-k">*=</span>b<span class="pl-k">/</span>c;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);f<span class="pl-k">*=</span>d<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">+</span>b)<span class="pl-k">*</span>.<span class="pl-c1">5</span>;g<span class="pl-k">=</span>d<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">+</span>b)<span class="pl-k">*</span>g<span class="pl-k">*</span>.<span class="pl-c1">5</span>;d<span class="pl-k">=</span>e<span class="pl-k">*</span>d<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a)<span class="pl-k">*</span>.<span class="pl-c1">5</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(f,g,d)}<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TorusKnotGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,tube<span class="pl-k">:</span>b,radialSegments<span class="pl-k">:</span>c,tubularSegments<span class="pl-k">:</span>d,p<span class="pl-k">:</span>e,q<span class="pl-k">:</span>g,heightScale<span class="pl-k">:</span>f};a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">100</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">40</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">64</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">2</span>;g<span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">3</span>;f<span class="pl-k">=</span>f<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-c1">Array</span>(c),l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>c;<span class="pl-k">++</span>m){k[m]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L798" class="blob-num js-line-number" data-line-number="798"></td>
        <td id="LC798" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Array</span>(d);<span class="pl-k">var</span> q<span class="pl-k">=</span>m<span class="pl-k">/</span>c<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,t<span class="pl-k">=</span>h(q,g,e,a,f),q<span class="pl-k">=</span>h(q<span class="pl-k">+</span>.<span class="pl-c1">01</span>,g,e,a,f);l.subVectors(q,t);n.addVectors(q,t);p.crossVectors(l,n);n.crossVectors(p,l);p.normalize();n.normalize();<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>d;<span class="pl-k">++</span>q){<span class="pl-k">var</span> r<span class="pl-k">=</span>q<span class="pl-k">/</span>d<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,u<span class="pl-k">=-</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(r),r<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(r),w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;w.<span class="pl-c1">x</span><span class="pl-k">=</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>u<span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>r<span class="pl-k">*</span>p.<span class="pl-c1">x</span>;w.<span class="pl-c1">y</span><span class="pl-k">=</span>t.<span class="pl-c1">y</span><span class="pl-k">+</span>u<span class="pl-k">*</span>n.<span class="pl-c1">y</span><span class="pl-k">+</span>r<span class="pl-k">*</span>p.<span class="pl-c1">y</span>;w.<span class="pl-c1">z</span><span class="pl-k">=</span>t.<span class="pl-c1">z</span><span class="pl-k">+</span>u<span class="pl-k">*</span>n.<span class="pl-c1">z</span><span class="pl-k">+</span>r<span class="pl-k">*</span>p.<span class="pl-c1">z</span>;k[m][q]<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(w)<span class="pl-k">-</span><span class="pl-c1">1</span>}}<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>c;<span class="pl-k">++</span>m)<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span>d;<span class="pl-k">++</span>q)e<span class="pl-k">=</span>(m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>c,g<span class="pl-k">=</span>(q<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>d,a<span class="pl-k">=</span>k[m][q],b<span class="pl-k">=</span>k[e][q],e<span class="pl-k">=</span>k[e][g],g<span class="pl-k">=</span>k[m][g],f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(m<span class="pl-k">/</span>c,q<span class="pl-k">/</span>d),l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c,</td>
      </tr>
      <tr>
        <td id="L799" class="blob-num js-line-number" data-line-number="799"></td>
        <td id="LC799" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">/</span>d),n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c,(q<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(m<span class="pl-k">/</span>c,(q<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,b,g)),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([f,l,p]),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(b,e,g)),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([l.clone(),n,p.clone()]);<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-v">this</span>.computeVertexNormals()};<span class="pl-c1">THREE.TorusKnotGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.TorusKnotGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.TorusKnotGeometry;</td>
      </tr>
      <tr>
        <td id="L800" class="blob-num js-line-number" data-line-number="800"></td>
        <td id="LC800" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.TorusKnotGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.TorusKnotGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.tube,<span class="pl-v">this</span>.parameters.radialSegments,<span class="pl-v">this</span>.parameters.tubularSegments,<span class="pl-v">this</span>.parameters.p,<span class="pl-v">this</span>.parameters.q,<span class="pl-v">this</span>.parameters.heightScale)};</td>
      </tr>
      <tr>
        <td id="L801" class="blob-num js-line-number" data-line-number="801"></td>
        <td id="LC801" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TubeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TubeGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{path<span class="pl-k">:</span>a,segments<span class="pl-k">:</span>b,radius<span class="pl-k">:</span>c,radialSegments<span class="pl-k">:</span>d,closed<span class="pl-k">:</span>e};b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">64</span>;c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;e<span class="pl-k">=</span>e<span class="pl-k">||!</span><span class="pl-c1">1</span>;g<span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">THREE</span>.TubeGeometry.NoTaper;<span class="pl-k">var</span> f<span class="pl-k">=</span>[],h,k,l<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>,n,p,m,q,t,r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,u,w,v;u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TubeGeometry</span>.FrenetFrames(a,b,e);w<span class="pl-k">=</span>u.normals;v<span class="pl-k">=</span>u.binormals;<span class="pl-v">this</span>.tangents<span class="pl-k">=</span>u.tangents;<span class="pl-v">this</span>.normals<span class="pl-k">=</span>w;<span class="pl-v">this</span>.binormals<span class="pl-k">=</span>v;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span>l;u<span class="pl-k">++</span>)<span class="pl-k">for</span>(f[u]<span class="pl-k">=</span>[],n<span class="pl-k">=</span>u<span class="pl-k">/</span>(l<span class="pl-k">-</span><span class="pl-c1">1</span>),t<span class="pl-k">=</span>a.getPointAt(n),h<span class="pl-k">=</span>w[u],k<span class="pl-k">=</span>v[u],m<span class="pl-k">=</span>c<span class="pl-k">*</span>g(n),n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>d;n<span class="pl-k">++</span>)p<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L802" class="blob-num js-line-number" data-line-number="802"></td>
        <td id="LC802" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">/</span>d<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,q<span class="pl-k">=-</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p),p<span class="pl-k">=</span>m<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p),r.copy(t),r.<span class="pl-c1">x</span><span class="pl-k">+=</span>q<span class="pl-k">*</span>h.<span class="pl-c1">x</span><span class="pl-k">+</span>p<span class="pl-k">*</span>k.<span class="pl-c1">x</span>,r.<span class="pl-c1">y</span><span class="pl-k">+=</span>q<span class="pl-k">*</span>h.<span class="pl-c1">y</span><span class="pl-k">+</span>p<span class="pl-k">*</span>k.<span class="pl-c1">y</span>,r.<span class="pl-c1">z</span><span class="pl-k">+=</span>q<span class="pl-k">*</span>h.<span class="pl-c1">z</span><span class="pl-k">+</span>p<span class="pl-k">*</span>k.<span class="pl-c1">z</span>,f[u][n]<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(r.<span class="pl-c1">x</span>,r.<span class="pl-c1">y</span>,r.<span class="pl-c1">z</span>))<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span>b;u<span class="pl-k">++</span>)<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>d;n<span class="pl-k">++</span>)g<span class="pl-k">=</span>e<span class="pl-k">?</span>(u<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>b<span class="pl-k">:</span>u<span class="pl-k">+</span><span class="pl-c1">1</span>,l<span class="pl-k">=</span>(n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>d,a<span class="pl-k">=</span>f[u][n],c<span class="pl-k">=</span>f[g][n],g<span class="pl-k">=</span>f[g][l],l<span class="pl-k">=</span>f[u][l],r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(u<span class="pl-k">/</span>b,n<span class="pl-k">/</span>d),w<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((u<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,n<span class="pl-k">/</span>d),v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((u<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,(n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(u<span class="pl-k">/</span>b,(n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,c,l)),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([r,w,h]),<span class="pl-v">this</span>.faces.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(c,</td>
      </tr>
      <tr>
        <td id="L803" class="blob-num js-line-number" data-line-number="803"></td>
        <td id="LC803" class="blob-code blob-code-inner js-file-line">g,l)),<span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([w.clone(),v,h.clone()]);<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-v">this</span>.computeVertexNormals()};<span class="pl-c1">THREE.TubeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.TubeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.TubeGeometry;<span class="pl-c1">THREE.TubeGeometry</span>.<span class="pl-en">NoTaper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">1</span>};<span class="pl-c1">THREE.TubeGeometry</span>.<span class="pl-en">SinusoidalTaper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span>a)};</td>
      </tr>
      <tr>
        <td id="L804" class="blob-num js-line-number" data-line-number="804"></td>
        <td id="LC804" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.TubeGeometry</span>.<span class="pl-en">FrenetFrames</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,e<span class="pl-k">=</span>[],g<span class="pl-k">=</span>[],f<span class="pl-k">=</span>[],h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;b<span class="pl-k">+=</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> l,n,p;<span class="pl-v">this</span>.tangents<span class="pl-k">=</span>e;<span class="pl-v">this</span>.normals<span class="pl-k">=</span>g;<span class="pl-v">this</span>.binormals<span class="pl-k">=</span>f;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>b;l<span class="pl-k">++</span>)n<span class="pl-k">=</span>l<span class="pl-k">/</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>),e[l]<span class="pl-k">=</span>a.getTangentAt(n),e[l].normalize();g[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>);n<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>);p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">z</span>);l<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>l,d.set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));n<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>n,d.set(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));p<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span>d.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);h.crossVectors(e[<span class="pl-c1">0</span>],d).normalize();g[<span class="pl-c1">0</span>].crossVectors(e[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L805" class="blob-num js-line-number" data-line-number="805"></td>
        <td id="LC805" class="blob-code blob-code-inner js-file-line">h);f[<span class="pl-c1">0</span>].crossVectors(e[<span class="pl-c1">0</span>],g[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;</span>b;l<span class="pl-k">++</span>)g[l]<span class="pl-k">=</span>g[l<span class="pl-k">-</span><span class="pl-c1">1</span>].clone(),f[l]<span class="pl-k">=</span>f[l<span class="pl-k">-</span><span class="pl-c1">1</span>].clone(),h.crossVectors(e[l<span class="pl-k">-</span><span class="pl-c1">1</span>],e[l]),<span class="pl-c1">1E-4</span><span class="pl-k">&lt;</span>h.<span class="pl-c1">length</span>()<span class="pl-k">&amp;&amp;</span>(h.normalize(),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(e[l<span class="pl-k">-</span><span class="pl-c1">1</span>].dot(e[l]),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),g[l].applyMatrix4(k.makeRotationAxis(h,d))),f[l].crossVectors(e[l],g[l]);<span class="pl-k">if</span>(c)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(g[<span class="pl-c1">0</span>].dot(g[b<span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)),d<span class="pl-k">/=</span>b<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span><span class="pl-k">&lt;</span>e[<span class="pl-c1">0</span>].dot(h.crossVectors(g[<span class="pl-c1">0</span>],g[b<span class="pl-k">-</span><span class="pl-c1">1</span>]))<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=-</span>d),l<span class="pl-k">=</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;</span>b;l<span class="pl-k">++</span>)g[l].applyMatrix4(k.makeRotationAxis(e[l],d<span class="pl-k">*</span>l)),f[l].crossVectors(e[l],g[l])};</td>
      </tr>
      <tr>
        <td id="L806" class="blob-num js-line-number" data-line-number="806"></td>
        <td id="LC806" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PolyhedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a.normalize().clone();b.<span class="pl-c1">index</span><span class="pl-k">=</span>k.vertices.<span class="pl-c1">push</span>(b)<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(a.<span class="pl-c1">z</span>,<span class="pl-k">-</span>a.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span>.<span class="pl-c1">5</span>;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>a.<span class="pl-c1">y</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(a.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>a.<span class="pl-c1">z</span><span class="pl-k">*</span>a.<span class="pl-c1">z</span>))<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span>.<span class="pl-c1">5</span>;b.uv<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,<span class="pl-c1">1</span><span class="pl-k">-</span>a);<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a.<span class="pl-c1">index</span>,b.<span class="pl-c1">index</span>,c.<span class="pl-c1">index</span>,[a.clone(),b.clone(),c.clone()],<span class="pl-k">void</span> <span class="pl-c1">0</span>,d);k.faces.<span class="pl-c1">push</span>(d);u.copy(a).<span class="pl-c1">add</span>(b).<span class="pl-c1">add</span>(c).divideScalar(<span class="pl-c1">3</span>);d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(u.<span class="pl-c1">z</span>,<span class="pl-k">-</span>u.<span class="pl-c1">x</span>);k.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])}<span class="pl-k">function</span> <span class="pl-en">f</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L807" class="blob-num js-line-number" data-line-number="807"></td>
        <td id="LC807" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>,b),d<span class="pl-k">=</span>e(k.vertices[a.a]),f<span class="pl-k">=</span>e(k.vertices[a.b]),h<span class="pl-k">=</span>e(k.vertices[a.c]),l<span class="pl-k">=</span>[],m<span class="pl-k">=</span>a.materialIndex,n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;=</span>c;n<span class="pl-k">++</span>){l[n]<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span>e(d.clone().lerp(h,n<span class="pl-k">/</span>c)),q<span class="pl-k">=</span>e(f.clone().lerp(h,n<span class="pl-k">/</span>c)),r<span class="pl-k">=</span>c<span class="pl-k">-</span>n,t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;=</span>r;t<span class="pl-k">++</span>)l[n][t]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>t<span class="pl-k">&amp;&amp;</span>n<span class="pl-k">===</span>c<span class="pl-k">?</span>p<span class="pl-k">:</span>e(p.clone().lerp(q,t<span class="pl-k">/</span>r))}<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>c;n<span class="pl-k">++</span>)<span class="pl-k">for</span>(t<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>n)<span class="pl-k">-</span><span class="pl-c1">1</span>;t<span class="pl-k">++</span>)d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(t<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">0</span><span class="pl-k">===</span>t<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">?</span>g(l[n][d<span class="pl-k">+</span><span class="pl-c1">1</span>],l[n<span class="pl-k">+</span><span class="pl-c1">1</span>][d],l[n][d],m)<span class="pl-k">:</span>g(l[n][d<span class="pl-k">+</span><span class="pl-c1">1</span>],l[n<span class="pl-k">+</span><span class="pl-c1">1</span>][d<span class="pl-k">+</span><span class="pl-c1">1</span>],l[n<span class="pl-k">+</span><span class="pl-c1">1</span>][d],m)}<span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">0</span><span class="pl-k">&gt;</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">===</span>a.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">1</span>,a.<span class="pl-c1">y</span>));<span class="pl-c1">0</span><span class="pl-k">===</span>b.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>b.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L808" class="blob-num js-line-number" data-line-number="808"></td>
        <td id="LC808" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span>.<span class="pl-c1">5</span>,a.<span class="pl-c1">y</span>));<span class="pl-k">return</span> a.clone()}<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>PolyhedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{vertices<span class="pl-k">:</span>a,indices<span class="pl-k">:</span>b,radius<span class="pl-k">:</span>c,detail<span class="pl-k">:</span>d};c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>;d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>a.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">+=</span><span class="pl-c1">3</span>)e(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a[l],a[l<span class="pl-k">+</span><span class="pl-c1">1</span>],a[l<span class="pl-k">+</span><span class="pl-c1">2</span>]));a<span class="pl-k">=</span><span class="pl-v">this</span>.vertices;<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span>[],m<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>b.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">+=</span><span class="pl-c1">3</span>,m<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>a[b[l]],t<span class="pl-k">=</span>a[b[l<span class="pl-k">+</span><span class="pl-c1">1</span>]],r<span class="pl-k">=</span>a[b[l<span class="pl-k">+</span><span class="pl-c1">2</span>]];p[m]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(q.<span class="pl-c1">index</span>,t.<span class="pl-c1">index</span>,r.<span class="pl-c1">index</span>,[q.clone(),t.clone(),r.clone()],<span class="pl-k">void</span> <span class="pl-c1">0</span>,m)}<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>p.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)f(p[l],d);l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>].<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L809" class="blob-num js-line-number" data-line-number="809"></td>
        <td id="LC809" class="blob-code blob-code-inner js-file-line">n;l<span class="pl-k">++</span>)b<span class="pl-k">=</span><span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>][l],d<span class="pl-k">=</span>b[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>,a<span class="pl-k">=</span>b[<span class="pl-c1">1</span>].<span class="pl-c1">x</span>,p<span class="pl-k">=</span>b[<span class="pl-c1">2</span>].<span class="pl-c1">x</span>,m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(d,<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,p)),q<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(d,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(a,p)),.<span class="pl-c1">9</span><span class="pl-k">&lt;</span>m<span class="pl-k">&amp;&amp;</span>.<span class="pl-c1">1</span><span class="pl-k">&gt;</span>q<span class="pl-k">&amp;&amp;</span>(.<span class="pl-c1">2</span><span class="pl-k">&gt;</span>d<span class="pl-k">&amp;&amp;</span>(b[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1</span>),.<span class="pl-c1">2</span><span class="pl-k">&gt;</span>a<span class="pl-k">&amp;&amp;</span>(b[<span class="pl-c1">1</span>].<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1</span>),.<span class="pl-c1">2</span><span class="pl-k">&gt;</span>p<span class="pl-k">&amp;&amp;</span>(b[<span class="pl-c1">2</span>].<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1</span>));l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-v">this</span>.vertices.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)<span class="pl-v">this</span>.vertices[l].multiplyScalar(c);<span class="pl-v">this</span>.mergeVertices();<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-v">this</span>.boundingSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sphere</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c)};<span class="pl-c1">THREE.PolyhedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PolyhedronGeometry;</td>
      </tr>
      <tr>
        <td id="L810" class="blob-num js-line-number" data-line-number="810"></td>
        <td id="LC810" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.PolyhedronGeometry</span>(<span class="pl-v">this</span>.parameters.vertices,<span class="pl-v">this</span>.parameters.indices,<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.detail)).copy(<span class="pl-v">this</span>)};<span class="pl-c1">THREE.PolyhedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>.copy.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L811" class="blob-num js-line-number" data-line-number="811"></td>
        <td id="LC811" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DodecahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">5</span>))<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>c;<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,c,<span class="pl-c1">0</span>,d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,d,c,<span class="pl-k">-</span>d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,c,<span class="pl-c1">0</span>,d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,d,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span>d,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,d,c,<span class="pl-c1">0</span>,d],[<span class="pl-c1">3</span>,<span class="pl-c1">11</span>,<span class="pl-c1">7</span>,<span class="pl-c1">3</span>,<span class="pl-c1">7</span>,<span class="pl-c1">15</span>,<span class="pl-c1">3</span>,<span class="pl-c1">15</span>,<span class="pl-c1">13</span>,<span class="pl-c1">7</span>,<span class="pl-c1">19</span>,<span class="pl-c1">17</span>,<span class="pl-c1">7</span>,<span class="pl-c1">17</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">6</span>,<span class="pl-c1">15</span>,<span class="pl-c1">17</span>,<span class="pl-c1">4</span>,<span class="pl-c1">8</span>,<span class="pl-c1">17</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>,<span class="pl-c1">17</span>,<span class="pl-c1">10</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">0</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">2</span>,<span class="pl-c1">8</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>,<span class="pl-c1">0</span>,<span class="pl-c1">12</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">18</span>,<span class="pl-c1">0</span>,<span class="pl-c1">18</span>,<span class="pl-c1">16</span>,<span class="pl-c1">6</span>,<span class="pl-c1">10</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>,<span class="pl-c1">13</span>,<span class="pl-c1">6</span>,<span class="pl-c1">13</span>,<span class="pl-c1">15</span>,<span class="pl-c1">2</span>,<span class="pl-c1">16</span>,<span class="pl-c1">18</span>,<span class="pl-c1">2</span>,<span class="pl-c1">18</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">13</span>,<span class="pl-c1">18</span>,<span class="pl-c1">1</span>,<span class="pl-c1">9</span>,<span class="pl-c1">18</span>,<span class="pl-c1">9</span>,<span class="pl-c1">11</span>,<span class="pl-c1">18</span>,<span class="pl-c1">11</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">14</span>,<span class="pl-c1">12</span>,<span class="pl-c1">4</span>,<span class="pl-c1">12</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">0</span>,<span class="pl-c1">8</span>,<span class="pl-c1">11</span>,<span class="pl-c1">9</span>,<span class="pl-c1">5</span>,<span class="pl-c1">11</span>,<span class="pl-c1">5</span>,<span class="pl-c1">19</span>,<span class="pl-c1">11</span>,<span class="pl-c1">19</span>,<span class="pl-c1">7</span>,<span class="pl-c1">19</span>,<span class="pl-c1">5</span>,<span class="pl-c1">14</span>,<span class="pl-c1">19</span>,<span class="pl-c1">14</span>,<span class="pl-c1">4</span>,<span class="pl-c1">19</span>,<span class="pl-c1">4</span>,<span class="pl-c1">17</span>,<span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L812" class="blob-num js-line-number" data-line-number="812"></td>
        <td id="LC812" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">12</span>,<span class="pl-c1">14</span>,<span class="pl-c1">1</span>,<span class="pl-c1">14</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>],a,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>DodecahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};<span class="pl-c1">THREE.DodecahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.DodecahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.DodecahedronGeometry;<span class="pl-c1">THREE.DodecahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DodecahedronGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.detail);a.copy(<span class="pl-v">this</span>);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L813" class="blob-num js-line-number" data-line-number="813"></td>
        <td id="LC813" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">IcosahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">5</span>))<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,[<span class="pl-k">-</span><span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>c,c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">11</span>,<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">7</span>,<span class="pl-c1">0</span>,<span class="pl-c1">7</span>,<span class="pl-c1">10</span>,<span class="pl-c1">0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>,<span class="pl-c1">5</span>,<span class="pl-c1">11</span>,<span class="pl-c1">4</span>,<span class="pl-c1">11</span>,<span class="pl-c1">10</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>,<span class="pl-c1">7</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">1</span>,<span class="pl-c1">8</span>,<span class="pl-c1">3</span>,<span class="pl-c1">9</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">3</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">3</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">4</span>,<span class="pl-c1">9</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">11</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>,<span class="pl-c1">8</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">9</span>,<span class="pl-c1">8</span>,<span class="pl-c1">1</span>],a,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>IcosahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};<span class="pl-c1">THREE.IcosahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L814" class="blob-num js-line-number" data-line-number="814"></td>
        <td id="LC814" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.IcosahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.IcosahedronGeometry;<span class="pl-c1">THREE.IcosahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.IcosahedronGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.detail);a.copy(<span class="pl-v">this</span>);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">OctahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>],a,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>OctahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};</td>
      </tr>
      <tr>
        <td id="L815" class="blob-num js-line-number" data-line-number="815"></td>
        <td id="LC815" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.OctahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.OctahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.OctahedronGeometry;<span class="pl-c1">THREE.OctahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OctahedronGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.detail);a.copy(<span class="pl-v">this</span>);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L816" class="blob-num js-line-number" data-line-number="816"></td>
        <td id="LC816" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TetrahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>],a,b);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>TetrahedronGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{radius<span class="pl-k">:</span>a,detail<span class="pl-k">:</span>b}};<span class="pl-c1">THREE.TetrahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.PolyhedronGeometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.TetrahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.TetrahedronGeometry;</td>
      </tr>
      <tr>
        <td id="L817" class="blob-num js-line-number" data-line-number="817"></td>
        <td id="LC817" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.TetrahedronGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TetrahedronGeometry</span>(<span class="pl-v">this</span>.parameters.radius,<span class="pl-v">this</span>.parameters.detail);a.copy(<span class="pl-v">this</span>);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L818" class="blob-num js-line-number" data-line-number="818"></td>
        <td id="LC818" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ParametricGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ParametricGeometry<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.parameters<span class="pl-k">=</span>{func<span class="pl-k">:</span>a,slices<span class="pl-k">:</span>b,stacks<span class="pl-k">:</span>c};<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.vertices,e<span class="pl-k">=</span><span class="pl-v">this</span>.faces,g<span class="pl-k">=</span><span class="pl-v">this</span>.faceVertexUvs[<span class="pl-c1">0</span>],f,h,k,l,n<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;=</span>c;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(l<span class="pl-k">=</span>f<span class="pl-k">/</span>c,h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;=</span>b;h<span class="pl-k">++</span>)k<span class="pl-k">=</span>h<span class="pl-k">/</span>b,k<span class="pl-k">=</span>a(k,l),d.<span class="pl-c1">push</span>(k);<span class="pl-k">var</span> p,m,q,t;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c;f<span class="pl-k">++</span>)<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>b;h<span class="pl-k">++</span>)a<span class="pl-k">=</span>f<span class="pl-k">*</span>n<span class="pl-k">+</span>h,d<span class="pl-k">=</span>f<span class="pl-k">*</span>n<span class="pl-k">+</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>,l<span class="pl-k">=</span>(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>n<span class="pl-k">+</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>,k<span class="pl-k">=</span>(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>n<span class="pl-k">+</span>h,p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(h<span class="pl-k">/</span>b,f<span class="pl-k">/</span>c),m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,f<span class="pl-k">/</span>c),q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>((h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c),t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(h<span class="pl-k">/</span>b,(f<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c),e.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,</td>
      </tr>
      <tr>
        <td id="L819" class="blob-num js-line-number" data-line-number="819"></td>
        <td id="LC819" class="blob-code blob-code-inner js-file-line">d,k)),g.<span class="pl-c1">push</span>([p,m,t]),e.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(d,l,k)),g.<span class="pl-c1">push</span>([m.clone(),q,t.clone()]);<span class="pl-v">this</span>.computeFaceNormals();<span class="pl-v">this</span>.computeVertexNormals()};<span class="pl-c1">THREE.ParametricGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Geometry.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.ParametricGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.ParametricGeometry;</td>
      </tr>
      <tr>
        <td id="L820" class="blob-num js-line-number" data-line-number="820"></td>
        <td id="LC820" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WireframeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],c<span class="pl-k">=</span>{},<span class="pl-en">d</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">-</span>b},e<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry){<span class="pl-k">var</span> g<span class="pl-k">=</span>a.vertices,f<span class="pl-k">=</span>a.faces,h<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>f.<span class="pl-c1">length</span>);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span>f.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>l;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span>f[a],p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>){b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>n[e[p]];b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>n[e[(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>]];b.<span class="pl-c1">sort</span>(d);<span class="pl-k">var</span> m<span class="pl-k">=</span>b.<span class="pl-c1">toString</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c[m]<span class="pl-k">&amp;&amp;</span>(k[<span class="pl-c1">2</span><span class="pl-k">*</span>h]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>],k[<span class="pl-c1">2</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>],c[m]<span class="pl-k">=!</span><span class="pl-c1">0</span>,h<span class="pl-k">++</span>)}b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>h);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span>h;a<span class="pl-k">&lt;</span>l;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">2</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)c<span class="pl-k">=</span>g[k[<span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">+</span>p]],h<span class="pl-k">=</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>p,b[h<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>c.<span class="pl-c1">x</span>,b[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L821" class="blob-num js-line-number" data-line-number="821"></td>
        <td id="LC821" class="blob-code blob-code-inner js-file-line">b[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>))}<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span>a.<span class="pl-c1">index</span>){l<span class="pl-k">=</span>a.<span class="pl-c1">index</span>.array;g<span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>.position;e<span class="pl-k">=</span>a.drawcalls;h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">0</span><span class="pl-k">===</span>e.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>a.addDrawCall(<span class="pl-c1">0</span>,l.<span class="pl-c1">length</span>);k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>l.<span class="pl-c1">length</span>);f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>n;<span class="pl-k">++</span>f){a<span class="pl-k">=</span>e[f];p<span class="pl-k">=</span>a.<span class="pl-c1">start</span>;m<span class="pl-k">=</span>a.count;a<span class="pl-k">=</span>p;<span class="pl-k">for</span>(<span class="pl-k">var</span> q<span class="pl-k">=</span>p<span class="pl-k">+</span>m;a<span class="pl-k">&lt;</span>q;a<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>l[a<span class="pl-k">+</span>p],b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l[a<span class="pl-k">+</span>(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>],b.<span class="pl-c1">sort</span>(d),m<span class="pl-k">=</span>b.<span class="pl-c1">toString</span>(),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c[m]<span class="pl-k">&amp;&amp;</span>(k[<span class="pl-c1">2</span><span class="pl-k">*</span>h]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>],k[<span class="pl-c1">2</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>],c[m]<span class="pl-k">=!</span><span class="pl-c1">0</span>,h<span class="pl-k">++</span>)}b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>h);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L822" class="blob-num js-line-number" data-line-number="822"></td>
        <td id="LC822" class="blob-code blob-code-inner js-file-line">h;a<span class="pl-k">&lt;</span>l;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">2</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)h<span class="pl-k">=</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>p,c<span class="pl-k">=</span>k[<span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">+</span>p],b[h<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>g.getX(c),b[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>g.getY(c),b[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>g.getZ(c)}<span class="pl-k">else</span> <span class="pl-k">for</span>(g<span class="pl-k">=</span>a.<span class="pl-c1">attributes</span>.position.array,h<span class="pl-k">=</span>g.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>,k<span class="pl-k">=</span>h<span class="pl-k">/</span><span class="pl-c1">3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>h),a<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span>k;a<span class="pl-k">&lt;</span>l;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>p;p<span class="pl-k">++</span>)h<span class="pl-k">=</span><span class="pl-c1">18</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>p,k<span class="pl-k">=</span><span class="pl-c1">9</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>p,b[h<span class="pl-k">+</span><span class="pl-c1">0</span>]<span class="pl-k">=</span>g[k],b[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>g[k<span class="pl-k">+</span><span class="pl-c1">1</span>],b[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>g[k<span class="pl-k">+</span><span class="pl-c1">2</span>],c<span class="pl-k">=</span><span class="pl-c1">9</span><span class="pl-k">*</span>a<span class="pl-k">+</span>(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">3</span>,b[h<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>g[c],b[h<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>g[c<span class="pl-k">+</span><span class="pl-c1">1</span>],b[h<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>g[c<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-v">this</span>.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>))}};<span class="pl-c1">THREE.WireframeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.BufferGeometry.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L823" class="blob-num js-line-number" data-line-number="823"></td>
        <td id="LC823" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.WireframeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.WireframeGeometry;<span class="pl-c1">THREE</span>.<span class="pl-en">AxisHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a]),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,.<span class="pl-c1">6</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">6</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,.<span class="pl-c1">6</span>,<span class="pl-c1">1</span>]);a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;a.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">3</span>));a.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">3</span>));b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.VertexColors});<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b)};<span class="pl-c1">THREE.AxisHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L824" class="blob-num js-line-number" data-line-number="824"></td>
        <td id="LC824" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.AxisHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.AxisHelper;</td>
      </tr>
      <tr>
        <td id="L825" class="blob-num js-line-number" data-line-number="825"></td>
        <td id="LC825" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ArrowHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;a.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-c1">0</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>);b.translate(<span class="pl-c1">0</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">g</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">16776960</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>f<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>.<span class="pl-c1">2</span><span class="pl-k">*</span>e);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>.<span class="pl-c1">2</span><span class="pl-k">*</span>f);<span class="pl-v">this</span>.position.copy(d);f<span class="pl-k">&lt;</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.line<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(a,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>g})),<span class="pl-v">this</span>.line.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>,<span class="pl-v">this</span>.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.line));<span class="pl-v">this</span>.cone<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(b,<span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span>g}));</td>
      </tr>
      <tr>
        <td id="L826" class="blob-num js-line-number" data-line-number="826"></td>
        <td id="LC826" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.cone.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.cone);<span class="pl-v">this</span>.setDirection(c);<span class="pl-v">this</span>.setLength(e,f,h)}}();<span class="pl-c1">THREE.ArrowHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.ArrowHelper;<span class="pl-c1">THREE.ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">c</span>){.<span class="pl-c1">99999</span><span class="pl-k">&lt;</span>c.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-v">this</span>.quaternion.set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)<span class="pl-k">:-</span>.<span class="pl-c1">99999</span><span class="pl-k">&gt;</span>c.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-v">this</span>.quaternion.set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)<span class="pl-k">:</span>(a.set(c.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>c.<span class="pl-c1">x</span>).normalize(),b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(c.<span class="pl-c1">y</span>),<span class="pl-v">this</span>.quaternion.setFromAxisAngle(a,b))}}();</td>
      </tr>
      <tr>
        <td id="L827" class="blob-num js-line-number" data-line-number="827"></td>
        <td id="LC827" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span>.<span class="pl-c1">2</span><span class="pl-k">*</span>a);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>.<span class="pl-c1">2</span><span class="pl-k">*</span>b);b<span class="pl-k">&lt;</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.line.scale.set(<span class="pl-c1">1</span>,a<span class="pl-k">-</span>b,<span class="pl-c1">1</span>),<span class="pl-v">this</span>.line.updateMatrix());<span class="pl-v">this</span>.cone.scale.set(c,b,c);<span class="pl-v">this</span>.cone.position.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.cone.updateMatrix()};<span class="pl-c1">THREE.ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-v">this</span>.line<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.line.material.<span class="pl-c1">color</span>.set(a);<span class="pl-v">this</span>.cone.material.<span class="pl-c1">color</span>.set(a)};</td>
      </tr>
      <tr>
        <td id="L828" class="blob-num js-line-number" data-line-number="828"></td>
        <td id="LC828" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BoxHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">7</span>,<span class="pl-c1">4</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">3</span>,<span class="pl-c1">7</span>]),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">24</span>),d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;d.setIndex(<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(b,<span class="pl-c1">1</span>));d.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BufferAttribute</span>(c,<span class="pl-c1">3</span>));<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16776960</span>}));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.update(a)};<span class="pl-c1">THREE.BoxHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.BoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.BoxHelper;</td>
      </tr>
      <tr>
        <td id="L829" class="blob-num js-line-number" data-line-number="829"></td>
        <td id="LC829" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.BoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">b</span>){a.setFromObject(b);<span class="pl-k">if</span>(<span class="pl-k">!</span>a.empty()){b<span class="pl-k">=</span>a.min;<span class="pl-k">var</span> c<span class="pl-k">=</span>a.max,d<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.<span class="pl-c1">attributes</span>.position,e<span class="pl-k">=</span>d.array;e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>c.<span class="pl-c1">x</span>;e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>c.<span class="pl-c1">y</span>;e[<span class="pl-c1">2</span>]<span class="pl-k">=</span>c.<span class="pl-c1">z</span>;e[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b.<span class="pl-c1">x</span>;e[<span class="pl-c1">4</span>]<span class="pl-k">=</span>c.<span class="pl-c1">y</span>;e[<span class="pl-c1">5</span>]<span class="pl-k">=</span>c.<span class="pl-c1">z</span>;e[<span class="pl-c1">6</span>]<span class="pl-k">=</span>b.<span class="pl-c1">x</span>;e[<span class="pl-c1">7</span>]<span class="pl-k">=</span>b.<span class="pl-c1">y</span>;e[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c.<span class="pl-c1">z</span>;e[<span class="pl-c1">9</span>]<span class="pl-k">=</span>c.<span class="pl-c1">x</span>;e[<span class="pl-c1">10</span>]<span class="pl-k">=</span>b.<span class="pl-c1">y</span>;e[<span class="pl-c1">11</span>]<span class="pl-k">=</span>c.<span class="pl-c1">z</span>;e[<span class="pl-c1">12</span>]<span class="pl-k">=</span>c.<span class="pl-c1">x</span>;e[<span class="pl-c1">13</span>]<span class="pl-k">=</span>c.<span class="pl-c1">y</span>;e[<span class="pl-c1">14</span>]<span class="pl-k">=</span>b.<span class="pl-c1">z</span>;e[<span class="pl-c1">15</span>]<span class="pl-k">=</span>b.<span class="pl-c1">x</span>;e[<span class="pl-c1">16</span>]<span class="pl-k">=</span>c.<span class="pl-c1">y</span>;e[<span class="pl-c1">17</span>]<span class="pl-k">=</span>b.<span class="pl-c1">z</span>;e[<span class="pl-c1">18</span>]<span class="pl-k">=</span>b.<span class="pl-c1">x</span>;e[<span class="pl-c1">19</span>]<span class="pl-k">=</span>b.<span class="pl-c1">y</span>;e[<span class="pl-c1">20</span>]<span class="pl-k">=</span>b.<span class="pl-c1">z</span>;e[<span class="pl-c1">21</span>]<span class="pl-k">=</span>c.<span class="pl-c1">x</span>;e[<span class="pl-c1">22</span>]<span class="pl-k">=</span>b.<span class="pl-c1">y</span>;e[<span class="pl-c1">23</span>]<span class="pl-k">=</span>b.<span class="pl-c1">z</span>;d.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.geometry.computeBoundingSphere()}}}();</td>
      </tr>
      <tr>
        <td id="L830" class="blob-num js-line-number" data-line-number="830"></td>
        <td id="LC830" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BoundingBoxHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">8947848</span>;<span class="pl-v">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.box<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Box3</span>;<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.BoxGeometry</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span>c,wireframe<span class="pl-k">:!</span><span class="pl-c1">0</span>}))};<span class="pl-c1">THREE.BoundingBoxHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.BoundingBoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.BoundingBoxHelper;<span class="pl-c1">THREE.BoundingBoxHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.box.setFromObject(<span class="pl-v">this</span>.<span class="pl-c1">object</span>);<span class="pl-v">this</span>.box.<span class="pl-c1">size</span>(<span class="pl-v">this</span>.scale);<span class="pl-v">this</span>.box.center(<span class="pl-v">this</span>.position)};</td>
      </tr>
      <tr>
        <td id="L831" class="blob-num js-line-number" data-line-number="831"></td>
        <td id="LC831" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CameraHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">d</span>){c(a,d);c(b,d)}<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){d.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);d.colors.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(b));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>g[a]<span class="pl-k">&amp;&amp;</span>(g[a]<span class="pl-k">=</span>[]);g[a].<span class="pl-c1">push</span>(d.vertices.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)}<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span>,vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.FaceColors}),g<span class="pl-k">=</span>{};b(<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);</td>
      </tr>
      <tr>
        <td id="L832" class="blob-num js-line-number" data-line-number="832"></td>
        <td id="LC832" class="blob-code blob-code-inner js-file-line">b(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16777215</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>cn1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cn2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>cn3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cn4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>cf1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cf2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);b(<span class="pl-s"><span class="pl-pds">&quot;</span>cf3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cf4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d,e);<span class="pl-v">this</span>.camera<span class="pl-k">=</span>a;<span class="pl-v">this</span>.matrix<span class="pl-k">=</span>a.matrixWorld;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.pointMap<span class="pl-k">=</span>g;<span class="pl-v">this</span>.update()};<span class="pl-c1">THREE.CameraHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L833" class="blob-num js-line-number" data-line-number="833"></td>
        <td id="LC833" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CameraHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.CameraHelper;</td>
      </tr>
      <tr>
        <td id="L834" class="blob-num js-line-number" data-line-number="834"></td>
        <td id="LC834" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.CameraHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Camera</span>,<span class="pl-en">e</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>){c.set(f,h,k).unproject(d);e<span class="pl-k">=</span>b[e];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>h;f<span class="pl-k">++</span>)a.vertices[e[f]].copy(c)};<span class="pl-k">return</span> <span class="pl-k">function</span>(){a<span class="pl-k">=</span><span class="pl-v">this</span>.geometry;b<span class="pl-k">=</span><span class="pl-v">this</span>.pointMap;d.projectionMatrix.copy(<span class="pl-v">this</span>.camera.projectionMatrix);e(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,.<span class="pl-c1">7</span>,<span class="pl-c1">1.1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span>.<span class="pl-c1">7</span>,<span class="pl-c1">1.1</span>,</td>
      </tr>
      <tr>
        <td id="L835" class="blob-num js-line-number" data-line-number="835"></td>
        <td id="LC835" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cf1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cf2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cf3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cf4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cn1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cn2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cn3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);e(<span class="pl-s"><span class="pl-pds">&quot;</span>cn4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);a.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>}}();</td>
      </tr>
      <tr>
        <td id="L836" class="blob-num js-line-number" data-line-number="836"></td>
        <td id="LC836" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DirectionalLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.light<span class="pl-k">=</span>a;<span class="pl-v">this</span>.light.updateMatrixWorld();<span class="pl-v">this</span>.matrix<span class="pl-k">=</span>a.matrixWorld;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;c.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>b,b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(b,b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(b,<span class="pl-k">-</span>b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>b,<span class="pl-k">-</span>b,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>b,b,<span class="pl-c1">0</span>));<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({fog<span class="pl-k">:!</span><span class="pl-c1">1</span>});d.<span class="pl-c1">color</span>.copy(<span class="pl-v">this</span>.light.<span class="pl-c1">color</span>).multiplyScalar(<span class="pl-v">this</span>.light.intensity);<span class="pl-v">this</span>.lightPlane<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(c,d);<span class="pl-v">this</span>.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.lightPlane);</td>
      </tr>
      <tr>
        <td id="L837" class="blob-num js-line-number" data-line-number="837"></td>
        <td id="LC837" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;c.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>);d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({fog<span class="pl-k">:!</span><span class="pl-c1">1</span>});d.<span class="pl-c1">color</span>.copy(<span class="pl-v">this</span>.light.<span class="pl-c1">color</span>).multiplyScalar(<span class="pl-v">this</span>.light.intensity);<span class="pl-v">this</span>.targetLine<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(c,d);<span class="pl-v">this</span>.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.targetLine);<span class="pl-v">this</span>.update()};<span class="pl-c1">THREE.DirectionalLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.DirectionalLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.DirectionalLightHelper;</td>
      </tr>
      <tr>
        <td id="L838" class="blob-num js-line-number" data-line-number="838"></td>
        <td id="LC838" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.DirectionalLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.lightPlane.geometry.dispose();<span class="pl-v">this</span>.lightPlane.material.dispose();<span class="pl-v">this</span>.targetLine.geometry.dispose();<span class="pl-v">this</span>.targetLine.material.dispose()};</td>
      </tr>
      <tr>
        <td id="L839" class="blob-num js-line-number" data-line-number="839"></td>
        <td id="LC839" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.DirectionalLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){a.setFromMatrixPosition(<span class="pl-v">this</span>.light.matrixWorld);b.setFromMatrixPosition(<span class="pl-v">this</span>.light.<span class="pl-c1">target</span>.matrixWorld);c.subVectors(b,a);<span class="pl-v">this</span>.lightPlane.lookAt(c);<span class="pl-v">this</span>.lightPlane.material.<span class="pl-c1">color</span>.copy(<span class="pl-v">this</span>.light.<span class="pl-c1">color</span>).multiplyScalar(<span class="pl-v">this</span>.light.intensity);<span class="pl-v">this</span>.targetLine.geometry.vertices[<span class="pl-c1">1</span>].copy(c);<span class="pl-v">this</span>.targetLine.geometry.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.targetLine.material.<span class="pl-c1">color</span>.copy(<span class="pl-v">this</span>.lightPlane.material.<span class="pl-c1">color</span>)}}();</td>
      </tr>
      <tr>
        <td id="L840" class="blob-num js-line-number" data-line-number="840"></td>
        <td id="LC840" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">EdgesHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">16777215</span>;<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.EdgesGeometry</span>(a.geometry,c),<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>b}));<span class="pl-v">this</span>.matrix<span class="pl-k">=</span>a.matrixWorld;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.EdgesHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.EdgesHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.EdgesHelper;</td>
      </tr>
      <tr>
        <td id="L841" class="blob-num js-line-number" data-line-number="841"></td>
        <td id="LC841" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">FaceNormalsHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">size</span><span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;a<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">16776960</span>;d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">object</span>.geometry;c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry<span class="pl-k">?</span>b<span class="pl-k">=</span>c.faces.<span class="pl-c1">length</span><span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.<span class="pl-pds">&quot;</span></span>);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>b,<span class="pl-c1">3</span>);c.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,b);<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,c,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>a,linewidth<span class="pl-k">:</span>d}));<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L842" class="blob-num js-line-number" data-line-number="842"></td>
        <td id="LC842" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.update()};<span class="pl-c1">THREE.FaceNormalsHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.FaceNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.FaceNormalsHelper;</td>
      </tr>
      <tr>
        <td id="L843" class="blob-num js-line-number" data-line-number="843"></td>
        <td id="LC843" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.FaceNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">object</span>.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>);c.getNormalMatrix(<span class="pl-v">this</span>.<span class="pl-c1">object</span>.matrixWorld);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">object</span>.matrixWorld,e<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.<span class="pl-c1">attributes</span>.position,g<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">object</span>.geometry,f<span class="pl-k">=</span>g.vertices,g<span class="pl-k">=</span>g.faces,h<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span>g.<span class="pl-c1">length</span>;k<span class="pl-k">&lt;</span>l;k<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span>g[k],p<span class="pl-k">=</span>n.normal;a.copy(f[n.a]).<span class="pl-c1">add</span>(f[n.b]).<span class="pl-c1">add</span>(f[n.c]).divideScalar(<span class="pl-c1">3</span>).applyMatrix4(d);b.copy(p).applyMatrix3(c).normalize().multiplyScalar(<span class="pl-v">this</span>.<span class="pl-c1">size</span>).<span class="pl-c1">add</span>(a);</td>
      </tr>
      <tr>
        <td id="L844" class="blob-num js-line-number" data-line-number="844"></td>
        <td id="LC844" class="blob-code blob-code-inner js-file-line">e.setXYZ(h,a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);h<span class="pl-k">+=</span><span class="pl-c1">1</span>;e.setXYZ(h,b.<span class="pl-c1">x</span>,b.<span class="pl-c1">y</span>,b.<span class="pl-c1">z</span>);h<span class="pl-k">+=</span><span class="pl-c1">1</span>}e.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>}}();</td>
      </tr>
      <tr>
        <td id="L845" class="blob-num js-line-number" data-line-number="845"></td>
        <td id="LC845" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">GridHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.VertexColors});<span class="pl-v">this</span>.color1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">4473924</span>);<span class="pl-v">this</span>.color2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">8947848</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=-</span>a;e<span class="pl-k">&lt;=</span>a;e<span class="pl-k">+=</span>b){c.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,e),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a,<span class="pl-c1">0</span>,e),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(e,<span class="pl-c1">0</span>,<span class="pl-k">-</span>a),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(e,<span class="pl-c1">0</span>,a));<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">?</span><span class="pl-v">this</span>.color1<span class="pl-k">:</span><span class="pl-v">this</span>.color2;c.colors.<span class="pl-c1">push</span>(g,g,g,g)}<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,c,d)};<span class="pl-c1">THREE.GridHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L846" class="blob-num js-line-number" data-line-number="846"></td>
        <td id="LC846" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.GridHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.GridHelper;<span class="pl-c1">THREE.GridHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setColors</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.color1.set(a);<span class="pl-v">this</span>.color2.set(b);<span class="pl-v">this</span>.geometry.colorsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L847" class="blob-num js-line-number" data-line-number="847"></td>
        <td id="LC847" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">HemisphereLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.light<span class="pl-k">=</span>a;<span class="pl-v">this</span>.light.updateMatrixWorld();<span class="pl-v">this</span>.matrix<span class="pl-k">=</span>a.matrixWorld;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.colors<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>];<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(b,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>);c.rotateX(<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">8</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)c.faces[d].<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-v">this</span>.colors[<span class="pl-c1">4</span><span class="pl-k">&gt;</span>d<span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>];d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.FaceColors,wireframe<span class="pl-k">:!</span><span class="pl-c1">0</span>});<span class="pl-v">this</span>.lightSphere<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(c,d);<span class="pl-v">this</span>.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.lightSphere);<span class="pl-v">this</span>.update()};</td>
      </tr>
      <tr>
        <td id="L848" class="blob-num js-line-number" data-line-number="848"></td>
        <td id="LC848" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.HemisphereLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.HemisphereLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.HemisphereLightHelper;<span class="pl-c1">THREE.HemisphereLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.lightSphere.geometry.dispose();<span class="pl-v">this</span>.lightSphere.material.dispose()};</td>
      </tr>
      <tr>
        <td id="L849" class="blob-num js-line-number" data-line-number="849"></td>
        <td id="LC849" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.HemisphereLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-v">this</span>.colors[<span class="pl-c1">0</span>].copy(<span class="pl-v">this</span>.light.<span class="pl-c1">color</span>).multiplyScalar(<span class="pl-v">this</span>.light.intensity);<span class="pl-v">this</span>.colors[<span class="pl-c1">1</span>].copy(<span class="pl-v">this</span>.light.groundColor).multiplyScalar(<span class="pl-v">this</span>.light.intensity);<span class="pl-v">this</span>.lightSphere.lookAt(a.setFromMatrixPosition(<span class="pl-v">this</span>.light.matrixWorld).negate());<span class="pl-v">this</span>.lightSphere.geometry.colorsNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>}}();</td>
      </tr>
      <tr>
        <td id="L850" class="blob-num js-line-number" data-line-number="850"></td>
        <td id="LC850" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PointLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-v">this</span>.light<span class="pl-k">=</span>a;<span class="pl-v">this</span>.light.updateMatrixWorld();<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(b,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>),d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({wireframe<span class="pl-k">:!</span><span class="pl-c1">0</span>,fog<span class="pl-k">:!</span><span class="pl-c1">1</span>});d.<span class="pl-c1">color</span>.copy(<span class="pl-v">this</span>.light.<span class="pl-c1">color</span>).multiplyScalar(<span class="pl-v">this</span>.light.intensity);<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,c,d);<span class="pl-v">this</span>.matrix<span class="pl-k">=</span><span class="pl-v">this</span>.light.matrixWorld;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.PointLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.PointLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.PointLightHelper;</td>
      </tr>
      <tr>
        <td id="L851" class="blob-num js-line-number" data-line-number="851"></td>
        <td id="LC851" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.PointLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.geometry.dispose();<span class="pl-v">this</span>.material.dispose()};<span class="pl-c1">THREE.PointLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.material.<span class="pl-c1">color</span>.copy(<span class="pl-v">this</span>.light.<span class="pl-c1">color</span>).multiplyScalar(<span class="pl-v">this</span>.light.intensity)};</td>
      </tr>
      <tr>
        <td id="L852" class="blob-num js-line-number" data-line-number="852"></td>
        <td id="LC852" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SkeletonHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.bones<span class="pl-k">=</span><span class="pl-v">this</span>.getBoneList(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-v">this</span>.bones[c].<span class="pl-c1">parent</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Bone<span class="pl-k">&amp;&amp;</span>(b.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>),b.vertices.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>),b.colors.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)),b.colors.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)));b.dynamic<span class="pl-k">=!</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.VertexColors,depthTest<span class="pl-k">:!</span><span class="pl-c1">1</span>,depthWrite<span class="pl-k">:!</span><span class="pl-c1">1</span>,transparent<span class="pl-k">:!</span><span class="pl-c1">0</span>});<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,b,c);<span class="pl-v">this</span>.root<span class="pl-k">=</span>a;<span class="pl-v">this</span>.matrix<span class="pl-k">=</span>a.matrixWorld;</td>
      </tr>
      <tr>
        <td id="L853" class="blob-num js-line-number" data-line-number="853"></td>
        <td id="LC853" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.update()};<span class="pl-c1">THREE.SkeletonHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SkeletonHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SkeletonHelper;<span class="pl-c1">THREE.SkeletonHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getBoneList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>[];a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Bone<span class="pl-k">&amp;&amp;</span>b.<span class="pl-c1">push</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.children.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)b.push.<span class="pl-c1">apply</span>(b,<span class="pl-v">this</span>.getBoneList(a.children[c]));<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L854" class="blob-num js-line-number" data-line-number="854"></td>
        <td id="LC854" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SkeletonHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.geometry,b<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).getInverse(<span class="pl-v">this</span>.root.matrixWorld),c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>.bones.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.bones[e];g.<span class="pl-c1">parent</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Bone<span class="pl-k">&amp;&amp;</span>(c.multiplyMatrices(b,g.matrixWorld),a.vertices[d].setFromMatrixPosition(c),c.multiplyMatrices(b,g.<span class="pl-c1">parent</span>.matrixWorld),a.vertices[d<span class="pl-k">+</span><span class="pl-c1">1</span>].setFromMatrixPosition(c),d<span class="pl-k">+=</span><span class="pl-c1">2</span>)}a.verticesNeedUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;a.computeBoundingSphere()};</td>
      </tr>
      <tr>
        <td id="L855" class="blob-num js-line-number" data-line-number="855"></td>
        <td id="LC855" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpotLightHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.light<span class="pl-k">=</span>a;<span class="pl-v">this</span>.light.updateMatrixWorld();<span class="pl-v">this</span>.matrix<span class="pl-k">=</span>a.matrixWorld;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">8</span>,<span class="pl-c1">1</span>,<span class="pl-k">!</span><span class="pl-c1">0</span>);a.translate(<span class="pl-c1">0</span>,<span class="pl-k">-</span>.<span class="pl-c1">5</span>,<span class="pl-c1">0</span>);a.rotateX(<span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({wireframe<span class="pl-k">:!</span><span class="pl-c1">0</span>,fog<span class="pl-k">:!</span><span class="pl-c1">1</span>});<span class="pl-v">this</span>.cone<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(a,b);<span class="pl-v">this</span>.<span class="pl-c1">add</span>(<span class="pl-v">this</span>.cone);<span class="pl-v">this</span>.update()};<span class="pl-c1">THREE.SpotLightHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.SpotLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.SpotLightHelper;</td>
      </tr>
      <tr>
        <td id="L856" class="blob-num js-line-number" data-line-number="856"></td>
        <td id="LC856" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.SpotLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">dispose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.cone.geometry.dispose();<span class="pl-v">this</span>.cone.material.dispose()};<span class="pl-c1">THREE.SpotLightHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.light.distance<span class="pl-k">?</span><span class="pl-v">this</span>.light.distance<span class="pl-k">:</span><span class="pl-c1">1E4</span>,d<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-v">this</span>.light.angle);<span class="pl-v">this</span>.cone.scale.set(d,d,c);a.setFromMatrixPosition(<span class="pl-v">this</span>.light.matrixWorld);b.setFromMatrixPosition(<span class="pl-v">this</span>.light.<span class="pl-c1">target</span>.matrixWorld);<span class="pl-v">this</span>.cone.lookAt(b.<span class="pl-c1">sub</span>(a));<span class="pl-v">this</span>.cone.material.<span class="pl-c1">color</span>.copy(<span class="pl-v">this</span>.light.<span class="pl-c1">color</span>).multiplyScalar(<span class="pl-v">this</span>.light.intensity)}}();</td>
      </tr>
      <tr>
        <td id="L857" class="blob-num js-line-number" data-line-number="857"></td>
        <td id="LC857" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">VertexNormalsHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-v">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>a;<span class="pl-v">this</span>.<span class="pl-c1">size</span><span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;a<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">16711680</span>;d<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">object</span>.geometry;c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry<span class="pl-k">?</span>b<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>c.faces.<span class="pl-c1">length</span><span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span>c.<span class="pl-c1">attributes</span>.normal.count);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.BufferGeometry</span>;b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Float32Attribute</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>b,<span class="pl-c1">3</span>);c.addAttribute(<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>,b);<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,c,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>a,linewidth<span class="pl-k">:</span>d}));<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.update()};</td>
      </tr>
      <tr>
        <td id="L858" class="blob-num js-line-number" data-line-number="858"></td>
        <td id="LC858" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.VertexNormalsHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.VertexNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.VertexNormalsHelper;</td>
      </tr>
      <tr>
        <td id="L859" class="blob-num js-line-number" data-line-number="859"></td>
        <td id="LC859" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.VertexNormalsHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>;<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>];<span class="pl-v">this</span>.<span class="pl-c1">object</span>.updateMatrixWorld(<span class="pl-k">!</span><span class="pl-c1">0</span>);c.getNormalMatrix(<span class="pl-v">this</span>.<span class="pl-c1">object</span>.matrixWorld);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">object</span>.matrixWorld,g<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.<span class="pl-c1">attributes</span>.position,f<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">object</span>.geometry;<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.Geometry)<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span>f.vertices,k<span class="pl-k">=</span>f.faces,l<span class="pl-k">=</span>f<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span>k[l],m<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span>p.vertexNormals.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>q;m<span class="pl-k">++</span>){<span class="pl-k">var</span> t<span class="pl-k">=</span>p.vertexNormals[m];a.copy(h[p[d[m]]]).applyMatrix4(e);</td>
      </tr>
      <tr>
        <td id="L860" class="blob-num js-line-number" data-line-number="860"></td>
        <td id="LC860" class="blob-code blob-code-inner js-file-line">b.copy(t).applyMatrix3(c).normalize().multiplyScalar(<span class="pl-v">this</span>.<span class="pl-c1">size</span>).<span class="pl-c1">add</span>(a);g.setXYZ(f,a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>);f<span class="pl-k">+=</span><span class="pl-c1">1</span>;g.setXYZ(f,b.<span class="pl-c1">x</span>,b.<span class="pl-c1">y</span>,b.<span class="pl-c1">z</span>);f<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.BufferGeometry)<span class="pl-k">for</span>(d<span class="pl-k">=</span>f.<span class="pl-c1">attributes</span>.position,h<span class="pl-k">=</span>f.<span class="pl-c1">attributes</span>.normal,m<span class="pl-k">=</span>f<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span>d.count;m<span class="pl-k">&lt;</span>q;m<span class="pl-k">++</span>)a.set(d.getX(m),d.getY(m),d.getZ(m)).applyMatrix4(e),b.set(h.getX(m),h.getY(m),h.getZ(m)),b.applyMatrix3(c).normalize().multiplyScalar(<span class="pl-v">this</span>.<span class="pl-c1">size</span>).<span class="pl-c1">add</span>(a),g.setXYZ(f,a.<span class="pl-c1">x</span>,a.<span class="pl-c1">y</span>,a.<span class="pl-c1">z</span>),f<span class="pl-k">+=</span><span class="pl-c1">1</span>,g.setXYZ(f,b.<span class="pl-c1">x</span>,b.<span class="pl-c1">y</span>,b.<span class="pl-c1">z</span>),f<span class="pl-k">+=</span><span class="pl-c1">1</span>;g.needsUpdate<span class="pl-k">=!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>}}();</td>
      </tr>
      <tr>
        <td id="L861" class="blob-num js-line-number" data-line-number="861"></td>
        <td id="LC861" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WireframeHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">16777215</span>;<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.WireframeGeometry</span>(a.geometry),<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>c}));<span class="pl-v">this</span>.matrix<span class="pl-k">=</span>a.matrixWorld;<span class="pl-v">this</span>.matrixAutoUpdate<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.WireframeHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.LineSegments.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.WireframeHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.WireframeHelper;<span class="pl-c1">THREE</span>.<span class="pl-en">ImmediateRenderObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){}};<span class="pl-c1">THREE.ImmediateRenderObject</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Object3D.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L862" class="blob-num js-line-number" data-line-number="862"></td>
        <td id="LC862" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.ImmediateRenderObject</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.ImmediateRenderObject;<span class="pl-c1">THREE</span>.<span class="pl-en">MorphBlendMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,a,b);<span class="pl-v">this</span>.animationsMap<span class="pl-k">=</span>{};<span class="pl-v">this</span>.animationsList<span class="pl-k">=</span>[];<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.geometry.morphTargets.<span class="pl-c1">length</span>;<span class="pl-v">this</span>.createAnimation(<span class="pl-s"><span class="pl-pds">&quot;</span>__default<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,c<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">/</span><span class="pl-c1">1</span>);<span class="pl-v">this</span>.setAnimationWeight(<span class="pl-s"><span class="pl-pds">&quot;</span>__default<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>)};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.create(<span class="pl-c1">THREE</span>.Mesh.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.MorphBlendMesh;</td>
      </tr>
      <tr>
        <td id="L863" class="blob-num js-line-number" data-line-number="863"></td>
        <td id="LC863" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){b<span class="pl-k">=</span>{start<span class="pl-k">:</span>b,end<span class="pl-k">:</span>c,length<span class="pl-k">:</span>c<span class="pl-k">-</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>,fps<span class="pl-k">:</span>d,duration<span class="pl-k">:</span>(c<span class="pl-k">-</span>b)<span class="pl-k">/</span>d,lastFrame<span class="pl-k">:</span><span class="pl-c1">0</span>,currentFrame<span class="pl-k">:</span><span class="pl-c1">0</span>,active<span class="pl-k">:!</span><span class="pl-c1">1</span>,time<span class="pl-k">:</span><span class="pl-c1">0</span>,direction<span class="pl-k">:</span><span class="pl-c1">1</span>,weight<span class="pl-k">:</span><span class="pl-c1">1</span>,directionBackwards<span class="pl-k">:!</span><span class="pl-c1">1</span>,mirroredLoop<span class="pl-k">:!</span><span class="pl-c1">1</span>};<span class="pl-v">this</span>.animationsMap[a]<span class="pl-k">=</span>b;<span class="pl-v">this</span>.animationsList.<span class="pl-c1">push</span>(b)};</td>
      </tr>
      <tr>
        <td id="L864" class="blob-num js-line-number" data-line-number="864"></td>
        <td id="LC864" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">autoCreateAnimations</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>)_<span class="pl-k">?</span>(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-pds">/</span></span>,c,d<span class="pl-k">=</span>{},e<span class="pl-k">=</span><span class="pl-v">this</span>.geometry,g<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>e.morphTargets.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span>e.morphTargets[g].<span class="pl-c1">name</span>.<span class="pl-c1">match</span>(b);<span class="pl-k">if</span>(h<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>h.<span class="pl-c1">length</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span>h[<span class="pl-c1">1</span>];d[k]<span class="pl-k">||</span>(d[k]<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">Infinity</span>,end<span class="pl-k">:-</span><span class="pl-c1">Infinity</span>});h<span class="pl-k">=</span>d[k];g<span class="pl-k">&lt;</span>h.<span class="pl-c1">start</span><span class="pl-k">&amp;&amp;</span>(h.<span class="pl-c1">start</span><span class="pl-k">=</span>g);g<span class="pl-k">&gt;</span>h.end<span class="pl-k">&amp;&amp;</span>(h.end<span class="pl-k">=</span>g);c<span class="pl-k">||</span>(c<span class="pl-k">=</span>k)}}<span class="pl-k">for</span>(k <span class="pl-k">in</span> d)h<span class="pl-k">=</span>d[k],<span class="pl-v">this</span>.createAnimation(k,h.<span class="pl-c1">start</span>,h.end,a);<span class="pl-v">this</span>.firstAnimation<span class="pl-k">=</span>c};</td>
      </tr>
      <tr>
        <td id="L865" class="blob-num js-line-number" data-line-number="865"></td>
        <td id="LC865" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDirectionForward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a])a.direction<span class="pl-k">=</span><span class="pl-c1">1</span>,a.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDirectionBackward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a])a.direction<span class="pl-k">=-</span><span class="pl-c1">1</span>,a.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationFPS</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a];c<span class="pl-k">&amp;&amp;</span>(c.fps<span class="pl-k">=</span>b,c.duration<span class="pl-k">=</span>(c.end<span class="pl-k">-</span>c.<span class="pl-c1">start</span>)<span class="pl-k">/</span>c.fps)};</td>
      </tr>
      <tr>
        <td id="L866" class="blob-num js-line-number" data-line-number="866"></td>
        <td id="LC866" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDuration</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a];c<span class="pl-k">&amp;&amp;</span>(c.duration<span class="pl-k">=</span>b,c.fps<span class="pl-k">=</span>(c.end<span class="pl-k">-</span>c.<span class="pl-c1">start</span>)<span class="pl-k">/</span>c.duration)};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationWeight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a];c<span class="pl-k">&amp;&amp;</span>(c.weight<span class="pl-k">=</span>b)};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a];c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-c1">.time</span><span class="pl-k">=</span>b)};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getAnimationTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a])b<span class="pl-k">=</span>a<span class="pl-c1">.time</span>;<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L867" class="blob-num js-line-number" data-line-number="867"></td>
        <td id="LC867" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getAnimationDuration</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a])b<span class="pl-k">=</span>a.duration;<span class="pl-k">return</span> b};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">playAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a];b<span class="pl-k">?</span>(b<span class="pl-c1">.time</span><span class="pl-k">=</span><span class="pl-c1">0</span>,b.active<span class="pl-k">=!</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-en">console</span><span class="pl-c1">.warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.MorphBlendMesh: animation[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] undefined in .playAnimation()<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stopAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.animationsMap[a])a.active<span class="pl-k">=!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L868" class="blob-num js-line-number" data-line-number="868"></td>
        <td id="LC868" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE.MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.animationsList.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.animationsList[b];<span class="pl-k">if</span>(d.active){<span class="pl-k">var</span> e<span class="pl-k">=</span>d.duration<span class="pl-k">/</span>d.<span class="pl-c1">length</span>;d<span class="pl-c1">.time</span><span class="pl-k">+=</span>d.direction<span class="pl-k">*</span>a;<span class="pl-k">if</span>(d.mirroredLoop){<span class="pl-k">if</span>(d<span class="pl-c1">.time</span><span class="pl-k">&gt;</span>d.duration<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-c1">.time</span>)d.direction<span class="pl-k">*=-</span><span class="pl-c1">1</span>,d<span class="pl-c1">.time</span><span class="pl-k">&gt;</span>d.duration<span class="pl-k">&amp;&amp;</span>(d<span class="pl-c1">.time</span><span class="pl-k">=</span>d.duration,d.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">0</span>),<span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-c1">.time</span><span class="pl-k">&amp;&amp;</span>(d<span class="pl-c1">.time</span><span class="pl-k">=</span><span class="pl-c1">0</span>,d.directionBackwards<span class="pl-k">=!</span><span class="pl-c1">1</span>)}<span class="pl-k">else</span> d<span class="pl-c1">.time</span><span class="pl-k">%=</span>d.duration,<span class="pl-c1">0</span><span class="pl-k">&gt;</span>d<span class="pl-c1">.time</span><span class="pl-k">&amp;&amp;</span>(d<span class="pl-c1">.time</span><span class="pl-k">+=</span>d.duration);<span class="pl-k">var</span> g<span class="pl-k">=</span>d.<span class="pl-c1">start</span><span class="pl-k">+</span><span class="pl-c1">THREE</span>.<span class="pl-c1">Math</span>.clamp(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(d<span class="pl-c1">.time</span><span class="pl-k">/</span>e),<span class="pl-c1">0</span>,d.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>),f<span class="pl-k">=</span>d.weight;g<span class="pl-k">!==</span>d.currentFrame<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L869" class="blob-num js-line-number" data-line-number="869"></td>
        <td id="LC869" class="blob-code blob-code-inner js-file-line">(<span class="pl-v">this</span>.morphTargetInfluences[d.lastFrame]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-v">this</span>.morphTargetInfluences[d.currentFrame]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">*</span>f,<span class="pl-v">this</span>.morphTargetInfluences[g]<span class="pl-k">=</span><span class="pl-c1">0</span>,d.lastFrame<span class="pl-k">=</span>d.currentFrame,d.currentFrame<span class="pl-k">=</span>g);e<span class="pl-k">=</span>d<span class="pl-c1">.time</span><span class="pl-k">%</span>e<span class="pl-k">/</span>e;d.directionBackwards<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>e);d.currentFrame<span class="pl-k">!==</span>d.lastFrame<span class="pl-k">?</span>(<span class="pl-v">this</span>.morphTargetInfluences[d.currentFrame]<span class="pl-k">=</span>e<span class="pl-k">*</span>f,<span class="pl-v">this</span>.morphTargetInfluences[d.lastFrame]<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>e)<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-v">this</span>.morphTargetInfluences[d.currentFrame]<span class="pl-k">=</span>f}}};</td>
      </tr>
</table>

  </div>

</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
    <button type="submit" class="btn">Go</button>
</form></div>

        </div>
      </div>
      <div class="modal-backdrop"></div>
    </div>
  </div>


    </div>

      <div class="container">
  <div class="site-footer" role="contentinfo">
    <ul class="site-footer-links right">
        <li><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
      <li><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>
        <li><a href="https://github.com/pricing" data-ga-click="Footer, go to pricing, text:pricing">Pricing</a></li>

    </ul>

    <a href="https://github.com" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
</a>
    <ul class="site-footer-links">
      <li>&copy; 2015 <span title="0.07465s from github-fe131-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="https://github.com/site/terms" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li><a href="https://github.com/security" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>
  </div>
</div>



    
    
    

    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <button type="button" class="flash-close js-flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
        <span class="octicon octicon-x"></span>
      </button>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-f8473dece7242da6a20d52313634881b3975c52cebaa1e6c38157c0f26185691.js"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-29b731620373d510227f8d67ff64cca1a52a6fb5f88f49d60ab0c39d1016a865.js"></script>
      
      
    <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner hidden">
      <span class="octicon octicon-alert"></span>
      <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
      <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
    </div>
  </body>
</html>

>>>>>>> 221fc3ab8e001e6eb28c4622105d390f4dc8ff52
