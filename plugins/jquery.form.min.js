/*!
 * jQuery Form Plugin
 * version: 3.48.0-2013.12.28
 * Requires jQuery v1.5 or later
 * Copyright (c) 2013 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
/*global ActiveXObject */
// AMD support
!function(factory) {
    "use strict";
    "function" == typeof define && define.amd ? // using AMD; register as anon module
    define([ "jquery" ], factory) : // no AMD; invoke directly
    factory("undefined" != typeof jQuery ? jQuery : window.Zepto);
}(function($) {
    "use strict";
    // private event handlers
    function doAjaxSubmit(e) {
        /*jshint validthis:true */
        var options = e.data;
        e.isDefaultPrevented() || (// if event has been canceled, don't proceed
        e.preventDefault(), $(e.target).ajaxSubmit(options));
    }
    function captureSubmittingElement(e) {
        /*jshint validthis:true */
        var target = e.target, $el = $(target);
        if (!$el.is("[type=submit],[type=image]")) {
            // is this a child element of the submit el?  (ex: a span within a button)
            var t = $el.closest("[type=submit]");
            if (0 === t.length) return;
            target = t[0];
        }
        var form = this;
        if (form.clk = target, "image" == target.type) if (void 0 !== e.offsetX) form.clk_x = e.offsetX, 
        form.clk_y = e.offsetY; else if ("function" == typeof $.fn.offset) {
            var offset = $el.offset();
            form.clk_x = e.pageX - offset.left, form.clk_y = e.pageY - offset.top;
        } else form.clk_x = e.pageX - target.offsetLeft, form.clk_y = e.pageY - target.offsetTop;
        // clear form vars
        setTimeout(function() {
            form.clk = form.clk_x = form.clk_y = null;
        }, 100);
    }
    // helper fn for console logging
    function log() {
        if ($.fn.ajaxSubmit.debug) {
            var msg = "[jquery.form] " + Array.prototype.join.call(arguments, "");
            window.console && window.console.log ? window.console.log(msg) : window.opera && window.opera.postError && window.opera.postError(msg);
        }
    }
    /*
     Usage Note:
     -----------
     Do not use both ajaxSubmit and ajaxForm on the same form.  These
     functions are mutually exclusive.  Use ajaxSubmit if you want
     to bind your own submit handler to the form.  For example,

     $(document).ready(function() {
     $('#myForm').on('submit', function(e) {
     e.preventDefault(); // <-- important
     $(this).ajaxSubmit({
     target: '#output'
     });
     });
     });

     Use ajaxForm when you want the plugin to manage all the event binding
     for you.  For example,

     $(document).ready(function() {
     $('#myForm').ajaxForm({
     target: '#output'
     });
     });

     You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
     form does not have to exist when you invoke ajaxForm:

     $('#myForm').ajaxForm({
     delegation: true,
     target: '#output'
     });

     When using ajaxForm, the ajaxSubmit function will be invoked for you
     at the appropriate time.
     */
    /**
     * Feature detection
     */
    var feature = {};
    feature.fileapi = void 0 !== $("<input type='file'/>").get(0).files, feature.formdata = void 0 !== window.FormData;
    var hasProp = !!$.fn.prop;
    // attr2 uses prop when it can but checks the return type for
    // an expected string.  this accounts for the case where a form 
    // contains inputs with names like "action" or "method"; in those
    // cases "prop" returns the element
    $.fn.attr2 = function() {
        if (!hasProp) return this.attr.apply(this, arguments);
        var val = this.prop.apply(this, arguments);
        return val && val.jquery || "string" == typeof val ? val : this.attr.apply(this, arguments);
    }, /**
     * ajaxSubmit() provides a mechanism for immediately submitting
     * an HTML form using AJAX.
     */
    $.fn.ajaxSubmit = function(options) {
        // utility fn for deep serialization
        function deepSerialize(extraData) {
            var i, part, serialized = $.param(extraData, options.traditional).split("&"), len = serialized.length, result = [];
            for (i = 0; len > i; i++) // #252; undo param space replacement
            serialized[i] = serialized[i].replace(/\+/g, " "), part = serialized[i].split("="), 
            // #278; use array instead of object storage, favoring array serializations
            result.push([ decodeURIComponent(part[0]), decodeURIComponent(part[1]) ]);
            return result;
        }
        // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
        function fileUploadXhr(a) {
            for (var formdata = new FormData(), i = 0; i < a.length; i++) formdata.append(a[i].name, a[i].value);
            if (options.extraData) {
                var serializedData = deepSerialize(options.extraData);
                for (i = 0; i < serializedData.length; i++) serializedData[i] && formdata.append(serializedData[i][0], serializedData[i][1]);
            }
            options.data = null;
            var s = $.extend(!0, {}, $.ajaxSettings, options, {
                contentType: !1,
                processData: !1,
                cache: !1,
                type: method || "POST"
            });
            options.uploadProgress && (// workaround because jqXHR does not expose upload property
            s.xhr = function() {
                var xhr = $.ajaxSettings.xhr();
                return xhr.upload && xhr.upload.addEventListener("progress", function(event) {
                    var percent = 0, position = event.loaded || event.position, total = event.total;
                    event.lengthComputable && (percent = Math.ceil(position / total * 100)), options.uploadProgress(event, position, total, percent);
                }, !1), xhr;
            }), s.data = null;
            var beforeSend = s.beforeSend;
            return s.beforeSend = function(xhr, o) {
                //Send FormData() provided by user
                o.data = options.formData ? options.formData : formdata, beforeSend && beforeSend.call(this, xhr, o);
            }, $.ajax(s);
        }
        // private function for handling file uploads (hat tip to YAHOO!)
        function fileUploadIframe(a) {
            function getDoc(frame) {
                /* it looks like contentWindow or contentDocument do not
                 * carry the protocol property in ie8, when running under ssl
                 * frame.document is the only valid response document, since
                 * the protocol is know but not on the other two objects. strange?
                 * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
                 */
                var doc = null;
                // IE8 cascading access check
                try {
                    frame.contentWindow && (doc = frame.contentWindow.document);
                } catch (err) {
                    // IE8 access denied under ssl & missing protocol
                    log("cannot get iframe.contentWindow document: " + err);
                }
                if (doc) // successful getting content
                return doc;
                try {
                    // simply checking may throw in ie8 under ssl or mismatched protocol
                    doc = frame.contentDocument ? frame.contentDocument : frame.document;
                } catch (err) {
                    // last attempt
                    log("cannot get iframe.contentDocument: " + err), doc = frame.document;
                }
                return doc;
            }
            // take a breath so that pending repaints get some cpu time before the upload starts
            function doSubmit() {
                // look for server aborts
                function checkState() {
                    try {
                        var state = getDoc(io).readyState;
                        log("state = " + state), state && "uninitialized" == state.toLowerCase() && setTimeout(checkState, 50);
                    } catch (e) {
                        log("Server abort: ", e, " (", e.name, ")"), cb(SERVER_ABORT), timeoutHandle && clearTimeout(timeoutHandle), 
                        timeoutHandle = void 0;
                    }
                }
                // make sure form attrs are set
                var t = $form.attr2("target"), a = $form.attr2("action"), mp = "multipart/form-data", et = $form.attr("enctype") || $form.attr("encoding") || mp;
                // update form attrs in IE friendly way
                form.setAttribute("target", id), (!method || /post/i.test(method)) && form.setAttribute("method", "POST"), 
                a != s.url && form.setAttribute("action", s.url), // ie borks in some cases when setting encoding
                s.skipEncodingOverride || method && !/post/i.test(method) || $form.attr({
                    encoding: "multipart/form-data",
                    enctype: "multipart/form-data"
                }), // support timout
                s.timeout && (timeoutHandle = setTimeout(function() {
                    timedOut = !0, cb(CLIENT_TIMEOUT_ABORT);
                }, s.timeout));
                // add "extra" data to form if provided in options
                var extraInputs = [];
                try {
                    if (s.extraData) for (var n in s.extraData) s.extraData.hasOwnProperty(n) && extraInputs.push(// if using the $.param format that allows for multiple values with the same name
                    $.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty("name") && s.extraData[n].hasOwnProperty("value") ? $('<input type="hidden" name="' + s.extraData[n].name + '">').val(s.extraData[n].value).appendTo(form)[0] : $('<input type="hidden" name="' + n + '">').val(s.extraData[n]).appendTo(form)[0]);
                    s.iframeTarget || // add iframe to doc and submit the form
                    $io.appendTo("body"), io.attachEvent ? io.attachEvent("onload", cb) : io.addEventListener("load", cb, !1), 
                    setTimeout(checkState, 15);
                    try {
                        form.submit();
                    } catch (err) {
                        // just in case form has element with name/id of 'submit'
                        var submitFn = document.createElement("form").submit;
                        submitFn.apply(form);
                    }
                } finally {
                    // reset attrs and remove "extra" input elements
                    form.setAttribute("action", a), form.setAttribute("enctype", et), // #380
                    t ? form.setAttribute("target", t) : $form.removeAttr("target"), $(extraInputs).remove();
                }
            }
            function cb(e) {
                if (!xhr.aborted && !callbackProcessed) {
                    if (doc = getDoc(io), doc || (log("cannot access response document"), e = SERVER_ABORT), 
                    e === CLIENT_TIMEOUT_ABORT && xhr) return xhr.abort("timeout"), void deferred.reject(xhr, "timeout");
                    if (e == SERVER_ABORT && xhr) return xhr.abort("server abort"), void deferred.reject(xhr, "error", "server abort");
                    if (doc && doc.location.href != s.iframeSrc || timedOut) {
                        io.detachEvent ? io.detachEvent("onload", cb) : io.removeEventListener("load", cb, !1);
                        var errMsg, status = "success";
                        try {
                            if (timedOut) throw "timeout";
                            var isXml = "xml" == s.dataType || doc.XMLDocument || $.isXMLDoc(doc);
                            if (log("isXml=" + isXml), !isXml && window.opera && (null === doc.body || !doc.body.innerHTML) && --domCheckCount) // in some browsers (Opera) the iframe DOM is not always traversable when
                            // the onload callback fires, so we loop a bit to accommodate
                            return log("requeing onLoad callback, DOM not available"), void setTimeout(cb, 250);
                            //log('response detected');
                            var docRoot = doc.body ? doc.body : doc.documentElement;
                            xhr.responseText = docRoot ? docRoot.innerHTML : null, xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc, 
                            isXml && (s.dataType = "xml"), xhr.getResponseHeader = function(header) {
                                var headers = {
                                    "content-type": s.dataType
                                };
                                return headers[header.toLowerCase()];
                            }, // support for XHR 'status' & 'statusText' emulation :
                            docRoot && (xhr.status = Number(docRoot.getAttribute("status")) || xhr.status, xhr.statusText = docRoot.getAttribute("statusText") || xhr.statusText);
                            var dt = (s.dataType || "").toLowerCase(), scr = /(json|script|text)/.test(dt);
                            if (scr || s.textarea) {
                                // see if user embedded response in textarea
                                var ta = doc.getElementsByTagName("textarea")[0];
                                if (ta) xhr.responseText = ta.value, // support for XHR 'status' & 'statusText' emulation :
                                xhr.status = Number(ta.getAttribute("status")) || xhr.status, xhr.statusText = ta.getAttribute("statusText") || xhr.statusText; else if (scr) {
                                    // account for browsers injecting pre around json response
                                    var pre = doc.getElementsByTagName("pre")[0], b = doc.getElementsByTagName("body")[0];
                                    pre ? xhr.responseText = pre.textContent ? pre.textContent : pre.innerText : b && (xhr.responseText = b.textContent ? b.textContent : b.innerText);
                                }
                            } else "xml" == dt && !xhr.responseXML && xhr.responseText && (xhr.responseXML = toXml(xhr.responseText));
                            try {
                                data = httpData(xhr, dt, s);
                            } catch (err) {
                                status = "parsererror", xhr.error = errMsg = err || status;
                            }
                        } catch (err) {
                            log("error caught: ", err), status = "error", xhr.error = errMsg = err || status;
                        }
                        xhr.aborted && (log("upload aborted"), status = null), xhr.status && (// we've set xhr.status
                        status = xhr.status >= 200 && xhr.status < 300 || 304 === xhr.status ? "success" : "error"), 
                        // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
                        "success" === status ? (s.success && s.success.call(s.context, data, "success", xhr), 
                        deferred.resolve(xhr.responseText, "success", xhr), g && $.event.trigger("ajaxSuccess", [ xhr, s ])) : status && (void 0 === errMsg && (errMsg = xhr.statusText), 
                        s.error && s.error.call(s.context, xhr, status, errMsg), deferred.reject(xhr, "error", errMsg), 
                        g && $.event.trigger("ajaxError", [ xhr, s, errMsg ])), g && $.event.trigger("ajaxComplete", [ xhr, s ]), 
                        g && !--$.active && $.event.trigger("ajaxStop"), s.complete && s.complete.call(s.context, xhr, status), 
                        callbackProcessed = !0, s.timeout && clearTimeout(timeoutHandle), // clean up
                        setTimeout(function() {
                            s.iframeTarget ? //adding else to clean up existing iframe response.
                            $io.attr("src", s.iframeSrc) : $io.remove(), xhr.responseXML = null;
                        }, 100);
                    }
                }
            }
            var el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle, form = $form[0], deferred = $.Deferred();
            if (// #341
            deferred.abort = function(status) {
                xhr.abort(status);
            }, a) // ensure that every serialized input is still enabled
            for (i = 0; i < elements.length; i++) el = $(elements[i]), hasProp ? el.prop("disabled", !1) : el.removeAttr("disabled");
            if (s = $.extend(!0, {}, $.ajaxSettings, options), s.context = s.context || s, id = "jqFormIO" + new Date().getTime(), 
            s.iframeTarget ? ($io = $(s.iframeTarget), n = $io.attr2("name"), n ? id = n : $io.attr2("name", id)) : ($io = $('<iframe name="' + id + '" src="' + s.iframeSrc + '" />'), 
            $io.css({
                position: "absolute",
                top: "-1000px",
                left: "-1000px"
            })), io = $io[0], xhr = {
                // mock object
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: "n/a",
                getAllResponseHeaders: function() {},
                getResponseHeader: function() {},
                setRequestHeader: function() {},
                abort: function(status) {
                    var e = "timeout" === status ? "timeout" : "aborted";
                    log("aborting upload... " + e), this.aborted = 1;
                    try {
                        // #214, #257
                        io.contentWindow.document.execCommand && io.contentWindow.document.execCommand("Stop");
                    } catch (ignore) {}
                    $io.attr("src", s.iframeSrc), // abort op in progress
                    xhr.error = e, s.error && s.error.call(s.context, xhr, e, status), g && $.event.trigger("ajaxError", [ xhr, s, e ]), 
                    s.complete && s.complete.call(s.context, xhr, e);
                }
            }, g = s.global, // trigger ajax global events so that activity/block indicators work like normal
            g && 0 === $.active++ && $.event.trigger("ajaxStart"), g && $.event.trigger("ajaxSend", [ xhr, s ]), 
            s.beforeSend && s.beforeSend.call(s.context, xhr, s) === !1) return s.global && $.active--, 
            deferred.reject(), deferred;
            if (xhr.aborted) return deferred.reject(), deferred;
            // add submitting element to data if we know it
            sub = form.clk, sub && (n = sub.name, n && !sub.disabled && (s.extraData = s.extraData || {}, 
            s.extraData[n] = sub.value, "image" == sub.type && (s.extraData[n + ".x"] = form.clk_x, 
            s.extraData[n + ".y"] = form.clk_y)));
            var CLIENT_TIMEOUT_ABORT = 1, SERVER_ABORT = 2, csrf_token = $("meta[name=csrf-token]").attr("content"), csrf_param = $("meta[name=csrf-param]").attr("content");
            csrf_param && csrf_token && (s.extraData = s.extraData || {}, s.extraData[csrf_param] = csrf_token), 
            s.forceSync ? doSubmit() : setTimeout(doSubmit, 10);
            var data, doc, callbackProcessed, domCheckCount = 50, toXml = $.parseXML || function(s, doc) {
                // use parseXML if available (jQuery 1.5+)
                return window.ActiveXObject ? (doc = new ActiveXObject("Microsoft.XMLDOM"), doc.async = "false", 
                doc.loadXML(s)) : doc = new DOMParser().parseFromString(s, "text/xml"), doc && doc.documentElement && "parsererror" != doc.documentElement.nodeName ? doc : null;
            }, parseJSON = $.parseJSON || function(s) {
                /*jslint evil:true */
                return window.eval("(" + s + ")");
            }, httpData = function(xhr, type, s) {
                // mostly lifted from jq1.4.4
                var ct = xhr.getResponseHeader("content-type") || "", xml = "xml" === type || !type && ct.indexOf("xml") >= 0, data = xml ? xhr.responseXML : xhr.responseText;
                return xml && "parsererror" === data.documentElement.nodeName && $.error && $.error("parsererror"), 
                s && s.dataFilter && (data = s.dataFilter(data, type)), "string" == typeof data && ("json" === type || !type && ct.indexOf("json") >= 0 ? data = parseJSON(data) : ("script" === type || !type && ct.indexOf("javascript") >= 0) && $.globalEval(data)), 
                data;
            };
            return deferred;
        }
        /*jshint scripturl:true */
        // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
        if (!this.length) return log("ajaxSubmit: skipping submit process - no element selected"), 
        this;
        var method, action, url, $form = this;
        "function" == typeof options ? options = {
            success: options
        } : void 0 === options && (options = {}), method = options.type || this.attr2("method"), 
        action = options.url || this.attr2("action"), url = "string" == typeof action ? $.trim(action) : "", 
        url = url || window.location.href || "", url && (// clean url (don't include hash vaue)
        url = (url.match(/^([^#]+)/) || [])[1]), options = $.extend(!0, {
            url: url,
            success: $.ajaxSettings.success,
            type: method || $.ajaxSettings.type,
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
        }, options);
        // hook for manipulating the form data before it is extracted;
        // convenient for use with rich editors like tinyMCE or FCKEditor
        var veto = {};
        if (this.trigger("form-pre-serialize", [ this, options, veto ]), veto.veto) return log("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), 
        this;
        // provide opportunity to alter form data before it is serialized
        if (options.beforeSerialize && options.beforeSerialize(this, options) === !1) return log("ajaxSubmit: submit aborted via beforeSerialize callback"), 
        this;
        var traditional = options.traditional;
        void 0 === traditional && (traditional = $.ajaxSettings.traditional);
        var qx, elements = [], a = this.formToArray(options.semantic, elements);
        // give pre-submit callback an opportunity to abort the submit
        if (options.data && (options.extraData = options.data, qx = $.param(options.data, traditional)), 
        options.beforeSubmit && options.beforeSubmit(a, this, options) === !1) return log("ajaxSubmit: submit aborted via beforeSubmit callback"), 
        this;
        if (// fire vetoable 'validate' event
        this.trigger("form-submit-validate", [ a, this, options, veto ]), veto.veto) return log("ajaxSubmit: submit vetoed via form-submit-validate trigger"), 
        this;
        var q = $.param(a, traditional);
        qx && (q = q ? q + "&" + qx : qx), "GET" == options.type.toUpperCase() ? (options.url += (options.url.indexOf("?") >= 0 ? "&" : "?") + q, 
        options.data = null) : options.data = q;
        var callbacks = [];
        // perform a load on the target only if dataType is not provided
        if (options.resetForm && callbacks.push(function() {
            $form.resetForm();
        }), options.clearForm && callbacks.push(function() {
            $form.clearForm(options.includeHidden);
        }), !options.dataType && options.target) {
            var oldSuccess = options.success || function() {};
            callbacks.push(function(data) {
                var fn = options.replaceTarget ? "replaceWith" : "html";
                $(options.target)[fn](data).each(oldSuccess, arguments);
            });
        } else options.success && callbacks.push(options.success);
        if (options.success = function(data, status, xhr) {
            // jQuery 1.4+ supports scope context
            for (var context = options.context || this, i = 0, max = callbacks.length; max > i; i++) callbacks[i].apply(context, [ data, status, xhr || $form, $form ]);
        }, options.error) {
            var oldError = options.error;
            options.error = function(xhr, status, error) {
                var context = options.context || this;
                oldError.apply(context, [ xhr, status, error, $form ]);
            };
        }
        if (options.complete) {
            var oldComplete = options.complete;
            options.complete = function(xhr, status) {
                var context = options.context || this;
                oldComplete.apply(context, [ xhr, status, $form ]);
            };
        }
        // are there files to upload?
        // [value] (issue #113), also see comment:
        // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
        var fileInputs = $("input[type=file]:enabled", this).filter(function() {
            return "" !== $(this).val();
        }), hasFileInputs = fileInputs.length > 0, mp = "multipart/form-data", multipart = $form.attr("enctype") == mp || $form.attr("encoding") == mp, fileAPI = feature.fileapi && feature.formdata;
        log("fileAPI :" + fileAPI);
        var jqxhr, shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;
        // options.iframe allows user to force iframe mode
        // 06-NOV-09: now defaulting to iframe mode if file input is detected
        options.iframe !== !1 && (options.iframe || shouldUseFrame) ? // hack to fix Safari hang (thanks to Tim Molendijk for this)
        // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
        options.closeKeepAlive ? $.get(options.closeKeepAlive, function() {
            jqxhr = fileUploadIframe(a);
        }) : jqxhr = fileUploadIframe(a) : jqxhr = (hasFileInputs || multipart) && fileAPI ? fileUploadXhr(a) : $.ajax(options), 
        $form.removeData("jqxhr").data("jqxhr", jqxhr);
        // clear element array
        for (var k = 0; k < elements.length; k++) elements[k] = null;
        // fire 'notify' event
        return this.trigger("form-submit-notify", [ this, options ]), this;
    }, /**
     * ajaxForm() provides a mechanism for fully automating form submission.
     *
     * The advantages of using this method instead of ajaxSubmit() are:
     *
     * 1: This method will include coordinates for <input type="image" /> elements (if the element
     *    is used to submit the form).
     * 2. This method will include the submit element's name/value data (for the element that was
     *    used to submit the form).
     * 3. This method binds the submit() method to the form for you.
     *
     * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
     * passes the options argument along after properly binding events for submit elements and
     * the form itself.
     */
    $.fn.ajaxForm = function(options) {
        // in jQuery 1.3+ we can fix mistakes with the ready state
        if (options = options || {}, options.delegation = options.delegation && $.isFunction($.fn.on), 
        !options.delegation && 0 === this.length) {
            var o = {
                s: this.selector,
                c: this.context
            };
            // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
            return !$.isReady && o.s ? (log("DOM not ready, queuing ajaxForm"), $(function() {
                $(o.s, o.c).ajaxForm(options);
            }), this) : (log("terminating; zero elements found by selector" + ($.isReady ? "" : " (DOM not ready)")), 
            this);
        }
        return options.delegation ? ($(document).off("submit.form-plugin", this.selector, doAjaxSubmit).off("click.form-plugin", this.selector, captureSubmittingElement).on("submit.form-plugin", this.selector, options, doAjaxSubmit).on("click.form-plugin", this.selector, options, captureSubmittingElement), 
        this) : this.ajaxFormUnbind().bind("submit.form-plugin", options, doAjaxSubmit).bind("click.form-plugin", options, captureSubmittingElement);
    }, // ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
    $.fn.ajaxFormUnbind = function() {
        return this.unbind("submit.form-plugin click.form-plugin");
    }, /**
     * formToArray() gathers form element data into an array of objects that can
     * be passed to any of the following ajax functions: $.get, $.post, or load.
     * Each object in the array has both a 'name' and 'value' property.  An example of
     * an array for a simple login form might be:
     *
     * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
     *
     * It is this array that is passed to pre-submit callback functions provided to the
     * ajaxSubmit() and ajaxForm() methods.
     */
    $.fn.formToArray = function(semantic, elements) {
        var a = [];
        if (0 === this.length) return a;
        var els2, form = this[0], formId = this.attr("id"), els = semantic ? form.getElementsByTagName("*") : form.elements;
        if (els && (els = $(els).get()), // #386; account for inputs outside the form which use the 'form' attribute
        formId && (els2 = $(":input[form=" + formId + "]").get(), els2.length && (els = (els || []).concat(els2))), 
        !els || !els.length) return a;
        var i, j, n, v, el, max, jmax;
        for (i = 0, max = els.length; max > i; i++) if (el = els[i], n = el.name, n && !el.disabled) if (semantic && form.clk && "image" == el.type) // handle image inputs on the fly when semantic == true
        form.clk == el && (a.push({
            name: n,
            value: $(el).val(),
            type: el.type
        }), a.push({
            name: n + ".x",
            value: form.clk_x
        }, {
            name: n + ".y",
            value: form.clk_y
        })); else if (v = $.fieldValue(el, !0), v && v.constructor == Array) for (elements && elements.push(el), 
        j = 0, jmax = v.length; jmax > j; j++) a.push({
            name: n,
            value: v[j]
        }); else if (feature.fileapi && "file" == el.type) {
            elements && elements.push(el);
            var files = el.files;
            if (files.length) for (j = 0; j < files.length; j++) a.push({
                name: n,
                value: files[j],
                type: el.type
            }); else // #180
            a.push({
                name: n,
                value: "",
                type: el.type
            });
        } else null !== v && "undefined" != typeof v && (elements && elements.push(el), 
        a.push({
            name: n,
            value: v,
            type: el.type,
            required: el.required
        }));
        if (!semantic && form.clk) {
            // input type=='image' are not found in elements array! handle it here
            var $input = $(form.clk), input = $input[0];
            n = input.name, n && !input.disabled && "image" == input.type && (a.push({
                name: n,
                value: $input.val()
            }), a.push({
                name: n + ".x",
                value: form.clk_x
            }, {
                name: n + ".y",
                value: form.clk_y
            }));
        }
        return a;
    }, /**
     * Serializes form data into a 'submittable' string. This method will return a string
     * in the format: name1=value1&amp;name2=value2
     */
    $.fn.formSerialize = function(semantic) {
        //hand off to jQuery.param for proper encoding
        return $.param(this.formToArray(semantic));
    }, /**
     * Serializes all field elements in the jQuery object into a query string.
     * This method will return a string in the format: name1=value1&amp;name2=value2
     */
    $.fn.fieldSerialize = function(successful) {
        var a = [];
        //hand off to jQuery.param for proper encoding
        return this.each(function() {
            var n = this.name;
            if (n) {
                var v = $.fieldValue(this, successful);
                if (v && v.constructor == Array) for (var i = 0, max = v.length; max > i; i++) a.push({
                    name: n,
                    value: v[i]
                }); else null !== v && "undefined" != typeof v && a.push({
                    name: this.name,
                    value: v
                });
            }
        }), $.param(a);
    }, /**
     * Returns the value(s) of the element in the matched set.  For example, consider the following form:
     *
     *  <form><fieldset>
     *      <input name="A" type="text" />
     *      <input name="A" type="text" />
     *      <input name="B" type="checkbox" value="B1" />
     *      <input name="B" type="checkbox" value="B2"/>
     *      <input name="C" type="radio" value="C1" />
     *      <input name="C" type="radio" value="C2" />
     *  </fieldset></form>
     *
     *  var v = $('input[type=text]').fieldValue();
     *  // if no values are entered into the text inputs
     *  v == ['','']
     *  // if values entered into the text inputs are 'foo' and 'bar'
     *  v == ['foo','bar']
     *
     *  var v = $('input[type=checkbox]').fieldValue();
     *  // if neither checkbox is checked
     *  v === undefined
     *  // if both checkboxes are checked
     *  v == ['B1', 'B2']
     *
     *  var v = $('input[type=radio]').fieldValue();
     *  // if neither radio is checked
     *  v === undefined
     *  // if first radio is checked
     *  v == ['C1']
     *
     * The successful argument controls whether or not the field element must be 'successful'
     * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
     * The default value of the successful argument is true.  If this value is false the value(s)
     * for each element is returned.
     *
     * Note: This method *always* returns an array.  If no valid value can be determined the
     *    array will be empty, otherwise it will contain one or more values.
     */
    $.fn.fieldValue = function(successful) {
        for (var val = [], i = 0, max = this.length; max > i; i++) {
            var el = this[i], v = $.fieldValue(el, successful);
            null === v || "undefined" == typeof v || v.constructor == Array && !v.length || (v.constructor == Array ? $.merge(val, v) : val.push(v));
        }
        return val;
    }, /**
     * Returns the value of the field element.
     */
    $.fieldValue = function(el, successful) {
        var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
        if (void 0 === successful && (successful = !0), successful && (!n || el.disabled || "reset" == t || "button" == t || ("checkbox" == t || "radio" == t) && !el.checked || ("submit" == t || "image" == t) && el.form && el.form.clk != el || "select" == tag && -1 == el.selectedIndex)) return null;
        if ("select" == tag) {
            var index = el.selectedIndex;
            if (0 > index) return null;
            for (var a = [], ops = el.options, one = "select-one" == t, max = one ? index + 1 : ops.length, i = one ? index : 0; max > i; i++) {
                var op = ops[i];
                if (op.selected) {
                    var v = op.value;
                    if (v || (// extra pain for IE...
                    v = op.attributes && op.attributes.value && !op.attributes.value.specified ? op.text : op.value), 
                    one) return v;
                    a.push(v);
                }
            }
            return a;
        }
        return $(el).val();
    }, /**
     * Clears the form data.  Takes the following actions on the form's input fields:
     *  - input text fields will have their 'value' property set to the empty string
     *  - select elements will have their 'selectedIndex' property set to -1
     *  - checkbox and radio inputs will have their 'checked' property set to false
     *  - inputs of type submit, button, reset, and hidden will *not* be effected
     *  - button elements will *not* be effected
     */
    $.fn.clearForm = function(includeHidden) {
        return this.each(function() {
            $("input,select,textarea", this).clearFields(includeHidden);
        });
    }, /**
     * Clears the selected form elements.
     */
    $.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
        var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
        // 'hidden' is not in this list
        return this.each(function() {
            var t = this.type, tag = this.tagName.toLowerCase();
            re.test(t) || "textarea" == tag ? this.value = "" : "checkbox" == t || "radio" == t ? this.checked = !1 : "select" == tag ? this.selectedIndex = -1 : "file" == t ? /MSIE/.test(navigator.userAgent) ? $(this).replaceWith($(this).clone(!0)) : $(this).val("") : includeHidden && (includeHidden === !0 && /hidden/.test(t) || "string" == typeof includeHidden && $(this).is(includeHidden)) && (this.value = "");
        });
    }, /**
     * Resets the form data.  Causes all form elements to be reset to their original value.
     */
    $.fn.resetForm = function() {
        return this.each(function() {
            // guard against an input with the name of 'reset'
            // note that IE reports the reset function as an 'object'
            ("function" == typeof this.reset || "object" == typeof this.reset && !this.reset.nodeType) && this.reset();
        });
    }, /**
     * Enables or disables any matching elements.
     */
    $.fn.enable = function(b) {
        return void 0 === b && (b = !0), this.each(function() {
            this.disabled = !b;
        });
    }, /**
     * Checks/unchecks any matching checkboxes or radio buttons and
     * selects/deselects and matching option elements.
     */
    $.fn.selected = function(select) {
        return void 0 === select && (select = !0), this.each(function() {
            var t = this.type;
            if ("checkbox" == t || "radio" == t) this.checked = select; else if ("option" == this.tagName.toLowerCase()) {
                var $sel = $(this).parent("select");
                select && $sel[0] && "select-one" == $sel[0].type && // deselect all other options
                $sel.find("option").selected(!1), this.selected = select;
            }
        });
    }, // expose debug var
    $.fn.ajaxSubmit.debug = !1;
});